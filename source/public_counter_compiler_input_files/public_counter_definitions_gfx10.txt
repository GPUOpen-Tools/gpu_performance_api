;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copyright (c) 2019 Advanced Micro Devices, Inc. All rights reserved.
;;
;; Counter definitions for DX/VK/GL for Gfx10 (GFX IP v10)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

name=GPUTime
desc=#Timing#Time this API command took to execute on the GPU in nanoseconds from the time the previous command reached the bottom of the pipeline (BOP) to the time this command reaches the bottom of the pipeline (BOP). Does not include time that draw calls are processed in parallel.
type=gpa_float64
usage=nanoseconds
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GPUTime_Bottom_To_Bottom_Duration
eqn=GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*

name=ExecutionDuration
desc=#Timing#GPU command execution duration in nanoseconds, from the time the command enters the top of the pipeline (TOP) to the time the command reaches the bottom of the pipeline (BOP). Does not include time that draw calls are processed in parallel.
type=gpa_float64
usage=nanoseconds
[DX12Gfx10]
[VKGfx10]
GPUTime_Top_To_Bottom_Duration
eqn=GPUTime_Top_To_Bottom_Duration,TS_FREQ,/,(1000000000),*

name=ExecutionStart
desc=#Timing#GPU command execution start time in nanoseconds. This is the time the command enters the top of the pipeline (TOP).
type=gpa_float64
usage=nanoseconds
[DX12Gfx10]
[VKGfx10]
GPUTime_Top_To_Bottom_Start
eqn=GPUTime_Top_To_Bottom_Start,TS_FREQ,/,(1000000000),*

name=ExecutionEnd
desc=#Timing#GPU command execution end time in nanoseconds. This is the time the command reaches the bottom of the pipeline (BOP).
type=gpa_float64
usage=nanoseconds
[DX12Gfx10]
[VKGfx10]
GPUTime_Top_To_Bottom_End
eqn=GPUTime_Top_To_Bottom_End,TS_FREQ,/,(1000000000),*

name=GPUBusy
usage=percentage
desc=#Timing#The percentage of time the GPU command processor was busy.
type=gpa_float64
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
CPF_PERF_SEL_CPF_STAT_BUSY
CPF_PERF_SEL_ALWAYS_COUNT
eqn=0,1,/,(100),*,(100),min

name=GPUBusyCycles
usage=cycles
desc=#Timing#Number of GPU cycles that the GPU command processor was busy.
type=gpa_float64
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0

; TODO: Unable to rely on GE_TE11_BUSY on GFX10
;name=TessellatorBusy
;usage=percentage
;desc=#Timing#The percentage of time the tessellation engine is busy.
;type=gpa_float64
;[GLGfx10]
;[DX11Gfx10]
;[DX12Gfx10]
;[VKGfx10]
;GE_TE11_BUSY
;CPF_PERF_SEL_CPF_STAT_BUSY
;eqn=0,1,/,(100),*

; TODO: Unable to rely on GE_TE11_BUSY on GFX10
;name=TessellatorBusyCycles
;usage=cycles
;desc=#Timing#Number of GPU cycles that the tessellation engine is busy.
;type=gpa_float64
;[GLGfx10]
;[DX11Gfx10]
;[DX12Gfx10]
;[VKGfx10]
;GE_TE11_BUSY
;eqn=0

name=VSBusy
desc=#Timing#The percentage of time the ShaderUnit has vertex shader work to do.
type=gpa_float64
usage=percentage
[GLGfx10]
SPI_PERF_ES_BUSY
SPI_PERF_LS_BUSY
SPI_PERF_VS_BUSY
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,1,1,ifnotzero,2,2,ifnotzero,3,/,(100),*,(100),min
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SPI*_PERF_ES_BUSY[0..1]
SPI*_PERF_LS_BUSY[0..1]
SPI*_PERF_VS_BUSY[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,2,2,ifnotzero,4,4,ifnotzero,1,3,3,ifnotzero,5,5,ifnotzero,max,6,/,(100),*,(100),min

name=VSBusyCycles
desc=#Timing#Number of GPU cycles that the ShaderUnit has vertex shader work to do.
type=gpa_float64
usage=cycles
[GLGfx10]
SPI_PERF_ES_BUSY
SPI_PERF_LS_BUSY
SPI_PERF_VS_BUSY
eqn=0,1,1,ifnotzero,2,2,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SPI*_PERF_ES_BUSY[0..1]
SPI*_PERF_LS_BUSY[0..1]
SPI*_PERF_VS_BUSY[0..1]
eqn=0,2,2,ifnotzero,4,4,ifnotzero,1,3,3,ifnotzero,5,5,ifnotzero,max

name=VSTime
desc=#Timing#Time vertex shaders are busy in nanoseconds.
type=gpa_float64
usage=nanoseconds
[GLGfx10]
GPUTime_Bottom_To_Bottom_Duration
SPI_PERF_ES_BUSY
SPI_PERF_LS_BUSY
SPI_PERF_VS_BUSY
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=1,2,2,ifnotzero,3,3,ifnotzero,4,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GPUTime_Bottom_To_Bottom_Duration
SPI*_PERF_ES_BUSY[0..1]
SPI*_PERF_LS_BUSY[0..1]
SPI*_PERF_VS_BUSY[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=1,3,3,ifnotzero,5,5,ifnotzero,2,4,4,ifnotzero,6,6,ifnotzero,max,7,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*

name=HSBusy
desc=#Timing#The percentage of time the ShaderUnit has hull shader work to do.
type=gpa_float64
usage=percentage
[GLGfx10]
SPI_PERF_HS_BUSY
SPI_PERF_HS_WAVE
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),0,1,ifnotzero,2,/,(100),*,(100),min
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SPI*_PERF_HS_BUSY[0..1]
SPI*_PERF_HS_WAVE[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),0,2,ifnotzero,(0),1,3,ifnotzero,max,4,/,(100),*,(100),min

name=HSBusyCycles
desc=#Timing#Number of GPU cycles that the ShaderUnit has hull shader work to do.
type=gpa_float64
usage=cycles
[GLGfx10]
SPI_PERF_HS_BUSY
SPI_PERF_HS_WAVE
eqn=(0),0,1,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SPI*_PERF_HS_BUSY[0..1]
SPI*_PERF_HS_WAVE[0..1]
eqn=(0),0,2,ifnotzero,(0),1,3,ifnotzero,max

name=HSTime
desc=#Timing#Time hull shaders are busy in nanoseconds.
type=gpa_float64
usage=nanoseconds
[GLGfx10]
GPUTime_Bottom_To_Bottom_Duration
SPI_PERF_HS_BUSY
SPI_PERF_HS_WAVE
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),1,2,ifnotzero,3,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GPUTime_Bottom_To_Bottom_Duration
SPI*_PERF_HS_BUSY[0..1]
SPI*_PERF_HS_WAVE[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),1,3,ifnotzero,(0),2,4,ifnotzero,max,5,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*

name=DSBusy
desc=#Timing#The percentage of time the ShaderUnit has domain shader work to do.
type=gpa_float64
usage=percentage
[GLGfx10]
SPI_PERF_VS_BUSY
SPI_PERF_ES_BUSY
SPI_PERF_ES_WAVE
SPI_PERF_LS_WAVE
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),0,1,2,ifnotzero,3,ifnotzero,4,/,(100),*,(100),min
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SPI*_PERF_VS_BUSY[0..1]
SPI*_PERF_ES_BUSY[0..1]
SPI*_PERF_ES_WAVE[0..1]
SPI*_PERF_LS_WAVE[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),0,2,4,ifnotzero,6,ifnotzero,(0),1,3,5,ifnotzero,7,ifnotzero,max,8,/,(100),*,(100),min

name=DSBusyCycles
desc=#Timing#Number of GPU cycles that the ShaderUnit has domain shader work to do.
type=gpa_float64
usage=cycles
[GLGfx10]
SPI_PERF_VS_BUSY
SPI_PERF_ES_BUSY
SPI_PERF_ES_WAVE
SPI_PERF_LS_WAVE
eqn=(0),0,1,2,ifnotzero,3,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SPI*_PERF_VS_BUSY[0..1]
SPI*_PERF_ES_BUSY[0..1]
SPI*_PERF_ES_WAVE[0..1]
SPI*_PERF_LS_WAVE[0..1]
eqn=(0),0,2,4,ifnotzero,6,ifnotzero,(0),1,3,5,ifnotzero,7,ifnotzero,max

name=DSTime
desc=#Timing#Time domain shaders are busy in nanoseconds.
type=gpa_float64
usage=nanoseconds
[GLGfx10]
GPUTime_Bottom_To_Bottom_Duration
SPI_PERF_VS_BUSY
SPI_PERF_ES_BUSY
SPI_PERF_ES_WAVE
SPI_PERF_LS_WAVE
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),1,2,3,ifnotzero,4,ifnotzero,5,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GPUTime_Bottom_To_Bottom_Duration
SPI*_PERF_VS_BUSY[0..1]
SPI*_PERF_ES_BUSY[0..1]
SPI*_PERF_ES_WAVE[0..1]
SPI*_PERF_LS_WAVE[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),1,3,5,ifnotzero,7,ifnotzero,(0),2,4,6,ifnotzero,8,ifnotzero,max,9,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*

;;name=GSBusy
;;desc=#Timing#The percentage of time the ShaderUnit has geometry shader work to do.
;;type=gpa_float64
;;usage=percentage
;;[GLGfx10]
;;SPI_PERF_GS_BUSY
;;SPI_PERF_GS_WAVE
;;CPF_PERF_SEL_CPF_STAT_BUSY
;;eqn=(0),0,1,ifnotzero,2,/,(100),*,(100),min
;;[DX11Gfx10]
;;[DX12Gfx10]
;;[VKGfx10]
;;SPI*_PERF_GS_BUSY[0..3]
;;SPI*_PERF_GS_WAVE[0..3]
;;CPF_PERF_SEL_CPF_STAT_BUSY
;;eqn=(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,8,/,(100),*,(100),min

;;name=GSBusyCycles
;;desc=#Timing#Number of GPU cycles that the ShaderUnit has geometry shader work to do.
;;type=gpa_float64
;;usage=cycles
;;[GLGfx10]
;;SPI_PERF_GS_BUSY
;;SPI_PERF_GS_WAVE
;;eqn=(0),0,1,ifnotzero
;;[DX11Gfx10]
;;[DX12Gfx10]
;;[VKGfx10]
;;SPI*_PERF_GS_BUSY[0..3]
;;SPI*_PERF_GS_WAVE[0..3]
;;eqn=(0),0,4,ifnotzero,(0),1,5,ifnotzero,max,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max

;;name=GSTime
;;desc=#Timing#Time geometry shaders are busy in nanoseconds.
;;type=gpa_float64
;;usage=nanoseconds
;;[GLGfx10]
;;GPUTime_Bottom_To_Bottom_Duration
;;SPI_PERF_GS_BUSY
;;SPI_PERF_GS_WAVE
;;CPF_PERF_SEL_CPF_STAT_BUSY
;;eqn=(0),1,2,ifnotzero,3,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*
;;[DX11Gfx10]
;;[DX12Gfx10]
;;[VKGfx10]
;;GPUTime_Bottom_To_Bottom_Duration
;;SPI*_PERF_GS_BUSY[0..3]
;;SPI*_PERF_GS_WAVE[0..3]
;;CPF_PERF_SEL_CPF_STAT_BUSY
;;eqn=(0),1,5,ifnotzero,(0),2,6,ifnotzero,max,(0),3,7,ifnotzero,max,(0),4,8,ifnotzero,max,9,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*

name=PSBusy
desc=#Timing#The percentage of time the ShaderUnit has pixel shader work to do.
type=gpa_float64
usage=percentage
[GLGfx10]
SPI_PERF_PS0_BUSY
SPI_PERF_PS0_WAVE
SPI_PERF_PS1_BUSY
SPI_PERF_PS1_WAVE
SPI_PERF_PS2_BUSY
SPI_PERF_PS2_WAVE
SPI_PERF_PS3_BUSY
SPI_PERF_PS3_WAVE
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),0,1,ifnotzero,(0),2,3,ifnotzero,(0),4,5,ifnotzero,(0),6,7,ifnotzero,max4,8,/,(100),*,(100),min
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SPI*_PERF_PS0_BUSY[0..1]
SPI*_PERF_PS0_WAVE[0..1]
SPI*_PERF_PS1_BUSY[0..1]
SPI*_PERF_PS1_WAVE[0..1]
SPI*_PERF_PS2_BUSY[0..1]
SPI*_PERF_PS2_WAVE[0..1]
SPI*_PERF_PS3_BUSY[0..1]
SPI*_PERF_PS3_WAVE[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),0,2,ifnotzero,(0),1,3,ifnotzero,max,(0),4,6,ifnotzero,(0),5,7,ifnotzero,max,(0),8,10,ifnotzero,(0),9,11,ifnotzero,max,(0),12,14,ifnotzero,(0),13,15,ifnotzero,max,max4,16,/,(100),*,(100),min

name=PSBusyCycles
desc=#Timing#Number of GPU cycles that the ShaderUnit has pixel shader work to do.
type=gpa_float64
usage=cycles
[GLGfx10]
SPI_PERF_PS0_BUSY
SPI_PERF_PS0_WAVE
SPI_PERF_PS1_BUSY
SPI_PERF_PS1_WAVE
SPI_PERF_PS2_BUSY
SPI_PERF_PS2_WAVE
SPI_PERF_PS3_BUSY
SPI_PERF_PS3_WAVE
eqn=(0),0,1,ifnotzero,(0),2,3,ifnotzero,(0),4,5,ifnotzero,(0),6,7,ifnotzero,max4
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SPI*_PERF_PS0_BUSY[0..1]
SPI*_PERF_PS0_WAVE[0..1]
SPI*_PERF_PS1_BUSY[0..1]
SPI*_PERF_PS1_WAVE[0..1]
SPI*_PERF_PS2_BUSY[0..1]
SPI*_PERF_PS2_WAVE[0..1]
SPI*_PERF_PS3_BUSY[0..1]
SPI*_PERF_PS3_WAVE[0..1]
eqn=(0),0,2,ifnotzero,(0),1,3,ifnotzero,max,(0),4,6,ifnotzero,(0),5,7,ifnotzero,max,(0),8,10,ifnotzero,(0),9,11,ifnotzero,max,(0),12,14,ifnotzero,(0),13,15,ifnotzero,max,max4

name=PSTime
desc=#Timing#Time pixel shaders are busy in nanoseconds.
type=gpa_float64
usage=nanoseconds
[GLGfx10]
GPUTime_Bottom_To_Bottom_Duration
SPI_PERF_PS0_BUSY
SPI_PERF_PS0_WAVE
SPI_PERF_PS1_BUSY
SPI_PERF_PS1_WAVE
SPI_PERF_PS2_BUSY
SPI_PERF_PS2_WAVE
SPI_PERF_PS3_BUSY
SPI_PERF_PS3_WAVE
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),1,2,ifnotzero,(0),3,4,ifnotzero,(0),5,6,ifnotzero,(0),7,8,ifnotzero,max4,9,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GPUTime_Bottom_To_Bottom_Duration
SPI*_PERF_PS0_BUSY[0..1]
SPI*_PERF_PS0_WAVE[0..1]
SPI*_PERF_PS1_BUSY[0..1]
SPI*_PERF_PS1_WAVE[0..1]
SPI*_PERF_PS2_BUSY[0..1]
SPI*_PERF_PS2_WAVE[0..1]
SPI*_PERF_PS3_BUSY[0..1]
SPI*_PERF_PS3_WAVE[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),1,3,ifnotzero,(0),2,4,ifnotzero,max,(0),5,7,ifnotzero,(0),6,8,ifnotzero,max,(0),9,11,ifnotzero,(0),10,12,ifnotzero,max,(0),13,15,ifnotzero,(0),14,16,ifnotzero,max,max4,17,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*

name=CSBusy
desc=#Timing#The percentage of time the ShaderUnit has compute shader work to do.
type=gpa_float64
usage=percentage
[GLGfx10]
SPI_PERF_CSGN_BUSY
SPI_PERF_CSGN_WAVE
SPI_PERF_CSN_BUSY
SPI_PERF_CSN_WAVE
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),0,1,ifnotzero,(0),2,3,ifnotzero,max,4,/,(100),*,(100),min
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SPI*_PERF_CSGN_BUSY[0..1]
SPI*_PERF_CSGN_WAVE[0..1]
SPI*_PERF_CSN_BUSY[0..1]
SPI*_PERF_CSN_WAVE[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=SPI*_PERF_CSGN_BUSY,SPI*_PERF_CSGN_WAVE,comparemax2,SPI*_PERF_CSN_BUSY,SPI*_PERF_CSN_WAVE,comparemax2,max,CPF_PERF_SEL_CPF_STAT_BUSY,/,(100),*,(100),min

name=CSBusyCycles
desc=#Timing#Number of GPU cycles that the ShaderUnit has compute shader work to do.
type=gpa_float64
usage=cycles
[GLGfx10]
SPI_PERF_CSGN_BUSY
SPI_PERF_CSGN_WAVE
SPI_PERF_CSN_BUSY
SPI_PERF_CSN_WAVE
eqn=(0),0,1,ifnotzero,(0),2,3,ifnotzero,max
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SPI*_PERF_CSGN_BUSY[0..1]
SPI*_PERF_CSGN_WAVE[0..1]
SPI*_PERF_CSN_BUSY[0..1]
SPI*_PERF_CSN_WAVE[0..1]
eqn=SPI*_PERF_CSGN_BUSY,SPI*_PERF_CSGN_WAVE,comparemax2,SPI*_PERF_CSN_BUSY,SPI*_PERF_CSN_WAVE,comparemax2,max

name=CSTime
desc=#Timing#Time compute shaders are busy in nanoseconds.
type=gpa_float64
usage=nanoseconds
[GLGfx10]
GPUTime_Bottom_To_Bottom_Duration
SPI_PERF_CSGN_BUSY
SPI_PERF_CSGN_WAVE
SPI_PERF_CSN_BUSY
SPI_PERF_CSN_WAVE
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),1,2,ifnotzero,(0),3,4,ifnotzero,max,5,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GPUTime_Bottom_To_Bottom_Duration
SPI*_PERF_CSGN_BUSY[0..1]
SPI*_PERF_CSGN_WAVE[0..1]
SPI*_PERF_CSN_BUSY[0..1]
SPI*_PERF_CSN_WAVE[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=SPI*_PERF_CSGN_BUSY,SPI*_PERF_CSGN_WAVE,comparemax2,SPI*_PERF_CSN_BUSY,SPI*_PERF_CSN_WAVE,comparemax2,max,CPF_PERF_SEL_CPF_STAT_BUSY,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*

name=VSVerticesIn
desc=#VertexShader#The number of vertices processed by the VS.
type=gpa_float64
usage=items
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GE_SPI_ESVERT_VALID
GE_SPI_LSVERT_VALID
GE_SPI_VSVERT_VALID
eqn=0,1,1,ifnotzero,2,2,ifnotzero

name=VSVALUInstCount
desc=#VertexShader#Average number of vector ALU instructions executed in the VS. Affected by flow control.
type=gpa_float64
usage=items
[GLGfx10]
SQ_ES_PERF_SEL_INSTS_VALU
SQ_ES_PERF_SEL_WAVES
SQ_LS_PERF_SEL_INSTS_VALU
SQ_LS_PERF_SEL_WAVES
SQ_VS_PERF_SEL_INSTS_VALU
SQ_VS_PERF_SEL_WAVES
eqn=(0),0,1,/,1,ifnotzero,2,3,/,3,ifnotzero,4,5,/,5,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_ES*_PERF_SEL_INSTS_VALU[0..1]
SQ_ES*_PERF_SEL_WAVES[0..1]
SQ_LS*_PERF_SEL_INSTS_VALU[0..1]
SQ_LS*_PERF_SEL_WAVES[0..1]
SQ_VS*_PERF_SEL_INSTS_VALU[0..1]
SQ_VS*_PERF_SEL_WAVES[0..1]
eqn=(0),0..1,sum2,2..3,sum2,/,2..3,sum2,ifnotzero,4..5,sum2,6..7,sum2,/,6..7,sum2,ifnotzero,8..9,sum2,10..11,sum2,/,10..11,sum2,ifnotzero

name=VSSALUInstCount
desc=#VertexShader#Average number of scalar ALU instructions executed in the VS. Affected by flow control.
type=gpa_float64
usage=items
[GLGfx10]
SQ_ES_PERF_SEL_INSTS_SALU
SQ_ES_PERF_SEL_WAVES
SQ_LS_PERF_SEL_INSTS_SALU
SQ_LS_PERF_SEL_WAVES
SQ_VS_PERF_SEL_INSTS_SALU
SQ_VS_PERF_SEL_WAVES
eqn=(0),0,1,/,1,ifnotzero,2,3,/,3,ifnotzero,4,5,/,5,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_ES*_PERF_SEL_INSTS_VALU[0..1]
SQ_ES*_PERF_SEL_WAVES[0..1]
SQ_LS*_PERF_SEL_INSTS_VALU[0..1]
SQ_LS*_PERF_SEL_WAVES[0..1]
SQ_VS*_PERF_SEL_INSTS_VALU[0..1]
SQ_VS*_PERF_SEL_WAVES[0..1]
eqn=(0),0..1,sum2,2..3,sum2,/,2..3,sum2,ifnotzero,4..5,sum2,6..7,sum2,/,6..7,sum2,ifnotzero,8..9,sum2,10..11,sum2,/,10..11,sum2,ifnotzero

name=VSVALUBusy
desc=#VertexShader#The percentage of GPUTime vector ALU instructions are being processed by the VS.
type=gpa_float64
usage=percentage
[GLGfx10]
SQ_ES_PERF_SEL_INST_CYCLES_VALU
SQ_LS_PERF_SEL_INST_CYCLES_VALU
SQ_VS_PERF_SEL_INST_CYCLES_VALU
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,1,1,ifnotzero,2,2,ifnotzero,NUM_SIMDS,/,3,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_ES*_PERF_SEL_INST_CYCLES_VALU[0..1]
SQ_LS*_PERF_SEL_INST_CYCLES_VALU[0..1]
SQ_VS*_PERF_SEL_INST_CYCLES_VALU[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..1,sum2,2..3,sum2,2..3,sum2,ifnotzero,4..5,sum2,4..5,sum2,ifnotzero,NUM_SIMDS,/,6,/,(100),*

name=VSVALUBusyCycles
desc=#VertexShader#Number of GPU cycles where vector ALU instructions are being processed by the VS.
type=gpa_float64
usage=cycles
[GLGfx10]
SQ_ES_PERF_SEL_INST_CYCLES_VALU
SQ_LS_PERF_SEL_INST_CYCLES_VALU
SQ_VS_PERF_SEL_INST_CYCLES_VALU
eqn=0,1,1,ifnotzero,2,2,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_ES*_PERF_SEL_INST_CYCLES_VALU[0..1]
SQ_LS*_PERF_SEL_INST_CYCLES_VALU[0..1]
SQ_VS*_PERF_SEL_INST_CYCLES_VALU[0..1]
eqn=0..1,sum2,2..3,sum2,2..3,sum2,ifnotzero,4..5,sum2,4..5,sum2,ifnotzero

name=VSSALUBusy
desc=#VertexShader#The percentage of GPUTime scalar ALU instructions are being processed by the VS.
type=gpa_float64
usage=percentage
[GLGfx10]
SQ_ES_PERF_SEL_INSTS_SALU
SQ_LS_PERF_SEL_INSTS_SALU
SQ_VS_PERF_SEL_INSTS_SALU
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,1,1,ifnotzero,2,2,ifnotzero,NUM_CUS,/,3,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_ES*_PERF_SEL_INSTS_SALU[0..1]
SQ_LS*_PERF_SEL_INSTS_SALU[0..1]
SQ_VS*_PERF_SEL_INSTS_SALU[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..1,sum2,2..3,sum2,2..3,sum2,ifnotzero,4..5,sum2,4..5,sum2,ifnotzero,NUM_CUS,/,6,/,(100),*

name=VSSALUBusyCycles
desc=#VertexShader#Number of GPU cycles where scalar ALU instructions are being processed by the VS.
type=gpa_float64
usage=cycles
[GLGfx10]
SQ_ES_PERF_SEL_INSTS_SALU
SQ_LS_PERF_SEL_INSTS_SALU
SQ_VS_PERF_SEL_INSTS_SALU
eqn=0,1,1,ifnotzero,2,2,ifnotzero,NUM_CUS,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_ES*_PERF_SEL_INSTS_SALU[0..1]
SQ_LS*_PERF_SEL_INSTS_SALU[0..1]
SQ_VS*_PERF_SEL_INSTS_SALU[0..1]
eqn=0..1,sum2,2..3,sum2,2..3,sum2,ifnotzero,4..5,sum2,4..5,sum2,ifnotzero,NUM_CUS,/

name=HSPatches
desc=#HullShader#The number of patches processed by the HS.
type=gpa_float64
usage=items
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GE_SPI_HSVERT_VALID
eqn=0

name=HSVALUInstCount
desc=#HullShader#Average number of vector ALU instructions executed in the HS. Affected by flow control.
type=gpa_float64
usage=items
[GLGfx10]
SQ_HS_PERF_SEL_INSTS_VALU
SQ_HS_PERF_SEL_WAVES
eqn=0,1,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_HS*_PERF_SEL_INSTS_VALU[0..1]
SQ_HS*_PERF_SEL_WAVES[0..1]
eqn=0..1,sum2,2..3,sum2,/

name=HSSALUInstCount
desc=#HullShader#Average number of scalar ALU instructions executed in the HS. Affected by flow control.
type=gpa_float64
usage=items
[GLGfx10]
SQ_HS_PERF_SEL_INSTS_SALU
SQ_HS_PERF_SEL_WAVES
eqn=0,1,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_HS*_PERF_SEL_INSTS_SALU[0..1]
SQ_HS*_PERF_SEL_WAVES[0..1]
eqn=0..1,sum2,2..3,sum2,/

name=HSVALUBusy
desc=#HullShader#The percentage of GPUTime vector ALU instructions are being processed by the HS.
type=gpa_float64
usage=percentage
[GLGfx10]
SQ_HS_PERF_SEL_INST_CYCLES_VALU
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,NUM_SIMDS,/,1,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_HS*_PERF_SEL_INST_CYCLES_VALU[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..1,sum2,NUM_SIMDS,/,2,/,(100),*

name=HSVALUBusyCycles
desc=#HullShader#Number of GPU cycles vector where ALU instructions are being processed by the HS.
type=gpa_float64
usage=cycles
[GLGfx10]
SQ_HS_PERF_SEL_INST_CYCLES_VALU
eqn=0,NUM_SIMDS,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_HS*_PERF_SEL_INST_CYCLES_VALU[0..1]
eqn=0..1,sum2,NUM_SIMDS,/

name=HSSALUBusy
desc=#HullShader#The percentage of GPUTime scalar ALU instructions are being processed by the HS.
type=gpa_float64
usage=percentage
[GLGfx10]
SQ_HS_PERF_SEL_INSTS_SALU
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,NUM_CUS,/,1,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_HS*_PERF_SEL_INSTS_SALU[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..1,sum2,NUM_CUS,/,2,/,(100),*

name=HSSALUBusyCycles
desc=#HullShader#Number of GPU cycles where scalar ALU instructions are being processed by the HS.
type=gpa_float64
usage=cycles
[GLGfx10]
SQ_HS_PERF_SEL_INSTS_SALU
eqn=0,NUM_CUS,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_HS*_PERF_SEL_INSTS_SALU[0..1]
eqn=0..1,sum2,NUM_CUS,/

name=DSVerticesIn
desc=#DomainShader#The number of vertices processed by the DS.
type=gpa_float64
usage=items
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GE_SPI_VSVERT_VALID
GE_SPI_ESVERT_VALID
GE_SPI_LSVERT_VALID
eqn=(0),0,1,1,ifnotzero,2,ifnotzero

name=DSVALUInstCount
desc=#DomainShader#Average number of vector ALU instructions executed in the DS. Affected by flow control.
type=gpa_float64
usage=items
[GLGfx10]
SQ_VS_PERF_SEL_INSTS_VALU
SQ_VS_PERF_SEL_WAVES
SQ_ES_PERF_SEL_INSTS_VALU
SQ_ES_PERF_SEL_WAVES
SQ_ES_PERF_SEL_ITEMS
SQ_LS_PERF_SEL_ITEMS
eqn=(0),0,1,/,2,3,/,4,ifnotzero,5,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_VS*_PERF_SEL_INSTS_VALU[0..1]
SQ_VS*_PERF_SEL_WAVES[0..1]
SQ_ES*_PERF_SEL_INSTS_VALU[0..1]
SQ_ES*_PERF_SEL_WAVES[0..1]
SQ_ES*_PERF_SEL_ITEMS[0..1]
SQ_LS*_PERF_SEL_ITEMS[0..1]
eqn=(0),0..1,sum2,2..3,sum2,/,4..5,sum2,6..7,sum2,/,8..9,sum2,ifnotzero,10..11,sum2,ifnotzero

name=DSSALUInstCount
desc=#DomainShader#Average number of scalar ALU instructions executed in the DS. Affected by flow control.
type=gpa_float64
usage=items
[GLGfx10]
SQ_VS_PERF_SEL_INSTS_SALU
SQ_VS_PERF_SEL_WAVES
SQ_ES_PERF_SEL_INSTS_SALU
SQ_ES_PERF_SEL_WAVES
SQ_ES_PERF_SEL_ITEMS
SQ_LS_PERF_SEL_ITEMS
eqn=(0),0,1,/,2,3,/,4,ifnotzero,5,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_VS*_PERF_SEL_INSTS_SALU[0..1]
SQ_VS*_PERF_SEL_WAVES[0..1]
SQ_ES*_PERF_SEL_INSTS_SALU[0..1]
SQ_ES*_PERF_SEL_WAVES[0..1]
SQ_ES*_PERF_SEL_ITEMS[0..1]
SQ_LS*_PERF_SEL_ITEMS[0..1]
eqn=(0),0..1,sum2,2..3,sum2,/,4..5,sum2,6..7,sum2,/,8..9,sum2,ifnotzero,10..11,sum2,ifnotzero

;name=DSVALUBusy
;desc=#DomainShader#The percentage of GPUTime vector ALU instructions are being processed by the DS.
;type=gpa_float64
;usage=percentage
;[GLGfx10]
;SQ_VS_PERF_SEL_INST_CYCLES_VALU
;SQ_ES_PERF_SEL_INST_CYCLES_VALU
;CPF_PERF_SEL_CPF_STAT_BUSY
;SQ_ES_PERF_SEL_ITEMS
;SQ_LS_PERF_SEL_ITEMS
;eqn=(0),0,1,3,ifnotzero,4,ifnotzero,NUM_SIMDS,/,2,/,(100),*
;[DX11Gfx10]
;[DX12Gfx10]
;[VKGfx10]
;SQ_VS*_PERF_SEL_INST_CYCLES_VALU[0..3]
;SQ_ES*_PERF_SEL_INST_CYCLES_VALU[0..3]
;CPF_PERF_SEL_CPF_STAT_BUSY
;SQ_ES*_PERF_SEL_ITEMS[0..3]
;SQ_LS*_PERF_SEL_ITEMS[0..3]
;eqn=(0),0..3,sum4,4..7,sum4,9..12,sum4,ifnotzero,13..16,sum4,ifnotzero,NUM_SIMDS,/,8,/,(100),*

;name=DSVALUBusyCycles
;desc=#DomainShader#Number of GPU cycles where vector ALU instructions are being processed by the DS.
;type=gpa_float64
;usage=cycles
;[GLGfx10]
;SQ_VS_PERF_SEL_INST_CYCLES_VALU
;SQ_ES_PERF_SEL_INST_CYCLES_VALU
;SQ_ES_PERF_SEL_ITEMS
;SQ_LS_PERF_SEL_ITEMS
;eqn=(0),0,1,3,ifnotzero,4,ifnotzero,NUM_SIMDS,/
;[DX11Gfx10]
;[DX12Gfx10]
;[VKGfx10]
;SQ_VS*_PERF_SEL_INST_CYCLES_VALU[0..3]
;SQ_ES*_PERF_SEL_INST_CYCLES_VALU[0..3]
;SQ_ES*_PERF_SEL_ITEMS[0..3]
;SQ_LS*_PERF_SEL_ITEMS[0..3]
;eqn=(0),0..3,sum4,4..7,sum4,9..12,sum4,ifnotzero,13..16,sum4,ifnotzero,NUM_SIMDS,/

;name=DSSALUBusy
;desc=#DomainShader#The percentage of GPUTime scalar ALU instructions are being processed by the DS.
;type=gpa_float64
;usage=percentage
;[GLGfx10]
;SQ_VS_PERF_SEL_INST_CYCLES_SALU
;SQ_ES_PERF_SEL_INST_CYCLES_SALU
;CPF_PERF_SEL_CPF_STAT_BUSY
;SQ_ES_PERF_SEL_ITEMS
;SQ_LS_PERF_SEL_ITEMS
;eqn=(0),0,1,3,ifnotzero,4,ifnotzero,NUM_CUS,/,2,/,(100),*
;[DX11Gfx10]
;[DX12Gfx10]
;[VKGfx10]
;SQ_VS*_PERF_SEL_INST_CYCLES_SALU[0..3]
;SQ_ES*_PERF_SEL_INST_CYCLES_SALU[0..3]
;CPF_PERF_SEL_CPF_STAT_BUSY
;SQ_ES*_PERF_SEL_ITEMS[0..3]
;SQ_LS*_PERF_SEL_ITEMS[0..3]
;eqn=(0),0..3,sum4,4..7,sum4,9..12,sum4,ifnotzero,13..16,sum4,ifnotzero,NUM_CUS,8,/,(100),*

;name=DSSALUBusyCycles
;desc=#DomainShader#Number of GPU cycles where scalar ALU instructions are being processed by the DS.
;type=gpa_float64
;usage=cycles
;[GLGfx10]
;SQ_VS_PERF_SEL_INST_CYCLES_SALU
;SQ_ES_PERF_SEL_INST_CYCLES_SALU
;SQ_ES_PERF_SEL_ITEMS
;SQ_LS_PERF_SEL_ITEMS
;eqn=(0),0,1,3,ifnotzero,4,ifnotzero,NUM_CUS,/
;[DX11Gfx10]
;[DX12Gfx10]
;[VKGfx10]
;SQ_VS*_PERF_SEL_INST_CYCLES_SALU[0..3]
;SQ_ES*_PERF_SEL_INST_CYCLES_SALU[0..3]
;SQ_ES*_PERF_SEL_ITEMS[0..3]
;SQ_LS*_PERF_SEL_ITEMS[0..3]
;eqn=(0),0..3,sum4,4..7,sum4,9..12,sum4,ifnotzero,13..16,sum4,ifnotzero,NUM_CUS,/

;;name=GSPrimsIn
;;desc=#GeometryShader#The number of primitives passed into the GS.
;;type=gpa_float64
;;usage=items
;;[GLGfx10]
;;[DX11Gfx10]
;;[DX12Gfx10]
;;[VKGfx10]
;;GE_SPI_GSPRIM_VALID
;;eqn=0
;;
;;name=GSVerticesOut
;;desc=#GeometryShader#The number of vertices output by the GS.
;;type=gpa_float64
;;usage=items
;;[GLGfx10]
;;[DX11Gfx10]
;;[DX12Gfx10]
;;[VKGfx10]
;;GE_SPI_VSVERT_VALID
;;GE_SPI_ESVERT_VALID
;;eqn=(0),0,1,ifnotzero
;;
;;name=GSVALUInstCount
;;desc=#GeometryShader#Average number of vector ALU instructions executed in the GS. Affected by flow control.
;;type=gpa_float64
;;usage=items
;;[GLGfx10]
;;SQ_GS_PERF_SEL_INSTS_VALU
;;SQ_GS_PERF_SEL_WAVES
;;eqn=0,1,/
;;[DX11Gfx10]
;;[DX12Gfx10]
;;[VKGfx10]
;;SQ_GS*_PERF_SEL_INSTS_VALU[0..3]
;;SQ_GS*_PERF_SEL_WAVES[0..3]
;;eqn=0..3,sum4,4..7,sum4,/
;;
;;name=GSSALUInstCount
;;desc=#GeometryShader#Average number of scalar ALU instructions executed in the GS. Affected by flow control.
;;type=gpa_float64
;;usage=items
;;[GLGfx10]
;;SQ_GS_PERF_SEL_INSTS_SALU
;;SQ_GS_PERF_SEL_WAVES
;;eqn=0,1,/
;;[DX11Gfx10]
;;[DX12Gfx10]
;;[VKGfx10]
;;SQ_GS*_PERF_SEL_INSTS_SALU[0..3]
;;SQ_GS*_PERF_SEL_WAVES[0..3]
;;eqn=0..3,sum4,4..7,sum4,/
;;
;;name=GSVALUBusy
;;desc=#GeometryShader#The percentage of GPUTime vector ALU instructions are being processed by the GS.
;;type=gpa_float64
;;usage=percentage
;;[GLGfx10]
;;SQ_GS_PERF_SEL_INST_CYCLES_VALU
;;CPF_PERF_SEL_CPF_STAT_BUSY
;;eqn=0,NUM_SIMDS,/,1,/,(100),*
;;[DX11Gfx10]
;;[DX12Gfx10]
;;[VKGfx10]
;;SQ_GS*_PERF_SEL_INST_CYCLES_VALU[0..3]
;;CPF_PERF_SEL_CPF_STAT_BUSY
;;eqn=0..3,sum4,NUM_SIMDS,/,4,/,(100),*
;;
;;name=GSVALUBusyCycles
;;desc=#GeometryShader#Number of GPU cycles where vector ALU instructions are being processed by the GS.
;;type=gpa_float64
;;usage=cycles
;;[GLGfx10]
;;SQ_GS_PERF_SEL_INST_CYCLES_VALU
;;eqn=0,NUM_SIMDS,/
;;[DX11Gfx10]
;;[DX12Gfx10]
;;[VKGfx10]
;;SQ_GS*_PERF_SEL_INST_CYCLES_VALU[0..3]
;;eqn=0..3,sum4,NUM_SIMDS,/
;;
;;name=GSSALUBusy
;;desc=#GeometryShader#The percentage of GPUTime scalar ALU instructions are being processed by the GS.
;;type=gpa_float64
;;usage=percentage
;;[GLGfx10]
;;SQ_GS_PERF_SEL_INSTS_SALU
;;CPF_PERF_SEL_CPF_STAT_BUSY
;;eqn=0,NUM_CUS,/,1,/,(100),*
;;[DX11Gfx10]
;;[DX12Gfx10]
;;[VKGfx10]
;;SQ_GS*_PERF_SEL_INSTS_SALU[0..3]
;;CPF_PERF_SEL_CPF_STAT_BUSY
;;eqn=0..3,sum4,NUM_CUS,/,4,/,(100),*
;;
;;name=GSSALUBusyCycles
;;desc=#GeometryShader#Number of GPU cycles where scalar ALU instructions are being processed by the GS.
;;type=gpa_float64
;;usage=cycles
;;[GLGfx10]
;;SQ_GS_PERF_SEL_INSTS_SALU
;;eqn=0,NUM_CUS,/
;;[DX11Gfx10]
;;[DX12Gfx10]
;;[VKGfx10]
;;SQ_GS*_PERF_SEL_INSTS_SALU[0..3]
;;eqn=0..3,sum4,NUM_CUS,/

name=PrimitiveAssemblyBusy
desc=#Timing#The percentage of GPUTime that primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.
type=gpa_float64
usage=percentage
[GLGfx10]
PA_SU_PERF_PAPC_CLIP_BUSY
PA_SU_PERF_PAPC_SU_STALLED_SC
PA_SU_PERF_PAPC_SU_OUTPUT_PRIM
PA_SU_PERF_PAPC_SU_OUTPUT_PRIM_DUAL
PA_SU_PERF_PAPC_SU_OUTPUT_CLIP_PRIM
PA_SU_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,1,-,2,3,+,4,+,5,(2),*,+,SU_CLOCKS_PRIM,*,-,NUM_PRIM_PIPES,/,(0),max,6,/,(100),*,(100),min
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SU*_PERF_PAPC_CLIP_BUSY[0..3]
PA_SU*_PERF_PAPC_SU_STALLED_SC[0..3]
PA_SU*_PERF_PAPC_SU_OUTPUT_PRIM[0..3]
PA_SU*_PERF_PAPC_SU_OUTPUT_PRIM_DUAL[0..3]
PA_SU*_PERF_PAPC_SU_OUTPUT_CLIP_PRIM[0..3]
PA_SU*_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL[0..3]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,4,-,8,12,+,16,+,20,(2),*,+,SU_CLOCKS_PRIM,*,-,1,5,-,9,13,+,17,+,21,(2),*,+,SU_CLOCKS_PRIM,*,-,max,2,6,-,10,14,+,18,+,22,(2),*,+,SU_CLOCKS_PRIM,*,-,max,3,7,-,11,15,+,19,+,23,(2),*,+,SU_CLOCKS_PRIM,*,-,max,(0),max,24,/,(100),*,(100),min

name=PrimitiveAssemblyBusyCycles
desc=#Timing#Number of GPU cycles the primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.
type=gpa_float64
usage=cycles
[GLGfx10]
PA_SU_PERF_PAPC_CLIP_BUSY
PA_SU_PERF_PAPC_SU_STALLED_SC
PA_SU_PERF_PAPC_SU_OUTPUT_PRIM
PA_SU_PERF_PAPC_SU_OUTPUT_PRIM_DUAL
PA_SU_PERF_PAPC_SU_OUTPUT_CLIP_PRIM
PA_SU_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL
eqn=0,1,-,2,3,+,4,+,5,(2),*,+,SU_CLOCKS_PRIM,*,-,NUM_PRIM_PIPES,/,(0),max
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SU*_PERF_PAPC_CLIP_BUSY[0..3]
PA_SU*_PERF_PAPC_SU_STALLED_SC[0..3]
PA_SU*_PERF_PAPC_SU_OUTPUT_PRIM[0..3]
PA_SU*_PERF_PAPC_SU_OUTPUT_PRIM_DUAL[0..3]
PA_SU*_PERF_PAPC_SU_OUTPUT_CLIP_PRIM[0..3]
PA_SU*_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL[0..3]
eqn=0,4,-,8,12,+,16,+,20,(2),*,+,SU_CLOCKS_PRIM,*,-,1,5,-,9,13,+,17,+,21,(2),*,+,SU_CLOCKS_PRIM,*,-,max,2,6,-,10,14,+,18,+,22,(2),*,+,SU_CLOCKS_PRIM,*,-,max,3,7,-,11,15,+,19,+,23,(2),*,+,SU_CLOCKS_PRIM,*,-,max,(0),max

name=PrimitivesIn
desc=#PrimitiveAssembly#The number of primitives received by the hardware. This includes primitives generated by tessellation.
type=gpa_float64
usage=items
[GLGfx10]
PA_SU_PERF_PAPC_PA_INPUT_PRIM
eqn=0
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SU*_PERF_PAPC_PA_INPUT_PRIM[0..3]
eqn=0,1,2,3,sum4

name=CulledPrims
desc=#PrimitiveAssembly#The number of culled primitives. Typical reasons include scissor, the primitive having zero area, and back or front face culling.
type=gpa_float64
usage=items
[GLGfx10]
PA_SU_PERF_PAPC_CLPR_CULL_PRIM
PA_SU_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM
PA_SU_PERF_PAPC_SU_BACK_FACE_CULL_PRIM
PA_SU_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM
PA_SU_PERF_PAPC_SU_POLYMODE_FACE_CULL
eqn=0,1,+,2,+,3,+,4,+
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SU*_PERF_PAPC_CLPR_CULL_PRIM[0..3]
PA_SU*_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM[0..3]
PA_SU*_PERF_PAPC_SU_BACK_FACE_CULL_PRIM[0..3]
PA_SU*_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM[0..3]
PA_SU*_PERF_PAPC_SU_POLYMODE_FACE_CULL[0..3]
eqn=0,1,+,2,+,3,+,4,+,5,+,6,+,7,+,8,+,9,+,10,+,11,+,12,+,13,+,14,+,15,+,16,+,17,+,18,+,19,+

name=ClippedPrims
desc=#PrimitiveAssembly#The number of primitives that required one or more clipping operations due to intersecting the view volume or user clip planes.
type=gpa_float64
usage=items
[GLGfx10]
PA_SU_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM
eqn=0
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SU*_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM[0..3]
eqn=0,1,2,3,sum4

name=PAStalledOnRasterizer
desc=#PrimitiveAssembly#Percentage of GPUTime that primitive assembly waits for rasterization to be ready to accept data. This roughly indicates for what percentage of time the pipeline is bottlenecked by pixel operations.
type=gpa_float64
usage=percentage
[GLGfx10]
PA_SU_PERF_PAPC_SU_STALLED_SC
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,NUM_PRIM_PIPES,/,1,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SU*_PERF_PAPC_SU_STALLED_SC[0..3]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,1,max,2,max,3,max,4,/,(100),*

name=PAStalledOnRasterizerCycles
desc=#PrimitiveAssembly#Number of GPU cycles the primitive assembly waits for rasterization to be ready to accept data. Indicates the number of GPU cycles the pipeline is bottlenecked by pixel operations.
type=gpa_float64
usage=cycles
[GLGfx10]
PA_SU_PERF_PAPC_SU_STALLED_SC
eqn=0,NUM_PRIM_PIPES,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SU*_PERF_PAPC_SU_STALLED_SC[0..3]
eqn=0,1,max,2,max,3,max

name=PSPixelsOut
desc=#PixelShader#Pixels exported from shader to color buffers. Does not include killed or alpha tested pixels; if there are multiple render targets, each render target receives one export, so this will be 2 for 1 pixel written to two RTs.
type=gpa_float64
usage=items
[GLGfx10]
SX_PERF_SEL_DB0_PIXELS
SX_PERF_SEL_DB1_PIXELS
SX_PERF_SEL_DB2_PIXELS
SX_PERF_SEL_DB3_PIXELS
eqn=0,1,2,3,sum4
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SX*_PERF_SEL_DB0_PIXELS[0..3]
SX*_PERF_SEL_DB1_PIXELS[0..3]
SX*_PERF_SEL_DB2_PIXELS[0..3]
SX*_PERF_SEL_DB3_PIXELS[0..3]
eqn=0..15,sum16

name=PSExportStalls
desc=#PixelShader#Pixel shader output stalls. Percentage of GPUBusy. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the color buffer.
type=gpa_float64
usage=percentage
[GLGfx10]
SX_PERF_SEL_DB0_PIXEL_STALL
SX_PERF_SEL_DB1_PIXEL_STALL
SX_PERF_SEL_DB2_PIXEL_STALL
SX_PERF_SEL_DB3_PIXEL_STALL
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..3,max4,4,/,NUM_SHADER_ENGINES,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SX*_PERF_SEL_DB0_PIXEL_STALL[0..3]
SX*_PERF_SEL_DB1_PIXEL_STALL[0..3]
SX*_PERF_SEL_DB2_PIXEL_STALL[0..3]
SX*_PERF_SEL_DB3_PIXEL_STALL[0..3]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..15,max16,16,/,(100),*

name=PSExportStallsCycles
desc=#PixelShader#Number of GPU cycles the pixel shader output stalls. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the color buffer.
type=gpa_float64
usage=cycles
[GLGfx10]
SX_PERF_SEL_DB0_PIXEL_STALL
SX_PERF_SEL_DB1_PIXEL_STALL
SX_PERF_SEL_DB2_PIXEL_STALL
SX_PERF_SEL_DB3_PIXEL_STALL
eqn=0,1,max,2,max,3,max,NUM_SHADER_ENGINES,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SX*_PERF_SEL_DB0_PIXEL_STALL[0..3]
SX*_PERF_SEL_DB1_PIXEL_STALL[0..3]
SX*_PERF_SEL_DB2_PIXEL_STALL[0..3]
SX*_PERF_SEL_DB3_PIXEL_STALL[0..3]
eqn=0..15,max16

name=PSVALUInstCount
desc=#PixelShader#Average number of vector ALU instructions executed in the PS. Affected by flow control.
type=gpa_float64
usage=items
[GLGfx10]
SQ_PS_PERF_SEL_INSTS_VALU
SQ_PS_PERF_SEL_WAVES
eqn=0,1,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_PS*_PERF_SEL_INSTS_VALU[0..1]
SQ_PS*_PERF_SEL_WAVES[0..1]
eqn=0..1,sum2,2..3,sum2,/

name=PSSALUInstCount
desc=#PixelShader#Average number of scalar ALU instructions executed in the PS. Affected by flow control.
type=gpa_float64
usage=items
[GLGfx10]
SQ_PS_PERF_SEL_INSTS_SALU
SQ_PS_PERF_SEL_WAVES
eqn=0,1,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_PS*_PERF_SEL_INSTS_SALU[0..1]
SQ_PS*_PERF_SEL_WAVES[0..1]
eqn=0..1,sum2,2..3,sum2,/

name=PSVALUBusy
desc=#PixelShader#The percentage of GPUTime vector ALU instructions are being processed by the PS.
type=gpa_float64
usage=percentage
[GLGfx10]
SQ_PS_PERF_SEL_INST_CYCLES_VALU
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,NUM_SIMDS,/,1,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_PS*_PERF_SEL_INST_CYCLES_VALU[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..1,sum2,NUM_SIMDS,/,2,/,(100),*

name=PSVALUBusyCycles
desc=#PixelShader#Number of GPU cycles where vector ALU instructions are being processed by the PS.
type=gpa_float64
usage=cycles
[GLGfx10]
SQ_PS_PERF_SEL_INST_CYCLES_VALU
eqn=0,NUM_SIMDS,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_PS*_PERF_SEL_INST_CYCLES_VALU[0..1]
eqn=0..1,sum2,NUM_SIMDS,/

name=PSSALUBusy
desc=#PixelShader#The percentage of GPUTime scalar ALU instructions are being processed by the PS.
type=gpa_float64
usage=percentage
[GLGfx10]
SQ_PS_PERF_SEL_INSTS_SALU
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,NUM_CUS,/,1,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_PS*_PERF_SEL_INSTS_SALU[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..1,sum2,NUM_CUS,/,2,/,(100),*

name=PSSALUBusyCycles
desc=#PixelShader#Number of GPU cycles where scalar ALU instructions are being processed by the PS.
type=gpa_float64
usage=cycles
[GLGfx10]
SQ_PS_PERF_SEL_INSTS_SALU
eqn=0,NUM_CUS,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_PS*_PERF_SEL_INSTS_SALU[0..1]
eqn=0..1,sum2,NUM_CUS,/

name=CSThreadGroups
desc=#ComputeShader#Total number of thread groups.
type=gpa_float64
usage=items
[GLGfx10]
SPI_PERF_CSGN_NUM_THREADGROUPS
SPI_PERF_CSN_NUM_THREADGROUPS
eqn=0,1,+
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=0..3,sum4

name=CSWavefronts
desc=#ComputeShader#The total number of wavefronts used for the CS.
type=gpa_float64
usage=items
[GLGfx10]
SQ_CS_PERF_SEL_WAVES
eqn=0
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SPI*_PERF_CSGN_WAVE[0..1]
SPI*_PERF_CSN_WAVE[0..1]
eqn=0..3,sum4

name=CSThreads
desc=#ComputeShader#The number of CS threads processed by the hardware.
type=gpa_float64
usage=items
[GLGfx10]
SQ_CS_PERF_SEL_ITEMS
eqn=0
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
SQ_CS*_PERF_SEL_ITEMS[0..1]
eqn=(0),SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,SQ_CS*_PERF_SEL_ITEMS,sum2,ifnotzero

name=CSVALUInsts
desc=#ComputeShader#The average number of vector ALU instructions executed per work-item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx10]
SQ_CS_PERF_SEL_INSTS_VALU
SQ_CS_PERF_SEL_WAVES
eqn=(0),0,1,/,1,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_INSTS_VALU[0..1]
SQ_CS*_PERF_SEL_WAVES[0..1]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),SQ_CS*_PERF_SEL_INSTS_VALU,sum2,SQ_CS*_PERF_SEL_WAVES,sum2,/,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSVALUUtilization
desc=#ComputeShader#The percentage of active vector ALU threads in a wave. A lower number can mean either more thread divergence in a wave or that the work-group size is not a multiple of the wave size. Value range: 0% (bad), 100% (ideal - no thread divergence).
type=gpa_float64
usage=percentage
[GLGfx10]
SQ_CS_PERF_SEL_ITEM_CYCLES_VALU
SQ_CS_PERF_SEL_INST_CYCLES_VALU
SQ_PERF_SEL_WAVES_32
eqn=(0),0,1,(64),(32),2,ifnotzero,*,/,(100),*,1,ifnotzero,(100),min
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_ITEM_CYCLES_VALU[0..1]
SQ_CS*_PERF_SEL_INST_CYCLES_VALU[0..1]
SQ_CS*_PERF_SEL_WAVES_32[0..1]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),(0),SQ_CS*_PERF_SEL_ITEM_CYCLES_VALU,sum2,SQ_CS*_PERF_SEL_INST_CYCLES_VALU,sum2,(64),(32),SQ_CS*_PERF_SEL_WAVES_32,sum2,ifnotzero,*,/,(100),*,SQ_CS*_PERF_SEL_INST_CYCLES_VALU,sum2,ifnotzero,(100),min,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSSALUInsts
desc=#ComputeShader#The average number of scalar ALU instructions executed per work-item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx10]
SQ_CS_PERF_SEL_INSTS_SALU
SQ_CS_PERF_SEL_WAVES
eqn=(0),0,1,/,1,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_INSTS_SALU[0..1]
SQ_CS*_PERF_SEL_WAVES[0..1]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),(0),SQ_CS*_PERF_SEL_INSTS_SALU,sum2,SQ_CS*_PERF_SEL_WAVES,sum2,/,SQ_CS*_PERF_SEL_WAVES,sum2,ifnotzero,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSVFetchInsts
desc=#ComputeShader#The average number of vector fetch instructions from the video memory executed per work-item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx10]
SQ_CS_PERF_SEL_INSTS_TEX_LOAD
SQ_CS_PERF_SEL_WAVES
eqn=(0),0,1,/,1,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_INSTS_TEX_LOAD[0..1]
SQ_CS*_PERF_SEL_WAVES[0..1]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),(0),SQ_CS*_PERF_SEL_INSTS_TEX_LOAD,sum2,SQ_CS*_PERF_SEL_WAVES,sum2,/,SQ_CS*_PERF_SEL_WAVES,sum2,ifnotzero,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSSFetchInsts
desc=#ComputeShader#The average number of scalar fetch instructions from the video memory executed per work-item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx10]
SQ_CS_PERF_SEL_INSTS_SMEM
SQ_CS_PERF_SEL_WAVES
eqn=(0),0,1,/,1,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_INSTS_SMEM[0..1]
SQ_CS*_PERF_SEL_WAVES[0..1]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),(0),SQ_CS*_PERF_SEL_INSTS_SMEM,sum2,SQ_CS*_PERF_SEL_WAVES,sum2,/,SQ_CS*_PERF_SEL_WAVES,sum2,ifnotzero,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSVWriteInsts
desc=#ComputeShader#The average number of vector write instructions to the video memory executed per work-item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx10]
SQ_CS_PERF_SEL_INSTS_TEX_STORE
SQ_CS_PERF_SEL_WAVES
eqn=(0),0,1,/,1,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_INSTS_TEX_STORE[0..1]
SQ_CS*_PERF_SEL_WAVES[0..1]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),(0),SQ_CS*_PERF_SEL_INSTS_TEX_STORE,sum2,SQ_CS*_PERF_SEL_WAVES,sum2,/,SQ_CS*_PERF_SEL_WAVES,sum2,ifnotzero,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSVALUBusy
desc=#ComputeShader#The percentage of GPUTime vector ALU instructions are processed. Value range: 0% (bad) to 100% (optimal).
type=gpa_float64
usage=percentage
[GLGfx10]
SQ_CS_PERF_SEL_INST_CYCLES_VALU
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,NUM_SIMDS,/,1,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_INST_CYCLES_VALU[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),SQ_CS*_PERF_SEL_INST_CYCLES_VALU,sum2,NUM_SIMDS,/,CPF_PERF_SEL_CPF_STAT_BUSY,/,(100),*,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSVALUBusyCycles
desc=#ComputeShader#Number of GPU cycles where vector ALU instructions are processed.
type=gpa_float64
usage=cycles
[GLGfx10]
SQ_CS_PERF_SEL_INST_CYCLES_VALU
eqn=0,NUM_SIMDS,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_INST_CYCLES_VALU[0..1]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),0..1,sum2,NUM_SIMDS,/,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSSALUBusy
desc=#ComputeShader#The percentage of GPUTime scalar ALU instructions are processed. Value range: 0% (bad) to 100% (optimal).
type=gpa_float64
usage=percentage
[GLGfx10]
SQ_CS_PERF_SEL_INSTS_SALU
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,NUM_CUS,/,1,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_INSTS_SALU[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),SQ_CS*_PERF_SEL_INSTS_SALU,sum2,NUM_CUS,/,CPF_PERF_SEL_CPF_STAT_BUSY,/,(100),*,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSSALUBusyCycles
desc=#ComputeShader#Number of GPU cycles where scalar ALU instructions are processed.
type=gpa_float64
usage=cycles
[GLGfx10]
SQ_CS_PERF_SEL_INSTS_SALU
eqn=0,NUM_CUS,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_INSTS_SALU[0..1]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),0..1,sum2,NUM_CUS,/,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSMemUnitBusy
desc=#ComputeShader#The percentage of GPUTime the memory unit is active. The result includes the stall time (MemUnitStalled). This is measured with all extra fetches and writes and any cache or memory effects taken into account. Value range: 0% to 100% (fetch-bound).
type=gpa_float64
usage=percentage
[GLGfx10]
TA*_PERF_SEL_TA_BUSY[0..15]
CPF_PERF_SEL_CPF_STAT_BUSY
SPI_PERF_CSGN_NUM_THREADGROUPS
SPI_PERF_CSN_NUM_THREADGROUPS
eqn=(0),TA*_PERF_SEL_TA_BUSY,max16,CPF_PERF_SEL_CPF_STAT_BUSY,/,NUM_SHADER_ARRAYS,/,(100),*,SPI_PERF_CSGN_NUM_THREADGROUPS,SPI_PERF_CSN_NUM_THREADGROUPS,+,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TA*_PERF_SEL_TA_BUSY[0..39]
CPF_PERF_SEL_CPF_STAT_BUSY
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),TA*_PERF_SEL_TA_BUSY,max40,CPF_PERF_SEL_CPF_STAT_BUSY,/,(100),*,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSMemUnitBusyCycles
desc=#ComputeShader#Number of GPU cycles the memory unit is active. The result includes the stall time (MemUnitStalled). This is measured with all extra fetches and writes and any cache or memory effects taken into account.
type=gpa_float64
usage=cycles
[GLGfx10]
TA*_PERF_SEL_TA_BUSY[0..15]
SPI_PERF_CSGN_NUM_THREADGROUPS
SPI_PERF_CSN_NUM_THREADGROUPS
eqn=(0),0..15,max16,NUM_SHADER_ARRAYS,/,SPI_PERF_CSGN_NUM_THREADGROUPS,SPI_PERF_CSN_NUM_THREADGROUPS,+,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TA*_PERF_SEL_TA_BUSY[0..39]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),0..39,max40,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSMemUnitStalled
desc=#ComputeShader#The percentage of GPUTime the memory unit is stalled. Try reducing the number or size of fetches and writes if possible. Value range: 0% (optimal) to 100% (bad).
type=gpa_float64
usage=percentage
[GLGfx10]
TCP*_PERF_SEL_TCP_TA_REQ_STALL[0..15]
CPF_PERF_SEL_CPF_STAT_BUSY
SPI_PERF_CSGN_NUM_THREADGROUPS
SPI_PERF_CSN_NUM_THREADGROUPS
eqn=(0),TCP*_PERF_SEL_TCP_TA_REQ_STALL,max16,CPF_PERF_SEL_CPF_STAT_BUSY,/,NUM_SHADER_ARRAYS,/,(100),*,SPI_PERF_CSGN_NUM_THREADGROUPS,SPI_PERF_CSN_NUM_THREADGROUPS,+,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TCP*_PERF_SEL_TCP_TA_REQ_STALL[0..39]
CPF_PERF_SEL_CPF_STAT_BUSY
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),TCP*_PERF_SEL_TCP_TA_REQ_STALL,max40,CPF_PERF_SEL_CPF_STAT_BUSY,/,(100),*,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSMemUnitStalledCycles
desc=#ComputeShader#Number of GPU cycles the memory unit is stalled. Try reducing the number or size of fetches and writes if possible.
type=gpa_float64
usage=cycles
[GLGfx10]
TCP*_PERF_SEL_TCP_TA_REQ_STALL[0..15]
SPI_PERF_CSGN_NUM_THREADGROUPS
SPI_PERF_CSN_NUM_THREADGROUPS
eqn=(0),0..15,max16,NUM_SHADER_ARRAYS,/,SPI_PERF_CSGN_NUM_THREADGROUPS,SPI_PERF_CSN_NUM_THREADGROUPS,+,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TCP*_PERF_SEL_TCP_TA_REQ_STALL[0..39]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),0..39,max40,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSWriteUnitStalled
desc=#ComputeShader#The percentage of GPUTime the write unit is stalled.
type=gpa_float64
usage=percentage
[GLGfx10]
GL2C*_PERF_SEL_MC_WRREQ_STALL[0..15]
CPF_PERF_SEL_CPF_STAT_BUSY
SPI_PERF_CSGN_NUM_THREADGROUPS
SPI_PERF_CSN_NUM_THREADGROUPS
eqn=(0),0..15,max16,CPF_PERF_SEL_CPF_STAT_BUSY,/,(100),*,SPI_PERF_CSGN_NUM_THREADGROUPS,SPI_PERF_CSN_NUM_THREADGROUPS,+,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL2C*_PERF_SEL_MC_WRREQ_STALL[0..15]
CPF_PERF_SEL_CPF_STAT_BUSY
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),0..15,max16,CPF_PERF_SEL_CPF_STAT_BUSY,/,(100),*,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSWriteUnitStalledCycles
desc=#ComputeShader#Number of GPU cycles the write unit is stalled.
type=gpa_float64
usage=cycles
[GLGfx10]
GL2C*_PERF_SEL_MC_WRREQ_STALL[0..15]
SPI_PERF_CSGN_NUM_THREADGROUPS
SPI_PERF_CSN_NUM_THREADGROUPS
eqn=(0),0..15,max16,SPI_PERF_CSGN_NUM_THREADGROUPS,SPI_PERF_CSN_NUM_THREADGROUPS,+,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL2C*_PERF_SEL_MC_WRREQ_STALL[0..15]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),0..15,max16,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSGDSInsts
desc=#ComputeShader#The average number of GDS read or GDS write instructions executed per work item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx10]
SQ_CS_PERF_SEL_INSTS_GDS
SQ_CS_PERF_SEL_WAVES
eqn=(0),0,1,/,1,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_INSTS_GDS[0..1]
SQ_CS*_PERF_SEL_WAVES[0..1]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),(0),SQ_CS*_PERF_SEL_INSTS_GDS,sum2,SQ_CS*_PERF_SEL_WAVES,sum2,/,SQ_CS*_PERF_SEL_WAVES,sum2,ifnotzero,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSLDSInsts
desc=#ComputeShader#The average number of LDS read/write instructions executed per work-item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx10]
SQ_CS_PERF_SEL_INSTS_LDS
SQ_CS_PERF_SEL_WAVES
eqn=(0),0,1,/,1,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_INSTS_LDS[0..1]
SQ_CS*_PERF_SEL_WAVES[0..1]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),(0),SQ_CS*_PERF_SEL_INSTS_LDS,sum2,SQ_CS*_PERF_SEL_WAVES,sum2,/,SQ_CS*_PERF_SEL_WAVES,sum2,ifnotzero,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSALUStalledByLDS
desc=#ComputeShader#The percentage of GPUTime ALU units are stalled by the LDS input queue being full or the output queue being not ready. If there are LDS bank conflicts, reduce them. Otherwise, try reducing the number of LDS accesses if possible. Value range: 0% (optimal) to 100% (bad).
type=gpa_float64
usage=percentage
[GLGfx10]
SQ_CS_PERF_SEL_WAIT_INST_LDS
SQ_CS_PERF_SEL_WAVES
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=(0),0,1,/,2,/,NUM_SHADER_ENGINES,/,(100),*,1,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_WAIT_INST_LDS[0..1]
SQ_CS*_PERF_SEL_WAVES[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),(0),SQ_CS*_PERF_SEL_WAIT_INST_LDS,sum2,SQ_CS*_PERF_SEL_WAVES,sum2,/,CPF_PERF_SEL_CPF_STAT_BUSY,/,NUM_SHADER_ENGINES,/,(100),*,SQ_CS*_PERF_SEL_WAVES,sum2,ifnotzero,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSALUStalledByLDSCycles
desc=#ComputeShader#Number of GPU cycles the ALU units are stalled by the LDS input queue being full or the output queue being not ready. If there are LDS bank conflicts, reduce them. Otherwise, try reducing the number of LDS accesses if possible.
type=gpa_float64
usage=cycles
[GLGfx10]
SQ_CS_PERF_SEL_WAIT_INST_LDS
eqn=0,NUM_SHADER_ENGINES,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_PERF_SEL_WAIT_INST_LDS[0..1]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),0..1,sum2,NUM_SHADER_ENGINES,/,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSLDSBankConflict
desc=#ComputeShader#The percentage of GPUTime LDS is stalled by bank conflicts. Value range: 0% (optimal) to 100% (bad).
type=gpa_float64
usage=percentage
[GLGfx10]
SQ_CS_SQC_PERF_SEL_LDS_BANK_CONFLICT
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,1,/,NUM_SIMDS,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_SQC_PERF_SEL_LDS_BANK_CONFLICT[0..1]
CPF_PERF_SEL_CPF_STAT_BUSY
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),SQ_CS*_SQC_PERF_SEL_LDS_BANK_CONFLICT,sum2,CPF_PERF_SEL_CPF_STAT_BUSY,/,NUM_SIMDS,/,(100),*,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=CSLDSBankConflictCycles
desc=#ComputeShader#Number of GPU cycles the LDS is stalled by bank conflicts. Value range: 0 (optimal) to GPUBusyCycles (bad).
type=gpa_float64
usage=cycles
[GLGfx10]
SQ_CS_SQC_PERF_SEL_LDS_BANK_CONFLICT
eqn=0,NUM_SIMDS,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ_CS*_SQC_PERF_SEL_LDS_BANK_CONFLICT[0..1]
SPI*_PERF_CSGN_NUM_THREADGROUPS[0..1]
SPI*_PERF_CSN_NUM_THREADGROUPS[0..1]
eqn=(0),0..1,sum2,NUM_SIMDS,/,SPI*_PERF_CSGN_NUM_THREADGROUPS,SPI*_PERF_CSN_NUM_THREADGROUPS,sum4,ifnotzero

name=TexUnitBusy
desc=#Timing#The percentage of GPUTime the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.
type=gpa_float64
usage=percentage
[GLGfx10]
TA*_PERF_SEL_TA_BUSY[0..15]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..15,max16,16,/,NUM_SHADER_ARRAYS,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TA*_PERF_SEL_TA_BUSY[0..39]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..39,max40,40,/,(100),*

name=TexUnitBusyCycles
desc=#Timing#Number of GPU cycles the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.
type=gpa_float64
usage=cycles
[GLGfx10]
TA*_PERF_SEL_TA_BUSY[0..15]
eqn=0..15,max16,NUM_SHADER_ARRAYS,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TA*_PERF_SEL_TA_BUSY[0..39]
eqn=0..39,max40

name=TexTriFilteringPct
desc=#TextureUnit#Percentage of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).
type=gpa_float64
usage=percentage
[GLGfx10]
TA*_PERF_SEL_MIP_2_CYCLE_PIXELS[0..15]
TA*_PERF_SEL_MIP_1_CYCLE_PIXELS[0..15]
eqn=0..15,sum16,16..31,sum16,0..15,sum16,+,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TA*_PERF_SEL_MIP_2_CYCLE_PIXELS[0..39]
TA*_PERF_SEL_MIP_1_CYCLE_PIXELS[0..39]
eqn=0..39,sum40,40..79,sum40,0..39,sum40,+,/,(100),*

name=TexTriFilteringCount
desc=#TextureUnit#Count of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).
type=gpa_float64
usage=items
[GLGfx10]
TA*_PERF_SEL_MIP_2_CYCLE_PIXELS[0..15]
eqn=0..15,sum16
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TA*_PERF_SEL_MIP_2_CYCLE_PIXELS[0..39]
eqn=0..39,sum40

name=NoTexTriFilteringCount
desc=#TextureUnit#Count of pixels that did not receive trilinear filtering.
type=gpa_float64
usage=items
[GLGfx10]
TA*_PERF_SEL_MIP_1_CYCLE_PIXELS[0..15]
eqn=0..15,sum16
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TA*_PERF_SEL_MIP_1_CYCLE_PIXELS[0..39]
eqn=0..39,sum40

name=TexVolFilteringPct
desc=#TextureUnit#Percentage of pixels that received volume filtering.
type=gpa_float64
usage=percentage
[GLGfx10]
TA*_PERF_SEL_VOL_2_CYCLE_PIXELS[0..15]
TA*_PERF_SEL_VOL_1_CYCLE_PIXELS[0..15]
eqn=0..15,sum16,16..31,sum16,0..15,sum16,+,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TA*_PERF_SEL_VOL_2_CYCLE_PIXELS[0..39]
TA*_PERF_SEL_VOL_1_CYCLE_PIXELS[0..39]
eqn=0..39,sum40,40..79,sum40,0..39,sum40,+,/,(100),*

name=TexVolFilteringCount
desc=#TextureUnit#Count of pixels that received volume filtering.
type=gpa_float64
usage=items
[GLGfx10]
TA*_PERF_SEL_VOL_2_CYCLE_PIXELS[0..15]
eqn=0..15,sum16
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TA*_PERF_SEL_VOL_2_CYCLE_PIXELS[0..39]
eqn=0..39,sum40

name=NoTexVolFilteringCount
desc=#TextureUnit#Count of pixels that did not receive volume filtering.
type=gpa_float64
usage=items
[GLGfx10]
TA*_PERF_SEL_VOL_1_CYCLE_PIXELS[0..15]
eqn=0..15,sum16
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TA*_PERF_SEL_VOL_1_CYCLE_PIXELS[0..39]
eqn=0..39,sum40

name=TexAveAnisotropy
desc=#TextureUnit#The average degree of anisotropy applied. A number between 1 and 16. The anisotropic filtering algorithm only applies samples where they are required (e.g. there will be no extra anisotropic samples if the view vector is perpendicular to the surface) so this can be much lower than the requested anisotropy.
type=gpa_float64
usage=Items
[GLGfx10]
TA*_PERF_SEL_ANISO_1_CYCLE_QUADS[0..15]
TA*_PERF_SEL_ANISO_2_CYCLE_QUADS[0..15]
TA*_PERF_SEL_ANISO_4_CYCLE_QUADS[0..15]
TA*_PERF_SEL_ANISO_6_CYCLE_QUADS[0..15]
TA*_PERF_SEL_ANISO_8_CYCLE_QUADS[0..15]
TA*_PERF_SEL_ANISO_10_CYCLE_QUADS[0..15]
TA*_PERF_SEL_ANISO_12_CYCLE_QUADS[0..15]
TA*_PERF_SEL_ANISO_14_CYCLE_QUADS[0..15]
TA*_PERF_SEL_ANISO_16_CYCLE_QUADS[0..15]
eqn=0..15,sum16,(2),16..31,sum16,*,+,(4),32..47,sum16,*,+,(6),48..63,sum16,*,+,(8),64..79,sum16,*,+,(10),80..95,sum16,*,+,(12),96..111,sum16,*,+,(14),112..127,sum16,*,+,(16),128..143,sum16,*,+,0..15,sum16,16..31,sum16,+,32..47,sum16,+,48..63,sum16,+,64..79,sum16,+,80..95,sum16,+,96..111,sum16,+,112..127,sum16,+,128..143,sum16,+,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TA*_PERF_SEL_ANISO_1_CYCLE_QUADS[0..39]
TA*_PERF_SEL_ANISO_2_CYCLE_QUADS[0..39]
TA*_PERF_SEL_ANISO_4_CYCLE_QUADS[0..39]
TA*_PERF_SEL_ANISO_6_CYCLE_QUADS[0..39]
TA*_PERF_SEL_ANISO_8_CYCLE_QUADS[0..39]
TA*_PERF_SEL_ANISO_10_CYCLE_QUADS[0..39]
TA*_PERF_SEL_ANISO_12_CYCLE_QUADS[0..39]
TA*_PERF_SEL_ANISO_14_CYCLE_QUADS[0..39]
TA*_PERF_SEL_ANISO_16_CYCLE_QUADS[0..39]
eqn=0..39,sum40,(2),40..79,sum40,*,+,(4),80..119,sum40,*,+,(6),120..159,sum40,*,+,(8),160..199,sum40,*,+,(10),200..239,sum40,*,+,(12),240..279,sum40,*,+,(14),280..319,sum40,*,+,(16),320..359,sum40,*,+,0..39,sum40,40..79,sum40,+,80..119,sum40,+,120..159,sum40,+,160..199,sum40,+,200..239,sum40,+,240..279,sum40,+,280..319,sum40,+,320..359,sum40,+,/

name=DepthStencilTestBusy
desc=#Timing#Percentage of time GPU spent performing depth and stencil tests relative to GPUBusy.
type=gpa_float64
usage=percentage
[GLGfx10]
DB*_PERF_SEL_OP_PIPE_BUSY[0..3]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,1,max,2,max,3,max,4,/,NUM_SHADER_ENGINES,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_OP_PIPE_BUSY[0..15]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..15,max16,16,/,(100),*

name=DepthStencilTestBusyCount
desc=#Timing#Number of GPU cycles spent performing depth and stencil tests.
type=gpa_float64
usage=cycles
[GLGfx10]
DB*_PERF_SEL_OP_PIPE_BUSY[0..3]
eqn=0,1,max,2,max,3,max,NUM_SHADER_ENGINES,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_OP_PIPE_BUSY[0..15]
eqn=0..15,max16

name=HiZTilesAccepted
desc=#DepthAndStencil#Percentage of tiles accepted by HiZ and will be rendered to the depth or color buffers.
type=gpa_float64
usage=percentage
[GLGfx10]
DB*_PERF_SEL_DB_SC_TILE_CULLED[0..3]
DB*_PERF_SEL_SC_DB_TILE_TILES[0..3]
eqn=0..3,sum4,4..7,sum4,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_DB_SC_TILE_CULLED[0..15]
DB*_PERF_SEL_SC_DB_TILE_TILES[0..15]
eqn=0..15,sum16,16..31,sum16,/,(100),*

name=HiZTilesAcceptedCount
desc=#DepthAndStencil#Count of tiles accepted by HiZ and will be rendered to the depth or color buffers.
type=gpa_float64
usage=items
[GLGfx10]
DB*_PERF_SEL_DB_SC_TILE_CULLED[0..3]
eqn=0..3,sum4
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_DB_SC_TILE_CULLED[0..15]
eqn=0..15,sum16

name=HiZTilesRejectedCount
desc=#DepthAndStencil#Count of tiles not accepted by HiZ.
type=gpa_float64
usage=items
[GLGfx10]
DB*_PERF_SEL_SC_DB_TILE_TILES[0..3]
eqn=0..3,sum4
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_SC_DB_TILE_TILES[0..15]
eqn=0..15,sum16

name=PreZTilesDetailCulled
desc=#DepthAndStencil#Percentage of tiles rejected because the associated prim had no contributing area.
type=gpa_float64
usage=percentage
[GLGfx10]
DB*_PERF_SEL_SC_DB_TILE_TILES[0..3]
DB*_PERF_SEL_SC_DB_QUAD_KILLED_TILES[0..3]
eqn=4..7,sum4,0..3,sum4,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_SC_DB_TILE_TILES[0..15]
DB*_PERF_SEL_SC_DB_QUAD_KILLED_TILES[0..15]
eqn=16..31,sum16,0..15,sum16,/,(100),*

name=PreZTilesDetailCulledCount
desc=#DepthAndStencil#Count of tiles rejected because the associated primitive had no contributing area.
type=gpa_float64
usage=items
[GLGfx10]
DB*_PERF_SEL_SC_DB_QUAD_KILLED_TILES[0..3]
eqn=0..3,sum4
[DX12Gfx10]
[VKGfx10]
[DX11Gfx10]
DB*_PERF_SEL_SC_DB_QUAD_KILLED_TILES[0..15]
eqn=0..15,sum16

name=PreZTilesDetailSurvivingCount
desc=#DepthAndStencil#Count of tiles surviving because the associated primitive had contributing area.
type=gpa_float64
usage=items
[GLGfx10]
DB*_PERF_SEL_SC_DB_TILE_TILES[0..3]
eqn=0..3,sum4
[DX12Gfx10]
[VKGfx10]
[DX11Gfx10]
DB*_PERF_SEL_SC_DB_TILE_TILES[0..15]
eqn=0..15,sum16

name=HiZQuadsCulled
desc=#DepthAndStencil#Percentage of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.
type=gpa_float64
usage=percentage
[GLGfx10]
PA_SC*_QZ0_QUAD_COUNT[0..1]
PA_SC*_QZ1_QUAD_COUNT[0..1]
PA_SC*_QZ2_QUAD_COUNT[0..1]
PA_SC*_QZ3_QUAD_COUNT[0..1]
PA_SC*_P0_HIZ_QUAD_COUNT[0..1]
PA_SC*_P1_HIZ_QUAD_COUNT[0..1]
PA_SC*_P2_HIZ_QUAD_COUNT[0..1]
PA_SC*_P3_HIZ_QUAD_COUNT[0..1]
eqn=0..7,sum8,8..15,sum8,-,(0),max,0..7,sum8,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SC*_QZ0_QUAD_COUNT[0..7]
PA_SC*_QZ1_QUAD_COUNT[0..7]
PA_SC*_QZ2_QUAD_COUNT[0..7]
PA_SC*_QZ3_QUAD_COUNT[0..7]
PA_SC*_P0_HIZ_QUAD_COUNT[0..7]
PA_SC*_P1_HIZ_QUAD_COUNT[0..7]
PA_SC*_P2_HIZ_QUAD_COUNT[0..7]
PA_SC*_P3_HIZ_QUAD_COUNT[0..7]
eqn=0..31,sum32,32..63,sum32,-,(0),max,0..31,sum32,/,(100),*

name=HiZQuadsCulledCount
desc=#DepthAndStencil#Count of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.
type=gpa_float64
usage=items
[GLGfx10]
PA_SC*_QZ0_QUAD_COUNT[0..1]
PA_SC*_QZ1_QUAD_COUNT[0..1]
PA_SC*_QZ2_QUAD_COUNT[0..1]
PA_SC*_QZ3_QUAD_COUNT[0..1]
PA_SC*_P0_HIZ_QUAD_COUNT[0..1]
PA_SC*_P1_HIZ_QUAD_COUNT[0..1]
PA_SC*_P2_HIZ_QUAD_COUNT[0..1]
PA_SC*_P3_HIZ_QUAD_COUNT[0..1]
eqn=0..7,sum8,8..15,sum8,-,(0),max
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SC*_QZ0_QUAD_COUNT[0..7]
PA_SC*_QZ1_QUAD_COUNT[0..7]
PA_SC*_QZ2_QUAD_COUNT[0..7]
PA_SC*_QZ3_QUAD_COUNT[0..7]
PA_SC*_P0_HIZ_QUAD_COUNT[0..7]
PA_SC*_P1_HIZ_QUAD_COUNT[0..7]
PA_SC*_P2_HIZ_QUAD_COUNT[0..7]
PA_SC*_P3_HIZ_QUAD_COUNT[0..7]
eqn=0..31,sum32,32..63,sum32,-,(0),max

name=HiZQuadsAcceptedCount
desc=#DepthAndStencil#Count of quads that did continue on in the pipeline after HiZ.
type=gpa_float64
usage=items
[GLGfx10]
PA_SC*_P0_HIZ_QUAD_COUNT[0..1]
PA_SC*_P1_HIZ_QUAD_COUNT[0..1]
PA_SC*_P2_HIZ_QUAD_COUNT[0..1]
PA_SC*_P3_HIZ_QUAD_COUNT[0..1]
eqn=0..7,sum8
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SC*_P0_HIZ_QUAD_COUNT[0..7]
PA_SC*_P1_HIZ_QUAD_COUNT[0..7]
PA_SC*_P2_HIZ_QUAD_COUNT[0..7]
PA_SC*_P3_HIZ_QUAD_COUNT[0..7]
eqn=0..31,sum32

name=PreZQuadsCulled
desc=#DepthAndStencil#Percentage of quads rejected based on the detailZ and earlyZ tests.
type=gpa_float64
usage=percentage
[GLGfx10]
PA_SC*_QZ0_QUAD_COUNT[0..1]
PA_SC*_QZ1_QUAD_COUNT[0..1]
PA_SC*_QZ2_QUAD_COUNT[0..1]
PA_SC*_QZ3_QUAD_COUNT[0..1]
PA_SC*_EARLYZ_QUAD_COUNT[0..1]
PA_SC*_P0_HIZ_QUAD_COUNT[0..1]
PA_SC*_P1_HIZ_QUAD_COUNT[0..1]
PA_SC*_P2_HIZ_QUAD_COUNT[0..1]
PA_SC*_P3_HIZ_QUAD_COUNT[0..1]
eqn=10..17,sum8,8,9,+,-,(0),max,0..7,sum8,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SC*_QZ0_QUAD_COUNT[0..7]
PA_SC*_QZ1_QUAD_COUNT[0..7]
PA_SC*_QZ2_QUAD_COUNT[0..7]
PA_SC*_QZ3_QUAD_COUNT[0..7]
PA_SC*_EARLYZ_QUAD_COUNT[0..7]
PA_SC*_P0_HIZ_QUAD_COUNT[0..7]
PA_SC*_P1_HIZ_QUAD_COUNT[0..7]
PA_SC*_P2_HIZ_QUAD_COUNT[0..7]
PA_SC*_P3_HIZ_QUAD_COUNT[0..7]
eqn=40..71,sum32,32..39,sum8,-,(0),max,0..31,sum32,/,(100),*

name=PreZQuadsCulledCount
desc=#DepthAndStencil#Count of quads rejected based on the detailZ and earlyZ tests.
type=gpa_float64
usage=items
[GLGfx10]
PA_SC*_QZ0_QUAD_COUNT[0..1]
PA_SC*_QZ1_QUAD_COUNT[0..1]
PA_SC*_QZ2_QUAD_COUNT[0..1]
PA_SC*_QZ3_QUAD_COUNT[0..1]
PA_SC*_EARLYZ_QUAD_COUNT[0..1]
PA_SC*_P0_HIZ_QUAD_COUNT[0..1]
PA_SC*_P1_HIZ_QUAD_COUNT[0..1]
PA_SC*_P2_HIZ_QUAD_COUNT[0..1]
PA_SC*_P3_HIZ_QUAD_COUNT[0..1]
eqn=0..7,sum8,8,9,+,-,10..17,sum8,-,(0),max
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SC*_QZ0_QUAD_COUNT[0..7]
PA_SC*_QZ1_QUAD_COUNT[0..7]
PA_SC*_QZ2_QUAD_COUNT[0..7]
PA_SC*_QZ3_QUAD_COUNT[0..7]
PA_SC*_EARLYZ_QUAD_COUNT[0..7]
PA_SC*_P0_HIZ_QUAD_COUNT[0..7]
PA_SC*_P1_HIZ_QUAD_COUNT[0..7]
PA_SC*_P2_HIZ_QUAD_COUNT[0..7]
PA_SC*_P3_HIZ_QUAD_COUNT[0..7]
eqn=0..31,sum32,32..39,sum8,-,40..71,sum32,-,(0),max

name=PreZQuadsSurvivingCount
desc=#DepthAndStencil#Count of quads surviving detailZ and earlyZ tests.
type=gpa_float64
usage=items
[GLGfx10]
PA_SC*_EARLYZ_QUAD_COUNT[0..1]
PA_SC*_P0_HIZ_QUAD_COUNT[0..1]
PA_SC*_P1_HIZ_QUAD_COUNT[0..1]
PA_SC*_P2_HIZ_QUAD_COUNT[0..1]
PA_SC*_P3_HIZ_QUAD_COUNT[0..1]
eqn=2..9,sum8,0,1,+,-,(0),max
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SC*_EARLYZ_QUAD_COUNT[0..7]
PA_SC*_P0_HIZ_QUAD_COUNT[0..7]
PA_SC*_P1_HIZ_QUAD_COUNT[0..7]
PA_SC*_P2_HIZ_QUAD_COUNT[0..7]
PA_SC*_P3_HIZ_QUAD_COUNT[0..7]
eqn=8..39,sum32,0..7,sum8,-,(0),max

name=PostZQuads
desc=#DepthAndStencil#Percentage of quads for which the pixel shader will run and may be postZ tested.
type=gpa_float64
usage=percentage
[GLGfx10]
PA_SC*_EARLYZ_QUAD_COUNT[0..1]
PA_SC*_QZ0_QUAD_COUNT[0..1]
PA_SC*_QZ1_QUAD_COUNT[0..1]
PA_SC*_QZ2_QUAD_COUNT[0..1]
PA_SC*_QZ3_QUAD_COUNT[0..1]
eqn=0,1,+,2..9,sum8,/,(100),*,(100),min
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SC*_EARLYZ_QUAD_COUNT[0..7]
PA_SC*_QZ0_QUAD_COUNT[0..7]
PA_SC*_QZ1_QUAD_COUNT[0..7]
PA_SC*_QZ2_QUAD_COUNT[0..7]
PA_SC*_QZ3_QUAD_COUNT[0..7]
eqn=0..7,sum8,8..39,sum32,/,(100),*

name=PostZQuadCount
desc=#DepthAndStencil#Count of quads for which the pixel shader will run and may be postZ tested.
type=gpa_float64
usage=items
[GLGfx10]
PA_SC*_EARLYZ_QUAD_COUNT[0..1]
eqn=0,1,+
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
PA_SC*_EARLYZ_QUAD_COUNT[0..7]
eqn=0..7,sum8

name=PreZSamplesPassing
desc=#DepthAndStencil#Number of samples tested for Z before shading and passed.
type=gpa_float64
usage=items
[GLGfx10]
DB*_PERF_SEL_PREZ_SAMPLES_PASSING_Z[0..3]
eqn=0..3,sum4
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_PREZ_SAMPLES_PASSING_Z[0..15]
eqn=0..15,sum16

name=PreZSamplesFailingS
desc=#DepthAndStencil#Number of samples tested for Z before shading and failed stencil test.
type=gpa_float64
usage=items
[GLGfx10]
DB*_PERF_SEL_PREZ_SAMPLES_FAILING_S[0..3]
eqn=0..3,sum4
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_PREZ_SAMPLES_FAILING_S[0..15]
eqn=0..15,sum16

name=PreZSamplesFailingZ
desc=#DepthAndStencil#Number of samples tested for Z before shading and failed Z test.
type=gpa_float64
usage=items
[GLGfx10]
DB*_PERF_SEL_PREZ_SAMPLES_FAILING_Z[0..3]
eqn=0..3,sum4
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_PREZ_SAMPLES_FAILING_Z[0..15]
eqn=0..15,sum16

name=PostZSamplesPassing
desc=#DepthAndStencil#Number of samples tested for Z after shading and passed.
type=gpa_float64
usage=items
[GLGfx10]
DB*_PERF_SEL_POSTZ_SAMPLES_PASSING_Z[0..3]
eqn=0..3,sum4
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_POSTZ_SAMPLES_PASSING_Z[0..15]
eqn=0..15,sum16

name=PostZSamplesFailingS
desc=#DepthAndStencil#Number of samples tested for Z after shading and failed stencil test.
type=gpa_float64
usage=items
[GLGfx10]
DB*_PERF_SEL_POSTZ_SAMPLES_FAILING_S[0..3]
eqn=0..3,sum4
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_POSTZ_SAMPLES_FAILING_S[0..15]
eqn=0..15,sum16

name=PostZSamplesFailingZ
desc=#DepthAndStencil#Number of samples tested for Z after shading and failed Z test.
type=gpa_float64
usage=items
[GLGfx10]
DB*_PERF_SEL_POSTZ_SAMPLES_FAILING_Z[0..3]
eqn=0..3,sum4
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_POSTZ_SAMPLES_FAILING_Z[0..15]
eqn=0..15,sum16

name=ZUnitStalled
desc=#DepthAndStencil#The percentage of GPUTime the depth buffer spends waiting for the color buffer to be ready to accept data. High figures here indicate a bottleneck in color buffer operations.
type=gpa_float64
usage=percentage
[GLGfx10]
DB*_PERF_SEL_DB_CB_LQUAD_STALLS[0..3]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0,1,max,2,max,3,max,4,/,NUM_SHADER_ENGINES,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_DB_CB_LQUAD_STALLS[0..15]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..15,max16,16,/,(100),*

name=ZUnitStalledCycles
desc=#DepthAndStencil#Number of GPU cycles the depth buffer spends waiting for the color buffer to be ready to accept data. Larger numbers indicate a bottleneck in color buffer operations.
type=gpa_float64
usage=cycles
[GLGfx10]
DB*_PERF_SEL_DB_CB_LQUAD_STALLS[0..3]
eqn=0,1,max,2,max,3,max,NUM_SHADER_ENGINES,/
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_DB_CB_LQUAD_STALLS[0..15]
eqn=0..15,max16

name=DBMemRead
desc=#DepthAndStencil#Number of bytes read from the depth buffer.
type=gpa_float64
usage=bytes
[GLGfx10]
DB*_PERF_SEL_TILE_RD_SENDS[0..3]
DB*_PERF_SEL_QUAD_RD_32BYTE_REQS[0..3]
eqn=0..3,sum4,(256),*,4..7,sum4,(32),*,+
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_TILE_RD_SENDS[0..15]
DB*_PERF_SEL_QUAD_RD_32BYTE_REQS[0..15]
eqn=0..15,sum16,(256),*,16..31,sum16,(32),*,+

name=DBMemWritten
desc=#DepthAndStencil#Number of bytes written to the depth buffer.
type=gpa_float64
usage=bytes
[GLGfx10]
DB*_PERF_SEL_TILE_WR_SENDS[0..3]
DB*_PERF_SEL_QUAD_WR_SENDS[0..3]
eqn=0..3,sum4,(32),*,4..7,sum4,(32),*,+
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
DB*_PERF_SEL_TILE_WR_SENDS[0..15]
DB*_PERF_SEL_QUAD_WR_SENDS[0..15]
eqn=0..15,sum16,(32),*,16..31,sum16,(32),*,+

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The following are new on R8xx
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;Remove this since mostly it is duplicate of the psPixelsOut and the value is not correct when profiling alone.
;name=PixelsAtCB
;desc=#ColorBuffer#Number of pixels drawn into the the color buffer.
;type=gpa_float64
;usage=items
;[GLGfx10]
;CB0_PERF_SEL_DRAWN_PIXEL
;CB1_PERF_SEL_DRAWN_PIXEL
;[DX11Gfx10]
;[DX12Gfx10]
;[VKGfx10]
;CB0_PERF_SEL_DRAWN_PIXEL
;CB1_PERF_SEL_DRAWN_PIXEL
;eqn=0,1,+

name=CBMemRead
desc=#ColorBuffer#Number of bytes read from the color buffer.
type=gpa_float64
usage=bytes
[GLGfx10]
CB*_PERF_SEL_CC_MC_READ_REQUEST[0..3]
eqn=0..3,sum4,(32),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
CB*_PERF_SEL_CC_MC_READ_REQUEST[0..15]
eqn=0..15,sum16,(32),*

name=CBColorAndMaskRead
desc=#ColorBuffer#Total number of bytes read from the color and mask buffers.
type=gpa_float64
usage=bytes
[GLGfx10]
CB*_PERF_SEL_FC_MC_DCC_READ_REQUEST[0..3]
CB*_PERF_SEL_CM_MC_READ_REQUEST[0..3]
CB*_PERF_SEL_FC_MC_READ_REQUEST[0..3]
CB*_PERF_SEL_CC_MC_READ_REQUEST[0..3]
eqn=0..15,sum16,(32),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
CB*_PERF_SEL_FC_MC_DCC_READ_REQUEST[0..15]
CB*_PERF_SEL_CM_MC_READ_REQUEST[0..15]
CB*_PERF_SEL_FC_MC_READ_REQUEST[0..15]
CB*_PERF_SEL_CC_MC_READ_REQUEST[0..15]
eqn=0..63,sum64,(32),*

name=CBMemWritten
desc=#ColorBuffer#Number of bytes written to the color buffer.
type=gpa_float64
usage=bytes
[GLGfx10]
CB*_PERF_SEL_CC_MC_WRITE_REQUEST[0..3]
eqn=0..3,sum4,(32),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
CB*_PERF_SEL_CC_MC_WRITE_REQUEST[0..15]
eqn=0..15,sum16,(32),*

name=CBColorAndMaskWritten
desc=#ColorBuffer#Total number of bytes written to the color and mask buffers.
type=gpa_float64
usage=bytes
[GLGfx10]
CB*_PERF_SEL_FC_MC_DCC_WRITE_REQUEST[0..3]
CB*_PERF_SEL_CM_MC_WRITE_REQUEST[0..3]
CB*_PERF_SEL_FC_MC_WRITE_REQUEST[0..3]
CB*_PERF_SEL_CC_MC_WRITE_REQUEST[0..3]
eqn=0..15,sum16,(32),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
CB*_PERF_SEL_FC_MC_DCC_WRITE_REQUEST[0..15]
CB*_PERF_SEL_CM_MC_WRITE_REQUEST[0..15]
CB*_PERF_SEL_FC_MC_WRITE_REQUEST[0..15]
CB*_PERF_SEL_CC_MC_WRITE_REQUEST[0..15]
eqn=0..63,sum64,(32),*

name=CBSlowPixelPct
desc=#ColorBuffer#Percentage of pixels written to the color buffer using a half-rate or quarter-rate format.
type=gpa_float64
usage=percentage
[GLGfx10]
CB*_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT[0..3]
CB*_PERF_SEL_DRAWN_QUAD_FRAGMENT[0..3]
eqn=0..3,sum4,4..7,sum4,/,(100),*,(100),min
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
CB*_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT[0..15]
CB*_PERF_SEL_DRAWN_QUAD_FRAGMENT[0..15]
eqn=0..15,sum16,16..31,sum16,/,(100),*,(100),min

name=CBSlowPixelCount
desc=#ColorBuffer#Number of pixels written to the color buffer using a half-rate or quarter-rate format.
type=gpa_float64
usage=items
[GLGfx10]
CB*_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT[0..3]
eqn=0..3,sum4
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
CB*_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT[0..15]
eqn=0..15,sum16

; Cache counters
;
; L0 data (TCP) and L1 (GL1) provide only a requests and misses counter. Scalar and Instruction caches (SQC) and L2 (GL2C) all provide a requests,
; hits, and misses counter. For L2CacheHit, we are intentionally using similar counters and formulas to those used in L0CacheHit and L1CacheHit.
; By using the "MISS" counter in all cases, we 1) have a consistent formula between L0, L1 and L2 and 2) the scheduler will ensure all the L2Cache
; hardware counters are in the same pass (this won't be guaranteed if L2CacheHit uses "HIT" and L2CacheMiss uses "MISS"). For InstCacheHit and
; ScalarCacheHit, we use HITS, MISSES and MISSES_DUPLICATE, to calculate the number of requests. This is done to ensure that the number of requests
; always equals the number of hits + misses. There are small variances in the data where sometimes the number of requests is slightly different
; than the number of hits + misses. This is just "noise", but by using hits + misses, we ensure that the data always adds up.

name=L0CacheHit
desc=#MemoryCache#The percentage of read requests that hit the data in the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).
type=gpa_float64
usage=percentage
[GLGfx10]
TCP*_PERF_SEL_REQ[0..15]
TCP*_PERF_SEL_REQ_MISS[0..15]
eqn=(0),(1),16..31,sum16,0..15,sum16,/,-,(100),*,0..15,sum16,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TCP*_PERF_SEL_REQ[0..39]
TCP*_PERF_SEL_REQ_MISS[0..39]
eqn=(0),(1),40..79,sum40,0..39,sum40,/,-,(100),*,0..39,sum40,ifnotzero

name=L0CacheRequestCount
desc=#MemoryCache#The number of read requests made to the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.
type=gpa_float64
usage=items
[GLGfx10]
TCP*_PERF_SEL_REQ[0..15]
eqn=0..15,sum16
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TCP*_PERF_SEL_REQ[0..39]
eqn=0..39,sum40

name=L0CacheHitCount
desc=#MemoryCache#The number of read requests which result in a cache hit from the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.
type=gpa_float64
usage=items
[GLGfx10]
TCP*_PERF_SEL_REQ[0..15]
TCP*_PERF_SEL_REQ_MISS[0..15]
eqn=0..15,sum16,16..31,sum16,-
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TCP*_PERF_SEL_REQ[0..39]
TCP*_PERF_SEL_REQ_MISS[0..39]
eqn=0..39,sum40,40..79,sum40,-

name=L0CacheMissCount
desc=#MemoryCache#The number of read requests which result in a cache miss from the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.
type=gpa_float64
usage=items
[GLGfx10]
TCP*_PERF_SEL_REQ_MISS[0..15]
eqn=0..15,sum16
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TCP*_PERF_SEL_REQ_MISS[0..39]
eqn=0..39,sum40

name=ScalarCacheHit
desc=#MemoryCache#The percentage of read requests made from executing shader code that hit the data in the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size. Value range: 0% (no hit) to 100% (optimal).
type=gpa_float64
usage=percentage
;[GLGfx10]
;SQ_SQC_PERF_SEL_DCACHE_HITS
;SQ_SQC_PERF_SEL_DCACHE_MISSES
;SQ_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE
;eqn=(0),0,0,1,+,2,+,/,(100),*,0,1,+,2,+,ifnotzero
;[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ*_SQC_PERF_SEL_DCACHE_HITS[0..1]
SQ*_SQC_PERF_SEL_DCACHE_MISSES[0..1]
SQ*_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE[0..1]
eqn=(0),0..1,sum2,0..5,sum6,/,(100),*,0..5,sum6,ifnotzero

name=ScalarCacheRequestCount
desc=#MemoryCache#The number of read requests made from executing shader code to the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size.
type=gpa_float64
usage=items
;[GLGfx10]
;SQ_SQC_PERF_SEL_DCACHE_HITS
;SQ_SQC_PERF_SEL_DCACHE_MISSES
;SQ_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE
;eqn=0,1,+,2,+
;[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ*_SQC_PERF_SEL_DCACHE_HITS[0..1]
SQ*_SQC_PERF_SEL_DCACHE_MISSES[0..1]
SQ*_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE[0..1]
eqn=0..5,sum6

name=ScalarCacheHitCount
desc=#MemoryCache#The number of read requests made from executing shader code which result in a cache hit from the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size.
type=gpa_float64
usage=items
;[GLGfx10]
;SQ_SQC_PERF_SEL_DCACHE_HITS
;eqn=0
;[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ*_SQC_PERF_SEL_DCACHE_HITS[0..1]
eqn=0..1,sum2

name=ScalarCacheMissCount
desc=#MemoryCache#The number of read requests made from executing shader code which result in a cache miss from the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size.
type=gpa_float64
usage=items
;[GLGfx10]
;SQ_SQC_PERF_SEL_DCACHE_MISSES
;SQ_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE
;eqn=0,1,+
;[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ*_SQC_PERF_SEL_DCACHE_MISSES[0..1]
SQ*_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE[0..1]
eqn=0..3,sum4

name=InstCacheHit
desc=#MemoryCache#The percentage of read requests made that hit the data in the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size. Value range: 0% (no hit) to 100% (optimal).
type=gpa_float64
usage=percentage
;[GLGfx10]
;SQ_SQC_PERF_SEL_ICACHE_HITS
;SQ_SQC_PERF_SEL_ICACHE_MISSES
;SQ_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE
;eqn=(0),0,0,1,+,2,+,/,(100),*,0,1,+,2,+,ifnotzero
;[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ*_SQC_PERF_SEL_ICACHE_HITS[0..1]
SQ*_SQC_PERF_SEL_ICACHE_MISSES[0..1]
SQ*_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE[0..1]
eqn=(0),0..1,sum2,0..5,sum6,/,(100),*,0..5,sum6,ifnotzero

name=InstCacheRequestCount
desc=#MemoryCache#The number of read requests made to the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size.
type=gpa_float64
usage=items
;[GLGfx10]
;SQ_SQC_PERF_SEL_ICACHE_HITS
;SQ_SQC_PERF_SEL_ICACHE_MISSES
;SQ_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE
;eqn=0,1,+,2,+
;[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ*_SQC_PERF_SEL_ICACHE_HITS[0..1]
SQ*_SQC_PERF_SEL_ICACHE_MISSES[0..1]
SQ*_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE[0..1]
eqn=0..5,sum6

name=InstCacheHitCount
desc=#MemoryCache#The number of read requests which result in a cache hit from the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size.
type=gpa_float64
usage=items
;[GLGfx10]
;SQ_SQC_PERF_SEL_ICACHE_HITS
;eqn=0
;[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ*_SQC_PERF_SEL_ICACHE_HITS[0..1]
eqn=0..1,sum2

name=InstCacheMissCount
desc=#MemoryCache#The number of read requests which result in a cache miss from the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size.
type=gpa_float64
usage=items
;[GLGfx10]
;SQ_SQC_PERF_SEL_ICACHE_MISSES
;SQ_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE
;eqn=0,1,+
;[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
SQ*_SQC_PERF_SEL_ICACHE_MISSES[0..1]
SQ*_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE[0..1]
eqn=0..3,sum4

name=L1CacheHit
desc=#MemoryCache#The percentage of read or write requests that hit the data in the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).
type=gpa_float64
usage=percentage
[GLGfx10]
GL1C_PERF_SEL_REQ
GL1C_PERF_SEL_REQ_MISS
eqn=(0),(1),1,0,/,-,(100),*,0,ifnotzero
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL1C*_PERF_SEL_REQ[0..15]
GL1C*_PERF_SEL_REQ_MISS[0..15]
eqn=(0),(1),16..31,sum16,0..15,sum16,/,-,(100),*,0..15,sum16,ifnotzero

name=L1CacheRequestCount
desc=#MemoryCache#The number of read or write requests made to the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size.
type=gpa_float64
usage=items
[GLGfx10]
GL1C_PERF_SEL_REQ
eqn=0
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL1C*_PERF_SEL_REQ[0..15]
eqn=0..15,sum16

name=L1CacheHitCount
desc=#MemoryCache#The number of read or write requests which result in a cache hit from the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size.
type=gpa_float64
usage=items
[GLGfx10]
GL1C_PERF_SEL_REQ
GL1C_PERF_SEL_REQ_MISS
eqn=0,1,-
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL1C*_PERF_SEL_REQ[0..15]
GL1C*_PERF_SEL_REQ_MISS[0..15]
eqn=0..15,sum16,16..31,sum16,-

name=L1CacheMissCount
desc=#MemoryCache#The number of read or write requests which result in a cache miss from the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size.
type=gpa_float64
usage=items
[GLGfx10]
GL1C_PERF_SEL_REQ_MISS
eqn=0
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL1C*_PERF_SEL_REQ_MISS[0..15]
eqn=0..15,sum16

name=L2CacheHit
desc=#MemoryCache#The percentage of read or write requests that hit the data in the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).
type=gpa_float64
usage=percentage
[GLGfx103]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL2C*_PERF_SEL_REQ[0..15]
GL2C*_PERF_SEL_MISS[0..15]
eqn=(0),(1),16..31,sum16,0..15,sum16,/,-,(100),*,0..15,sum16,ifnotzero

name=L2CacheMiss
desc=#MemoryCache#The percentage of read or write requests that miss the data in the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size. Value range: 0% (optimal) to 100% (all miss).
type=gpa_float64
usage=percentage
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL2C*_PERF_SEL_MISS[0..15]
GL2C*_PERF_SEL_REQ[0..15]
eqn=0..15,sum16,16..31,sum16,/,(100),*

name=L2CacheRequestCount
desc=#MemoryCache#The number of read or write requests made to the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.
type=gpa_float64
usage=items
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL2C*_PERF_SEL_REQ[0..15]
eqn=0..15,sum16

name=L2CacheHitCount
desc=#MemoryCache#The number of read or write requests which result in a cache hit from the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.
type=gpa_float64
usage=items
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL2C*_PERF_SEL_REQ[0..15]
GL2C*_PERF_SEL_MISS[0..15]
eqn=0..15,sum16,16..31,sum16,-

name=L2CacheMissCount
desc=#MemoryCache#The number of read or write requests which result in a cache miss from the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.
type=gpa_float64
usage=items
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL2C*_PERF_SEL_MISS[0..15]
eqn=0..15,sum16

name=FetchSize
desc=#GlobalMemory#The total bytes fetched from the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.
type=gpa_float64
usage=bytes
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL2C*_PERF_SEL_EA_RDREQ_32B[0..15]
GL2C*_PERF_SEL_EA_RDREQ_64B[0..15]
GL2C*_PERF_SEL_EA_RDREQ_96B[0..15]
GL2C*_PERF_SEL_EA_RDREQ_128B[0..15]
eqn=0..15,sum16,(32),*,16..31,sum16,(64),*,32..47,sum16,(96),*,48..63,sum16,(128),*,sum4

name=WriteSize
desc=#GlobalMemory#The total bytes written to the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.
type=gpa_float64
usage=bytes
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL2C*_PERF_SEL_MC_WRREQ[0..15]
GL2C*_PERF_SEL_EA_WRREQ_64B[0..15]
eqn=0..15,sum16,16..31,sum16,-,(32),*,16..31,sum16,(64),*,+

name=MemUnitBusy
desc=#GlobalMemory#The percentage of GPUTime the memory unit is active. The result includes the stall time (MemUnitStalled). This is measured with all extra fetches and writes and any cache or memory effects taken into account. Value range: 0% to 100% (fetch-bound).
type=gpa_float64
usage=percentage
[GLGfx10]
TA*_PERF_SEL_TA_BUSY[0..15]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..15,max16,16,/,NUM_SHADER_ARRAYS,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TA*_PERF_SEL_TA_BUSY[0..39]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..39,max40,40,/,(100),*

name=MemUnitBusyCycles
desc=#GlobalMemory#Number of GPU cycles the memory unit is active. The result includes the stall time (MemUnitStalledCycles). This is measured with all extra fetches and writes and any cache or memory effects taken into account.
type=gpa_float64
usage=cycles
[GLGfx10]
TA*_PERF_SEL_TA_BUSY[0..15]
eqn=0..15,max16
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TA*_PERF_SEL_TA_BUSY[0..39]
eqn=0..39,max40

name=MemUnitStalled
desc=#GlobalMemory#The percentage of GPUTime the memory unit is stalled. Try reducing the number or size of fetches and writes if possible. Value range: 0% (optimal) to 100% (bad).
type=gpa_float64
usage=percentage
[GLGfx10]
TCP*_PERF_SEL_TCP_TA_REQ_STALL[0..15]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..15,max16,16,/,NUM_SHADER_ARRAYS,/,(100),*
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TCP*_PERF_SEL_TCP_TA_REQ_STALL[0..39]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..39,max40,40,/,(100),*

name=MemUnitStalledCycles
desc=#GlobalMemory#Number of GPU cycles the memory unit is stalled.
type=gpa_float64
usage=cycles
[GLGfx10]
TCP*_PERF_SEL_TCP_TA_REQ_STALL[0..9]
eqn=0..9,max10
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
TCP*_PERF_SEL_TCP_TA_REQ_STALL[0..39]
eqn=0..39,max40

name=WriteUnitStalled
desc=#GlobalMemory#The percentage of GPUTime the Write unit is stalled. Value range: 0% to 100% (bad).
type=gpa_float64
usage=percentage
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL2C*_PERF_SEL_MC_WRREQ_STALL[0..15]
CPF_PERF_SEL_CPF_STAT_BUSY
eqn=0..15,max16,16,/,(100),*

name=WriteUnitStalledCycles
desc=#GlobalMemory#Number of GPU cycles the Write unit is stalled.
type=gpa_float64
usage=cycles
[GLGfx10]
[DX11Gfx10]
[DX12Gfx10]
[VKGfx10]
GL2C*_PERF_SEL_MC_WRREQ_STALL[0..15]
eqn=0..15,max16

name=LocalVidMemBytes
desc=#GlobalMemory#Number of bytes read from or written to local video memory
type=gpa_float64
usage=bytes
[DX12Gfx10]
[VKGfx10]
GCEA*_PERF_SEL_SARB_DRAM_SIZED_REQUESTS[0..15]
eqn=0..15,sum16,(32),*

name=PcieBytes
desc=#GlobalMemory#Number of bytes sent and received over the PCIe bus
type=gpa_float64
usage=bytes
[DX12Gfx10]
[VKGfx10]
GCEA*_PERF_SEL_SARB_IO_SIZED_REQUESTS[0..15]
eqn=0..15,sum16,(32),*
