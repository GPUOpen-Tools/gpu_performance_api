//==============================================================================
// Copyright (c) 2010-2024 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief Hardware counter info for GFX11_GFX1150.
//==============================================================================

// This file is autogenerated by the ConvertHWEnums project.

// clang-format off

#include <set>

#include "gpu_perf_api_counter_generator/gpa_counter.h"
#include "auto_generated/gpu_perf_api_counter_generator/gpa_hw_counter_gfx11_gfx1150.h"
#include "gpu_performance_api/gpu_perf_api_types.h"

namespace counter_gfx11_gfx1150
{
    std::vector<GpaHardwareCounterDesc> kPaSc0CountersGfx11_gfx1150 = {
        {159, "PA_SC0_QZ0_QUAD_COUNT", "PA_SC0", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC0_P0_HIZ_QUAD_COUNT", "PA_SC0", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC0_EARLYZ_QUAD_COUNT", "PA_SC0", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc1CountersGfx11_gfx1150 = {
        {159, "PA_SC1_QZ0_QUAD_COUNT", "PA_SC1", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC1_P0_HIZ_QUAD_COUNT", "PA_SC1", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC1_EARLYZ_QUAD_COUNT", "PA_SC1", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc2CountersGfx11_gfx1150 = {
        {159, "PA_SC2_QZ0_QUAD_COUNT", "PA_SC2", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC2_P0_HIZ_QUAD_COUNT", "PA_SC2", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC2_EARLYZ_QUAD_COUNT", "PA_SC2", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc3CountersGfx11_gfx1150 = {
        {159, "PA_SC3_QZ0_QUAD_COUNT", "PA_SC3", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC3_P0_HIZ_QUAD_COUNT", "PA_SC3", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC3_EARLYZ_QUAD_COUNT", "PA_SC3", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc4CountersGfx11_gfx1150 = {
        {159, "PA_SC4_QZ0_QUAD_COUNT", "PA_SC4", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC4_P0_HIZ_QUAD_COUNT", "PA_SC4", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC4_EARLYZ_QUAD_COUNT", "PA_SC4", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc5CountersGfx11_gfx1150 = {
        {159, "PA_SC5_QZ0_QUAD_COUNT", "PA_SC5", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC5_P0_HIZ_QUAD_COUNT", "PA_SC5", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC5_EARLYZ_QUAD_COUNT", "PA_SC5", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc6CountersGfx11_gfx1150 = {
        {159, "PA_SC6_QZ0_QUAD_COUNT", "PA_SC6", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC6_P0_HIZ_QUAD_COUNT", "PA_SC6", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC6_EARLYZ_QUAD_COUNT", "PA_SC6", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc7CountersGfx11_gfx1150 = {
        {159, "PA_SC7_QZ0_QUAD_COUNT", "PA_SC7", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC7_P0_HIZ_QUAD_COUNT", "PA_SC7", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC7_EARLYZ_QUAD_COUNT", "PA_SC7", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc8CountersGfx11_gfx1150 = {
        {159, "PA_SC8_QZ0_QUAD_COUNT", "PA_SC8", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC8_P0_HIZ_QUAD_COUNT", "PA_SC8", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC8_EARLYZ_QUAD_COUNT", "PA_SC8", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc9CountersGfx11_gfx1150 = {
        {159, "PA_SC9_QZ0_QUAD_COUNT", "PA_SC9", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC9_P0_HIZ_QUAD_COUNT", "PA_SC9", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC9_EARLYZ_QUAD_COUNT", "PA_SC9", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc10CountersGfx11_gfx1150 = {
        {159, "PA_SC10_QZ0_QUAD_COUNT", "PA_SC10", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC10_P0_HIZ_QUAD_COUNT", "PA_SC10", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC10_EARLYZ_QUAD_COUNT", "PA_SC10", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc11CountersGfx11_gfx1150 = {
        {159, "PA_SC11_QZ0_QUAD_COUNT", "PA_SC11", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC11_P0_HIZ_QUAD_COUNT", "PA_SC11", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC11_EARLYZ_QUAD_COUNT", "PA_SC11", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc12CountersGfx11_gfx1150 = {
        {159, "PA_SC12_QZ0_QUAD_COUNT", "PA_SC12", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC12_P0_HIZ_QUAD_COUNT", "PA_SC12", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC12_EARLYZ_QUAD_COUNT", "PA_SC12", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc13CountersGfx11_gfx1150 = {
        {159, "PA_SC13_QZ0_QUAD_COUNT", "PA_SC13", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC13_P0_HIZ_QUAD_COUNT", "PA_SC13", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC13_EARLYZ_QUAD_COUNT", "PA_SC13", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc14CountersGfx11_gfx1150 = {
        {159, "PA_SC14_QZ0_QUAD_COUNT", "PA_SC14", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC14_P0_HIZ_QUAD_COUNT", "PA_SC14", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC14_EARLYZ_QUAD_COUNT", "PA_SC14", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc15CountersGfx11_gfx1150 = {
        {159, "PA_SC15_QZ0_QUAD_COUNT", "PA_SC15", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC15_P0_HIZ_QUAD_COUNT", "PA_SC15", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC15_EARLYZ_QUAD_COUNT", "PA_SC15", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc16CountersGfx11_gfx1150 = {
        {159, "PA_SC16_QZ0_QUAD_COUNT", "PA_SC16", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC16_P0_HIZ_QUAD_COUNT", "PA_SC16", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC16_EARLYZ_QUAD_COUNT", "PA_SC16", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc17CountersGfx11_gfx1150 = {
        {159, "PA_SC17_QZ0_QUAD_COUNT", "PA_SC17", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC17_P0_HIZ_QUAD_COUNT", "PA_SC17", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC17_EARLYZ_QUAD_COUNT", "PA_SC17", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc18CountersGfx11_gfx1150 = {
        {159, "PA_SC18_QZ0_QUAD_COUNT", "PA_SC18", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC18_P0_HIZ_QUAD_COUNT", "PA_SC18", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC18_EARLYZ_QUAD_COUNT", "PA_SC18", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc19CountersGfx11_gfx1150 = {
        {159, "PA_SC19_QZ0_QUAD_COUNT", "PA_SC19", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC19_P0_HIZ_QUAD_COUNT", "PA_SC19", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC19_EARLYZ_QUAD_COUNT", "PA_SC19", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc20CountersGfx11_gfx1150 = {
        {159, "PA_SC20_QZ0_QUAD_COUNT", "PA_SC20", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC20_P0_HIZ_QUAD_COUNT", "PA_SC20", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC20_EARLYZ_QUAD_COUNT", "PA_SC20", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc21CountersGfx11_gfx1150 = {
        {159, "PA_SC21_QZ0_QUAD_COUNT", "PA_SC21", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC21_P0_HIZ_QUAD_COUNT", "PA_SC21", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC21_EARLYZ_QUAD_COUNT", "PA_SC21", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc22CountersGfx11_gfx1150 = {
        {159, "PA_SC22_QZ0_QUAD_COUNT", "PA_SC22", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC22_P0_HIZ_QUAD_COUNT", "PA_SC22", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC22_EARLYZ_QUAD_COUNT", "PA_SC22", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc23CountersGfx11_gfx1150 = {
        {159, "PA_SC23_QZ0_QUAD_COUNT", "PA_SC23", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC23_P0_HIZ_QUAD_COUNT", "PA_SC23", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC23_EARLYZ_QUAD_COUNT", "PA_SC23", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd0CountersGfx11_gfx1150 = {
        {82, "TD0_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD0", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD0_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD0", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD0_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD0", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD0_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD0", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd1CountersGfx11_gfx1150 = {
        {82, "TD1_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD1", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD1_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD1", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD1_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD1", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD1_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD1", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd2CountersGfx11_gfx1150 = {
        {82, "TD2_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD2", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD2_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD2", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD2_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD2", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD2_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD2", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd3CountersGfx11_gfx1150 = {
        {82, "TD3_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD3", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD3_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD3", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD3_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD3", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD3_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD3", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd4CountersGfx11_gfx1150 = {
        {82, "TD4_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD4", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD4_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD4", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD4_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD4", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD4_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD4", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd5CountersGfx11_gfx1150 = {
        {82, "TD5_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD5", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD5_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD5", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD5_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD5", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD5_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD5", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd6CountersGfx11_gfx1150 = {
        {82, "TD6_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD6", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD6_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD6", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD6_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD6", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD6_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD6", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd7CountersGfx11_gfx1150 = {
        {82, "TD7_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD7", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD7_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD7", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD7_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD7", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD7_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD7", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd8CountersGfx11_gfx1150 = {
        {82, "TD8_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD8", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD8_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD8", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD8_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD8", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD8_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD8", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd9CountersGfx11_gfx1150 = {
        {82, "TD9_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD9", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD9_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD9", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD9_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD9", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD9_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD9", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd10CountersGfx11_gfx1150 = {
        {82, "TD10_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD10", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD10_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD10", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD10_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD10", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD10_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD10", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd11CountersGfx11_gfx1150 = {
        {82, "TD11_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD11", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD11_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD11", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD11_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD11", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD11_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD11", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd12CountersGfx11_gfx1150 = {
        {82, "TD12_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD12", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD12_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD12", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD12_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD12", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD12_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD12", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd13CountersGfx11_gfx1150 = {
        {82, "TD13_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD13", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD13_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD13", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD13_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD13", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD13_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD13", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd14CountersGfx11_gfx1150 = {
        {82, "TD14_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD14", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD14_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD14", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD14_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD14", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD14_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD14", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd15CountersGfx11_gfx1150 = {
        {82, "TD15_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD15", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD15_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD15", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD15_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD15", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD15_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD15", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd16CountersGfx11_gfx1150 = {
        {82, "TD16_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD16", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD16_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD16", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD16_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD16", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD16_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD16", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd17CountersGfx11_gfx1150 = {
        {82, "TD17_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD17", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD17_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD17", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD17_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD17", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD17_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD17", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd18CountersGfx11_gfx1150 = {
        {82, "TD18_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD18", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD18_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD18", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD18_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD18", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD18_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD18", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd19CountersGfx11_gfx1150 = {
        {82, "TD19_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD19", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD19_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD19", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD19_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD19", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD19_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD19", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd20CountersGfx11_gfx1150 = {
        {82, "TD20_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD20", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD20_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD20", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD20_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD20", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD20_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD20", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd21CountersGfx11_gfx1150 = {
        {82, "TD21_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD21", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD21_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD21", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD21_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD21", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD21_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD21", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd22CountersGfx11_gfx1150 = {
        {82, "TD22_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD22", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD22_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD22", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD22_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD22", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD22_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD22", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd23CountersGfx11_gfx1150 = {
        {82, "TD23_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD23", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD23_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD23", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD23_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD23", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD23_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD23", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd24CountersGfx11_gfx1150 = {
        {82, "TD24_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD24", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD24_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD24", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD24_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD24", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD24_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD24", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd25CountersGfx11_gfx1150 = {
        {82, "TD25_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD25", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD25_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD25", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD25_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD25", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD25_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD25", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd26CountersGfx11_gfx1150 = {
        {82, "TD26_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD26", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD26_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD26", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD26_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD26", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD26_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD26", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd27CountersGfx11_gfx1150 = {
        {82, "TD27_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD27", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD27_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD27", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD27_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD27", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD27_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD27", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd28CountersGfx11_gfx1150 = {
        {82, "TD28_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD28", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD28_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD28", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD28_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD28", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD28_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD28", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd29CountersGfx11_gfx1150 = {
        {82, "TD29_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD29", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD29_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD29", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD29_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD29", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD29_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD29", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd30CountersGfx11_gfx1150 = {
        {82, "TD30_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD30", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD30_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD30", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD30_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD30", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD30_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD30", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd31CountersGfx11_gfx1150 = {
        {82, "TD31_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD31", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD31_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD31", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD31_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD31", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD31_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD31", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd32CountersGfx11_gfx1150 = {
        {82, "TD32_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD32", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD32_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD32", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD32_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD32", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD32_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD32", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd33CountersGfx11_gfx1150 = {
        {82, "TD33_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD33", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD33_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD33", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD33_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD33", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD33_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD33", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd34CountersGfx11_gfx1150 = {
        {82, "TD34_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD34", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD34_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD34", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD34_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD34", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD34_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD34", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd35CountersGfx11_gfx1150 = {
        {82, "TD35_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD35", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD35_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD35", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD35_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD35", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD35_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD35", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd36CountersGfx11_gfx1150 = {
        {82, "TD36_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD36", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD36_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD36", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD36_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD36", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD36_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD36", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd37CountersGfx11_gfx1150 = {
        {82, "TD37_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD37", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD37_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD37", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD37_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD37", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD37_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD37", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd38CountersGfx11_gfx1150 = {
        {82, "TD38_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD38", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD38_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD38", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD38_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD38", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD38_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD38", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd39CountersGfx11_gfx1150 = {
        {82, "TD39_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD39", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD39_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD39", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD39_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD39", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD39_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD39", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd40CountersGfx11_gfx1150 = {
        {82, "TD40_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD40", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD40_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD40", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD40_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD40", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD40_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD40", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd41CountersGfx11_gfx1150 = {
        {82, "TD41_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD41", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD41_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD41", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD41_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD41", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD41_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD41", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd42CountersGfx11_gfx1150 = {
        {82, "TD42_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD42", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD42_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD42", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD42_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD42", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD42_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD42", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd43CountersGfx11_gfx1150 = {
        {82, "TD43_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD43", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD43_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD43", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD43_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD43", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD43_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD43", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd44CountersGfx11_gfx1150 = {
        {82, "TD44_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD44", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD44_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD44", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD44_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD44", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD44_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD44", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd45CountersGfx11_gfx1150 = {
        {82, "TD45_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD45", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD45_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD45", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD45_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD45", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD45_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD45", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd46CountersGfx11_gfx1150 = {
        {82, "TD46_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD46", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD46_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD46", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD46_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD46", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD46_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD46", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd47CountersGfx11_gfx1150 = {
        {82, "TD47_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD47", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD47_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD47", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD47_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD47", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD47_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD47", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd48CountersGfx11_gfx1150 = {
        {82, "TD48_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD48", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD48_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD48", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD48_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD48", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD48_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD48", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd49CountersGfx11_gfx1150 = {
        {82, "TD49_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD49", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD49_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD49", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD49_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD49", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD49_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD49", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd50CountersGfx11_gfx1150 = {
        {82, "TD50_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD50", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD50_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD50", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD50_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD50", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD50_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD50", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd51CountersGfx11_gfx1150 = {
        {82, "TD51_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD51", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD51_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD51", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD51_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD51", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD51_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD51", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd52CountersGfx11_gfx1150 = {
        {82, "TD52_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD52", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD52_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD52", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD52_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD52", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD52_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD52", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd53CountersGfx11_gfx1150 = {
        {82, "TD53_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD53", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD53_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD53", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD53_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD53", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD53_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD53", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd54CountersGfx11_gfx1150 = {
        {82, "TD54_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD54", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD54_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD54", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD54_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD54", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD54_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD54", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd55CountersGfx11_gfx1150 = {
        {82, "TD55_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD55", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD55_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD55", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD55_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD55", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD55_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD55", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd56CountersGfx11_gfx1150 = {
        {82, "TD56_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD56", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD56_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD56", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD56_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD56", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD56_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD56", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd57CountersGfx11_gfx1150 = {
        {82, "TD57_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD57", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD57_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD57", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD57_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD57", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD57_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD57", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd58CountersGfx11_gfx1150 = {
        {82, "TD58_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD58", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD58_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD58", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD58_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD58", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD58_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD58", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd59CountersGfx11_gfx1150 = {
        {82, "TD59_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD59", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD59_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD59", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD59_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD59", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD59_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD59", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd60CountersGfx11_gfx1150 = {
        {82, "TD60_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD60", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD60_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD60", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD60_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD60", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD60_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD60", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd61CountersGfx11_gfx1150 = {
        {82, "TD61_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD61", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD61_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD61", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD61_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD61", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD61_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD61", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd62CountersGfx11_gfx1150 = {
        {82, "TD62_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD62", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD62_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD62", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD62_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD62", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD62_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD62", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd63CountersGfx11_gfx1150 = {
        {82, "TD63_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD63", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD63_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD63", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD63_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD63", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD63_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD63", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd64CountersGfx11_gfx1150 = {
        {82, "TD64_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD64", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD64_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD64", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD64_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD64", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD64_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD64", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd65CountersGfx11_gfx1150 = {
        {82, "TD65_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD65", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD65_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD65", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD65_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD65", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD65_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD65", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd66CountersGfx11_gfx1150 = {
        {82, "TD66_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD66", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD66_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD66", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD66_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD66", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD66_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD66", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd67CountersGfx11_gfx1150 = {
        {82, "TD67_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD67", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD67_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD67", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD67_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD67", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD67_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD67", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd68CountersGfx11_gfx1150 = {
        {82, "TD68_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD68", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD68_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD68", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD68_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD68", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD68_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD68", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd69CountersGfx11_gfx1150 = {
        {82, "TD69_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD69", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD69_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD69", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD69_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD69", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD69_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD69", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd70CountersGfx11_gfx1150 = {
        {82, "TD70_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD70", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD70_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD70", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD70_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD70", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD70_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD70", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd71CountersGfx11_gfx1150 = {
        {82, "TD71_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD71", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD71_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD71", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD71_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD71", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD71_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD71", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd72CountersGfx11_gfx1150 = {
        {82, "TD72_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD72", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD72_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD72", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD72_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD72", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD72_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD72", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd73CountersGfx11_gfx1150 = {
        {82, "TD73_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD73", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD73_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD73", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD73_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD73", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD73_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD73", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd74CountersGfx11_gfx1150 = {
        {82, "TD74_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD74", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD74_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD74", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD74_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD74", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD74_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD74", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd75CountersGfx11_gfx1150 = {
        {82, "TD75_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD75", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD75_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD75", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD75_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD75", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD75_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD75", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd76CountersGfx11_gfx1150 = {
        {82, "TD76_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD76", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD76_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD76", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD76_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD76", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD76_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD76", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd77CountersGfx11_gfx1150 = {
        {82, "TD77_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD77", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD77_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD77", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD77_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD77", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD77_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD77", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd78CountersGfx11_gfx1150 = {
        {82, "TD78_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD78", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD78_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD78", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD78_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD78", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD78_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD78", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd79CountersGfx11_gfx1150 = {
        {82, "TD79_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD79", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD79_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD79", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD79_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD79", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD79_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD79", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd80CountersGfx11_gfx1150 = {
        {82, "TD80_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD80", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD80_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD80", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD80_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD80", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD80_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD80", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd81CountersGfx11_gfx1150 = {
        {82, "TD81_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD81", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD81_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD81", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD81_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD81", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD81_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD81", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd82CountersGfx11_gfx1150 = {
        {82, "TD82_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD82", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD82_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD82", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD82_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD82", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD82_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD82", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd83CountersGfx11_gfx1150 = {
        {82, "TD83_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD83", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD83_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD83", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD83_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD83", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD83_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD83", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd84CountersGfx11_gfx1150 = {
        {82, "TD84_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD84", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD84_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD84", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD84_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD84", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD84_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD84", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd85CountersGfx11_gfx1150 = {
        {82, "TD85_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD85", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD85_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD85", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD85_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD85", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD85_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD85", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd86CountersGfx11_gfx1150 = {
        {82, "TD86_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD86", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD86_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD86", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD86_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD86", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD86_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD86", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd87CountersGfx11_gfx1150 = {
        {82, "TD87_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD87", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD87_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD87", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD87_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD87", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD87_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD87", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd88CountersGfx11_gfx1150 = {
        {82, "TD88_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD88", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD88_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD88", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD88_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD88", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD88_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD88", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd89CountersGfx11_gfx1150 = {
        {82, "TD89_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD89", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD89_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD89", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD89_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD89", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD89_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD89", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd90CountersGfx11_gfx1150 = {
        {82, "TD90_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD90", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD90_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD90", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD90_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD90", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD90_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD90", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd91CountersGfx11_gfx1150 = {
        {82, "TD91_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD91", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD91_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD91", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD91_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD91", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD91_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD91", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd92CountersGfx11_gfx1150 = {
        {82, "TD92_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD92", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD92_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD92", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD92_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD92", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD92_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD92", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd93CountersGfx11_gfx1150 = {
        {82, "TD93_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD93", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD93_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD93", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD93_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD93", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD93_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD93", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd94CountersGfx11_gfx1150 = {
        {82, "TD94_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD94", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD94_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD94", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD94_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD94", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD94_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD94", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd95CountersGfx11_gfx1150 = {
        {82, "TD95_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD95", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD95_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD95", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD95_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD95", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD95_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD95", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp0CountersGfx11_gfx1150 = {
        {9, "TCP0_PERF_SEL_REQ", "TCP0", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP0_PERF_SEL_REQ_MISS", "TCP0", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP0_PERF_SEL_TCP_TA_REQ_STALL", "TCP0", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP0_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP0", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP0_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP0", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP0_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP0", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp1CountersGfx11_gfx1150 = {
        {9, "TCP1_PERF_SEL_REQ", "TCP1", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP1_PERF_SEL_REQ_MISS", "TCP1", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP1_PERF_SEL_TCP_TA_REQ_STALL", "TCP1", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP1_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP1", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP1_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP1", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP1_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP1", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp2CountersGfx11_gfx1150 = {
        {9, "TCP2_PERF_SEL_REQ", "TCP2", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP2_PERF_SEL_REQ_MISS", "TCP2", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP2_PERF_SEL_TCP_TA_REQ_STALL", "TCP2", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP2_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP2", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP2_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP2", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP2_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP2", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp3CountersGfx11_gfx1150 = {
        {9, "TCP3_PERF_SEL_REQ", "TCP3", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP3_PERF_SEL_REQ_MISS", "TCP3", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP3_PERF_SEL_TCP_TA_REQ_STALL", "TCP3", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP3_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP3", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP3_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP3", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP3_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP3", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp4CountersGfx11_gfx1150 = {
        {9, "TCP4_PERF_SEL_REQ", "TCP4", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP4_PERF_SEL_REQ_MISS", "TCP4", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP4_PERF_SEL_TCP_TA_REQ_STALL", "TCP4", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP4_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP4", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP4_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP4", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP4_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP4", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp5CountersGfx11_gfx1150 = {
        {9, "TCP5_PERF_SEL_REQ", "TCP5", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP5_PERF_SEL_REQ_MISS", "TCP5", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP5_PERF_SEL_TCP_TA_REQ_STALL", "TCP5", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP5_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP5", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP5_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP5", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP5_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP5", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp6CountersGfx11_gfx1150 = {
        {9, "TCP6_PERF_SEL_REQ", "TCP6", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP6_PERF_SEL_REQ_MISS", "TCP6", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP6_PERF_SEL_TCP_TA_REQ_STALL", "TCP6", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP6_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP6", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP6_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP6", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP6_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP6", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp7CountersGfx11_gfx1150 = {
        {9, "TCP7_PERF_SEL_REQ", "TCP7", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP7_PERF_SEL_REQ_MISS", "TCP7", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP7_PERF_SEL_TCP_TA_REQ_STALL", "TCP7", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP7_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP7", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP7_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP7", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP7_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP7", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp8CountersGfx11_gfx1150 = {
        {9, "TCP8_PERF_SEL_REQ", "TCP8", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP8_PERF_SEL_REQ_MISS", "TCP8", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP8_PERF_SEL_TCP_TA_REQ_STALL", "TCP8", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP8_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP8", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP8_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP8", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP8_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP8", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp9CountersGfx11_gfx1150 = {
        {9, "TCP9_PERF_SEL_REQ", "TCP9", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP9_PERF_SEL_REQ_MISS", "TCP9", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP9_PERF_SEL_TCP_TA_REQ_STALL", "TCP9", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP9_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP9", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP9_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP9", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP9_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP9", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp10CountersGfx11_gfx1150 = {
        {9, "TCP10_PERF_SEL_REQ", "TCP10", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP10_PERF_SEL_REQ_MISS", "TCP10", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP10_PERF_SEL_TCP_TA_REQ_STALL", "TCP10", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP10_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP10", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP10_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP10", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP10_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP10", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp11CountersGfx11_gfx1150 = {
        {9, "TCP11_PERF_SEL_REQ", "TCP11", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP11_PERF_SEL_REQ_MISS", "TCP11", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP11_PERF_SEL_TCP_TA_REQ_STALL", "TCP11", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP11_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP11", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP11_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP11", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP11_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP11", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp12CountersGfx11_gfx1150 = {
        {9, "TCP12_PERF_SEL_REQ", "TCP12", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP12_PERF_SEL_REQ_MISS", "TCP12", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP12_PERF_SEL_TCP_TA_REQ_STALL", "TCP12", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP12_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP12", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP12_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP12", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP12_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP12", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp13CountersGfx11_gfx1150 = {
        {9, "TCP13_PERF_SEL_REQ", "TCP13", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP13_PERF_SEL_REQ_MISS", "TCP13", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP13_PERF_SEL_TCP_TA_REQ_STALL", "TCP13", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP13_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP13", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP13_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP13", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP13_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP13", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp14CountersGfx11_gfx1150 = {
        {9, "TCP14_PERF_SEL_REQ", "TCP14", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP14_PERF_SEL_REQ_MISS", "TCP14", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP14_PERF_SEL_TCP_TA_REQ_STALL", "TCP14", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP14_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP14", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP14_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP14", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP14_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP14", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp15CountersGfx11_gfx1150 = {
        {9, "TCP15_PERF_SEL_REQ", "TCP15", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP15_PERF_SEL_REQ_MISS", "TCP15", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP15_PERF_SEL_TCP_TA_REQ_STALL", "TCP15", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP15_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP15", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP15_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP15", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP15_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP15", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp16CountersGfx11_gfx1150 = {
        {9, "TCP16_PERF_SEL_REQ", "TCP16", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP16_PERF_SEL_REQ_MISS", "TCP16", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP16_PERF_SEL_TCP_TA_REQ_STALL", "TCP16", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP16_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP16", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP16_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP16", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP16_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP16", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp17CountersGfx11_gfx1150 = {
        {9, "TCP17_PERF_SEL_REQ", "TCP17", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP17_PERF_SEL_REQ_MISS", "TCP17", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP17_PERF_SEL_TCP_TA_REQ_STALL", "TCP17", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP17_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP17", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP17_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP17", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP17_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP17", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp18CountersGfx11_gfx1150 = {
        {9, "TCP18_PERF_SEL_REQ", "TCP18", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP18_PERF_SEL_REQ_MISS", "TCP18", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP18_PERF_SEL_TCP_TA_REQ_STALL", "TCP18", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP18_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP18", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP18_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP18", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP18_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP18", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp19CountersGfx11_gfx1150 = {
        {9, "TCP19_PERF_SEL_REQ", "TCP19", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP19_PERF_SEL_REQ_MISS", "TCP19", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP19_PERF_SEL_TCP_TA_REQ_STALL", "TCP19", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP19_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP19", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP19_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP19", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP19_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP19", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp20CountersGfx11_gfx1150 = {
        {9, "TCP20_PERF_SEL_REQ", "TCP20", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP20_PERF_SEL_REQ_MISS", "TCP20", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP20_PERF_SEL_TCP_TA_REQ_STALL", "TCP20", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP20_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP20", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP20_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP20", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP20_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP20", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp21CountersGfx11_gfx1150 = {
        {9, "TCP21_PERF_SEL_REQ", "TCP21", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP21_PERF_SEL_REQ_MISS", "TCP21", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP21_PERF_SEL_TCP_TA_REQ_STALL", "TCP21", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP21_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP21", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP21_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP21", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP21_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP21", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp22CountersGfx11_gfx1150 = {
        {9, "TCP22_PERF_SEL_REQ", "TCP22", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP22_PERF_SEL_REQ_MISS", "TCP22", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP22_PERF_SEL_TCP_TA_REQ_STALL", "TCP22", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP22_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP22", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP22_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP22", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP22_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP22", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp23CountersGfx11_gfx1150 = {
        {9, "TCP23_PERF_SEL_REQ", "TCP23", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP23_PERF_SEL_REQ_MISS", "TCP23", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP23_PERF_SEL_TCP_TA_REQ_STALL", "TCP23", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP23_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP23", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP23_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP23", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP23_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP23", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp24CountersGfx11_gfx1150 = {
        {9, "TCP24_PERF_SEL_REQ", "TCP24", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP24_PERF_SEL_REQ_MISS", "TCP24", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP24_PERF_SEL_TCP_TA_REQ_STALL", "TCP24", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP24_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP24", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP24_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP24", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP24_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP24", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp25CountersGfx11_gfx1150 = {
        {9, "TCP25_PERF_SEL_REQ", "TCP25", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP25_PERF_SEL_REQ_MISS", "TCP25", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP25_PERF_SEL_TCP_TA_REQ_STALL", "TCP25", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP25_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP25", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP25_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP25", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP25_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP25", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp26CountersGfx11_gfx1150 = {
        {9, "TCP26_PERF_SEL_REQ", "TCP26", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP26_PERF_SEL_REQ_MISS", "TCP26", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP26_PERF_SEL_TCP_TA_REQ_STALL", "TCP26", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP26_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP26", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP26_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP26", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP26_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP26", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp27CountersGfx11_gfx1150 = {
        {9, "TCP27_PERF_SEL_REQ", "TCP27", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP27_PERF_SEL_REQ_MISS", "TCP27", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP27_PERF_SEL_TCP_TA_REQ_STALL", "TCP27", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP27_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP27", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP27_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP27", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP27_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP27", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp28CountersGfx11_gfx1150 = {
        {9, "TCP28_PERF_SEL_REQ", "TCP28", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP28_PERF_SEL_REQ_MISS", "TCP28", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP28_PERF_SEL_TCP_TA_REQ_STALL", "TCP28", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP28_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP28", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP28_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP28", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP28_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP28", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp29CountersGfx11_gfx1150 = {
        {9, "TCP29_PERF_SEL_REQ", "TCP29", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP29_PERF_SEL_REQ_MISS", "TCP29", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP29_PERF_SEL_TCP_TA_REQ_STALL", "TCP29", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP29_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP29", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP29_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP29", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP29_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP29", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp30CountersGfx11_gfx1150 = {
        {9, "TCP30_PERF_SEL_REQ", "TCP30", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP30_PERF_SEL_REQ_MISS", "TCP30", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP30_PERF_SEL_TCP_TA_REQ_STALL", "TCP30", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP30_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP30", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP30_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP30", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP30_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP30", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp31CountersGfx11_gfx1150 = {
        {9, "TCP31_PERF_SEL_REQ", "TCP31", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP31_PERF_SEL_REQ_MISS", "TCP31", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP31_PERF_SEL_TCP_TA_REQ_STALL", "TCP31", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP31_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP31", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP31_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP31", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP31_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP31", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp32CountersGfx11_gfx1150 = {
        {9, "TCP32_PERF_SEL_REQ", "TCP32", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP32_PERF_SEL_REQ_MISS", "TCP32", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP32_PERF_SEL_TCP_TA_REQ_STALL", "TCP32", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP32_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP32", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP32_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP32", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP32_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP32", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp33CountersGfx11_gfx1150 = {
        {9, "TCP33_PERF_SEL_REQ", "TCP33", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP33_PERF_SEL_REQ_MISS", "TCP33", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP33_PERF_SEL_TCP_TA_REQ_STALL", "TCP33", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP33_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP33", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP33_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP33", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP33_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP33", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp34CountersGfx11_gfx1150 = {
        {9, "TCP34_PERF_SEL_REQ", "TCP34", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP34_PERF_SEL_REQ_MISS", "TCP34", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP34_PERF_SEL_TCP_TA_REQ_STALL", "TCP34", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP34_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP34", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP34_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP34", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP34_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP34", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp35CountersGfx11_gfx1150 = {
        {9, "TCP35_PERF_SEL_REQ", "TCP35", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP35_PERF_SEL_REQ_MISS", "TCP35", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP35_PERF_SEL_TCP_TA_REQ_STALL", "TCP35", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP35_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP35", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP35_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP35", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP35_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP35", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp36CountersGfx11_gfx1150 = {
        {9, "TCP36_PERF_SEL_REQ", "TCP36", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP36_PERF_SEL_REQ_MISS", "TCP36", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP36_PERF_SEL_TCP_TA_REQ_STALL", "TCP36", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP36_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP36", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP36_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP36", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP36_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP36", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp37CountersGfx11_gfx1150 = {
        {9, "TCP37_PERF_SEL_REQ", "TCP37", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP37_PERF_SEL_REQ_MISS", "TCP37", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP37_PERF_SEL_TCP_TA_REQ_STALL", "TCP37", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP37_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP37", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP37_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP37", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP37_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP37", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp38CountersGfx11_gfx1150 = {
        {9, "TCP38_PERF_SEL_REQ", "TCP38", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP38_PERF_SEL_REQ_MISS", "TCP38", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP38_PERF_SEL_TCP_TA_REQ_STALL", "TCP38", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP38_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP38", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP38_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP38", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP38_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP38", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp39CountersGfx11_gfx1150 = {
        {9, "TCP39_PERF_SEL_REQ", "TCP39", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP39_PERF_SEL_REQ_MISS", "TCP39", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP39_PERF_SEL_TCP_TA_REQ_STALL", "TCP39", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP39_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP39", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP39_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP39", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP39_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP39", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp40CountersGfx11_gfx1150 = {
        {9, "TCP40_PERF_SEL_REQ", "TCP40", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP40_PERF_SEL_REQ_MISS", "TCP40", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP40_PERF_SEL_TCP_TA_REQ_STALL", "TCP40", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP40_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP40", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP40_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP40", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP40_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP40", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp41CountersGfx11_gfx1150 = {
        {9, "TCP41_PERF_SEL_REQ", "TCP41", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP41_PERF_SEL_REQ_MISS", "TCP41", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP41_PERF_SEL_TCP_TA_REQ_STALL", "TCP41", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP41_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP41", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP41_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP41", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP41_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP41", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp42CountersGfx11_gfx1150 = {
        {9, "TCP42_PERF_SEL_REQ", "TCP42", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP42_PERF_SEL_REQ_MISS", "TCP42", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP42_PERF_SEL_TCP_TA_REQ_STALL", "TCP42", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP42_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP42", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP42_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP42", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP42_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP42", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp43CountersGfx11_gfx1150 = {
        {9, "TCP43_PERF_SEL_REQ", "TCP43", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP43_PERF_SEL_REQ_MISS", "TCP43", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP43_PERF_SEL_TCP_TA_REQ_STALL", "TCP43", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP43_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP43", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP43_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP43", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP43_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP43", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp44CountersGfx11_gfx1150 = {
        {9, "TCP44_PERF_SEL_REQ", "TCP44", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP44_PERF_SEL_REQ_MISS", "TCP44", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP44_PERF_SEL_TCP_TA_REQ_STALL", "TCP44", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP44_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP44", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP44_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP44", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP44_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP44", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp45CountersGfx11_gfx1150 = {
        {9, "TCP45_PERF_SEL_REQ", "TCP45", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP45_PERF_SEL_REQ_MISS", "TCP45", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP45_PERF_SEL_TCP_TA_REQ_STALL", "TCP45", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP45_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP45", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP45_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP45", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP45_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP45", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp46CountersGfx11_gfx1150 = {
        {9, "TCP46_PERF_SEL_REQ", "TCP46", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP46_PERF_SEL_REQ_MISS", "TCP46", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP46_PERF_SEL_TCP_TA_REQ_STALL", "TCP46", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP46_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP46", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP46_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP46", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP46_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP46", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp47CountersGfx11_gfx1150 = {
        {9, "TCP47_PERF_SEL_REQ", "TCP47", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP47_PERF_SEL_REQ_MISS", "TCP47", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP47_PERF_SEL_TCP_TA_REQ_STALL", "TCP47", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP47_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP47", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP47_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP47", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP47_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP47", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp48CountersGfx11_gfx1150 = {
        {9, "TCP48_PERF_SEL_REQ", "TCP48", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP48_PERF_SEL_REQ_MISS", "TCP48", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP48_PERF_SEL_TCP_TA_REQ_STALL", "TCP48", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP48_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP48", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP48_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP48", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP48_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP48", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp49CountersGfx11_gfx1150 = {
        {9, "TCP49_PERF_SEL_REQ", "TCP49", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP49_PERF_SEL_REQ_MISS", "TCP49", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP49_PERF_SEL_TCP_TA_REQ_STALL", "TCP49", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP49_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP49", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP49_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP49", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP49_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP49", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp50CountersGfx11_gfx1150 = {
        {9, "TCP50_PERF_SEL_REQ", "TCP50", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP50_PERF_SEL_REQ_MISS", "TCP50", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP50_PERF_SEL_TCP_TA_REQ_STALL", "TCP50", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP50_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP50", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP50_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP50", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP50_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP50", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp51CountersGfx11_gfx1150 = {
        {9, "TCP51_PERF_SEL_REQ", "TCP51", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP51_PERF_SEL_REQ_MISS", "TCP51", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP51_PERF_SEL_TCP_TA_REQ_STALL", "TCP51", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP51_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP51", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP51_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP51", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP51_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP51", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp52CountersGfx11_gfx1150 = {
        {9, "TCP52_PERF_SEL_REQ", "TCP52", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP52_PERF_SEL_REQ_MISS", "TCP52", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP52_PERF_SEL_TCP_TA_REQ_STALL", "TCP52", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP52_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP52", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP52_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP52", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP52_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP52", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp53CountersGfx11_gfx1150 = {
        {9, "TCP53_PERF_SEL_REQ", "TCP53", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP53_PERF_SEL_REQ_MISS", "TCP53", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP53_PERF_SEL_TCP_TA_REQ_STALL", "TCP53", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP53_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP53", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP53_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP53", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP53_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP53", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp54CountersGfx11_gfx1150 = {
        {9, "TCP54_PERF_SEL_REQ", "TCP54", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP54_PERF_SEL_REQ_MISS", "TCP54", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP54_PERF_SEL_TCP_TA_REQ_STALL", "TCP54", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP54_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP54", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP54_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP54", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP54_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP54", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp55CountersGfx11_gfx1150 = {
        {9, "TCP55_PERF_SEL_REQ", "TCP55", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP55_PERF_SEL_REQ_MISS", "TCP55", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP55_PERF_SEL_TCP_TA_REQ_STALL", "TCP55", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP55_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP55", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP55_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP55", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP55_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP55", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp56CountersGfx11_gfx1150 = {
        {9, "TCP56_PERF_SEL_REQ", "TCP56", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP56_PERF_SEL_REQ_MISS", "TCP56", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP56_PERF_SEL_TCP_TA_REQ_STALL", "TCP56", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP56_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP56", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP56_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP56", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP56_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP56", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp57CountersGfx11_gfx1150 = {
        {9, "TCP57_PERF_SEL_REQ", "TCP57", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP57_PERF_SEL_REQ_MISS", "TCP57", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP57_PERF_SEL_TCP_TA_REQ_STALL", "TCP57", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP57_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP57", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP57_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP57", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP57_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP57", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp58CountersGfx11_gfx1150 = {
        {9, "TCP58_PERF_SEL_REQ", "TCP58", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP58_PERF_SEL_REQ_MISS", "TCP58", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP58_PERF_SEL_TCP_TA_REQ_STALL", "TCP58", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP58_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP58", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP58_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP58", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP58_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP58", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp59CountersGfx11_gfx1150 = {
        {9, "TCP59_PERF_SEL_REQ", "TCP59", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP59_PERF_SEL_REQ_MISS", "TCP59", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP59_PERF_SEL_TCP_TA_REQ_STALL", "TCP59", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP59_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP59", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP59_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP59", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP59_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP59", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp60CountersGfx11_gfx1150 = {
        {9, "TCP60_PERF_SEL_REQ", "TCP60", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP60_PERF_SEL_REQ_MISS", "TCP60", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP60_PERF_SEL_TCP_TA_REQ_STALL", "TCP60", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP60_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP60", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP60_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP60", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP60_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP60", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp61CountersGfx11_gfx1150 = {
        {9, "TCP61_PERF_SEL_REQ", "TCP61", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP61_PERF_SEL_REQ_MISS", "TCP61", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP61_PERF_SEL_TCP_TA_REQ_STALL", "TCP61", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP61_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP61", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP61_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP61", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP61_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP61", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp62CountersGfx11_gfx1150 = {
        {9, "TCP62_PERF_SEL_REQ", "TCP62", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP62_PERF_SEL_REQ_MISS", "TCP62", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP62_PERF_SEL_TCP_TA_REQ_STALL", "TCP62", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP62_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP62", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP62_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP62", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP62_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP62", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp63CountersGfx11_gfx1150 = {
        {9, "TCP63_PERF_SEL_REQ", "TCP63", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP63_PERF_SEL_REQ_MISS", "TCP63", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP63_PERF_SEL_TCP_TA_REQ_STALL", "TCP63", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP63_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP63", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP63_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP63", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP63_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP63", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp64CountersGfx11_gfx1150 = {
        {9, "TCP64_PERF_SEL_REQ", "TCP64", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP64_PERF_SEL_REQ_MISS", "TCP64", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP64_PERF_SEL_TCP_TA_REQ_STALL", "TCP64", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP64_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP64", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP64_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP64", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP64_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP64", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp65CountersGfx11_gfx1150 = {
        {9, "TCP65_PERF_SEL_REQ", "TCP65", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP65_PERF_SEL_REQ_MISS", "TCP65", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP65_PERF_SEL_TCP_TA_REQ_STALL", "TCP65", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP65_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP65", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP65_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP65", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP65_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP65", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp66CountersGfx11_gfx1150 = {
        {9, "TCP66_PERF_SEL_REQ", "TCP66", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP66_PERF_SEL_REQ_MISS", "TCP66", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP66_PERF_SEL_TCP_TA_REQ_STALL", "TCP66", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP66_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP66", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP66_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP66", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP66_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP66", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp67CountersGfx11_gfx1150 = {
        {9, "TCP67_PERF_SEL_REQ", "TCP67", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP67_PERF_SEL_REQ_MISS", "TCP67", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP67_PERF_SEL_TCP_TA_REQ_STALL", "TCP67", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP67_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP67", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP67_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP67", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP67_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP67", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp68CountersGfx11_gfx1150 = {
        {9, "TCP68_PERF_SEL_REQ", "TCP68", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP68_PERF_SEL_REQ_MISS", "TCP68", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP68_PERF_SEL_TCP_TA_REQ_STALL", "TCP68", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP68_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP68", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP68_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP68", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP68_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP68", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp69CountersGfx11_gfx1150 = {
        {9, "TCP69_PERF_SEL_REQ", "TCP69", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP69_PERF_SEL_REQ_MISS", "TCP69", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP69_PERF_SEL_TCP_TA_REQ_STALL", "TCP69", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP69_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP69", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP69_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP69", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP69_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP69", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp70CountersGfx11_gfx1150 = {
        {9, "TCP70_PERF_SEL_REQ", "TCP70", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP70_PERF_SEL_REQ_MISS", "TCP70", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP70_PERF_SEL_TCP_TA_REQ_STALL", "TCP70", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP70_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP70", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP70_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP70", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP70_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP70", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp71CountersGfx11_gfx1150 = {
        {9, "TCP71_PERF_SEL_REQ", "TCP71", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP71_PERF_SEL_REQ_MISS", "TCP71", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP71_PERF_SEL_TCP_TA_REQ_STALL", "TCP71", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP71_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP71", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP71_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP71", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP71_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP71", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp72CountersGfx11_gfx1150 = {
        {9, "TCP72_PERF_SEL_REQ", "TCP72", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP72_PERF_SEL_REQ_MISS", "TCP72", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP72_PERF_SEL_TCP_TA_REQ_STALL", "TCP72", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP72_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP72", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP72_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP72", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP72_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP72", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp73CountersGfx11_gfx1150 = {
        {9, "TCP73_PERF_SEL_REQ", "TCP73", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP73_PERF_SEL_REQ_MISS", "TCP73", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP73_PERF_SEL_TCP_TA_REQ_STALL", "TCP73", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP73_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP73", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP73_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP73", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP73_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP73", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp74CountersGfx11_gfx1150 = {
        {9, "TCP74_PERF_SEL_REQ", "TCP74", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP74_PERF_SEL_REQ_MISS", "TCP74", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP74_PERF_SEL_TCP_TA_REQ_STALL", "TCP74", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP74_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP74", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP74_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP74", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP74_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP74", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp75CountersGfx11_gfx1150 = {
        {9, "TCP75_PERF_SEL_REQ", "TCP75", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP75_PERF_SEL_REQ_MISS", "TCP75", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP75_PERF_SEL_TCP_TA_REQ_STALL", "TCP75", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP75_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP75", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP75_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP75", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP75_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP75", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp76CountersGfx11_gfx1150 = {
        {9, "TCP76_PERF_SEL_REQ", "TCP76", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP76_PERF_SEL_REQ_MISS", "TCP76", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP76_PERF_SEL_TCP_TA_REQ_STALL", "TCP76", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP76_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP76", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP76_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP76", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP76_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP76", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp77CountersGfx11_gfx1150 = {
        {9, "TCP77_PERF_SEL_REQ", "TCP77", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP77_PERF_SEL_REQ_MISS", "TCP77", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP77_PERF_SEL_TCP_TA_REQ_STALL", "TCP77", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP77_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP77", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP77_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP77", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP77_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP77", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp78CountersGfx11_gfx1150 = {
        {9, "TCP78_PERF_SEL_REQ", "TCP78", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP78_PERF_SEL_REQ_MISS", "TCP78", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP78_PERF_SEL_TCP_TA_REQ_STALL", "TCP78", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP78_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP78", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP78_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP78", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP78_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP78", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp79CountersGfx11_gfx1150 = {
        {9, "TCP79_PERF_SEL_REQ", "TCP79", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP79_PERF_SEL_REQ_MISS", "TCP79", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP79_PERF_SEL_TCP_TA_REQ_STALL", "TCP79", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP79_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP79", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP79_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP79", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP79_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP79", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp80CountersGfx11_gfx1150 = {
        {9, "TCP80_PERF_SEL_REQ", "TCP80", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP80_PERF_SEL_REQ_MISS", "TCP80", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP80_PERF_SEL_TCP_TA_REQ_STALL", "TCP80", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP80_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP80", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP80_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP80", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP80_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP80", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp81CountersGfx11_gfx1150 = {
        {9, "TCP81_PERF_SEL_REQ", "TCP81", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP81_PERF_SEL_REQ_MISS", "TCP81", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP81_PERF_SEL_TCP_TA_REQ_STALL", "TCP81", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP81_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP81", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP81_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP81", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP81_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP81", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp82CountersGfx11_gfx1150 = {
        {9, "TCP82_PERF_SEL_REQ", "TCP82", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP82_PERF_SEL_REQ_MISS", "TCP82", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP82_PERF_SEL_TCP_TA_REQ_STALL", "TCP82", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP82_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP82", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP82_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP82", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP82_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP82", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp83CountersGfx11_gfx1150 = {
        {9, "TCP83_PERF_SEL_REQ", "TCP83", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP83_PERF_SEL_REQ_MISS", "TCP83", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP83_PERF_SEL_TCP_TA_REQ_STALL", "TCP83", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP83_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP83", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP83_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP83", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP83_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP83", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp84CountersGfx11_gfx1150 = {
        {9, "TCP84_PERF_SEL_REQ", "TCP84", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP84_PERF_SEL_REQ_MISS", "TCP84", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP84_PERF_SEL_TCP_TA_REQ_STALL", "TCP84", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP84_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP84", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP84_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP84", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP84_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP84", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp85CountersGfx11_gfx1150 = {
        {9, "TCP85_PERF_SEL_REQ", "TCP85", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP85_PERF_SEL_REQ_MISS", "TCP85", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP85_PERF_SEL_TCP_TA_REQ_STALL", "TCP85", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP85_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP85", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP85_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP85", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP85_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP85", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp86CountersGfx11_gfx1150 = {
        {9, "TCP86_PERF_SEL_REQ", "TCP86", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP86_PERF_SEL_REQ_MISS", "TCP86", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP86_PERF_SEL_TCP_TA_REQ_STALL", "TCP86", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP86_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP86", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP86_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP86", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP86_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP86", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp87CountersGfx11_gfx1150 = {
        {9, "TCP87_PERF_SEL_REQ", "TCP87", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP87_PERF_SEL_REQ_MISS", "TCP87", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP87_PERF_SEL_TCP_TA_REQ_STALL", "TCP87", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP87_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP87", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP87_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP87", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP87_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP87", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp88CountersGfx11_gfx1150 = {
        {9, "TCP88_PERF_SEL_REQ", "TCP88", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP88_PERF_SEL_REQ_MISS", "TCP88", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP88_PERF_SEL_TCP_TA_REQ_STALL", "TCP88", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP88_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP88", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP88_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP88", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP88_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP88", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp89CountersGfx11_gfx1150 = {
        {9, "TCP89_PERF_SEL_REQ", "TCP89", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP89_PERF_SEL_REQ_MISS", "TCP89", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP89_PERF_SEL_TCP_TA_REQ_STALL", "TCP89", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP89_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP89", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP89_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP89", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP89_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP89", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp90CountersGfx11_gfx1150 = {
        {9, "TCP90_PERF_SEL_REQ", "TCP90", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP90_PERF_SEL_REQ_MISS", "TCP90", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP90_PERF_SEL_TCP_TA_REQ_STALL", "TCP90", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP90_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP90", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP90_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP90", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP90_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP90", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp91CountersGfx11_gfx1150 = {
        {9, "TCP91_PERF_SEL_REQ", "TCP91", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP91_PERF_SEL_REQ_MISS", "TCP91", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP91_PERF_SEL_TCP_TA_REQ_STALL", "TCP91", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP91_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP91", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP91_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP91", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP91_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP91", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp92CountersGfx11_gfx1150 = {
        {9, "TCP92_PERF_SEL_REQ", "TCP92", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP92_PERF_SEL_REQ_MISS", "TCP92", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP92_PERF_SEL_TCP_TA_REQ_STALL", "TCP92", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP92_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP92", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP92_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP92", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP92_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP92", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp93CountersGfx11_gfx1150 = {
        {9, "TCP93_PERF_SEL_REQ", "TCP93", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP93_PERF_SEL_REQ_MISS", "TCP93", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP93_PERF_SEL_TCP_TA_REQ_STALL", "TCP93", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP93_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP93", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP93_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP93", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP93_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP93", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp94CountersGfx11_gfx1150 = {
        {9, "TCP94_PERF_SEL_REQ", "TCP94", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP94_PERF_SEL_REQ_MISS", "TCP94", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP94_PERF_SEL_TCP_TA_REQ_STALL", "TCP94", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP94_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP94", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP94_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP94", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP94_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP94", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp95CountersGfx11_gfx1150 = {
        {9, "TCP95_PERF_SEL_REQ", "TCP95", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP95_PERF_SEL_REQ_MISS", "TCP95", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP95_PERF_SEL_TCP_TA_REQ_STALL", "TCP95", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP95_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP95", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP95_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP95", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP95_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP95", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb0CountersGfx11_gfx1150 = {
        {4, "DB0_PERF_SEL_SC_DB_TILE_TILES", "DB0", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB0_PERF_SEL_DB_SC_TILE_CULLED", "DB0", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB0_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB0", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB0_PERF_SEL_DB_CB_EXPORT_STALLS", "DB0", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB0_PERF_SEL_TILE_RD_SENDS", "DB0", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB0_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB0", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB0_PERF_SEL_TILE_WR_SENDS", "DB0", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB0_PERF_SEL_QUAD_WR_SENDS", "DB0", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB0_PERF_SEL_OP_PIPE_BUSY", "DB0", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB0_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB0", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB0_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB0", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB0_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB0", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB0_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB0", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB0_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB0", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB0_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB0", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb1CountersGfx11_gfx1150 = {
        {4, "DB1_PERF_SEL_SC_DB_TILE_TILES", "DB1", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB1_PERF_SEL_DB_SC_TILE_CULLED", "DB1", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB1_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB1", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB1_PERF_SEL_DB_CB_EXPORT_STALLS", "DB1", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB1_PERF_SEL_TILE_RD_SENDS", "DB1", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB1_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB1", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB1_PERF_SEL_TILE_WR_SENDS", "DB1", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB1_PERF_SEL_QUAD_WR_SENDS", "DB1", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB1_PERF_SEL_OP_PIPE_BUSY", "DB1", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB1_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB1", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB1_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB1", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB1_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB1", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB1_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB1", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB1_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB1", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB1_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB1", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb2CountersGfx11_gfx1150 = {
        {4, "DB2_PERF_SEL_SC_DB_TILE_TILES", "DB2", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB2_PERF_SEL_DB_SC_TILE_CULLED", "DB2", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB2_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB2", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB2_PERF_SEL_DB_CB_EXPORT_STALLS", "DB2", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB2_PERF_SEL_TILE_RD_SENDS", "DB2", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB2_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB2", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB2_PERF_SEL_TILE_WR_SENDS", "DB2", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB2_PERF_SEL_QUAD_WR_SENDS", "DB2", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB2_PERF_SEL_OP_PIPE_BUSY", "DB2", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB2_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB2", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB2_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB2", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB2_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB2", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB2_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB2", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB2_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB2", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB2_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB2", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb3CountersGfx11_gfx1150 = {
        {4, "DB3_PERF_SEL_SC_DB_TILE_TILES", "DB3", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB3_PERF_SEL_DB_SC_TILE_CULLED", "DB3", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB3_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB3", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB3_PERF_SEL_DB_CB_EXPORT_STALLS", "DB3", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB3_PERF_SEL_TILE_RD_SENDS", "DB3", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB3_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB3", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB3_PERF_SEL_TILE_WR_SENDS", "DB3", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB3_PERF_SEL_QUAD_WR_SENDS", "DB3", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB3_PERF_SEL_OP_PIPE_BUSY", "DB3", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB3_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB3", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB3_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB3", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB3_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB3", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB3_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB3", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB3_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB3", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB3_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB3", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb4CountersGfx11_gfx1150 = {
        {4, "DB4_PERF_SEL_SC_DB_TILE_TILES", "DB4", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB4_PERF_SEL_DB_SC_TILE_CULLED", "DB4", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB4_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB4", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB4_PERF_SEL_DB_CB_EXPORT_STALLS", "DB4", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB4_PERF_SEL_TILE_RD_SENDS", "DB4", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB4_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB4", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB4_PERF_SEL_TILE_WR_SENDS", "DB4", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB4_PERF_SEL_QUAD_WR_SENDS", "DB4", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB4_PERF_SEL_OP_PIPE_BUSY", "DB4", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB4_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB4", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB4_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB4", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB4_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB4", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB4_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB4", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB4_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB4", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB4_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB4", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb5CountersGfx11_gfx1150 = {
        {4, "DB5_PERF_SEL_SC_DB_TILE_TILES", "DB5", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB5_PERF_SEL_DB_SC_TILE_CULLED", "DB5", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB5_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB5", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB5_PERF_SEL_DB_CB_EXPORT_STALLS", "DB5", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB5_PERF_SEL_TILE_RD_SENDS", "DB5", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB5_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB5", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB5_PERF_SEL_TILE_WR_SENDS", "DB5", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB5_PERF_SEL_QUAD_WR_SENDS", "DB5", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB5_PERF_SEL_OP_PIPE_BUSY", "DB5", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB5_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB5", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB5_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB5", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB5_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB5", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB5_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB5", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB5_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB5", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB5_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB5", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb6CountersGfx11_gfx1150 = {
        {4, "DB6_PERF_SEL_SC_DB_TILE_TILES", "DB6", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB6_PERF_SEL_DB_SC_TILE_CULLED", "DB6", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB6_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB6", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB6_PERF_SEL_DB_CB_EXPORT_STALLS", "DB6", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB6_PERF_SEL_TILE_RD_SENDS", "DB6", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB6_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB6", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB6_PERF_SEL_TILE_WR_SENDS", "DB6", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB6_PERF_SEL_QUAD_WR_SENDS", "DB6", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB6_PERF_SEL_OP_PIPE_BUSY", "DB6", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB6_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB6", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB6_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB6", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB6_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB6", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB6_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB6", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB6_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB6", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB6_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB6", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb7CountersGfx11_gfx1150 = {
        {4, "DB7_PERF_SEL_SC_DB_TILE_TILES", "DB7", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB7_PERF_SEL_DB_SC_TILE_CULLED", "DB7", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB7_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB7", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB7_PERF_SEL_DB_CB_EXPORT_STALLS", "DB7", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB7_PERF_SEL_TILE_RD_SENDS", "DB7", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB7_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB7", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB7_PERF_SEL_TILE_WR_SENDS", "DB7", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB7_PERF_SEL_QUAD_WR_SENDS", "DB7", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB7_PERF_SEL_OP_PIPE_BUSY", "DB7", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB7_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB7", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB7_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB7", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB7_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB7", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB7_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB7", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB7_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB7", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB7_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB7", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb8CountersGfx11_gfx1150 = {
        {4, "DB8_PERF_SEL_SC_DB_TILE_TILES", "DB8", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB8_PERF_SEL_DB_SC_TILE_CULLED", "DB8", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB8_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB8", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB8_PERF_SEL_DB_CB_EXPORT_STALLS", "DB8", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB8_PERF_SEL_TILE_RD_SENDS", "DB8", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB8_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB8", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB8_PERF_SEL_TILE_WR_SENDS", "DB8", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB8_PERF_SEL_QUAD_WR_SENDS", "DB8", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB8_PERF_SEL_OP_PIPE_BUSY", "DB8", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB8_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB8", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB8_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB8", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB8_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB8", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB8_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB8", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB8_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB8", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB8_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB8", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb9CountersGfx11_gfx1150 = {
        {4, "DB9_PERF_SEL_SC_DB_TILE_TILES", "DB9", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB9_PERF_SEL_DB_SC_TILE_CULLED", "DB9", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB9_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB9", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB9_PERF_SEL_DB_CB_EXPORT_STALLS", "DB9", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB9_PERF_SEL_TILE_RD_SENDS", "DB9", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB9_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB9", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB9_PERF_SEL_TILE_WR_SENDS", "DB9", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB9_PERF_SEL_QUAD_WR_SENDS", "DB9", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB9_PERF_SEL_OP_PIPE_BUSY", "DB9", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB9_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB9", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB9_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB9", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB9_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB9", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB9_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB9", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB9_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB9", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB9_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB9", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb10CountersGfx11_gfx1150 = {
        {4, "DB10_PERF_SEL_SC_DB_TILE_TILES", "DB10", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB10_PERF_SEL_DB_SC_TILE_CULLED", "DB10", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB10_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB10", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB10_PERF_SEL_DB_CB_EXPORT_STALLS", "DB10", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB10_PERF_SEL_TILE_RD_SENDS", "DB10", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB10_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB10", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB10_PERF_SEL_TILE_WR_SENDS", "DB10", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB10_PERF_SEL_QUAD_WR_SENDS", "DB10", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB10_PERF_SEL_OP_PIPE_BUSY", "DB10", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB10_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB10", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB10_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB10", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB10_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB10", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB10_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB10", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB10_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB10", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB10_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB10", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb11CountersGfx11_gfx1150 = {
        {4, "DB11_PERF_SEL_SC_DB_TILE_TILES", "DB11", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB11_PERF_SEL_DB_SC_TILE_CULLED", "DB11", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB11_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB11", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB11_PERF_SEL_DB_CB_EXPORT_STALLS", "DB11", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB11_PERF_SEL_TILE_RD_SENDS", "DB11", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB11_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB11", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB11_PERF_SEL_TILE_WR_SENDS", "DB11", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB11_PERF_SEL_QUAD_WR_SENDS", "DB11", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB11_PERF_SEL_OP_PIPE_BUSY", "DB11", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB11_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB11", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB11_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB11", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB11_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB11", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB11_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB11", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB11_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB11", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB11_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB11", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb12CountersGfx11_gfx1150 = {
        {4, "DB12_PERF_SEL_SC_DB_TILE_TILES", "DB12", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB12_PERF_SEL_DB_SC_TILE_CULLED", "DB12", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB12_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB12", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB12_PERF_SEL_DB_CB_EXPORT_STALLS", "DB12", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB12_PERF_SEL_TILE_RD_SENDS", "DB12", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB12_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB12", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB12_PERF_SEL_TILE_WR_SENDS", "DB12", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB12_PERF_SEL_QUAD_WR_SENDS", "DB12", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB12_PERF_SEL_OP_PIPE_BUSY", "DB12", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB12_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB12", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB12_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB12", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB12_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB12", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB12_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB12", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB12_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB12", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB12_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB12", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb13CountersGfx11_gfx1150 = {
        {4, "DB13_PERF_SEL_SC_DB_TILE_TILES", "DB13", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB13_PERF_SEL_DB_SC_TILE_CULLED", "DB13", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB13_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB13", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB13_PERF_SEL_DB_CB_EXPORT_STALLS", "DB13", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB13_PERF_SEL_TILE_RD_SENDS", "DB13", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB13_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB13", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB13_PERF_SEL_TILE_WR_SENDS", "DB13", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB13_PERF_SEL_QUAD_WR_SENDS", "DB13", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB13_PERF_SEL_OP_PIPE_BUSY", "DB13", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB13_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB13", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB13_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB13", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB13_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB13", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB13_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB13", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB13_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB13", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB13_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB13", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb14CountersGfx11_gfx1150 = {
        {4, "DB14_PERF_SEL_SC_DB_TILE_TILES", "DB14", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB14_PERF_SEL_DB_SC_TILE_CULLED", "DB14", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB14_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB14", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB14_PERF_SEL_DB_CB_EXPORT_STALLS", "DB14", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB14_PERF_SEL_TILE_RD_SENDS", "DB14", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB14_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB14", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB14_PERF_SEL_TILE_WR_SENDS", "DB14", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB14_PERF_SEL_QUAD_WR_SENDS", "DB14", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB14_PERF_SEL_OP_PIPE_BUSY", "DB14", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB14_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB14", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB14_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB14", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB14_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB14", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB14_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB14", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB14_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB14", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB14_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB14", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb15CountersGfx11_gfx1150 = {
        {4, "DB15_PERF_SEL_SC_DB_TILE_TILES", "DB15", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB15_PERF_SEL_DB_SC_TILE_CULLED", "DB15", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB15_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB15", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB15_PERF_SEL_DB_CB_EXPORT_STALLS", "DB15", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB15_PERF_SEL_TILE_RD_SENDS", "DB15", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB15_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB15", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB15_PERF_SEL_TILE_WR_SENDS", "DB15", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB15_PERF_SEL_QUAD_WR_SENDS", "DB15", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB15_PERF_SEL_OP_PIPE_BUSY", "DB15", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB15_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB15", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB15_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB15", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB15_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB15", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB15_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB15", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB15_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB15", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB15_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB15", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb16CountersGfx11_gfx1150 = {
        {4, "DB16_PERF_SEL_SC_DB_TILE_TILES", "DB16", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB16_PERF_SEL_DB_SC_TILE_CULLED", "DB16", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB16_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB16", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB16_PERF_SEL_DB_CB_EXPORT_STALLS", "DB16", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB16_PERF_SEL_TILE_RD_SENDS", "DB16", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB16_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB16", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB16_PERF_SEL_TILE_WR_SENDS", "DB16", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB16_PERF_SEL_QUAD_WR_SENDS", "DB16", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB16_PERF_SEL_OP_PIPE_BUSY", "DB16", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB16_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB16", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB16_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB16", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB16_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB16", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB16_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB16", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB16_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB16", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB16_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB16", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb17CountersGfx11_gfx1150 = {
        {4, "DB17_PERF_SEL_SC_DB_TILE_TILES", "DB17", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB17_PERF_SEL_DB_SC_TILE_CULLED", "DB17", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB17_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB17", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB17_PERF_SEL_DB_CB_EXPORT_STALLS", "DB17", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB17_PERF_SEL_TILE_RD_SENDS", "DB17", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB17_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB17", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB17_PERF_SEL_TILE_WR_SENDS", "DB17", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB17_PERF_SEL_QUAD_WR_SENDS", "DB17", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB17_PERF_SEL_OP_PIPE_BUSY", "DB17", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB17_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB17", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB17_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB17", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB17_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB17", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB17_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB17", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB17_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB17", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB17_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB17", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb18CountersGfx11_gfx1150 = {
        {4, "DB18_PERF_SEL_SC_DB_TILE_TILES", "DB18", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB18_PERF_SEL_DB_SC_TILE_CULLED", "DB18", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB18_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB18", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB18_PERF_SEL_DB_CB_EXPORT_STALLS", "DB18", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB18_PERF_SEL_TILE_RD_SENDS", "DB18", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB18_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB18", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB18_PERF_SEL_TILE_WR_SENDS", "DB18", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB18_PERF_SEL_QUAD_WR_SENDS", "DB18", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB18_PERF_SEL_OP_PIPE_BUSY", "DB18", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB18_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB18", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB18_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB18", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB18_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB18", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB18_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB18", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB18_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB18", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB18_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB18", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb19CountersGfx11_gfx1150 = {
        {4, "DB19_PERF_SEL_SC_DB_TILE_TILES", "DB19", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB19_PERF_SEL_DB_SC_TILE_CULLED", "DB19", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB19_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB19", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB19_PERF_SEL_DB_CB_EXPORT_STALLS", "DB19", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB19_PERF_SEL_TILE_RD_SENDS", "DB19", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB19_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB19", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB19_PERF_SEL_TILE_WR_SENDS", "DB19", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB19_PERF_SEL_QUAD_WR_SENDS", "DB19", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB19_PERF_SEL_OP_PIPE_BUSY", "DB19", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB19_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB19", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB19_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB19", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB19_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB19", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB19_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB19", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB19_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB19", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB19_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB19", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb20CountersGfx11_gfx1150 = {
        {4, "DB20_PERF_SEL_SC_DB_TILE_TILES", "DB20", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB20_PERF_SEL_DB_SC_TILE_CULLED", "DB20", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB20_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB20", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB20_PERF_SEL_DB_CB_EXPORT_STALLS", "DB20", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB20_PERF_SEL_TILE_RD_SENDS", "DB20", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB20_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB20", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB20_PERF_SEL_TILE_WR_SENDS", "DB20", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB20_PERF_SEL_QUAD_WR_SENDS", "DB20", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB20_PERF_SEL_OP_PIPE_BUSY", "DB20", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB20_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB20", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB20_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB20", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB20_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB20", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB20_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB20", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB20_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB20", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB20_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB20", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb21CountersGfx11_gfx1150 = {
        {4, "DB21_PERF_SEL_SC_DB_TILE_TILES", "DB21", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB21_PERF_SEL_DB_SC_TILE_CULLED", "DB21", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB21_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB21", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB21_PERF_SEL_DB_CB_EXPORT_STALLS", "DB21", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB21_PERF_SEL_TILE_RD_SENDS", "DB21", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB21_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB21", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB21_PERF_SEL_TILE_WR_SENDS", "DB21", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB21_PERF_SEL_QUAD_WR_SENDS", "DB21", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB21_PERF_SEL_OP_PIPE_BUSY", "DB21", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB21_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB21", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB21_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB21", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB21_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB21", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB21_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB21", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB21_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB21", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB21_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB21", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb22CountersGfx11_gfx1150 = {
        {4, "DB22_PERF_SEL_SC_DB_TILE_TILES", "DB22", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB22_PERF_SEL_DB_SC_TILE_CULLED", "DB22", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB22_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB22", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB22_PERF_SEL_DB_CB_EXPORT_STALLS", "DB22", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB22_PERF_SEL_TILE_RD_SENDS", "DB22", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB22_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB22", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB22_PERF_SEL_TILE_WR_SENDS", "DB22", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB22_PERF_SEL_QUAD_WR_SENDS", "DB22", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB22_PERF_SEL_OP_PIPE_BUSY", "DB22", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB22_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB22", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB22_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB22", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB22_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB22", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB22_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB22", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB22_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB22", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB22_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB22", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb23CountersGfx11_gfx1150 = {
        {4, "DB23_PERF_SEL_SC_DB_TILE_TILES", "DB23", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB23_PERF_SEL_DB_SC_TILE_CULLED", "DB23", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB23_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB23", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB23_PERF_SEL_DB_CB_EXPORT_STALLS", "DB23", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB23_PERF_SEL_TILE_RD_SENDS", "DB23", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB23_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB23", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB23_PERF_SEL_TILE_WR_SENDS", "DB23", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB23_PERF_SEL_QUAD_WR_SENDS", "DB23", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB23_PERF_SEL_OP_PIPE_BUSY", "DB23", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB23_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB23", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB23_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB23", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB23_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB23", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB23_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB23", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB23_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB23", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB23_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB23", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
} // counter_gfx11_gfx1150

// clang-format on
