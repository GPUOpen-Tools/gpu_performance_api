//==============================================================================
// Copyright (c) 2010-2025 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief Hardware counter info for GFX11.
//==============================================================================

// This file is autogenerated by the ConvertHWEnums project.

// clang-format off

#include "gpu_perf_api_counter_generator/gpa_counter.h"
#include "auto_generated/gpu_perf_api_counter_generator/gpa_hw_counter_gfx11.h"
#include "gpu_performance_api/gpu_perf_api_types.h"

namespace counter_gfx11
{
    std::vector<GpaHardwareCounterDesc> kCpfCountersGfx11 = {
        {0, "CPF_PERF_SEL_ALWAYS_COUNT", "CPF", "Always Count.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "CPF_PERF_SEL_CPF_STAT_BUSY", "CPF", "CPF Busy.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGrbmCountersGfx11 = {
        {0, "GRBM_PERF_SEL_COUNT", "GRBM", "Tie High - Count Number of Clocks", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {2, "GRBM_PERF_SEL_GUI_ACTIVE", "GRBM", "The GUI is Active", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGe2DistCountersGfx11 = {
        {39, "GE2_DIST_GE_DIST_WD_TE11_BUSY", "GE2_DIST", "Counts number of cycles the TE11 block is busy. (DX11 Tessellation Fixed Function Logic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGeSe0CountersGfx11 = {
        {0, "GE_SE0_DS_PRIMS", "GE_SE0", "Number of prims output from the tessellator", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {12, "GE_SE0_SPI_ESVERT_VALID", "GE_SE0", "number of valid ES verts", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "GE_SE0_SPI_GSPRIM_VALID", "GE_SE0", "number of valid GS prims", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {23, "GE_SE0_SPI_HSVERT_VALID", "GE_SE0", "HS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {79, "GE_SE0_API_VS_VERTS", "GE_SE0", "counts the number of API VS verts sent (verts when gs_en = 0 and tessellation not enabled)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "GE_SE0_API_DS_VERTS", "GE_SE0", "counts the number of API DS verts sent (verts when gs_en = 1 and tessellation enabled), that is tessellation verts", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGeSe1CountersGfx11 = {
        {0, "GE_SE1_DS_PRIMS", "GE_SE1", "Number of prims output from the tessellator", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {12, "GE_SE1_SPI_ESVERT_VALID", "GE_SE1", "number of valid ES verts", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "GE_SE1_SPI_GSPRIM_VALID", "GE_SE1", "number of valid GS prims", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {23, "GE_SE1_SPI_HSVERT_VALID", "GE_SE1", "HS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {79, "GE_SE1_API_VS_VERTS", "GE_SE1", "counts the number of API VS verts sent (verts when gs_en = 0 and tessellation not enabled)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "GE_SE1_API_DS_VERTS", "GE_SE1", "counts the number of API DS verts sent (verts when gs_en = 1 and tessellation enabled), that is tessellation verts", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGeSe2CountersGfx11 = {
        {0, "GE_SE2_DS_PRIMS", "GE_SE2", "Number of prims output from the tessellator", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {12, "GE_SE2_SPI_ESVERT_VALID", "GE_SE2", "number of valid ES verts", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "GE_SE2_SPI_GSPRIM_VALID", "GE_SE2", "number of valid GS prims", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {23, "GE_SE2_SPI_HSVERT_VALID", "GE_SE2", "HS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {79, "GE_SE2_API_VS_VERTS", "GE_SE2", "counts the number of API VS verts sent (verts when gs_en = 0 and tessellation not enabled)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "GE_SE2_API_DS_VERTS", "GE_SE2", "counts the number of API DS verts sent (verts when gs_en = 1 and tessellation enabled), that is tessellation verts", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGeSe3CountersGfx11 = {
        {0, "GE_SE3_DS_PRIMS", "GE_SE3", "Number of prims output from the tessellator", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {12, "GE_SE3_SPI_ESVERT_VALID", "GE_SE3", "number of valid ES verts", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "GE_SE3_SPI_GSPRIM_VALID", "GE_SE3", "number of valid GS prims", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {23, "GE_SE3_SPI_HSVERT_VALID", "GE_SE3", "HS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {79, "GE_SE3_API_VS_VERTS", "GE_SE3", "counts the number of API VS verts sent (verts when gs_en = 0 and tessellation not enabled)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "GE_SE3_API_DS_VERTS", "GE_SE3", "counts the number of API DS verts sent (verts when gs_en = 1 and tessellation enabled), that is tessellation verts", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGeSe4CountersGfx11 = {
        {0, "GE_SE4_DS_PRIMS", "GE_SE4", "Number of prims output from the tessellator", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {12, "GE_SE4_SPI_ESVERT_VALID", "GE_SE4", "number of valid ES verts", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "GE_SE4_SPI_GSPRIM_VALID", "GE_SE4", "number of valid GS prims", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {23, "GE_SE4_SPI_HSVERT_VALID", "GE_SE4", "HS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {79, "GE_SE4_API_VS_VERTS", "GE_SE4", "counts the number of API VS verts sent (verts when gs_en = 0 and tessellation not enabled)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "GE_SE4_API_DS_VERTS", "GE_SE4", "counts the number of API DS verts sent (verts when gs_en = 1 and tessellation enabled), that is tessellation verts", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGeSe5CountersGfx11 = {
        {0, "GE_SE5_DS_PRIMS", "GE_SE5", "Number of prims output from the tessellator", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {12, "GE_SE5_SPI_ESVERT_VALID", "GE_SE5", "number of valid ES verts", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "GE_SE5_SPI_GSPRIM_VALID", "GE_SE5", "number of valid GS prims", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {23, "GE_SE5_SPI_HSVERT_VALID", "GE_SE5", "HS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {79, "GE_SE5_API_VS_VERTS", "GE_SE5", "counts the number of API VS verts sent (verts when gs_en = 0 and tessellation not enabled)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "GE_SE5_API_DS_VERTS", "GE_SE5", "counts the number of API DS verts sent (verts when gs_en = 1 and tessellation enabled), that is tessellation verts", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSu0CountersGfx11 = {
        {8, "PA_SU0_PERF_CLPR_INPUT_PRIM", "PA_SU0", "PAPC_PERF_SEL_CLPR_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU0_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU0", "PAPC_PERF_SEL_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU0_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU0", "PAPC_PERF_SEL_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU0_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU0", "PAPC_PERF_SEL_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU0_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU0", "PAPC_PERF_SEL_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU0_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU0", "PAPC_PERF_SEL_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU0_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU0", "PAPC_PERF_SEL_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU0_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU0", "PAPC_PERF_SEL_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU0_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU0", "PAPC_PERF_SEL_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU0_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU0", "PAPC_PERF_SEL_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU0_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU0", "PAPC_PERF_SEL_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU0_PERF_PAPC_CLIP_BUSY", "PA_SU0", "PAPC_PERF_SEL_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU0_PERF_PAPC_SU_STALLED_SC", "PA_SU0", "PAPC_PERF_SEL_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSu1CountersGfx11 = {
        {8, "PA_SU1_PERF_CLPR_INPUT_PRIM", "PA_SU1", "PAPC_PERF_SEL_CLPR_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU1_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU1", "PAPC_PERF_SEL_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU1_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU1", "PAPC_PERF_SEL_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU1_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU1", "PAPC_PERF_SEL_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU1_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU1", "PAPC_PERF_SEL_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU1_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU1", "PAPC_PERF_SEL_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU1_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU1", "PAPC_PERF_SEL_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU1_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU1", "PAPC_PERF_SEL_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU1_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU1", "PAPC_PERF_SEL_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU1_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU1", "PAPC_PERF_SEL_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU1_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU1", "PAPC_PERF_SEL_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU1_PERF_PAPC_CLIP_BUSY", "PA_SU1", "PAPC_PERF_SEL_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU1_PERF_PAPC_SU_STALLED_SC", "PA_SU1", "PAPC_PERF_SEL_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSu2CountersGfx11 = {
        {8, "PA_SU2_PERF_CLPR_INPUT_PRIM", "PA_SU2", "PAPC_PERF_SEL_CLPR_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU2_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU2", "PAPC_PERF_SEL_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU2_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU2", "PAPC_PERF_SEL_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU2_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU2", "PAPC_PERF_SEL_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU2_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU2", "PAPC_PERF_SEL_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU2_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU2", "PAPC_PERF_SEL_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU2_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU2", "PAPC_PERF_SEL_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU2_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU2", "PAPC_PERF_SEL_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU2_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU2", "PAPC_PERF_SEL_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU2_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU2", "PAPC_PERF_SEL_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU2_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU2", "PAPC_PERF_SEL_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU2_PERF_PAPC_CLIP_BUSY", "PA_SU2", "PAPC_PERF_SEL_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU2_PERF_PAPC_SU_STALLED_SC", "PA_SU2", "PAPC_PERF_SEL_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSu3CountersGfx11 = {
        {8, "PA_SU3_PERF_CLPR_INPUT_PRIM", "PA_SU3", "PAPC_PERF_SEL_CLPR_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU3_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU3", "PAPC_PERF_SEL_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU3_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU3", "PAPC_PERF_SEL_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU3_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU3", "PAPC_PERF_SEL_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU3_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU3", "PAPC_PERF_SEL_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU3_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU3", "PAPC_PERF_SEL_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU3_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU3", "PAPC_PERF_SEL_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU3_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU3", "PAPC_PERF_SEL_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU3_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU3", "PAPC_PERF_SEL_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU3_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU3", "PAPC_PERF_SEL_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU3_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU3", "PAPC_PERF_SEL_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU3_PERF_PAPC_CLIP_BUSY", "PA_SU3", "PAPC_PERF_SEL_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU3_PERF_PAPC_SU_STALLED_SC", "PA_SU3", "PAPC_PERF_SEL_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSu4CountersGfx11 = {
        {8, "PA_SU4_PERF_CLPR_INPUT_PRIM", "PA_SU4", "PAPC_PERF_SEL_CLPR_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU4_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU4", "PAPC_PERF_SEL_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU4_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU4", "PAPC_PERF_SEL_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU4_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU4", "PAPC_PERF_SEL_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU4_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU4", "PAPC_PERF_SEL_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU4_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU4", "PAPC_PERF_SEL_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU4_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU4", "PAPC_PERF_SEL_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU4_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU4", "PAPC_PERF_SEL_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU4_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU4", "PAPC_PERF_SEL_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU4_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU4", "PAPC_PERF_SEL_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU4_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU4", "PAPC_PERF_SEL_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU4_PERF_PAPC_CLIP_BUSY", "PA_SU4", "PAPC_PERF_SEL_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU4_PERF_PAPC_SU_STALLED_SC", "PA_SU4", "PAPC_PERF_SEL_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSu5CountersGfx11 = {
        {8, "PA_SU5_PERF_CLPR_INPUT_PRIM", "PA_SU5", "PAPC_PERF_SEL_CLPR_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU5_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU5", "PAPC_PERF_SEL_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU5_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU5", "PAPC_PERF_SEL_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU5_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU5", "PAPC_PERF_SEL_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU5_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU5", "PAPC_PERF_SEL_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU5_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU5", "PAPC_PERF_SEL_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU5_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU5", "PAPC_PERF_SEL_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU5_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU5", "PAPC_PERF_SEL_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU5_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU5", "PAPC_PERF_SEL_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU5_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU5", "PAPC_PERF_SEL_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU5_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU5", "PAPC_PERF_SEL_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU5_PERF_PAPC_CLIP_BUSY", "PA_SU5", "PAPC_PERF_SEL_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU5_PERF_PAPC_SU_STALLED_SC", "PA_SU5", "PAPC_PERF_SEL_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc0CountersGfx11 = {
        {159, "PA_SC0_QZ0_QUAD_COUNT", "PA_SC0", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC0_P0_HIZ_QUAD_COUNT", "PA_SC0", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC0_EARLYZ_QUAD_COUNT", "PA_SC0", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc1CountersGfx11 = {
        {159, "PA_SC1_QZ0_QUAD_COUNT", "PA_SC1", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC1_P0_HIZ_QUAD_COUNT", "PA_SC1", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC1_EARLYZ_QUAD_COUNT", "PA_SC1", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc2CountersGfx11 = {
        {159, "PA_SC2_QZ0_QUAD_COUNT", "PA_SC2", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC2_P0_HIZ_QUAD_COUNT", "PA_SC2", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC2_EARLYZ_QUAD_COUNT", "PA_SC2", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc3CountersGfx11 = {
        {159, "PA_SC3_QZ0_QUAD_COUNT", "PA_SC3", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC3_P0_HIZ_QUAD_COUNT", "PA_SC3", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC3_EARLYZ_QUAD_COUNT", "PA_SC3", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc4CountersGfx11 = {
        {159, "PA_SC4_QZ0_QUAD_COUNT", "PA_SC4", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC4_P0_HIZ_QUAD_COUNT", "PA_SC4", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC4_EARLYZ_QUAD_COUNT", "PA_SC4", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc5CountersGfx11 = {
        {159, "PA_SC5_QZ0_QUAD_COUNT", "PA_SC5", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC5_P0_HIZ_QUAD_COUNT", "PA_SC5", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC5_EARLYZ_QUAD_COUNT", "PA_SC5", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc6CountersGfx11 = {
        {159, "PA_SC6_QZ0_QUAD_COUNT", "PA_SC6", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC6_P0_HIZ_QUAD_COUNT", "PA_SC6", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC6_EARLYZ_QUAD_COUNT", "PA_SC6", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc7CountersGfx11 = {
        {159, "PA_SC7_QZ0_QUAD_COUNT", "PA_SC7", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC7_P0_HIZ_QUAD_COUNT", "PA_SC7", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC7_EARLYZ_QUAD_COUNT", "PA_SC7", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc8CountersGfx11 = {
        {159, "PA_SC8_QZ0_QUAD_COUNT", "PA_SC8", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC8_P0_HIZ_QUAD_COUNT", "PA_SC8", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC8_EARLYZ_QUAD_COUNT", "PA_SC8", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc9CountersGfx11 = {
        {159, "PA_SC9_QZ0_QUAD_COUNT", "PA_SC9", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC9_P0_HIZ_QUAD_COUNT", "PA_SC9", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC9_EARLYZ_QUAD_COUNT", "PA_SC9", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc10CountersGfx11 = {
        {159, "PA_SC10_QZ0_QUAD_COUNT", "PA_SC10", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC10_P0_HIZ_QUAD_COUNT", "PA_SC10", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC10_EARLYZ_QUAD_COUNT", "PA_SC10", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc11CountersGfx11 = {
        {159, "PA_SC11_QZ0_QUAD_COUNT", "PA_SC11", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC11_P0_HIZ_QUAD_COUNT", "PA_SC11", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC11_EARLYZ_QUAD_COUNT", "PA_SC11", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc12CountersGfx11 = {
        {159, "PA_SC12_QZ0_QUAD_COUNT", "PA_SC12", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC12_P0_HIZ_QUAD_COUNT", "PA_SC12", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC12_EARLYZ_QUAD_COUNT", "PA_SC12", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc13CountersGfx11 = {
        {159, "PA_SC13_QZ0_QUAD_COUNT", "PA_SC13", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC13_P0_HIZ_QUAD_COUNT", "PA_SC13", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC13_EARLYZ_QUAD_COUNT", "PA_SC13", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc14CountersGfx11 = {
        {159, "PA_SC14_QZ0_QUAD_COUNT", "PA_SC14", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC14_P0_HIZ_QUAD_COUNT", "PA_SC14", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC14_EARLYZ_QUAD_COUNT", "PA_SC14", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc15CountersGfx11 = {
        {159, "PA_SC15_QZ0_QUAD_COUNT", "PA_SC15", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC15_P0_HIZ_QUAD_COUNT", "PA_SC15", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC15_EARLYZ_QUAD_COUNT", "PA_SC15", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc16CountersGfx11 = {
        {159, "PA_SC16_QZ0_QUAD_COUNT", "PA_SC16", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC16_P0_HIZ_QUAD_COUNT", "PA_SC16", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC16_EARLYZ_QUAD_COUNT", "PA_SC16", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc17CountersGfx11 = {
        {159, "PA_SC17_QZ0_QUAD_COUNT", "PA_SC17", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC17_P0_HIZ_QUAD_COUNT", "PA_SC17", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC17_EARLYZ_QUAD_COUNT", "PA_SC17", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc18CountersGfx11 = {
        {159, "PA_SC18_QZ0_QUAD_COUNT", "PA_SC18", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC18_P0_HIZ_QUAD_COUNT", "PA_SC18", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC18_EARLYZ_QUAD_COUNT", "PA_SC18", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc19CountersGfx11 = {
        {159, "PA_SC19_QZ0_QUAD_COUNT", "PA_SC19", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC19_P0_HIZ_QUAD_COUNT", "PA_SC19", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC19_EARLYZ_QUAD_COUNT", "PA_SC19", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc20CountersGfx11 = {
        {159, "PA_SC20_QZ0_QUAD_COUNT", "PA_SC20", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC20_P0_HIZ_QUAD_COUNT", "PA_SC20", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC20_EARLYZ_QUAD_COUNT", "PA_SC20", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc21CountersGfx11 = {
        {159, "PA_SC21_QZ0_QUAD_COUNT", "PA_SC21", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC21_P0_HIZ_QUAD_COUNT", "PA_SC21", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC21_EARLYZ_QUAD_COUNT", "PA_SC21", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc22CountersGfx11 = {
        {159, "PA_SC22_QZ0_QUAD_COUNT", "PA_SC22", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC22_P0_HIZ_QUAD_COUNT", "PA_SC22", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC22_EARLYZ_QUAD_COUNT", "PA_SC22", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc23CountersGfx11 = {
        {159, "PA_SC23_QZ0_QUAD_COUNT", "PA_SC23", "SC_PERF_SEL_SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0 ; Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0 ; increment rate-one to 16 per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC23_P0_HIZ_QUAD_COUNT", "PA_SC23", "SC_PERF_SEL_SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z per packer Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1 ; increment rate-one per clock ; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1; {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC23_EARLYZ_QUAD_COUNT", "PA_SC23", "SC_PERF_SEL_SC_EARLYZ_QUAD_COUNT total quads surviving early-z ; Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer ; increment rate 1 to 2 quads per clock; range-1/clk ; CONTEXT_STATE_SENSITIVE=YES; Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. {unwindowed, not_emulated, deterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSpi0CountersGfx11 = {
        {2, "SPI0_PERF_GS_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SPI0_PERF_GS_WAVE", "SPI0", "Number of waves.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SPI0_PERF_HS_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SPI0_PERF_HS_WAVE", "SPI0", "Number of waves.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {38, "SPI0_PERF_CSGN_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH)., Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "SPI0_PERF_CSGN_NUM_THREADGROUPS", "SPI0", "Number of threadgroups launched, Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "SPI0_PERF_CSGN_WAVE", "SPI0", "Number of waves, Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "SPI0_PERF_CSN_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH). Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "SPI0_PERF_CSN_NUM_THREADGROUPS", "SPI0", "Number of threadgroups launched. Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {50, "SPI0_PERF_CSN_WAVE", "SPI0", "Number of waves. Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SPI0_PERF_PS0_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH) , PACKER0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SPI0_PERF_PS1_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH) , PACKER1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SPI0_PERF_PS2_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH) , PACKER2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "SPI0_PERF_PS3_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH) , PACKER3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "SPI0_PERF_PS0_WAVE", "SPI0", "Number of waves ,PACKER0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "SPI0_PERF_PS1_WAVE", "SPI0", "Number of waves ,PACKER1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {75, "SPI0_PERF_PS2_WAVE", "SPI0", "Number of waves ,PACKER2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {76, "SPI0_PERF_PS3_WAVE", "SPI0", "Number of waves ,PACKER3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {155, "SPI0_PERF_RA_TMP_STALL_PS", "SPI0", "Cycles where ps wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {156, "SPI0_PERF_RA_TMP_STALL_GS", "SPI0", "Cycles where gs wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {157, "SPI0_PERF_RA_TMP_STALL_HS", "SPI0", "Cycles where hs wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {158, "SPI0_PERF_RA_TMP_STALL_CSG", "SPI0", "Cycles where csg wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "SPI0_PERF_RA_WAVE_SIMD_FULL_PS", "SPI0", "Sum of SIMD where WAVE resource full when !ps_fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "SPI0_PERF_RA_WAVE_SIMD_FULL_GS", "SPI0", "Sum of SIMD where WAVE resource full when !gs_fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "SPI0_PERF_RA_WAVE_SIMD_FULL_HS", "SPI0", "Sum of SIMD where WAVE can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {163, "SPI0_PERF_RA_WAVE_SIMD_FULL_CSG", "SPI0", "Sum of SIMD where WAVE can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {165, "SPI0_PERF_RA_VGPR_SIMD_FULL_PS", "SPI0", "Sum of SIMD where VGPR can`t take ps wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {166, "SPI0_PERF_RA_VGPR_SIMD_FULL_GS", "SPI0", "Sum of SIMD where VGPR can`t take gs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {167, "SPI0_PERF_RA_VGPR_SIMD_FULL_HS", "SPI0", "Sum of SIMD where VGPR can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {168, "SPI0_PERF_RA_VGPR_SIMD_FULL_CSG", "SPI0", "Sum of SIMD where VGPR can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {170, "SPI0_PERF_RA_LDS_CU_FULL_PS", "SPI0", "Sum of CU where LDS can`t take ps wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {171, "SPI0_PERF_RA_LDS_CU_FULL_HS", "SPI0", "Sum of CU where LDS can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {172, "SPI0_PERF_RA_LDS_CU_FULL_GS", "SPI0", "Sum of CU where LDS can`t take gs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {173, "SPI0_PERF_RA_LDS_CU_FULL_CSG", "SPI0", "Sum of CU where LDS can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "SPI0_PERF_RA_BAR_CU_FULL_HS", "SPI0", "Sum of CU where BARRIER can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "SPI0_PERF_RA_BAR_CU_FULL_CSG", "SPI0", "Sum of CU where BARRIER can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {182, "SPI0_PERF_RA_TGLIM_CU_FULL_CSG", "SPI0", "Cycles where csg wants to req but all CU are at tg_limit", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSpi1CountersGfx11 = {
        {2, "SPI1_PERF_GS_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SPI1_PERF_GS_WAVE", "SPI1", "Number of waves.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SPI1_PERF_HS_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SPI1_PERF_HS_WAVE", "SPI1", "Number of waves.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {38, "SPI1_PERF_CSGN_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH)., Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "SPI1_PERF_CSGN_NUM_THREADGROUPS", "SPI1", "Number of threadgroups launched, Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "SPI1_PERF_CSGN_WAVE", "SPI1", "Number of waves, Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "SPI1_PERF_CSN_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH). Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "SPI1_PERF_CSN_NUM_THREADGROUPS", "SPI1", "Number of threadgroups launched. Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {50, "SPI1_PERF_CSN_WAVE", "SPI1", "Number of waves. Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SPI1_PERF_PS0_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH) , PACKER0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SPI1_PERF_PS1_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH) , PACKER1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SPI1_PERF_PS2_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH) , PACKER2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "SPI1_PERF_PS3_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH) , PACKER3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "SPI1_PERF_PS0_WAVE", "SPI1", "Number of waves ,PACKER0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "SPI1_PERF_PS1_WAVE", "SPI1", "Number of waves ,PACKER1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {75, "SPI1_PERF_PS2_WAVE", "SPI1", "Number of waves ,PACKER2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {76, "SPI1_PERF_PS3_WAVE", "SPI1", "Number of waves ,PACKER3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {155, "SPI1_PERF_RA_TMP_STALL_PS", "SPI1", "Cycles where ps wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {156, "SPI1_PERF_RA_TMP_STALL_GS", "SPI1", "Cycles where gs wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {157, "SPI1_PERF_RA_TMP_STALL_HS", "SPI1", "Cycles where hs wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {158, "SPI1_PERF_RA_TMP_STALL_CSG", "SPI1", "Cycles where csg wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "SPI1_PERF_RA_WAVE_SIMD_FULL_PS", "SPI1", "Sum of SIMD where WAVE resource full when !ps_fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "SPI1_PERF_RA_WAVE_SIMD_FULL_GS", "SPI1", "Sum of SIMD where WAVE resource full when !gs_fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "SPI1_PERF_RA_WAVE_SIMD_FULL_HS", "SPI1", "Sum of SIMD where WAVE can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {163, "SPI1_PERF_RA_WAVE_SIMD_FULL_CSG", "SPI1", "Sum of SIMD where WAVE can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {165, "SPI1_PERF_RA_VGPR_SIMD_FULL_PS", "SPI1", "Sum of SIMD where VGPR can`t take ps wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {166, "SPI1_PERF_RA_VGPR_SIMD_FULL_GS", "SPI1", "Sum of SIMD where VGPR can`t take gs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {167, "SPI1_PERF_RA_VGPR_SIMD_FULL_HS", "SPI1", "Sum of SIMD where VGPR can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {168, "SPI1_PERF_RA_VGPR_SIMD_FULL_CSG", "SPI1", "Sum of SIMD where VGPR can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {170, "SPI1_PERF_RA_LDS_CU_FULL_PS", "SPI1", "Sum of CU where LDS can`t take ps wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {171, "SPI1_PERF_RA_LDS_CU_FULL_HS", "SPI1", "Sum of CU where LDS can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {172, "SPI1_PERF_RA_LDS_CU_FULL_GS", "SPI1", "Sum of CU where LDS can`t take gs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {173, "SPI1_PERF_RA_LDS_CU_FULL_CSG", "SPI1", "Sum of CU where LDS can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "SPI1_PERF_RA_BAR_CU_FULL_HS", "SPI1", "Sum of CU where BARRIER can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "SPI1_PERF_RA_BAR_CU_FULL_CSG", "SPI1", "Sum of CU where BARRIER can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {182, "SPI1_PERF_RA_TGLIM_CU_FULL_CSG", "SPI1", "Cycles where csg wants to req but all CU are at tg_limit", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSpi2CountersGfx11 = {
        {2, "SPI2_PERF_GS_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SPI2_PERF_GS_WAVE", "SPI2", "Number of waves.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SPI2_PERF_HS_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SPI2_PERF_HS_WAVE", "SPI2", "Number of waves.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {38, "SPI2_PERF_CSGN_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH)., Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "SPI2_PERF_CSGN_NUM_THREADGROUPS", "SPI2", "Number of threadgroups launched, Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "SPI2_PERF_CSGN_WAVE", "SPI2", "Number of waves, Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "SPI2_PERF_CSN_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH). Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "SPI2_PERF_CSN_NUM_THREADGROUPS", "SPI2", "Number of threadgroups launched. Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {50, "SPI2_PERF_CSN_WAVE", "SPI2", "Number of waves. Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SPI2_PERF_PS0_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH) , PACKER0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SPI2_PERF_PS1_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH) , PACKER1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SPI2_PERF_PS2_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH) , PACKER2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "SPI2_PERF_PS3_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH) , PACKER3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "SPI2_PERF_PS0_WAVE", "SPI2", "Number of waves ,PACKER0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "SPI2_PERF_PS1_WAVE", "SPI2", "Number of waves ,PACKER1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {75, "SPI2_PERF_PS2_WAVE", "SPI2", "Number of waves ,PACKER2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {76, "SPI2_PERF_PS3_WAVE", "SPI2", "Number of waves ,PACKER3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {155, "SPI2_PERF_RA_TMP_STALL_PS", "SPI2", "Cycles where ps wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {156, "SPI2_PERF_RA_TMP_STALL_GS", "SPI2", "Cycles where gs wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {157, "SPI2_PERF_RA_TMP_STALL_HS", "SPI2", "Cycles where hs wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {158, "SPI2_PERF_RA_TMP_STALL_CSG", "SPI2", "Cycles where csg wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "SPI2_PERF_RA_WAVE_SIMD_FULL_PS", "SPI2", "Sum of SIMD where WAVE resource full when !ps_fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "SPI2_PERF_RA_WAVE_SIMD_FULL_GS", "SPI2", "Sum of SIMD where WAVE resource full when !gs_fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "SPI2_PERF_RA_WAVE_SIMD_FULL_HS", "SPI2", "Sum of SIMD where WAVE can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {163, "SPI2_PERF_RA_WAVE_SIMD_FULL_CSG", "SPI2", "Sum of SIMD where WAVE can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {165, "SPI2_PERF_RA_VGPR_SIMD_FULL_PS", "SPI2", "Sum of SIMD where VGPR can`t take ps wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {166, "SPI2_PERF_RA_VGPR_SIMD_FULL_GS", "SPI2", "Sum of SIMD where VGPR can`t take gs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {167, "SPI2_PERF_RA_VGPR_SIMD_FULL_HS", "SPI2", "Sum of SIMD where VGPR can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {168, "SPI2_PERF_RA_VGPR_SIMD_FULL_CSG", "SPI2", "Sum of SIMD where VGPR can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {170, "SPI2_PERF_RA_LDS_CU_FULL_PS", "SPI2", "Sum of CU where LDS can`t take ps wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {171, "SPI2_PERF_RA_LDS_CU_FULL_HS", "SPI2", "Sum of CU where LDS can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {172, "SPI2_PERF_RA_LDS_CU_FULL_GS", "SPI2", "Sum of CU where LDS can`t take gs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {173, "SPI2_PERF_RA_LDS_CU_FULL_CSG", "SPI2", "Sum of CU where LDS can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "SPI2_PERF_RA_BAR_CU_FULL_HS", "SPI2", "Sum of CU where BARRIER can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "SPI2_PERF_RA_BAR_CU_FULL_CSG", "SPI2", "Sum of CU where BARRIER can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {182, "SPI2_PERF_RA_TGLIM_CU_FULL_CSG", "SPI2", "Cycles where csg wants to req but all CU are at tg_limit", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSpi3CountersGfx11 = {
        {2, "SPI3_PERF_GS_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SPI3_PERF_GS_WAVE", "SPI3", "Number of waves.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SPI3_PERF_HS_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SPI3_PERF_HS_WAVE", "SPI3", "Number of waves.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {38, "SPI3_PERF_CSGN_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH)., Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "SPI3_PERF_CSGN_NUM_THREADGROUPS", "SPI3", "Number of threadgroups launched, Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "SPI3_PERF_CSGN_WAVE", "SPI3", "Number of waves, Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "SPI3_PERF_CSN_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH). Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "SPI3_PERF_CSN_NUM_THREADGROUPS", "SPI3", "Number of threadgroups launched. Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {50, "SPI3_PERF_CSN_WAVE", "SPI3", "Number of waves. Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SPI3_PERF_PS0_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH) , PACKER0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SPI3_PERF_PS1_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH) , PACKER1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SPI3_PERF_PS2_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH) , PACKER2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "SPI3_PERF_PS3_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH) , PACKER3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "SPI3_PERF_PS0_WAVE", "SPI3", "Number of waves ,PACKER0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "SPI3_PERF_PS1_WAVE", "SPI3", "Number of waves ,PACKER1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {75, "SPI3_PERF_PS2_WAVE", "SPI3", "Number of waves ,PACKER2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {76, "SPI3_PERF_PS3_WAVE", "SPI3", "Number of waves ,PACKER3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {155, "SPI3_PERF_RA_TMP_STALL_PS", "SPI3", "Cycles where ps wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {156, "SPI3_PERF_RA_TMP_STALL_GS", "SPI3", "Cycles where gs wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {157, "SPI3_PERF_RA_TMP_STALL_HS", "SPI3", "Cycles where hs wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {158, "SPI3_PERF_RA_TMP_STALL_CSG", "SPI3", "Cycles where csg wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "SPI3_PERF_RA_WAVE_SIMD_FULL_PS", "SPI3", "Sum of SIMD where WAVE resource full when !ps_fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "SPI3_PERF_RA_WAVE_SIMD_FULL_GS", "SPI3", "Sum of SIMD where WAVE resource full when !gs_fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "SPI3_PERF_RA_WAVE_SIMD_FULL_HS", "SPI3", "Sum of SIMD where WAVE can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {163, "SPI3_PERF_RA_WAVE_SIMD_FULL_CSG", "SPI3", "Sum of SIMD where WAVE can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {165, "SPI3_PERF_RA_VGPR_SIMD_FULL_PS", "SPI3", "Sum of SIMD where VGPR can`t take ps wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {166, "SPI3_PERF_RA_VGPR_SIMD_FULL_GS", "SPI3", "Sum of SIMD where VGPR can`t take gs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {167, "SPI3_PERF_RA_VGPR_SIMD_FULL_HS", "SPI3", "Sum of SIMD where VGPR can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {168, "SPI3_PERF_RA_VGPR_SIMD_FULL_CSG", "SPI3", "Sum of SIMD where VGPR can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {170, "SPI3_PERF_RA_LDS_CU_FULL_PS", "SPI3", "Sum of CU where LDS can`t take ps wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {171, "SPI3_PERF_RA_LDS_CU_FULL_HS", "SPI3", "Sum of CU where LDS can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {172, "SPI3_PERF_RA_LDS_CU_FULL_GS", "SPI3", "Sum of CU where LDS can`t take gs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {173, "SPI3_PERF_RA_LDS_CU_FULL_CSG", "SPI3", "Sum of CU where LDS can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "SPI3_PERF_RA_BAR_CU_FULL_HS", "SPI3", "Sum of CU where BARRIER can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "SPI3_PERF_RA_BAR_CU_FULL_CSG", "SPI3", "Sum of CU where BARRIER can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {182, "SPI3_PERF_RA_TGLIM_CU_FULL_CSG", "SPI3", "Cycles where csg wants to req but all CU are at tg_limit", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSpi4CountersGfx11 = {
        {2, "SPI4_PERF_GS_BUSY", "SPI4", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SPI4_PERF_GS_WAVE", "SPI4", "Number of waves.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SPI4_PERF_HS_BUSY", "SPI4", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SPI4_PERF_HS_WAVE", "SPI4", "Number of waves.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {38, "SPI4_PERF_CSGN_BUSY", "SPI4", "Number of clocks with outstanding waves (SPI or SH)., Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "SPI4_PERF_CSGN_NUM_THREADGROUPS", "SPI4", "Number of threadgroups launched, Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "SPI4_PERF_CSGN_WAVE", "SPI4", "Number of waves, Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "SPI4_PERF_CSN_BUSY", "SPI4", "Number of clocks with outstanding waves (SPI or SH). Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "SPI4_PERF_CSN_NUM_THREADGROUPS", "SPI4", "Number of threadgroups launched. Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {50, "SPI4_PERF_CSN_WAVE", "SPI4", "Number of waves. Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SPI4_PERF_PS0_BUSY", "SPI4", "Number of clocks with outstanding waves (SPI or SH) , PACKER0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SPI4_PERF_PS1_BUSY", "SPI4", "Number of clocks with outstanding waves (SPI or SH) , PACKER1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SPI4_PERF_PS2_BUSY", "SPI4", "Number of clocks with outstanding waves (SPI or SH) , PACKER2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "SPI4_PERF_PS3_BUSY", "SPI4", "Number of clocks with outstanding waves (SPI or SH) , PACKER3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "SPI4_PERF_PS0_WAVE", "SPI4", "Number of waves ,PACKER0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "SPI4_PERF_PS1_WAVE", "SPI4", "Number of waves ,PACKER1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {75, "SPI4_PERF_PS2_WAVE", "SPI4", "Number of waves ,PACKER2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {76, "SPI4_PERF_PS3_WAVE", "SPI4", "Number of waves ,PACKER3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {155, "SPI4_PERF_RA_TMP_STALL_PS", "SPI4", "Cycles where ps wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {156, "SPI4_PERF_RA_TMP_STALL_GS", "SPI4", "Cycles where gs wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {157, "SPI4_PERF_RA_TMP_STALL_HS", "SPI4", "Cycles where hs wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {158, "SPI4_PERF_RA_TMP_STALL_CSG", "SPI4", "Cycles where csg wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "SPI4_PERF_RA_WAVE_SIMD_FULL_PS", "SPI4", "Sum of SIMD where WAVE resource full when !ps_fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "SPI4_PERF_RA_WAVE_SIMD_FULL_GS", "SPI4", "Sum of SIMD where WAVE resource full when !gs_fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "SPI4_PERF_RA_WAVE_SIMD_FULL_HS", "SPI4", "Sum of SIMD where WAVE can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {163, "SPI4_PERF_RA_WAVE_SIMD_FULL_CSG", "SPI4", "Sum of SIMD where WAVE can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {165, "SPI4_PERF_RA_VGPR_SIMD_FULL_PS", "SPI4", "Sum of SIMD where VGPR can`t take ps wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {166, "SPI4_PERF_RA_VGPR_SIMD_FULL_GS", "SPI4", "Sum of SIMD where VGPR can`t take gs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {167, "SPI4_PERF_RA_VGPR_SIMD_FULL_HS", "SPI4", "Sum of SIMD where VGPR can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {168, "SPI4_PERF_RA_VGPR_SIMD_FULL_CSG", "SPI4", "Sum of SIMD where VGPR can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {170, "SPI4_PERF_RA_LDS_CU_FULL_PS", "SPI4", "Sum of CU where LDS can`t take ps wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {171, "SPI4_PERF_RA_LDS_CU_FULL_HS", "SPI4", "Sum of CU where LDS can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {172, "SPI4_PERF_RA_LDS_CU_FULL_GS", "SPI4", "Sum of CU where LDS can`t take gs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {173, "SPI4_PERF_RA_LDS_CU_FULL_CSG", "SPI4", "Sum of CU where LDS can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "SPI4_PERF_RA_BAR_CU_FULL_HS", "SPI4", "Sum of CU where BARRIER can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "SPI4_PERF_RA_BAR_CU_FULL_CSG", "SPI4", "Sum of CU where BARRIER can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {182, "SPI4_PERF_RA_TGLIM_CU_FULL_CSG", "SPI4", "Cycles where csg wants to req but all CU are at tg_limit", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSpi5CountersGfx11 = {
        {2, "SPI5_PERF_GS_BUSY", "SPI5", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SPI5_PERF_GS_WAVE", "SPI5", "Number of waves.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SPI5_PERF_HS_BUSY", "SPI5", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SPI5_PERF_HS_WAVE", "SPI5", "Number of waves.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {38, "SPI5_PERF_CSGN_BUSY", "SPI5", "Number of clocks with outstanding waves (SPI or SH)., Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "SPI5_PERF_CSGN_NUM_THREADGROUPS", "SPI5", "Number of threadgroups launched, Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "SPI5_PERF_CSGN_WAVE", "SPI5", "Number of waves, Requires SPI_DEBUG_CNTL.DEBUG_GFX_PIPE_SEL to select source, DEBUG_GFX_PIPE_SEL = 0 , source is CSG PIPE0; DEBUG_GFX_PIPE_SEL = 1 , source is CSG PIPE1; default , source is CSG PIPE0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "SPI5_PERF_CSN_BUSY", "SPI5", "Number of clocks with outstanding waves (SPI or SH). Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "SPI5_PERF_CSN_NUM_THREADGROUPS", "SPI5", "Number of threadgroups launched. Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {50, "SPI5_PERF_CSN_WAVE", "SPI5", "Number of waves. Requires SPI_DEBUG_CNTL.DEBUG_PIPE_SEL to select source, DEBUG_PIPE_SEL = 0 , source is CS0; DEBUG_PIPE_SEL = 1 , source is CS1; DEBUG_PIPE_SEL = 2 , source is CS2; DEBUG_PIPE_SEL = 3 , source is CS3; DEBUG_PIPE_SEL = 4 , source is CS4; DEBUG_PIPE_SEL = 5 , source is CS5; DEBUG_PIPE_SEL = 6 , source is CS6; DEBUG_PIPE_SEL = 7 , source is CS7; default , source is CS0;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SPI5_PERF_PS0_BUSY", "SPI5", "Number of clocks with outstanding waves (SPI or SH) , PACKER0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SPI5_PERF_PS1_BUSY", "SPI5", "Number of clocks with outstanding waves (SPI or SH) , PACKER1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SPI5_PERF_PS2_BUSY", "SPI5", "Number of clocks with outstanding waves (SPI or SH) , PACKER2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "SPI5_PERF_PS3_BUSY", "SPI5", "Number of clocks with outstanding waves (SPI or SH) , PACKER3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "SPI5_PERF_PS0_WAVE", "SPI5", "Number of waves ,PACKER0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "SPI5_PERF_PS1_WAVE", "SPI5", "Number of waves ,PACKER1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {75, "SPI5_PERF_PS2_WAVE", "SPI5", "Number of waves ,PACKER2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {76, "SPI5_PERF_PS3_WAVE", "SPI5", "Number of waves ,PACKER3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {155, "SPI5_PERF_RA_TMP_STALL_PS", "SPI5", "Cycles where ps wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {156, "SPI5_PERF_RA_TMP_STALL_GS", "SPI5", "Cycles where gs wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {157, "SPI5_PERF_RA_TMP_STALL_HS", "SPI5", "Cycles where hs wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {158, "SPI5_PERF_RA_TMP_STALL_CSG", "SPI5", "Cycles where csg wants to req but does not fit in temp space.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "SPI5_PERF_RA_WAVE_SIMD_FULL_PS", "SPI5", "Sum of SIMD where WAVE resource full when !ps_fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "SPI5_PERF_RA_WAVE_SIMD_FULL_GS", "SPI5", "Sum of SIMD where WAVE resource full when !gs_fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "SPI5_PERF_RA_WAVE_SIMD_FULL_HS", "SPI5", "Sum of SIMD where WAVE can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {163, "SPI5_PERF_RA_WAVE_SIMD_FULL_CSG", "SPI5", "Sum of SIMD where WAVE can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {165, "SPI5_PERF_RA_VGPR_SIMD_FULL_PS", "SPI5", "Sum of SIMD where VGPR can`t take ps wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {166, "SPI5_PERF_RA_VGPR_SIMD_FULL_GS", "SPI5", "Sum of SIMD where VGPR can`t take gs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {167, "SPI5_PERF_RA_VGPR_SIMD_FULL_HS", "SPI5", "Sum of SIMD where VGPR can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {168, "SPI5_PERF_RA_VGPR_SIMD_FULL_CSG", "SPI5", "Sum of SIMD where VGPR can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {170, "SPI5_PERF_RA_LDS_CU_FULL_PS", "SPI5", "Sum of CU where LDS can`t take ps wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {171, "SPI5_PERF_RA_LDS_CU_FULL_HS", "SPI5", "Sum of CU where LDS can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {172, "SPI5_PERF_RA_LDS_CU_FULL_GS", "SPI5", "Sum of CU where LDS can`t take gs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {173, "SPI5_PERF_RA_LDS_CU_FULL_CSG", "SPI5", "Sum of CU where LDS can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "SPI5_PERF_RA_BAR_CU_FULL_HS", "SPI5", "Sum of CU where BARRIER can`t take hs wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "SPI5_PERF_RA_BAR_CU_FULL_CSG", "SPI5", "Sum of CU where BARRIER can`t take csg wave when !fits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {182, "SPI5_PERF_RA_TGLIM_CU_FULL_CSG", "SPI5", "Cycles where csg wants to req but all CU are at tg_limit", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqg0CountersGfx11 = {
        {20, "SQG0_PERF_SEL_WAVES", "SQG0", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG0_PERF_SEL_WAVES_32", "SQG0", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG0_PERF_SEL_ITEMS", "SQG0", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqg1CountersGfx11 = {
        {20, "SQG1_PERF_SEL_WAVES", "SQG1", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG1_PERF_SEL_WAVES_32", "SQG1", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG1_PERF_SEL_ITEMS", "SQG1", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqg2CountersGfx11 = {
        {20, "SQG2_PERF_SEL_WAVES", "SQG2", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG2_PERF_SEL_WAVES_32", "SQG2", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG2_PERF_SEL_ITEMS", "SQG2", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqg3CountersGfx11 = {
        {20, "SQG3_PERF_SEL_WAVES", "SQG3", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG3_PERF_SEL_WAVES_32", "SQG3", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG3_PERF_SEL_ITEMS", "SQG3", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqg4CountersGfx11 = {
        {20, "SQG4_PERF_SEL_WAVES", "SQG4", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG4_PERF_SEL_WAVES_32", "SQG4", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG4_PERF_SEL_ITEMS", "SQG4", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqg5CountersGfx11 = {
        {20, "SQG5_PERF_SEL_WAVES", "SQG5", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG5_PERF_SEL_WAVES_32", "SQG5", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG5_PERF_SEL_ITEMS", "SQG5", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgGs0CountersGfx11 = {
        {20, "SQG_GS0_PERF_SEL_WAVES", "SQG_GS0", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_GS0_PERF_SEL_WAVES_32", "SQG_GS0", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_GS0_PERF_SEL_ITEMS", "SQG_GS0", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgGs1CountersGfx11 = {
        {20, "SQG_GS1_PERF_SEL_WAVES", "SQG_GS1", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_GS1_PERF_SEL_WAVES_32", "SQG_GS1", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_GS1_PERF_SEL_ITEMS", "SQG_GS1", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgGs2CountersGfx11 = {
        {20, "SQG_GS2_PERF_SEL_WAVES", "SQG_GS2", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_GS2_PERF_SEL_WAVES_32", "SQG_GS2", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_GS2_PERF_SEL_ITEMS", "SQG_GS2", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgGs3CountersGfx11 = {
        {20, "SQG_GS3_PERF_SEL_WAVES", "SQG_GS3", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_GS3_PERF_SEL_WAVES_32", "SQG_GS3", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_GS3_PERF_SEL_ITEMS", "SQG_GS3", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgGs4CountersGfx11 = {
        {20, "SQG_GS4_PERF_SEL_WAVES", "SQG_GS4", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_GS4_PERF_SEL_WAVES_32", "SQG_GS4", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_GS4_PERF_SEL_ITEMS", "SQG_GS4", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgGs5CountersGfx11 = {
        {20, "SQG_GS5_PERF_SEL_WAVES", "SQG_GS5", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_GS5_PERF_SEL_WAVES_32", "SQG_GS5", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_GS5_PERF_SEL_ITEMS", "SQG_GS5", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgPs0CountersGfx11 = {
        {20, "SQG_PS0_PERF_SEL_WAVES", "SQG_PS0", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_PS0_PERF_SEL_WAVES_32", "SQG_PS0", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_PS0_PERF_SEL_ITEMS", "SQG_PS0", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgPs1CountersGfx11 = {
        {20, "SQG_PS1_PERF_SEL_WAVES", "SQG_PS1", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_PS1_PERF_SEL_WAVES_32", "SQG_PS1", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_PS1_PERF_SEL_ITEMS", "SQG_PS1", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgPs2CountersGfx11 = {
        {20, "SQG_PS2_PERF_SEL_WAVES", "SQG_PS2", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_PS2_PERF_SEL_WAVES_32", "SQG_PS2", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_PS2_PERF_SEL_ITEMS", "SQG_PS2", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgPs3CountersGfx11 = {
        {20, "SQG_PS3_PERF_SEL_WAVES", "SQG_PS3", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_PS3_PERF_SEL_WAVES_32", "SQG_PS3", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_PS3_PERF_SEL_ITEMS", "SQG_PS3", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgPs4CountersGfx11 = {
        {20, "SQG_PS4_PERF_SEL_WAVES", "SQG_PS4", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_PS4_PERF_SEL_WAVES_32", "SQG_PS4", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_PS4_PERF_SEL_ITEMS", "SQG_PS4", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgPs5CountersGfx11 = {
        {20, "SQG_PS5_PERF_SEL_WAVES", "SQG_PS5", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_PS5_PERF_SEL_WAVES_32", "SQG_PS5", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_PS5_PERF_SEL_ITEMS", "SQG_PS5", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgHs0CountersGfx11 = {
        {20, "SQG_HS0_PERF_SEL_WAVES", "SQG_HS0", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_HS0_PERF_SEL_WAVES_32", "SQG_HS0", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_HS0_PERF_SEL_ITEMS", "SQG_HS0", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgHs1CountersGfx11 = {
        {20, "SQG_HS1_PERF_SEL_WAVES", "SQG_HS1", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_HS1_PERF_SEL_WAVES_32", "SQG_HS1", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_HS1_PERF_SEL_ITEMS", "SQG_HS1", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgHs2CountersGfx11 = {
        {20, "SQG_HS2_PERF_SEL_WAVES", "SQG_HS2", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_HS2_PERF_SEL_WAVES_32", "SQG_HS2", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_HS2_PERF_SEL_ITEMS", "SQG_HS2", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgHs3CountersGfx11 = {
        {20, "SQG_HS3_PERF_SEL_WAVES", "SQG_HS3", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_HS3_PERF_SEL_WAVES_32", "SQG_HS3", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_HS3_PERF_SEL_ITEMS", "SQG_HS3", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgHs4CountersGfx11 = {
        {20, "SQG_HS4_PERF_SEL_WAVES", "SQG_HS4", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_HS4_PERF_SEL_WAVES_32", "SQG_HS4", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_HS4_PERF_SEL_ITEMS", "SQG_HS4", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgHs5CountersGfx11 = {
        {20, "SQG_HS5_PERF_SEL_WAVES", "SQG_HS5", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_HS5_PERF_SEL_WAVES_32", "SQG_HS5", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_HS5_PERF_SEL_ITEMS", "SQG_HS5", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgCs0CountersGfx11 = {
        {20, "SQG_CS0_PERF_SEL_WAVES", "SQG_CS0", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_CS0_PERF_SEL_WAVES_32", "SQG_CS0", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_CS0_PERF_SEL_ITEMS", "SQG_CS0", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgCs1CountersGfx11 = {
        {20, "SQG_CS1_PERF_SEL_WAVES", "SQG_CS1", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_CS1_PERF_SEL_WAVES_32", "SQG_CS1", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_CS1_PERF_SEL_ITEMS", "SQG_CS1", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgCs2CountersGfx11 = {
        {20, "SQG_CS2_PERF_SEL_WAVES", "SQG_CS2", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_CS2_PERF_SEL_WAVES_32", "SQG_CS2", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_CS2_PERF_SEL_ITEMS", "SQG_CS2", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgCs3CountersGfx11 = {
        {20, "SQG_CS3_PERF_SEL_WAVES", "SQG_CS3", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_CS3_PERF_SEL_WAVES_32", "SQG_CS3", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_CS3_PERF_SEL_ITEMS", "SQG_CS3", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgCs4CountersGfx11 = {
        {20, "SQG_CS4_PERF_SEL_WAVES", "SQG_CS4", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_CS4_PERF_SEL_WAVES_32", "SQG_CS4", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_CS4_PERF_SEL_ITEMS", "SQG_CS4", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqgCs5CountersGfx11 = {
        {20, "SQG_CS5_PERF_SEL_WAVES", "SQG_CS5", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "SQG_CS5_PERF_SEL_WAVES_32", "SQG_CS5", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SQG_CS5_PERF_SEL_ITEMS", "SQG_CS5", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp0CountersGfx11 = {
        {4, "SQWGP0_SQ_PERF_SEL_WAVES", "SQWGP0", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP0_SQ_PERF_SEL_WAVES_32", "SQWGP0", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP0_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP0", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP0_SQ_PERF_SEL_ITEMS", "SQWGP0", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP0_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP0", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP0_SQ_PERF_SEL_INSTS_GDS", "SQWGP0", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP0_SQ_PERF_SEL_INSTS_FLAT", "SQWGP0", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP0_SQ_PERF_SEL_INSTS_LDS", "SQWGP0", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP0_SQ_PERF_SEL_INSTS_SALU", "SQWGP0", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP0_SQ_PERF_SEL_INSTS_SMEM", "SQWGP0", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP0_SQ_PERF_SEL_INSTS_VALU", "SQWGP0", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP0_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP0", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP0_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP0", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP0_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP0", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP0_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP0", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP0_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP0", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP0_SQC_PERF_SEL_ICACHE_REQ", "SQWGP0", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP0_SQC_PERF_SEL_ICACHE_HITS", "SQWGP0", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP0_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP0", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP0_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP0", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP0_SQC_PERF_SEL_DCACHE_REQ", "SQWGP0", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP0_SQC_PERF_SEL_DCACHE_HITS", "SQWGP0", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP0_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP0", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP0_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP0", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp1CountersGfx11 = {
        {4, "SQWGP1_SQ_PERF_SEL_WAVES", "SQWGP1", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP1_SQ_PERF_SEL_WAVES_32", "SQWGP1", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP1_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP1", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP1_SQ_PERF_SEL_ITEMS", "SQWGP1", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP1_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP1", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP1_SQ_PERF_SEL_INSTS_GDS", "SQWGP1", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP1_SQ_PERF_SEL_INSTS_FLAT", "SQWGP1", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP1_SQ_PERF_SEL_INSTS_LDS", "SQWGP1", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP1_SQ_PERF_SEL_INSTS_SALU", "SQWGP1", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP1_SQ_PERF_SEL_INSTS_SMEM", "SQWGP1", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP1_SQ_PERF_SEL_INSTS_VALU", "SQWGP1", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP1_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP1", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP1_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP1", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP1_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP1", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP1_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP1", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP1_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP1", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP1_SQC_PERF_SEL_ICACHE_REQ", "SQWGP1", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP1_SQC_PERF_SEL_ICACHE_HITS", "SQWGP1", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP1_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP1", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP1_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP1", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP1_SQC_PERF_SEL_DCACHE_REQ", "SQWGP1", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP1_SQC_PERF_SEL_DCACHE_HITS", "SQWGP1", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP1_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP1", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP1_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP1", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp2CountersGfx11 = {
        {4, "SQWGP2_SQ_PERF_SEL_WAVES", "SQWGP2", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP2_SQ_PERF_SEL_WAVES_32", "SQWGP2", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP2_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP2", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP2_SQ_PERF_SEL_ITEMS", "SQWGP2", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP2_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP2", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP2_SQ_PERF_SEL_INSTS_GDS", "SQWGP2", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP2_SQ_PERF_SEL_INSTS_FLAT", "SQWGP2", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP2_SQ_PERF_SEL_INSTS_LDS", "SQWGP2", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP2_SQ_PERF_SEL_INSTS_SALU", "SQWGP2", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP2_SQ_PERF_SEL_INSTS_SMEM", "SQWGP2", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP2_SQ_PERF_SEL_INSTS_VALU", "SQWGP2", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP2_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP2", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP2_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP2", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP2_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP2", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP2_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP2", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP2_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP2", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP2_SQC_PERF_SEL_ICACHE_REQ", "SQWGP2", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP2_SQC_PERF_SEL_ICACHE_HITS", "SQWGP2", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP2_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP2", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP2_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP2", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP2_SQC_PERF_SEL_DCACHE_REQ", "SQWGP2", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP2_SQC_PERF_SEL_DCACHE_HITS", "SQWGP2", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP2_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP2", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP2_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP2", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp3CountersGfx11 = {
        {4, "SQWGP3_SQ_PERF_SEL_WAVES", "SQWGP3", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP3_SQ_PERF_SEL_WAVES_32", "SQWGP3", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP3_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP3", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP3_SQ_PERF_SEL_ITEMS", "SQWGP3", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP3_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP3", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP3_SQ_PERF_SEL_INSTS_GDS", "SQWGP3", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP3_SQ_PERF_SEL_INSTS_FLAT", "SQWGP3", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP3_SQ_PERF_SEL_INSTS_LDS", "SQWGP3", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP3_SQ_PERF_SEL_INSTS_SALU", "SQWGP3", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP3_SQ_PERF_SEL_INSTS_SMEM", "SQWGP3", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP3_SQ_PERF_SEL_INSTS_VALU", "SQWGP3", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP3_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP3", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP3_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP3", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP3_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP3", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP3_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP3", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP3_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP3", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP3_SQC_PERF_SEL_ICACHE_REQ", "SQWGP3", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP3_SQC_PERF_SEL_ICACHE_HITS", "SQWGP3", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP3_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP3", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP3_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP3", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP3_SQC_PERF_SEL_DCACHE_REQ", "SQWGP3", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP3_SQC_PERF_SEL_DCACHE_HITS", "SQWGP3", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP3_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP3", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP3_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP3", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp4CountersGfx11 = {
        {4, "SQWGP4_SQ_PERF_SEL_WAVES", "SQWGP4", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP4_SQ_PERF_SEL_WAVES_32", "SQWGP4", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP4_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP4", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP4_SQ_PERF_SEL_ITEMS", "SQWGP4", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP4_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP4", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP4_SQ_PERF_SEL_INSTS_GDS", "SQWGP4", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP4_SQ_PERF_SEL_INSTS_FLAT", "SQWGP4", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP4_SQ_PERF_SEL_INSTS_LDS", "SQWGP4", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP4_SQ_PERF_SEL_INSTS_SALU", "SQWGP4", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP4_SQ_PERF_SEL_INSTS_SMEM", "SQWGP4", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP4_SQ_PERF_SEL_INSTS_VALU", "SQWGP4", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP4_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP4", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP4_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP4", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP4_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP4", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP4_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP4", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP4_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP4", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP4_SQC_PERF_SEL_ICACHE_REQ", "SQWGP4", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP4_SQC_PERF_SEL_ICACHE_HITS", "SQWGP4", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP4_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP4", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP4_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP4", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP4_SQC_PERF_SEL_DCACHE_REQ", "SQWGP4", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP4_SQC_PERF_SEL_DCACHE_HITS", "SQWGP4", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP4_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP4", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP4_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP4", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp5CountersGfx11 = {
        {4, "SQWGP5_SQ_PERF_SEL_WAVES", "SQWGP5", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP5_SQ_PERF_SEL_WAVES_32", "SQWGP5", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP5_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP5", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP5_SQ_PERF_SEL_ITEMS", "SQWGP5", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP5_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP5", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP5_SQ_PERF_SEL_INSTS_GDS", "SQWGP5", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP5_SQ_PERF_SEL_INSTS_FLAT", "SQWGP5", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP5_SQ_PERF_SEL_INSTS_LDS", "SQWGP5", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP5_SQ_PERF_SEL_INSTS_SALU", "SQWGP5", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP5_SQ_PERF_SEL_INSTS_SMEM", "SQWGP5", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP5_SQ_PERF_SEL_INSTS_VALU", "SQWGP5", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP5_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP5", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP5_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP5", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP5_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP5", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP5_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP5", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP5_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP5", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP5_SQC_PERF_SEL_ICACHE_REQ", "SQWGP5", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP5_SQC_PERF_SEL_ICACHE_HITS", "SQWGP5", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP5_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP5", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP5_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP5", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP5_SQC_PERF_SEL_DCACHE_REQ", "SQWGP5", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP5_SQC_PERF_SEL_DCACHE_HITS", "SQWGP5", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP5_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP5", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP5_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP5", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp6CountersGfx11 = {
        {4, "SQWGP6_SQ_PERF_SEL_WAVES", "SQWGP6", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP6_SQ_PERF_SEL_WAVES_32", "SQWGP6", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP6_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP6", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP6_SQ_PERF_SEL_ITEMS", "SQWGP6", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP6_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP6", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP6_SQ_PERF_SEL_INSTS_GDS", "SQWGP6", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP6_SQ_PERF_SEL_INSTS_FLAT", "SQWGP6", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP6_SQ_PERF_SEL_INSTS_LDS", "SQWGP6", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP6_SQ_PERF_SEL_INSTS_SALU", "SQWGP6", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP6_SQ_PERF_SEL_INSTS_SMEM", "SQWGP6", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP6_SQ_PERF_SEL_INSTS_VALU", "SQWGP6", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP6_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP6", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP6_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP6", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP6_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP6", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP6_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP6", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP6_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP6", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP6_SQC_PERF_SEL_ICACHE_REQ", "SQWGP6", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP6_SQC_PERF_SEL_ICACHE_HITS", "SQWGP6", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP6_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP6", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP6_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP6", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP6_SQC_PERF_SEL_DCACHE_REQ", "SQWGP6", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP6_SQC_PERF_SEL_DCACHE_HITS", "SQWGP6", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP6_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP6", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP6_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP6", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp7CountersGfx11 = {
        {4, "SQWGP7_SQ_PERF_SEL_WAVES", "SQWGP7", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP7_SQ_PERF_SEL_WAVES_32", "SQWGP7", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP7_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP7", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP7_SQ_PERF_SEL_ITEMS", "SQWGP7", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP7_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP7", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP7_SQ_PERF_SEL_INSTS_GDS", "SQWGP7", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP7_SQ_PERF_SEL_INSTS_FLAT", "SQWGP7", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP7_SQ_PERF_SEL_INSTS_LDS", "SQWGP7", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP7_SQ_PERF_SEL_INSTS_SALU", "SQWGP7", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP7_SQ_PERF_SEL_INSTS_SMEM", "SQWGP7", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP7_SQ_PERF_SEL_INSTS_VALU", "SQWGP7", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP7_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP7", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP7_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP7", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP7_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP7", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP7_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP7", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP7_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP7", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP7_SQC_PERF_SEL_ICACHE_REQ", "SQWGP7", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP7_SQC_PERF_SEL_ICACHE_HITS", "SQWGP7", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP7_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP7", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP7_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP7", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP7_SQC_PERF_SEL_DCACHE_REQ", "SQWGP7", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP7_SQC_PERF_SEL_DCACHE_HITS", "SQWGP7", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP7_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP7", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP7_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP7", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp8CountersGfx11 = {
        {4, "SQWGP8_SQ_PERF_SEL_WAVES", "SQWGP8", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP8_SQ_PERF_SEL_WAVES_32", "SQWGP8", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP8_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP8", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP8_SQ_PERF_SEL_ITEMS", "SQWGP8", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP8_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP8", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP8_SQ_PERF_SEL_INSTS_GDS", "SQWGP8", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP8_SQ_PERF_SEL_INSTS_FLAT", "SQWGP8", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP8_SQ_PERF_SEL_INSTS_LDS", "SQWGP8", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP8_SQ_PERF_SEL_INSTS_SALU", "SQWGP8", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP8_SQ_PERF_SEL_INSTS_SMEM", "SQWGP8", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP8_SQ_PERF_SEL_INSTS_VALU", "SQWGP8", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP8_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP8", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP8_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP8", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP8_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP8", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP8_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP8", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP8_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP8", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP8_SQC_PERF_SEL_ICACHE_REQ", "SQWGP8", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP8_SQC_PERF_SEL_ICACHE_HITS", "SQWGP8", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP8_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP8", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP8_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP8", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP8_SQC_PERF_SEL_DCACHE_REQ", "SQWGP8", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP8_SQC_PERF_SEL_DCACHE_HITS", "SQWGP8", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP8_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP8", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP8_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP8", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp9CountersGfx11 = {
        {4, "SQWGP9_SQ_PERF_SEL_WAVES", "SQWGP9", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP9_SQ_PERF_SEL_WAVES_32", "SQWGP9", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP9_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP9", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP9_SQ_PERF_SEL_ITEMS", "SQWGP9", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP9_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP9", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP9_SQ_PERF_SEL_INSTS_GDS", "SQWGP9", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP9_SQ_PERF_SEL_INSTS_FLAT", "SQWGP9", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP9_SQ_PERF_SEL_INSTS_LDS", "SQWGP9", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP9_SQ_PERF_SEL_INSTS_SALU", "SQWGP9", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP9_SQ_PERF_SEL_INSTS_SMEM", "SQWGP9", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP9_SQ_PERF_SEL_INSTS_VALU", "SQWGP9", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP9_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP9", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP9_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP9", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP9_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP9", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP9_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP9", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP9_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP9", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP9_SQC_PERF_SEL_ICACHE_REQ", "SQWGP9", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP9_SQC_PERF_SEL_ICACHE_HITS", "SQWGP9", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP9_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP9", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP9_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP9", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP9_SQC_PERF_SEL_DCACHE_REQ", "SQWGP9", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP9_SQC_PERF_SEL_DCACHE_HITS", "SQWGP9", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP9_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP9", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP9_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP9", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp10CountersGfx11 = {
        {4, "SQWGP10_SQ_PERF_SEL_WAVES", "SQWGP10", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP10_SQ_PERF_SEL_WAVES_32", "SQWGP10", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP10_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP10", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP10_SQ_PERF_SEL_ITEMS", "SQWGP10", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP10_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP10", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP10_SQ_PERF_SEL_INSTS_GDS", "SQWGP10", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP10_SQ_PERF_SEL_INSTS_FLAT", "SQWGP10", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP10_SQ_PERF_SEL_INSTS_LDS", "SQWGP10", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP10_SQ_PERF_SEL_INSTS_SALU", "SQWGP10", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP10_SQ_PERF_SEL_INSTS_SMEM", "SQWGP10", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP10_SQ_PERF_SEL_INSTS_VALU", "SQWGP10", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP10_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP10", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP10_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP10", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP10_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP10", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP10_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP10", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP10_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP10", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP10_SQC_PERF_SEL_ICACHE_REQ", "SQWGP10", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP10_SQC_PERF_SEL_ICACHE_HITS", "SQWGP10", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP10_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP10", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP10_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP10", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP10_SQC_PERF_SEL_DCACHE_REQ", "SQWGP10", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP10_SQC_PERF_SEL_DCACHE_HITS", "SQWGP10", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP10_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP10", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP10_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP10", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp11CountersGfx11 = {
        {4, "SQWGP11_SQ_PERF_SEL_WAVES", "SQWGP11", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP11_SQ_PERF_SEL_WAVES_32", "SQWGP11", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP11_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP11", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP11_SQ_PERF_SEL_ITEMS", "SQWGP11", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP11_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP11", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP11_SQ_PERF_SEL_INSTS_GDS", "SQWGP11", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP11_SQ_PERF_SEL_INSTS_FLAT", "SQWGP11", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP11_SQ_PERF_SEL_INSTS_LDS", "SQWGP11", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP11_SQ_PERF_SEL_INSTS_SALU", "SQWGP11", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP11_SQ_PERF_SEL_INSTS_SMEM", "SQWGP11", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP11_SQ_PERF_SEL_INSTS_VALU", "SQWGP11", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP11_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP11", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP11_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP11", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP11_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP11", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP11_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP11", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP11_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP11", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP11_SQC_PERF_SEL_ICACHE_REQ", "SQWGP11", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP11_SQC_PERF_SEL_ICACHE_HITS", "SQWGP11", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP11_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP11", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP11_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP11", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP11_SQC_PERF_SEL_DCACHE_REQ", "SQWGP11", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP11_SQC_PERF_SEL_DCACHE_HITS", "SQWGP11", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP11_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP11", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP11_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP11", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp12CountersGfx11 = {
        {4, "SQWGP12_SQ_PERF_SEL_WAVES", "SQWGP12", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP12_SQ_PERF_SEL_WAVES_32", "SQWGP12", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP12_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP12", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP12_SQ_PERF_SEL_ITEMS", "SQWGP12", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP12_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP12", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP12_SQ_PERF_SEL_INSTS_GDS", "SQWGP12", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP12_SQ_PERF_SEL_INSTS_FLAT", "SQWGP12", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP12_SQ_PERF_SEL_INSTS_LDS", "SQWGP12", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP12_SQ_PERF_SEL_INSTS_SALU", "SQWGP12", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP12_SQ_PERF_SEL_INSTS_SMEM", "SQWGP12", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP12_SQ_PERF_SEL_INSTS_VALU", "SQWGP12", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP12_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP12", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP12_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP12", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP12_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP12", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP12_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP12", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP12_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP12", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP12_SQC_PERF_SEL_ICACHE_REQ", "SQWGP12", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP12_SQC_PERF_SEL_ICACHE_HITS", "SQWGP12", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP12_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP12", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP12_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP12", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP12_SQC_PERF_SEL_DCACHE_REQ", "SQWGP12", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP12_SQC_PERF_SEL_DCACHE_HITS", "SQWGP12", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP12_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP12", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP12_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP12", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp13CountersGfx11 = {
        {4, "SQWGP13_SQ_PERF_SEL_WAVES", "SQWGP13", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP13_SQ_PERF_SEL_WAVES_32", "SQWGP13", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP13_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP13", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP13_SQ_PERF_SEL_ITEMS", "SQWGP13", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP13_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP13", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP13_SQ_PERF_SEL_INSTS_GDS", "SQWGP13", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP13_SQ_PERF_SEL_INSTS_FLAT", "SQWGP13", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP13_SQ_PERF_SEL_INSTS_LDS", "SQWGP13", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP13_SQ_PERF_SEL_INSTS_SALU", "SQWGP13", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP13_SQ_PERF_SEL_INSTS_SMEM", "SQWGP13", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP13_SQ_PERF_SEL_INSTS_VALU", "SQWGP13", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP13_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP13", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP13_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP13", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP13_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP13", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP13_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP13", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP13_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP13", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP13_SQC_PERF_SEL_ICACHE_REQ", "SQWGP13", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP13_SQC_PERF_SEL_ICACHE_HITS", "SQWGP13", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP13_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP13", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP13_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP13", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP13_SQC_PERF_SEL_DCACHE_REQ", "SQWGP13", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP13_SQC_PERF_SEL_DCACHE_HITS", "SQWGP13", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP13_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP13", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP13_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP13", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp14CountersGfx11 = {
        {4, "SQWGP14_SQ_PERF_SEL_WAVES", "SQWGP14", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP14_SQ_PERF_SEL_WAVES_32", "SQWGP14", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP14_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP14", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP14_SQ_PERF_SEL_ITEMS", "SQWGP14", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP14_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP14", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP14_SQ_PERF_SEL_INSTS_GDS", "SQWGP14", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP14_SQ_PERF_SEL_INSTS_FLAT", "SQWGP14", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP14_SQ_PERF_SEL_INSTS_LDS", "SQWGP14", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP14_SQ_PERF_SEL_INSTS_SALU", "SQWGP14", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP14_SQ_PERF_SEL_INSTS_SMEM", "SQWGP14", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP14_SQ_PERF_SEL_INSTS_VALU", "SQWGP14", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP14_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP14", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP14_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP14", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP14_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP14", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP14_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP14", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP14_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP14", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP14_SQC_PERF_SEL_ICACHE_REQ", "SQWGP14", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP14_SQC_PERF_SEL_ICACHE_HITS", "SQWGP14", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP14_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP14", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP14_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP14", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP14_SQC_PERF_SEL_DCACHE_REQ", "SQWGP14", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP14_SQC_PERF_SEL_DCACHE_HITS", "SQWGP14", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP14_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP14", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP14_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP14", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp15CountersGfx11 = {
        {4, "SQWGP15_SQ_PERF_SEL_WAVES", "SQWGP15", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP15_SQ_PERF_SEL_WAVES_32", "SQWGP15", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP15_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP15", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP15_SQ_PERF_SEL_ITEMS", "SQWGP15", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP15_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP15", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP15_SQ_PERF_SEL_INSTS_GDS", "SQWGP15", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP15_SQ_PERF_SEL_INSTS_FLAT", "SQWGP15", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP15_SQ_PERF_SEL_INSTS_LDS", "SQWGP15", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP15_SQ_PERF_SEL_INSTS_SALU", "SQWGP15", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP15_SQ_PERF_SEL_INSTS_SMEM", "SQWGP15", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP15_SQ_PERF_SEL_INSTS_VALU", "SQWGP15", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP15_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP15", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP15_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP15", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP15_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP15", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP15_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP15", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP15_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP15", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP15_SQC_PERF_SEL_ICACHE_REQ", "SQWGP15", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP15_SQC_PERF_SEL_ICACHE_HITS", "SQWGP15", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP15_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP15", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP15_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP15", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP15_SQC_PERF_SEL_DCACHE_REQ", "SQWGP15", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP15_SQC_PERF_SEL_DCACHE_HITS", "SQWGP15", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP15_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP15", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP15_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP15", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp16CountersGfx11 = {
        {4, "SQWGP16_SQ_PERF_SEL_WAVES", "SQWGP16", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP16_SQ_PERF_SEL_WAVES_32", "SQWGP16", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP16_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP16", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP16_SQ_PERF_SEL_ITEMS", "SQWGP16", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP16_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP16", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP16_SQ_PERF_SEL_INSTS_GDS", "SQWGP16", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP16_SQ_PERF_SEL_INSTS_FLAT", "SQWGP16", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP16_SQ_PERF_SEL_INSTS_LDS", "SQWGP16", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP16_SQ_PERF_SEL_INSTS_SALU", "SQWGP16", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP16_SQ_PERF_SEL_INSTS_SMEM", "SQWGP16", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP16_SQ_PERF_SEL_INSTS_VALU", "SQWGP16", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP16_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP16", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP16_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP16", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP16_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP16", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP16_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP16", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP16_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP16", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP16_SQC_PERF_SEL_ICACHE_REQ", "SQWGP16", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP16_SQC_PERF_SEL_ICACHE_HITS", "SQWGP16", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP16_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP16", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP16_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP16", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP16_SQC_PERF_SEL_DCACHE_REQ", "SQWGP16", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP16_SQC_PERF_SEL_DCACHE_HITS", "SQWGP16", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP16_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP16", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP16_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP16", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp17CountersGfx11 = {
        {4, "SQWGP17_SQ_PERF_SEL_WAVES", "SQWGP17", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP17_SQ_PERF_SEL_WAVES_32", "SQWGP17", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP17_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP17", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP17_SQ_PERF_SEL_ITEMS", "SQWGP17", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP17_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP17", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP17_SQ_PERF_SEL_INSTS_GDS", "SQWGP17", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP17_SQ_PERF_SEL_INSTS_FLAT", "SQWGP17", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP17_SQ_PERF_SEL_INSTS_LDS", "SQWGP17", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP17_SQ_PERF_SEL_INSTS_SALU", "SQWGP17", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP17_SQ_PERF_SEL_INSTS_SMEM", "SQWGP17", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP17_SQ_PERF_SEL_INSTS_VALU", "SQWGP17", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP17_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP17", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP17_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP17", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP17_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP17", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP17_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP17", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP17_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP17", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP17_SQC_PERF_SEL_ICACHE_REQ", "SQWGP17", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP17_SQC_PERF_SEL_ICACHE_HITS", "SQWGP17", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP17_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP17", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP17_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP17", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP17_SQC_PERF_SEL_DCACHE_REQ", "SQWGP17", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP17_SQC_PERF_SEL_DCACHE_HITS", "SQWGP17", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP17_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP17", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP17_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP17", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp18CountersGfx11 = {
        {4, "SQWGP18_SQ_PERF_SEL_WAVES", "SQWGP18", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP18_SQ_PERF_SEL_WAVES_32", "SQWGP18", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP18_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP18", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP18_SQ_PERF_SEL_ITEMS", "SQWGP18", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP18_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP18", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP18_SQ_PERF_SEL_INSTS_GDS", "SQWGP18", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP18_SQ_PERF_SEL_INSTS_FLAT", "SQWGP18", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP18_SQ_PERF_SEL_INSTS_LDS", "SQWGP18", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP18_SQ_PERF_SEL_INSTS_SALU", "SQWGP18", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP18_SQ_PERF_SEL_INSTS_SMEM", "SQWGP18", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP18_SQ_PERF_SEL_INSTS_VALU", "SQWGP18", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP18_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP18", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP18_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP18", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP18_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP18", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP18_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP18", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP18_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP18", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP18_SQC_PERF_SEL_ICACHE_REQ", "SQWGP18", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP18_SQC_PERF_SEL_ICACHE_HITS", "SQWGP18", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP18_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP18", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP18_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP18", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP18_SQC_PERF_SEL_DCACHE_REQ", "SQWGP18", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP18_SQC_PERF_SEL_DCACHE_HITS", "SQWGP18", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP18_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP18", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP18_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP18", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp19CountersGfx11 = {
        {4, "SQWGP19_SQ_PERF_SEL_WAVES", "SQWGP19", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP19_SQ_PERF_SEL_WAVES_32", "SQWGP19", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP19_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP19", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP19_SQ_PERF_SEL_ITEMS", "SQWGP19", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP19_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP19", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP19_SQ_PERF_SEL_INSTS_GDS", "SQWGP19", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP19_SQ_PERF_SEL_INSTS_FLAT", "SQWGP19", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP19_SQ_PERF_SEL_INSTS_LDS", "SQWGP19", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP19_SQ_PERF_SEL_INSTS_SALU", "SQWGP19", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP19_SQ_PERF_SEL_INSTS_SMEM", "SQWGP19", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP19_SQ_PERF_SEL_INSTS_VALU", "SQWGP19", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP19_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP19", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP19_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP19", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP19_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP19", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP19_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP19", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP19_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP19", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP19_SQC_PERF_SEL_ICACHE_REQ", "SQWGP19", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP19_SQC_PERF_SEL_ICACHE_HITS", "SQWGP19", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP19_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP19", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP19_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP19", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP19_SQC_PERF_SEL_DCACHE_REQ", "SQWGP19", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP19_SQC_PERF_SEL_DCACHE_HITS", "SQWGP19", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP19_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP19", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP19_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP19", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp20CountersGfx11 = {
        {4, "SQWGP20_SQ_PERF_SEL_WAVES", "SQWGP20", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP20_SQ_PERF_SEL_WAVES_32", "SQWGP20", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP20_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP20", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP20_SQ_PERF_SEL_ITEMS", "SQWGP20", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP20_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP20", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP20_SQ_PERF_SEL_INSTS_GDS", "SQWGP20", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP20_SQ_PERF_SEL_INSTS_FLAT", "SQWGP20", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP20_SQ_PERF_SEL_INSTS_LDS", "SQWGP20", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP20_SQ_PERF_SEL_INSTS_SALU", "SQWGP20", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP20_SQ_PERF_SEL_INSTS_SMEM", "SQWGP20", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP20_SQ_PERF_SEL_INSTS_VALU", "SQWGP20", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP20_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP20", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP20_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP20", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP20_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP20", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP20_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP20", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP20_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP20", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP20_SQC_PERF_SEL_ICACHE_REQ", "SQWGP20", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP20_SQC_PERF_SEL_ICACHE_HITS", "SQWGP20", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP20_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP20", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP20_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP20", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP20_SQC_PERF_SEL_DCACHE_REQ", "SQWGP20", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP20_SQC_PERF_SEL_DCACHE_HITS", "SQWGP20", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP20_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP20", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP20_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP20", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp21CountersGfx11 = {
        {4, "SQWGP21_SQ_PERF_SEL_WAVES", "SQWGP21", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP21_SQ_PERF_SEL_WAVES_32", "SQWGP21", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP21_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP21", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP21_SQ_PERF_SEL_ITEMS", "SQWGP21", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP21_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP21", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP21_SQ_PERF_SEL_INSTS_GDS", "SQWGP21", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP21_SQ_PERF_SEL_INSTS_FLAT", "SQWGP21", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP21_SQ_PERF_SEL_INSTS_LDS", "SQWGP21", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP21_SQ_PERF_SEL_INSTS_SALU", "SQWGP21", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP21_SQ_PERF_SEL_INSTS_SMEM", "SQWGP21", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP21_SQ_PERF_SEL_INSTS_VALU", "SQWGP21", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP21_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP21", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP21_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP21", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP21_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP21", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP21_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP21", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP21_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP21", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP21_SQC_PERF_SEL_ICACHE_REQ", "SQWGP21", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP21_SQC_PERF_SEL_ICACHE_HITS", "SQWGP21", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP21_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP21", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP21_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP21", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP21_SQC_PERF_SEL_DCACHE_REQ", "SQWGP21", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP21_SQC_PERF_SEL_DCACHE_HITS", "SQWGP21", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP21_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP21", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP21_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP21", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp22CountersGfx11 = {
        {4, "SQWGP22_SQ_PERF_SEL_WAVES", "SQWGP22", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP22_SQ_PERF_SEL_WAVES_32", "SQWGP22", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP22_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP22", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP22_SQ_PERF_SEL_ITEMS", "SQWGP22", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP22_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP22", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP22_SQ_PERF_SEL_INSTS_GDS", "SQWGP22", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP22_SQ_PERF_SEL_INSTS_FLAT", "SQWGP22", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP22_SQ_PERF_SEL_INSTS_LDS", "SQWGP22", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP22_SQ_PERF_SEL_INSTS_SALU", "SQWGP22", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP22_SQ_PERF_SEL_INSTS_SMEM", "SQWGP22", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP22_SQ_PERF_SEL_INSTS_VALU", "SQWGP22", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP22_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP22", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP22_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP22", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP22_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP22", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP22_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP22", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP22_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP22", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP22_SQC_PERF_SEL_ICACHE_REQ", "SQWGP22", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP22_SQC_PERF_SEL_ICACHE_HITS", "SQWGP22", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP22_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP22", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP22_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP22", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP22_SQC_PERF_SEL_DCACHE_REQ", "SQWGP22", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP22_SQC_PERF_SEL_DCACHE_HITS", "SQWGP22", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP22_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP22", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP22_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP22", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp23CountersGfx11 = {
        {4, "SQWGP23_SQ_PERF_SEL_WAVES", "SQWGP23", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP23_SQ_PERF_SEL_WAVES_32", "SQWGP23", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP23_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP23", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP23_SQ_PERF_SEL_ITEMS", "SQWGP23", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP23_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP23", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP23_SQ_PERF_SEL_INSTS_GDS", "SQWGP23", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP23_SQ_PERF_SEL_INSTS_FLAT", "SQWGP23", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP23_SQ_PERF_SEL_INSTS_LDS", "SQWGP23", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP23_SQ_PERF_SEL_INSTS_SALU", "SQWGP23", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP23_SQ_PERF_SEL_INSTS_SMEM", "SQWGP23", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP23_SQ_PERF_SEL_INSTS_VALU", "SQWGP23", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP23_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP23", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP23_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP23", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP23_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP23", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP23_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP23", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP23_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP23", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP23_SQC_PERF_SEL_ICACHE_REQ", "SQWGP23", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP23_SQC_PERF_SEL_ICACHE_HITS", "SQWGP23", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP23_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP23", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP23_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP23", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP23_SQC_PERF_SEL_DCACHE_REQ", "SQWGP23", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP23_SQC_PERF_SEL_DCACHE_HITS", "SQWGP23", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP23_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP23", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP23_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP23", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp24CountersGfx11 = {
        {4, "SQWGP24_SQ_PERF_SEL_WAVES", "SQWGP24", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP24_SQ_PERF_SEL_WAVES_32", "SQWGP24", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP24_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP24", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP24_SQ_PERF_SEL_ITEMS", "SQWGP24", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP24_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP24", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP24_SQ_PERF_SEL_INSTS_GDS", "SQWGP24", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP24_SQ_PERF_SEL_INSTS_FLAT", "SQWGP24", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP24_SQ_PERF_SEL_INSTS_LDS", "SQWGP24", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP24_SQ_PERF_SEL_INSTS_SALU", "SQWGP24", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP24_SQ_PERF_SEL_INSTS_SMEM", "SQWGP24", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP24_SQ_PERF_SEL_INSTS_VALU", "SQWGP24", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP24_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP24", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP24_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP24", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP24_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP24", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP24_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP24", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP24_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP24", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP24_SQC_PERF_SEL_ICACHE_REQ", "SQWGP24", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP24_SQC_PERF_SEL_ICACHE_HITS", "SQWGP24", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP24_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP24", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP24_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP24", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP24_SQC_PERF_SEL_DCACHE_REQ", "SQWGP24", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP24_SQC_PERF_SEL_DCACHE_HITS", "SQWGP24", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP24_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP24", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP24_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP24", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp25CountersGfx11 = {
        {4, "SQWGP25_SQ_PERF_SEL_WAVES", "SQWGP25", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP25_SQ_PERF_SEL_WAVES_32", "SQWGP25", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP25_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP25", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP25_SQ_PERF_SEL_ITEMS", "SQWGP25", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP25_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP25", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP25_SQ_PERF_SEL_INSTS_GDS", "SQWGP25", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP25_SQ_PERF_SEL_INSTS_FLAT", "SQWGP25", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP25_SQ_PERF_SEL_INSTS_LDS", "SQWGP25", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP25_SQ_PERF_SEL_INSTS_SALU", "SQWGP25", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP25_SQ_PERF_SEL_INSTS_SMEM", "SQWGP25", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP25_SQ_PERF_SEL_INSTS_VALU", "SQWGP25", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP25_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP25", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP25_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP25", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP25_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP25", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP25_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP25", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP25_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP25", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP25_SQC_PERF_SEL_ICACHE_REQ", "SQWGP25", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP25_SQC_PERF_SEL_ICACHE_HITS", "SQWGP25", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP25_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP25", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP25_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP25", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP25_SQC_PERF_SEL_DCACHE_REQ", "SQWGP25", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP25_SQC_PERF_SEL_DCACHE_HITS", "SQWGP25", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP25_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP25", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP25_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP25", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp26CountersGfx11 = {
        {4, "SQWGP26_SQ_PERF_SEL_WAVES", "SQWGP26", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP26_SQ_PERF_SEL_WAVES_32", "SQWGP26", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP26_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP26", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP26_SQ_PERF_SEL_ITEMS", "SQWGP26", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP26_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP26", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP26_SQ_PERF_SEL_INSTS_GDS", "SQWGP26", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP26_SQ_PERF_SEL_INSTS_FLAT", "SQWGP26", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP26_SQ_PERF_SEL_INSTS_LDS", "SQWGP26", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP26_SQ_PERF_SEL_INSTS_SALU", "SQWGP26", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP26_SQ_PERF_SEL_INSTS_SMEM", "SQWGP26", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP26_SQ_PERF_SEL_INSTS_VALU", "SQWGP26", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP26_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP26", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP26_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP26", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP26_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP26", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP26_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP26", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP26_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP26", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP26_SQC_PERF_SEL_ICACHE_REQ", "SQWGP26", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP26_SQC_PERF_SEL_ICACHE_HITS", "SQWGP26", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP26_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP26", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP26_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP26", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP26_SQC_PERF_SEL_DCACHE_REQ", "SQWGP26", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP26_SQC_PERF_SEL_DCACHE_HITS", "SQWGP26", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP26_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP26", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP26_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP26", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp27CountersGfx11 = {
        {4, "SQWGP27_SQ_PERF_SEL_WAVES", "SQWGP27", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP27_SQ_PERF_SEL_WAVES_32", "SQWGP27", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP27_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP27", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP27_SQ_PERF_SEL_ITEMS", "SQWGP27", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP27_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP27", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP27_SQ_PERF_SEL_INSTS_GDS", "SQWGP27", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP27_SQ_PERF_SEL_INSTS_FLAT", "SQWGP27", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP27_SQ_PERF_SEL_INSTS_LDS", "SQWGP27", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP27_SQ_PERF_SEL_INSTS_SALU", "SQWGP27", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP27_SQ_PERF_SEL_INSTS_SMEM", "SQWGP27", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP27_SQ_PERF_SEL_INSTS_VALU", "SQWGP27", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP27_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP27", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP27_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP27", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP27_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP27", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP27_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP27", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP27_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP27", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP27_SQC_PERF_SEL_ICACHE_REQ", "SQWGP27", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP27_SQC_PERF_SEL_ICACHE_HITS", "SQWGP27", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP27_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP27", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP27_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP27", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP27_SQC_PERF_SEL_DCACHE_REQ", "SQWGP27", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP27_SQC_PERF_SEL_DCACHE_HITS", "SQWGP27", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP27_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP27", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP27_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP27", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp28CountersGfx11 = {
        {4, "SQWGP28_SQ_PERF_SEL_WAVES", "SQWGP28", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP28_SQ_PERF_SEL_WAVES_32", "SQWGP28", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP28_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP28", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP28_SQ_PERF_SEL_ITEMS", "SQWGP28", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP28_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP28", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP28_SQ_PERF_SEL_INSTS_GDS", "SQWGP28", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP28_SQ_PERF_SEL_INSTS_FLAT", "SQWGP28", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP28_SQ_PERF_SEL_INSTS_LDS", "SQWGP28", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP28_SQ_PERF_SEL_INSTS_SALU", "SQWGP28", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP28_SQ_PERF_SEL_INSTS_SMEM", "SQWGP28", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP28_SQ_PERF_SEL_INSTS_VALU", "SQWGP28", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP28_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP28", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP28_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP28", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP28_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP28", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP28_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP28", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP28_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP28", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP28_SQC_PERF_SEL_ICACHE_REQ", "SQWGP28", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP28_SQC_PERF_SEL_ICACHE_HITS", "SQWGP28", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP28_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP28", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP28_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP28", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP28_SQC_PERF_SEL_DCACHE_REQ", "SQWGP28", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP28_SQC_PERF_SEL_DCACHE_HITS", "SQWGP28", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP28_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP28", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP28_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP28", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp29CountersGfx11 = {
        {4, "SQWGP29_SQ_PERF_SEL_WAVES", "SQWGP29", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP29_SQ_PERF_SEL_WAVES_32", "SQWGP29", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP29_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP29", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP29_SQ_PERF_SEL_ITEMS", "SQWGP29", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP29_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP29", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP29_SQ_PERF_SEL_INSTS_GDS", "SQWGP29", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP29_SQ_PERF_SEL_INSTS_FLAT", "SQWGP29", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP29_SQ_PERF_SEL_INSTS_LDS", "SQWGP29", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP29_SQ_PERF_SEL_INSTS_SALU", "SQWGP29", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP29_SQ_PERF_SEL_INSTS_SMEM", "SQWGP29", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP29_SQ_PERF_SEL_INSTS_VALU", "SQWGP29", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP29_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP29", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP29_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP29", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP29_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP29", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP29_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP29", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP29_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP29", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP29_SQC_PERF_SEL_ICACHE_REQ", "SQWGP29", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP29_SQC_PERF_SEL_ICACHE_HITS", "SQWGP29", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP29_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP29", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP29_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP29", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP29_SQC_PERF_SEL_DCACHE_REQ", "SQWGP29", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP29_SQC_PERF_SEL_DCACHE_HITS", "SQWGP29", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP29_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP29", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP29_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP29", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp30CountersGfx11 = {
        {4, "SQWGP30_SQ_PERF_SEL_WAVES", "SQWGP30", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP30_SQ_PERF_SEL_WAVES_32", "SQWGP30", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP30_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP30", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP30_SQ_PERF_SEL_ITEMS", "SQWGP30", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP30_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP30", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP30_SQ_PERF_SEL_INSTS_GDS", "SQWGP30", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP30_SQ_PERF_SEL_INSTS_FLAT", "SQWGP30", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP30_SQ_PERF_SEL_INSTS_LDS", "SQWGP30", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP30_SQ_PERF_SEL_INSTS_SALU", "SQWGP30", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP30_SQ_PERF_SEL_INSTS_SMEM", "SQWGP30", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP30_SQ_PERF_SEL_INSTS_VALU", "SQWGP30", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP30_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP30", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP30_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP30", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP30_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP30", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP30_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP30", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP30_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP30", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP30_SQC_PERF_SEL_ICACHE_REQ", "SQWGP30", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP30_SQC_PERF_SEL_ICACHE_HITS", "SQWGP30", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP30_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP30", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP30_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP30", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP30_SQC_PERF_SEL_DCACHE_REQ", "SQWGP30", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP30_SQC_PERF_SEL_DCACHE_HITS", "SQWGP30", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP30_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP30", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP30_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP30", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp31CountersGfx11 = {
        {4, "SQWGP31_SQ_PERF_SEL_WAVES", "SQWGP31", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP31_SQ_PERF_SEL_WAVES_32", "SQWGP31", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP31_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP31", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP31_SQ_PERF_SEL_ITEMS", "SQWGP31", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP31_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP31", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP31_SQ_PERF_SEL_INSTS_GDS", "SQWGP31", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP31_SQ_PERF_SEL_INSTS_FLAT", "SQWGP31", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP31_SQ_PERF_SEL_INSTS_LDS", "SQWGP31", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP31_SQ_PERF_SEL_INSTS_SALU", "SQWGP31", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP31_SQ_PERF_SEL_INSTS_SMEM", "SQWGP31", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP31_SQ_PERF_SEL_INSTS_VALU", "SQWGP31", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP31_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP31", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP31_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP31", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP31_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP31", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP31_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP31", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP31_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP31", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP31_SQC_PERF_SEL_ICACHE_REQ", "SQWGP31", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP31_SQC_PERF_SEL_ICACHE_HITS", "SQWGP31", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP31_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP31", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP31_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP31", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP31_SQC_PERF_SEL_DCACHE_REQ", "SQWGP31", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP31_SQC_PERF_SEL_DCACHE_HITS", "SQWGP31", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP31_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP31", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP31_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP31", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp32CountersGfx11 = {
        {4, "SQWGP32_SQ_PERF_SEL_WAVES", "SQWGP32", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP32_SQ_PERF_SEL_WAVES_32", "SQWGP32", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP32_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP32", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP32_SQ_PERF_SEL_ITEMS", "SQWGP32", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP32_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP32", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP32_SQ_PERF_SEL_INSTS_GDS", "SQWGP32", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP32_SQ_PERF_SEL_INSTS_FLAT", "SQWGP32", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP32_SQ_PERF_SEL_INSTS_LDS", "SQWGP32", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP32_SQ_PERF_SEL_INSTS_SALU", "SQWGP32", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP32_SQ_PERF_SEL_INSTS_SMEM", "SQWGP32", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP32_SQ_PERF_SEL_INSTS_VALU", "SQWGP32", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP32_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP32", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP32_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP32", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP32_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP32", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP32_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP32", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP32_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP32", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP32_SQC_PERF_SEL_ICACHE_REQ", "SQWGP32", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP32_SQC_PERF_SEL_ICACHE_HITS", "SQWGP32", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP32_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP32", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP32_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP32", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP32_SQC_PERF_SEL_DCACHE_REQ", "SQWGP32", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP32_SQC_PERF_SEL_DCACHE_HITS", "SQWGP32", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP32_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP32", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP32_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP32", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp33CountersGfx11 = {
        {4, "SQWGP33_SQ_PERF_SEL_WAVES", "SQWGP33", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP33_SQ_PERF_SEL_WAVES_32", "SQWGP33", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP33_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP33", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP33_SQ_PERF_SEL_ITEMS", "SQWGP33", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP33_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP33", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP33_SQ_PERF_SEL_INSTS_GDS", "SQWGP33", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP33_SQ_PERF_SEL_INSTS_FLAT", "SQWGP33", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP33_SQ_PERF_SEL_INSTS_LDS", "SQWGP33", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP33_SQ_PERF_SEL_INSTS_SALU", "SQWGP33", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP33_SQ_PERF_SEL_INSTS_SMEM", "SQWGP33", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP33_SQ_PERF_SEL_INSTS_VALU", "SQWGP33", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP33_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP33", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP33_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP33", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP33_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP33", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP33_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP33", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP33_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP33", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP33_SQC_PERF_SEL_ICACHE_REQ", "SQWGP33", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP33_SQC_PERF_SEL_ICACHE_HITS", "SQWGP33", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP33_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP33", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP33_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP33", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP33_SQC_PERF_SEL_DCACHE_REQ", "SQWGP33", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP33_SQC_PERF_SEL_DCACHE_HITS", "SQWGP33", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP33_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP33", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP33_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP33", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp34CountersGfx11 = {
        {4, "SQWGP34_SQ_PERF_SEL_WAVES", "SQWGP34", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP34_SQ_PERF_SEL_WAVES_32", "SQWGP34", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP34_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP34", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP34_SQ_PERF_SEL_ITEMS", "SQWGP34", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP34_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP34", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP34_SQ_PERF_SEL_INSTS_GDS", "SQWGP34", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP34_SQ_PERF_SEL_INSTS_FLAT", "SQWGP34", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP34_SQ_PERF_SEL_INSTS_LDS", "SQWGP34", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP34_SQ_PERF_SEL_INSTS_SALU", "SQWGP34", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP34_SQ_PERF_SEL_INSTS_SMEM", "SQWGP34", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP34_SQ_PERF_SEL_INSTS_VALU", "SQWGP34", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP34_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP34", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP34_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP34", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP34_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP34", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP34_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP34", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP34_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP34", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP34_SQC_PERF_SEL_ICACHE_REQ", "SQWGP34", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP34_SQC_PERF_SEL_ICACHE_HITS", "SQWGP34", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP34_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP34", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP34_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP34", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP34_SQC_PERF_SEL_DCACHE_REQ", "SQWGP34", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP34_SQC_PERF_SEL_DCACHE_HITS", "SQWGP34", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP34_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP34", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP34_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP34", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp35CountersGfx11 = {
        {4, "SQWGP35_SQ_PERF_SEL_WAVES", "SQWGP35", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP35_SQ_PERF_SEL_WAVES_32", "SQWGP35", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP35_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP35", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP35_SQ_PERF_SEL_ITEMS", "SQWGP35", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP35_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP35", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP35_SQ_PERF_SEL_INSTS_GDS", "SQWGP35", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP35_SQ_PERF_SEL_INSTS_FLAT", "SQWGP35", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP35_SQ_PERF_SEL_INSTS_LDS", "SQWGP35", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP35_SQ_PERF_SEL_INSTS_SALU", "SQWGP35", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP35_SQ_PERF_SEL_INSTS_SMEM", "SQWGP35", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP35_SQ_PERF_SEL_INSTS_VALU", "SQWGP35", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP35_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP35", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP35_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP35", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP35_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP35", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP35_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP35", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP35_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP35", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP35_SQC_PERF_SEL_ICACHE_REQ", "SQWGP35", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP35_SQC_PERF_SEL_ICACHE_HITS", "SQWGP35", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP35_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP35", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP35_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP35", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP35_SQC_PERF_SEL_DCACHE_REQ", "SQWGP35", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP35_SQC_PERF_SEL_DCACHE_HITS", "SQWGP35", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP35_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP35", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP35_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP35", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp36CountersGfx11 = {
        {4, "SQWGP36_SQ_PERF_SEL_WAVES", "SQWGP36", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP36_SQ_PERF_SEL_WAVES_32", "SQWGP36", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP36_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP36", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP36_SQ_PERF_SEL_ITEMS", "SQWGP36", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP36_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP36", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP36_SQ_PERF_SEL_INSTS_GDS", "SQWGP36", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP36_SQ_PERF_SEL_INSTS_FLAT", "SQWGP36", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP36_SQ_PERF_SEL_INSTS_LDS", "SQWGP36", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP36_SQ_PERF_SEL_INSTS_SALU", "SQWGP36", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP36_SQ_PERF_SEL_INSTS_SMEM", "SQWGP36", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP36_SQ_PERF_SEL_INSTS_VALU", "SQWGP36", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP36_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP36", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP36_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP36", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP36_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP36", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP36_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP36", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP36_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP36", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP36_SQC_PERF_SEL_ICACHE_REQ", "SQWGP36", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP36_SQC_PERF_SEL_ICACHE_HITS", "SQWGP36", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP36_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP36", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP36_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP36", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP36_SQC_PERF_SEL_DCACHE_REQ", "SQWGP36", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP36_SQC_PERF_SEL_DCACHE_HITS", "SQWGP36", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP36_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP36", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP36_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP36", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp37CountersGfx11 = {
        {4, "SQWGP37_SQ_PERF_SEL_WAVES", "SQWGP37", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP37_SQ_PERF_SEL_WAVES_32", "SQWGP37", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP37_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP37", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP37_SQ_PERF_SEL_ITEMS", "SQWGP37", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP37_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP37", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP37_SQ_PERF_SEL_INSTS_GDS", "SQWGP37", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP37_SQ_PERF_SEL_INSTS_FLAT", "SQWGP37", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP37_SQ_PERF_SEL_INSTS_LDS", "SQWGP37", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP37_SQ_PERF_SEL_INSTS_SALU", "SQWGP37", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP37_SQ_PERF_SEL_INSTS_SMEM", "SQWGP37", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP37_SQ_PERF_SEL_INSTS_VALU", "SQWGP37", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP37_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP37", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP37_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP37", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP37_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP37", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP37_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP37", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP37_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP37", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP37_SQC_PERF_SEL_ICACHE_REQ", "SQWGP37", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP37_SQC_PERF_SEL_ICACHE_HITS", "SQWGP37", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP37_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP37", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP37_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP37", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP37_SQC_PERF_SEL_DCACHE_REQ", "SQWGP37", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP37_SQC_PERF_SEL_DCACHE_HITS", "SQWGP37", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP37_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP37", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP37_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP37", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp38CountersGfx11 = {
        {4, "SQWGP38_SQ_PERF_SEL_WAVES", "SQWGP38", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP38_SQ_PERF_SEL_WAVES_32", "SQWGP38", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP38_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP38", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP38_SQ_PERF_SEL_ITEMS", "SQWGP38", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP38_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP38", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP38_SQ_PERF_SEL_INSTS_GDS", "SQWGP38", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP38_SQ_PERF_SEL_INSTS_FLAT", "SQWGP38", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP38_SQ_PERF_SEL_INSTS_LDS", "SQWGP38", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP38_SQ_PERF_SEL_INSTS_SALU", "SQWGP38", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP38_SQ_PERF_SEL_INSTS_SMEM", "SQWGP38", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP38_SQ_PERF_SEL_INSTS_VALU", "SQWGP38", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP38_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP38", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP38_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP38", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP38_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP38", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP38_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP38", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP38_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP38", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP38_SQC_PERF_SEL_ICACHE_REQ", "SQWGP38", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP38_SQC_PERF_SEL_ICACHE_HITS", "SQWGP38", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP38_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP38", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP38_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP38", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP38_SQC_PERF_SEL_DCACHE_REQ", "SQWGP38", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP38_SQC_PERF_SEL_DCACHE_HITS", "SQWGP38", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP38_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP38", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP38_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP38", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp39CountersGfx11 = {
        {4, "SQWGP39_SQ_PERF_SEL_WAVES", "SQWGP39", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP39_SQ_PERF_SEL_WAVES_32", "SQWGP39", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP39_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP39", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP39_SQ_PERF_SEL_ITEMS", "SQWGP39", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP39_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP39", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP39_SQ_PERF_SEL_INSTS_GDS", "SQWGP39", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP39_SQ_PERF_SEL_INSTS_FLAT", "SQWGP39", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP39_SQ_PERF_SEL_INSTS_LDS", "SQWGP39", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP39_SQ_PERF_SEL_INSTS_SALU", "SQWGP39", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP39_SQ_PERF_SEL_INSTS_SMEM", "SQWGP39", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP39_SQ_PERF_SEL_INSTS_VALU", "SQWGP39", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP39_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP39", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP39_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP39", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP39_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP39", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP39_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP39", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP39_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP39", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP39_SQC_PERF_SEL_ICACHE_REQ", "SQWGP39", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP39_SQC_PERF_SEL_ICACHE_HITS", "SQWGP39", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP39_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP39", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP39_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP39", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP39_SQC_PERF_SEL_DCACHE_REQ", "SQWGP39", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP39_SQC_PERF_SEL_DCACHE_HITS", "SQWGP39", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP39_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP39", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP39_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP39", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp40CountersGfx11 = {
        {4, "SQWGP40_SQ_PERF_SEL_WAVES", "SQWGP40", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP40_SQ_PERF_SEL_WAVES_32", "SQWGP40", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP40_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP40", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP40_SQ_PERF_SEL_ITEMS", "SQWGP40", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP40_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP40", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP40_SQ_PERF_SEL_INSTS_GDS", "SQWGP40", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP40_SQ_PERF_SEL_INSTS_FLAT", "SQWGP40", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP40_SQ_PERF_SEL_INSTS_LDS", "SQWGP40", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP40_SQ_PERF_SEL_INSTS_SALU", "SQWGP40", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP40_SQ_PERF_SEL_INSTS_SMEM", "SQWGP40", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP40_SQ_PERF_SEL_INSTS_VALU", "SQWGP40", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP40_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP40", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP40_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP40", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP40_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP40", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP40_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP40", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP40_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP40", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP40_SQC_PERF_SEL_ICACHE_REQ", "SQWGP40", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP40_SQC_PERF_SEL_ICACHE_HITS", "SQWGP40", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP40_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP40", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP40_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP40", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP40_SQC_PERF_SEL_DCACHE_REQ", "SQWGP40", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP40_SQC_PERF_SEL_DCACHE_HITS", "SQWGP40", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP40_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP40", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP40_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP40", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp41CountersGfx11 = {
        {4, "SQWGP41_SQ_PERF_SEL_WAVES", "SQWGP41", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP41_SQ_PERF_SEL_WAVES_32", "SQWGP41", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP41_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP41", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP41_SQ_PERF_SEL_ITEMS", "SQWGP41", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP41_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP41", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP41_SQ_PERF_SEL_INSTS_GDS", "SQWGP41", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP41_SQ_PERF_SEL_INSTS_FLAT", "SQWGP41", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP41_SQ_PERF_SEL_INSTS_LDS", "SQWGP41", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP41_SQ_PERF_SEL_INSTS_SALU", "SQWGP41", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP41_SQ_PERF_SEL_INSTS_SMEM", "SQWGP41", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP41_SQ_PERF_SEL_INSTS_VALU", "SQWGP41", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP41_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP41", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP41_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP41", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP41_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP41", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP41_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP41", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP41_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP41", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP41_SQC_PERF_SEL_ICACHE_REQ", "SQWGP41", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP41_SQC_PERF_SEL_ICACHE_HITS", "SQWGP41", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP41_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP41", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP41_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP41", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP41_SQC_PERF_SEL_DCACHE_REQ", "SQWGP41", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP41_SQC_PERF_SEL_DCACHE_HITS", "SQWGP41", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP41_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP41", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP41_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP41", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp42CountersGfx11 = {
        {4, "SQWGP42_SQ_PERF_SEL_WAVES", "SQWGP42", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP42_SQ_PERF_SEL_WAVES_32", "SQWGP42", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP42_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP42", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP42_SQ_PERF_SEL_ITEMS", "SQWGP42", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP42_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP42", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP42_SQ_PERF_SEL_INSTS_GDS", "SQWGP42", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP42_SQ_PERF_SEL_INSTS_FLAT", "SQWGP42", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP42_SQ_PERF_SEL_INSTS_LDS", "SQWGP42", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP42_SQ_PERF_SEL_INSTS_SALU", "SQWGP42", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP42_SQ_PERF_SEL_INSTS_SMEM", "SQWGP42", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP42_SQ_PERF_SEL_INSTS_VALU", "SQWGP42", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP42_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP42", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP42_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP42", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP42_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP42", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP42_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP42", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP42_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP42", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP42_SQC_PERF_SEL_ICACHE_REQ", "SQWGP42", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP42_SQC_PERF_SEL_ICACHE_HITS", "SQWGP42", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP42_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP42", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP42_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP42", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP42_SQC_PERF_SEL_DCACHE_REQ", "SQWGP42", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP42_SQC_PERF_SEL_DCACHE_HITS", "SQWGP42", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP42_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP42", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP42_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP42", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp43CountersGfx11 = {
        {4, "SQWGP43_SQ_PERF_SEL_WAVES", "SQWGP43", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP43_SQ_PERF_SEL_WAVES_32", "SQWGP43", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP43_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP43", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP43_SQ_PERF_SEL_ITEMS", "SQWGP43", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP43_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP43", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP43_SQ_PERF_SEL_INSTS_GDS", "SQWGP43", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP43_SQ_PERF_SEL_INSTS_FLAT", "SQWGP43", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP43_SQ_PERF_SEL_INSTS_LDS", "SQWGP43", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP43_SQ_PERF_SEL_INSTS_SALU", "SQWGP43", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP43_SQ_PERF_SEL_INSTS_SMEM", "SQWGP43", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP43_SQ_PERF_SEL_INSTS_VALU", "SQWGP43", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP43_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP43", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP43_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP43", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP43_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP43", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP43_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP43", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP43_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP43", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP43_SQC_PERF_SEL_ICACHE_REQ", "SQWGP43", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP43_SQC_PERF_SEL_ICACHE_HITS", "SQWGP43", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP43_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP43", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP43_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP43", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP43_SQC_PERF_SEL_DCACHE_REQ", "SQWGP43", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP43_SQC_PERF_SEL_DCACHE_HITS", "SQWGP43", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP43_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP43", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP43_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP43", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp44CountersGfx11 = {
        {4, "SQWGP44_SQ_PERF_SEL_WAVES", "SQWGP44", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP44_SQ_PERF_SEL_WAVES_32", "SQWGP44", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP44_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP44", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP44_SQ_PERF_SEL_ITEMS", "SQWGP44", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP44_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP44", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP44_SQ_PERF_SEL_INSTS_GDS", "SQWGP44", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP44_SQ_PERF_SEL_INSTS_FLAT", "SQWGP44", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP44_SQ_PERF_SEL_INSTS_LDS", "SQWGP44", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP44_SQ_PERF_SEL_INSTS_SALU", "SQWGP44", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP44_SQ_PERF_SEL_INSTS_SMEM", "SQWGP44", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP44_SQ_PERF_SEL_INSTS_VALU", "SQWGP44", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP44_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP44", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP44_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP44", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP44_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP44", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP44_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP44", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP44_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP44", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP44_SQC_PERF_SEL_ICACHE_REQ", "SQWGP44", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP44_SQC_PERF_SEL_ICACHE_HITS", "SQWGP44", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP44_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP44", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP44_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP44", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP44_SQC_PERF_SEL_DCACHE_REQ", "SQWGP44", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP44_SQC_PERF_SEL_DCACHE_HITS", "SQWGP44", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP44_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP44", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP44_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP44", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp45CountersGfx11 = {
        {4, "SQWGP45_SQ_PERF_SEL_WAVES", "SQWGP45", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP45_SQ_PERF_SEL_WAVES_32", "SQWGP45", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP45_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP45", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP45_SQ_PERF_SEL_ITEMS", "SQWGP45", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP45_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP45", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP45_SQ_PERF_SEL_INSTS_GDS", "SQWGP45", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP45_SQ_PERF_SEL_INSTS_FLAT", "SQWGP45", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP45_SQ_PERF_SEL_INSTS_LDS", "SQWGP45", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP45_SQ_PERF_SEL_INSTS_SALU", "SQWGP45", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP45_SQ_PERF_SEL_INSTS_SMEM", "SQWGP45", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP45_SQ_PERF_SEL_INSTS_VALU", "SQWGP45", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP45_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP45", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP45_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP45", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP45_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP45", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP45_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP45", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP45_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP45", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP45_SQC_PERF_SEL_ICACHE_REQ", "SQWGP45", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP45_SQC_PERF_SEL_ICACHE_HITS", "SQWGP45", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP45_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP45", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP45_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP45", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP45_SQC_PERF_SEL_DCACHE_REQ", "SQWGP45", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP45_SQC_PERF_SEL_DCACHE_HITS", "SQWGP45", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP45_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP45", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP45_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP45", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp46CountersGfx11 = {
        {4, "SQWGP46_SQ_PERF_SEL_WAVES", "SQWGP46", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP46_SQ_PERF_SEL_WAVES_32", "SQWGP46", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP46_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP46", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP46_SQ_PERF_SEL_ITEMS", "SQWGP46", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP46_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP46", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP46_SQ_PERF_SEL_INSTS_GDS", "SQWGP46", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP46_SQ_PERF_SEL_INSTS_FLAT", "SQWGP46", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP46_SQ_PERF_SEL_INSTS_LDS", "SQWGP46", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP46_SQ_PERF_SEL_INSTS_SALU", "SQWGP46", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP46_SQ_PERF_SEL_INSTS_SMEM", "SQWGP46", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP46_SQ_PERF_SEL_INSTS_VALU", "SQWGP46", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP46_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP46", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP46_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP46", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP46_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP46", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP46_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP46", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP46_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP46", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP46_SQC_PERF_SEL_ICACHE_REQ", "SQWGP46", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP46_SQC_PERF_SEL_ICACHE_HITS", "SQWGP46", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP46_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP46", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP46_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP46", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP46_SQC_PERF_SEL_DCACHE_REQ", "SQWGP46", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP46_SQC_PERF_SEL_DCACHE_HITS", "SQWGP46", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP46_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP46", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP46_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP46", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgp47CountersGfx11 = {
        {4, "SQWGP47_SQ_PERF_SEL_WAVES", "SQWGP47", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP47_SQ_PERF_SEL_WAVES_32", "SQWGP47", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP47_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP47", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP47_SQ_PERF_SEL_ITEMS", "SQWGP47", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP47_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP47", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP47_SQ_PERF_SEL_INSTS_GDS", "SQWGP47", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP47_SQ_PERF_SEL_INSTS_FLAT", "SQWGP47", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP47_SQ_PERF_SEL_INSTS_LDS", "SQWGP47", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP47_SQ_PERF_SEL_INSTS_SALU", "SQWGP47", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP47_SQ_PERF_SEL_INSTS_SMEM", "SQWGP47", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP47_SQ_PERF_SEL_INSTS_VALU", "SQWGP47", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP47_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP47", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP47_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP47", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP47_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP47", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP47_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP47", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP47_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP47", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP47_SQC_PERF_SEL_ICACHE_REQ", "SQWGP47", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP47_SQC_PERF_SEL_ICACHE_HITS", "SQWGP47", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP47_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP47", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP47_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP47", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP47_SQC_PERF_SEL_DCACHE_REQ", "SQWGP47", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP47_SQC_PERF_SEL_DCACHE_HITS", "SQWGP47", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP47_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP47", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP47_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP47", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs0CountersGfx11 = {
        {4, "SQWGP_GS0_SQ_PERF_SEL_WAVES", "SQWGP_GS0", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS0_SQ_PERF_SEL_WAVES_32", "SQWGP_GS0", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS0_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS0", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS0_SQ_PERF_SEL_ITEMS", "SQWGP_GS0", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS0_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS0", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS0_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS0", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS0_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS0", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS0_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS0", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS0_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS0", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS0_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS0", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS0_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS0", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS0_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS0", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS0_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS0", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS0_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS0", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS0_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS0", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS0_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS0", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS0_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS0", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS0_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS0", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS0_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS0", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS0_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS0", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS0_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS0", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS0_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS0", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS0_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS0", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS0_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS0", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs1CountersGfx11 = {
        {4, "SQWGP_GS1_SQ_PERF_SEL_WAVES", "SQWGP_GS1", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS1_SQ_PERF_SEL_WAVES_32", "SQWGP_GS1", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS1_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS1", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS1_SQ_PERF_SEL_ITEMS", "SQWGP_GS1", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS1_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS1", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS1_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS1", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS1_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS1", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS1_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS1", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS1_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS1", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS1_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS1", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS1_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS1", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS1_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS1", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS1_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS1", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS1_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS1", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS1_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS1", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS1_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS1", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS1_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS1", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS1_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS1", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS1_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS1", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS1_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS1", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS1_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS1", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS1_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS1", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS1_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS1", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS1_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS1", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs2CountersGfx11 = {
        {4, "SQWGP_GS2_SQ_PERF_SEL_WAVES", "SQWGP_GS2", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS2_SQ_PERF_SEL_WAVES_32", "SQWGP_GS2", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS2_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS2", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS2_SQ_PERF_SEL_ITEMS", "SQWGP_GS2", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS2_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS2", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS2_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS2", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS2_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS2", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS2_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS2", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS2_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS2", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS2_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS2", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS2_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS2", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS2_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS2", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS2_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS2", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS2_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS2", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS2_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS2", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS2_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS2", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS2_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS2", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS2_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS2", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS2_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS2", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS2_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS2", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS2_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS2", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS2_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS2", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS2_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS2", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS2_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS2", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs3CountersGfx11 = {
        {4, "SQWGP_GS3_SQ_PERF_SEL_WAVES", "SQWGP_GS3", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS3_SQ_PERF_SEL_WAVES_32", "SQWGP_GS3", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS3_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS3", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS3_SQ_PERF_SEL_ITEMS", "SQWGP_GS3", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS3_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS3", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS3_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS3", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS3_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS3", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS3_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS3", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS3_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS3", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS3_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS3", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS3_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS3", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS3_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS3", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS3_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS3", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS3_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS3", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS3_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS3", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS3_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS3", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS3_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS3", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS3_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS3", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS3_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS3", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS3_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS3", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS3_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS3", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS3_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS3", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS3_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS3", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS3_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS3", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs4CountersGfx11 = {
        {4, "SQWGP_GS4_SQ_PERF_SEL_WAVES", "SQWGP_GS4", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS4_SQ_PERF_SEL_WAVES_32", "SQWGP_GS4", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS4_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS4", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS4_SQ_PERF_SEL_ITEMS", "SQWGP_GS4", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS4_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS4", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS4_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS4", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS4_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS4", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS4_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS4", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS4_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS4", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS4_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS4", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS4_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS4", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS4_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS4", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS4_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS4", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS4_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS4", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS4_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS4", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS4_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS4", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS4_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS4", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS4_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS4", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS4_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS4", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS4_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS4", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS4_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS4", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS4_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS4", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS4_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS4", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS4_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS4", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs5CountersGfx11 = {
        {4, "SQWGP_GS5_SQ_PERF_SEL_WAVES", "SQWGP_GS5", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS5_SQ_PERF_SEL_WAVES_32", "SQWGP_GS5", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS5_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS5", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS5_SQ_PERF_SEL_ITEMS", "SQWGP_GS5", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS5_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS5", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS5_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS5", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS5_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS5", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS5_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS5", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS5_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS5", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS5_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS5", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS5_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS5", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS5_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS5", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS5_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS5", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS5_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS5", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS5_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS5", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS5_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS5", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS5_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS5", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS5_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS5", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS5_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS5", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS5_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS5", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS5_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS5", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS5_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS5", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS5_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS5", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS5_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS5", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs6CountersGfx11 = {
        {4, "SQWGP_GS6_SQ_PERF_SEL_WAVES", "SQWGP_GS6", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS6_SQ_PERF_SEL_WAVES_32", "SQWGP_GS6", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS6_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS6", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS6_SQ_PERF_SEL_ITEMS", "SQWGP_GS6", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS6_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS6", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS6_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS6", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS6_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS6", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS6_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS6", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS6_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS6", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS6_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS6", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS6_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS6", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS6_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS6", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS6_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS6", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS6_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS6", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS6_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS6", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS6_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS6", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS6_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS6", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS6_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS6", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS6_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS6", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS6_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS6", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS6_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS6", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS6_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS6", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS6_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS6", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS6_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS6", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs7CountersGfx11 = {
        {4, "SQWGP_GS7_SQ_PERF_SEL_WAVES", "SQWGP_GS7", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS7_SQ_PERF_SEL_WAVES_32", "SQWGP_GS7", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS7_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS7", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS7_SQ_PERF_SEL_ITEMS", "SQWGP_GS7", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS7_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS7", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS7_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS7", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS7_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS7", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS7_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS7", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS7_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS7", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS7_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS7", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS7_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS7", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS7_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS7", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS7_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS7", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS7_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS7", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS7_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS7", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS7_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS7", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS7_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS7", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS7_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS7", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS7_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS7", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS7_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS7", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS7_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS7", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS7_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS7", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS7_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS7", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS7_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS7", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs8CountersGfx11 = {
        {4, "SQWGP_GS8_SQ_PERF_SEL_WAVES", "SQWGP_GS8", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS8_SQ_PERF_SEL_WAVES_32", "SQWGP_GS8", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS8_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS8", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS8_SQ_PERF_SEL_ITEMS", "SQWGP_GS8", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS8_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS8", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS8_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS8", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS8_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS8", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS8_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS8", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS8_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS8", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS8_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS8", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS8_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS8", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS8_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS8", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS8_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS8", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS8_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS8", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS8_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS8", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS8_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS8", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS8_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS8", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS8_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS8", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS8_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS8", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS8_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS8", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS8_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS8", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS8_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS8", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS8_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS8", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS8_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS8", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs9CountersGfx11 = {
        {4, "SQWGP_GS9_SQ_PERF_SEL_WAVES", "SQWGP_GS9", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS9_SQ_PERF_SEL_WAVES_32", "SQWGP_GS9", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS9_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS9", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS9_SQ_PERF_SEL_ITEMS", "SQWGP_GS9", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS9_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS9", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS9_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS9", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS9_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS9", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS9_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS9", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS9_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS9", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS9_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS9", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS9_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS9", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS9_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS9", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS9_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS9", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS9_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS9", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS9_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS9", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS9_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS9", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS9_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS9", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS9_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS9", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS9_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS9", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS9_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS9", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS9_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS9", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS9_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS9", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS9_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS9", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS9_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS9", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs10CountersGfx11 = {
        {4, "SQWGP_GS10_SQ_PERF_SEL_WAVES", "SQWGP_GS10", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS10_SQ_PERF_SEL_WAVES_32", "SQWGP_GS10", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS10_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS10", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS10_SQ_PERF_SEL_ITEMS", "SQWGP_GS10", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS10_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS10", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS10_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS10", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS10_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS10", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS10_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS10", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS10_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS10", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS10_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS10", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS10_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS10", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS10_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS10", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS10_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS10", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS10_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS10", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS10_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS10", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS10_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS10", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS10_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS10", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS10_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS10", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS10_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS10", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS10_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS10", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS10_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS10", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS10_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS10", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS10_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS10", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS10_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS10", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs11CountersGfx11 = {
        {4, "SQWGP_GS11_SQ_PERF_SEL_WAVES", "SQWGP_GS11", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS11_SQ_PERF_SEL_WAVES_32", "SQWGP_GS11", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS11_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS11", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS11_SQ_PERF_SEL_ITEMS", "SQWGP_GS11", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS11_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS11", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS11_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS11", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS11_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS11", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS11_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS11", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS11_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS11", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS11_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS11", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS11_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS11", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS11_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS11", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS11_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS11", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS11_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS11", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS11_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS11", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS11_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS11", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS11_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS11", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS11_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS11", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS11_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS11", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS11_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS11", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS11_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS11", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS11_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS11", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS11_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS11", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS11_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS11", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs12CountersGfx11 = {
        {4, "SQWGP_GS12_SQ_PERF_SEL_WAVES", "SQWGP_GS12", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS12_SQ_PERF_SEL_WAVES_32", "SQWGP_GS12", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS12_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS12", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS12_SQ_PERF_SEL_ITEMS", "SQWGP_GS12", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS12_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS12", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS12_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS12", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS12_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS12", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS12_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS12", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS12_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS12", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS12_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS12", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS12_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS12", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS12_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS12", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS12_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS12", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS12_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS12", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS12_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS12", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS12_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS12", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS12_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS12", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS12_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS12", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS12_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS12", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS12_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS12", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS12_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS12", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS12_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS12", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS12_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS12", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS12_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS12", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs13CountersGfx11 = {
        {4, "SQWGP_GS13_SQ_PERF_SEL_WAVES", "SQWGP_GS13", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS13_SQ_PERF_SEL_WAVES_32", "SQWGP_GS13", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS13_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS13", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS13_SQ_PERF_SEL_ITEMS", "SQWGP_GS13", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS13_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS13", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS13_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS13", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS13_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS13", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS13_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS13", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS13_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS13", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS13_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS13", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS13_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS13", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS13_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS13", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS13_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS13", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS13_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS13", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS13_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS13", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS13_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS13", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS13_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS13", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS13_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS13", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS13_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS13", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS13_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS13", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS13_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS13", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS13_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS13", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS13_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS13", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS13_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS13", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs14CountersGfx11 = {
        {4, "SQWGP_GS14_SQ_PERF_SEL_WAVES", "SQWGP_GS14", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS14_SQ_PERF_SEL_WAVES_32", "SQWGP_GS14", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS14_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS14", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS14_SQ_PERF_SEL_ITEMS", "SQWGP_GS14", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS14_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS14", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS14_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS14", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS14_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS14", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS14_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS14", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS14_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS14", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS14_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS14", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS14_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS14", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS14_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS14", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS14_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS14", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS14_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS14", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS14_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS14", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS14_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS14", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS14_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS14", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS14_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS14", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS14_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS14", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS14_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS14", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS14_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS14", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS14_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS14", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS14_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS14", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS14_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS14", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs15CountersGfx11 = {
        {4, "SQWGP_GS15_SQ_PERF_SEL_WAVES", "SQWGP_GS15", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS15_SQ_PERF_SEL_WAVES_32", "SQWGP_GS15", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS15_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS15", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS15_SQ_PERF_SEL_ITEMS", "SQWGP_GS15", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS15_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS15", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS15_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS15", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS15_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS15", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS15_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS15", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS15_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS15", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS15_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS15", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS15_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS15", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS15_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS15", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS15_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS15", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS15_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS15", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS15_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS15", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS15_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS15", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS15_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS15", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS15_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS15", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS15_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS15", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS15_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS15", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS15_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS15", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS15_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS15", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS15_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS15", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS15_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS15", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs16CountersGfx11 = {
        {4, "SQWGP_GS16_SQ_PERF_SEL_WAVES", "SQWGP_GS16", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS16_SQ_PERF_SEL_WAVES_32", "SQWGP_GS16", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS16_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS16", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS16_SQ_PERF_SEL_ITEMS", "SQWGP_GS16", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS16_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS16", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS16_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS16", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS16_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS16", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS16_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS16", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS16_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS16", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS16_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS16", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS16_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS16", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS16_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS16", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS16_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS16", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS16_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS16", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS16_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS16", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS16_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS16", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS16_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS16", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS16_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS16", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS16_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS16", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS16_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS16", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS16_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS16", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS16_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS16", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS16_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS16", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS16_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS16", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs17CountersGfx11 = {
        {4, "SQWGP_GS17_SQ_PERF_SEL_WAVES", "SQWGP_GS17", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS17_SQ_PERF_SEL_WAVES_32", "SQWGP_GS17", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS17_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS17", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS17_SQ_PERF_SEL_ITEMS", "SQWGP_GS17", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS17_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS17", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS17_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS17", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS17_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS17", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS17_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS17", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS17_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS17", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS17_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS17", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS17_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS17", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS17_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS17", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS17_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS17", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS17_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS17", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS17_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS17", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS17_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS17", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS17_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS17", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS17_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS17", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS17_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS17", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS17_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS17", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS17_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS17", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS17_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS17", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS17_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS17", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS17_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS17", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs18CountersGfx11 = {
        {4, "SQWGP_GS18_SQ_PERF_SEL_WAVES", "SQWGP_GS18", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS18_SQ_PERF_SEL_WAVES_32", "SQWGP_GS18", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS18_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS18", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS18_SQ_PERF_SEL_ITEMS", "SQWGP_GS18", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS18_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS18", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS18_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS18", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS18_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS18", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS18_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS18", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS18_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS18", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS18_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS18", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS18_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS18", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS18_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS18", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS18_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS18", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS18_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS18", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS18_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS18", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS18_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS18", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS18_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS18", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS18_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS18", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS18_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS18", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS18_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS18", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS18_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS18", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS18_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS18", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS18_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS18", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS18_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS18", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs19CountersGfx11 = {
        {4, "SQWGP_GS19_SQ_PERF_SEL_WAVES", "SQWGP_GS19", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS19_SQ_PERF_SEL_WAVES_32", "SQWGP_GS19", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS19_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS19", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS19_SQ_PERF_SEL_ITEMS", "SQWGP_GS19", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS19_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS19", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS19_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS19", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS19_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS19", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS19_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS19", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS19_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS19", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS19_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS19", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS19_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS19", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS19_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS19", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS19_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS19", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS19_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS19", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS19_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS19", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS19_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS19", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS19_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS19", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS19_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS19", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS19_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS19", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS19_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS19", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS19_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS19", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS19_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS19", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS19_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS19", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS19_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS19", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs20CountersGfx11 = {
        {4, "SQWGP_GS20_SQ_PERF_SEL_WAVES", "SQWGP_GS20", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS20_SQ_PERF_SEL_WAVES_32", "SQWGP_GS20", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS20_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS20", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS20_SQ_PERF_SEL_ITEMS", "SQWGP_GS20", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS20_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS20", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS20_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS20", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS20_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS20", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS20_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS20", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS20_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS20", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS20_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS20", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS20_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS20", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS20_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS20", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS20_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS20", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS20_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS20", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS20_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS20", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS20_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS20", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS20_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS20", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS20_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS20", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS20_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS20", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS20_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS20", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS20_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS20", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS20_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS20", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS20_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS20", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS20_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS20", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs21CountersGfx11 = {
        {4, "SQWGP_GS21_SQ_PERF_SEL_WAVES", "SQWGP_GS21", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS21_SQ_PERF_SEL_WAVES_32", "SQWGP_GS21", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS21_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS21", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS21_SQ_PERF_SEL_ITEMS", "SQWGP_GS21", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS21_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS21", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS21_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS21", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS21_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS21", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS21_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS21", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS21_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS21", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS21_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS21", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS21_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS21", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS21_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS21", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS21_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS21", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS21_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS21", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS21_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS21", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS21_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS21", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS21_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS21", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS21_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS21", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS21_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS21", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS21_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS21", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS21_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS21", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS21_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS21", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS21_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS21", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS21_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS21", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs22CountersGfx11 = {
        {4, "SQWGP_GS22_SQ_PERF_SEL_WAVES", "SQWGP_GS22", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS22_SQ_PERF_SEL_WAVES_32", "SQWGP_GS22", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS22_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS22", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS22_SQ_PERF_SEL_ITEMS", "SQWGP_GS22", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS22_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS22", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS22_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS22", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS22_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS22", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS22_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS22", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS22_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS22", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS22_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS22", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS22_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS22", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS22_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS22", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS22_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS22", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS22_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS22", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS22_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS22", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS22_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS22", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS22_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS22", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS22_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS22", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS22_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS22", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS22_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS22", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS22_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS22", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS22_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS22", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS22_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS22", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS22_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS22", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs23CountersGfx11 = {
        {4, "SQWGP_GS23_SQ_PERF_SEL_WAVES", "SQWGP_GS23", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS23_SQ_PERF_SEL_WAVES_32", "SQWGP_GS23", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS23_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS23", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS23_SQ_PERF_SEL_ITEMS", "SQWGP_GS23", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS23_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS23", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS23_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS23", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS23_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS23", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS23_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS23", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS23_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS23", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS23_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS23", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS23_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS23", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS23_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS23", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS23_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS23", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS23_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS23", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS23_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS23", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS23_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS23", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS23_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS23", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS23_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS23", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS23_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS23", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS23_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS23", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS23_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS23", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS23_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS23", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS23_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS23", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS23_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS23", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs24CountersGfx11 = {
        {4, "SQWGP_GS24_SQ_PERF_SEL_WAVES", "SQWGP_GS24", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS24_SQ_PERF_SEL_WAVES_32", "SQWGP_GS24", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS24_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS24", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS24_SQ_PERF_SEL_ITEMS", "SQWGP_GS24", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS24_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS24", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS24_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS24", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS24_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS24", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS24_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS24", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS24_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS24", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS24_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS24", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS24_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS24", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS24_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS24", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS24_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS24", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS24_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS24", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS24_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS24", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS24_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS24", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS24_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS24", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS24_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS24", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS24_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS24", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS24_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS24", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS24_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS24", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS24_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS24", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS24_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS24", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS24_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS24", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs25CountersGfx11 = {
        {4, "SQWGP_GS25_SQ_PERF_SEL_WAVES", "SQWGP_GS25", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS25_SQ_PERF_SEL_WAVES_32", "SQWGP_GS25", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS25_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS25", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS25_SQ_PERF_SEL_ITEMS", "SQWGP_GS25", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS25_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS25", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS25_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS25", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS25_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS25", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS25_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS25", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS25_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS25", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS25_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS25", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS25_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS25", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS25_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS25", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS25_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS25", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS25_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS25", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS25_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS25", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS25_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS25", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS25_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS25", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS25_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS25", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS25_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS25", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS25_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS25", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS25_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS25", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS25_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS25", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS25_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS25", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS25_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS25", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs26CountersGfx11 = {
        {4, "SQWGP_GS26_SQ_PERF_SEL_WAVES", "SQWGP_GS26", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS26_SQ_PERF_SEL_WAVES_32", "SQWGP_GS26", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS26_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS26", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS26_SQ_PERF_SEL_ITEMS", "SQWGP_GS26", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS26_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS26", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS26_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS26", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS26_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS26", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS26_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS26", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS26_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS26", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS26_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS26", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS26_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS26", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS26_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS26", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS26_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS26", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS26_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS26", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS26_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS26", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS26_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS26", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS26_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS26", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS26_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS26", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS26_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS26", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS26_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS26", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS26_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS26", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS26_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS26", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS26_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS26", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS26_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS26", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs27CountersGfx11 = {
        {4, "SQWGP_GS27_SQ_PERF_SEL_WAVES", "SQWGP_GS27", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS27_SQ_PERF_SEL_WAVES_32", "SQWGP_GS27", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS27_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS27", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS27_SQ_PERF_SEL_ITEMS", "SQWGP_GS27", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS27_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS27", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS27_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS27", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS27_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS27", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS27_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS27", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS27_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS27", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS27_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS27", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS27_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS27", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS27_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS27", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS27_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS27", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS27_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS27", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS27_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS27", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS27_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS27", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS27_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS27", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS27_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS27", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS27_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS27", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS27_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS27", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS27_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS27", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS27_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS27", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS27_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS27", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS27_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS27", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs28CountersGfx11 = {
        {4, "SQWGP_GS28_SQ_PERF_SEL_WAVES", "SQWGP_GS28", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS28_SQ_PERF_SEL_WAVES_32", "SQWGP_GS28", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS28_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS28", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS28_SQ_PERF_SEL_ITEMS", "SQWGP_GS28", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS28_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS28", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS28_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS28", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS28_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS28", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS28_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS28", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS28_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS28", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS28_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS28", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS28_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS28", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS28_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS28", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS28_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS28", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS28_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS28", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS28_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS28", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS28_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS28", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS28_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS28", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS28_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS28", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS28_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS28", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS28_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS28", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS28_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS28", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS28_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS28", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS28_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS28", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS28_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS28", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs29CountersGfx11 = {
        {4, "SQWGP_GS29_SQ_PERF_SEL_WAVES", "SQWGP_GS29", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS29_SQ_PERF_SEL_WAVES_32", "SQWGP_GS29", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS29_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS29", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS29_SQ_PERF_SEL_ITEMS", "SQWGP_GS29", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS29_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS29", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS29_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS29", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS29_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS29", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS29_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS29", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS29_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS29", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS29_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS29", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS29_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS29", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS29_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS29", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS29_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS29", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS29_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS29", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS29_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS29", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS29_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS29", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS29_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS29", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS29_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS29", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS29_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS29", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS29_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS29", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS29_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS29", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS29_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS29", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS29_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS29", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS29_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS29", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs30CountersGfx11 = {
        {4, "SQWGP_GS30_SQ_PERF_SEL_WAVES", "SQWGP_GS30", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS30_SQ_PERF_SEL_WAVES_32", "SQWGP_GS30", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS30_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS30", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS30_SQ_PERF_SEL_ITEMS", "SQWGP_GS30", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS30_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS30", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS30_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS30", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS30_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS30", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS30_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS30", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS30_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS30", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS30_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS30", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS30_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS30", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS30_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS30", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS30_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS30", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS30_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS30", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS30_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS30", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS30_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS30", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS30_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS30", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS30_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS30", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS30_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS30", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS30_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS30", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS30_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS30", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS30_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS30", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS30_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS30", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS30_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS30", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs31CountersGfx11 = {
        {4, "SQWGP_GS31_SQ_PERF_SEL_WAVES", "SQWGP_GS31", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS31_SQ_PERF_SEL_WAVES_32", "SQWGP_GS31", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS31_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS31", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS31_SQ_PERF_SEL_ITEMS", "SQWGP_GS31", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS31_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS31", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS31_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS31", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS31_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS31", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS31_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS31", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS31_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS31", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS31_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS31", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS31_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS31", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS31_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS31", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS31_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS31", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS31_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS31", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS31_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS31", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS31_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS31", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS31_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS31", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS31_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS31", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS31_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS31", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS31_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS31", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS31_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS31", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS31_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS31", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS31_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS31", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS31_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS31", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs32CountersGfx11 = {
        {4, "SQWGP_GS32_SQ_PERF_SEL_WAVES", "SQWGP_GS32", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS32_SQ_PERF_SEL_WAVES_32", "SQWGP_GS32", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS32_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS32", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS32_SQ_PERF_SEL_ITEMS", "SQWGP_GS32", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS32_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS32", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS32_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS32", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS32_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS32", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS32_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS32", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS32_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS32", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS32_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS32", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS32_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS32", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS32_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS32", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS32_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS32", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS32_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS32", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS32_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS32", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS32_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS32", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS32_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS32", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS32_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS32", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS32_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS32", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS32_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS32", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS32_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS32", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS32_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS32", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS32_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS32", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS32_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS32", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs33CountersGfx11 = {
        {4, "SQWGP_GS33_SQ_PERF_SEL_WAVES", "SQWGP_GS33", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS33_SQ_PERF_SEL_WAVES_32", "SQWGP_GS33", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS33_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS33", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS33_SQ_PERF_SEL_ITEMS", "SQWGP_GS33", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS33_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS33", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS33_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS33", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS33_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS33", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS33_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS33", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS33_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS33", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS33_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS33", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS33_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS33", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS33_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS33", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS33_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS33", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS33_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS33", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS33_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS33", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS33_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS33", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS33_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS33", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS33_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS33", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS33_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS33", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS33_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS33", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS33_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS33", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS33_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS33", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS33_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS33", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS33_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS33", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs34CountersGfx11 = {
        {4, "SQWGP_GS34_SQ_PERF_SEL_WAVES", "SQWGP_GS34", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS34_SQ_PERF_SEL_WAVES_32", "SQWGP_GS34", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS34_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS34", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS34_SQ_PERF_SEL_ITEMS", "SQWGP_GS34", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS34_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS34", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS34_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS34", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS34_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS34", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS34_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS34", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS34_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS34", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS34_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS34", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS34_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS34", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS34_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS34", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS34_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS34", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS34_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS34", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS34_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS34", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS34_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS34", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS34_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS34", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS34_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS34", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS34_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS34", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS34_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS34", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS34_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS34", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS34_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS34", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS34_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS34", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS34_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS34", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs35CountersGfx11 = {
        {4, "SQWGP_GS35_SQ_PERF_SEL_WAVES", "SQWGP_GS35", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS35_SQ_PERF_SEL_WAVES_32", "SQWGP_GS35", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS35_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS35", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS35_SQ_PERF_SEL_ITEMS", "SQWGP_GS35", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS35_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS35", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS35_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS35", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS35_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS35", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS35_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS35", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS35_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS35", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS35_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS35", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS35_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS35", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS35_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS35", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS35_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS35", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS35_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS35", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS35_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS35", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS35_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS35", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS35_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS35", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS35_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS35", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS35_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS35", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS35_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS35", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS35_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS35", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS35_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS35", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS35_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS35", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS35_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS35", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs36CountersGfx11 = {
        {4, "SQWGP_GS36_SQ_PERF_SEL_WAVES", "SQWGP_GS36", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS36_SQ_PERF_SEL_WAVES_32", "SQWGP_GS36", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS36_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS36", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS36_SQ_PERF_SEL_ITEMS", "SQWGP_GS36", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS36_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS36", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS36_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS36", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS36_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS36", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS36_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS36", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS36_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS36", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS36_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS36", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS36_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS36", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS36_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS36", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS36_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS36", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS36_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS36", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS36_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS36", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS36_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS36", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS36_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS36", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS36_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS36", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS36_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS36", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS36_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS36", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS36_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS36", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS36_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS36", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS36_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS36", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS36_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS36", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs37CountersGfx11 = {
        {4, "SQWGP_GS37_SQ_PERF_SEL_WAVES", "SQWGP_GS37", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS37_SQ_PERF_SEL_WAVES_32", "SQWGP_GS37", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS37_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS37", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS37_SQ_PERF_SEL_ITEMS", "SQWGP_GS37", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS37_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS37", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS37_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS37", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS37_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS37", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS37_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS37", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS37_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS37", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS37_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS37", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS37_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS37", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS37_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS37", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS37_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS37", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS37_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS37", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS37_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS37", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS37_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS37", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS37_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS37", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS37_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS37", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS37_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS37", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS37_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS37", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS37_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS37", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS37_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS37", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS37_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS37", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS37_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS37", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs38CountersGfx11 = {
        {4, "SQWGP_GS38_SQ_PERF_SEL_WAVES", "SQWGP_GS38", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS38_SQ_PERF_SEL_WAVES_32", "SQWGP_GS38", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS38_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS38", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS38_SQ_PERF_SEL_ITEMS", "SQWGP_GS38", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS38_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS38", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS38_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS38", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS38_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS38", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS38_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS38", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS38_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS38", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS38_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS38", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS38_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS38", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS38_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS38", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS38_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS38", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS38_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS38", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS38_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS38", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS38_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS38", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS38_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS38", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS38_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS38", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS38_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS38", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS38_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS38", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS38_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS38", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS38_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS38", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS38_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS38", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS38_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS38", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs39CountersGfx11 = {
        {4, "SQWGP_GS39_SQ_PERF_SEL_WAVES", "SQWGP_GS39", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS39_SQ_PERF_SEL_WAVES_32", "SQWGP_GS39", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS39_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS39", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS39_SQ_PERF_SEL_ITEMS", "SQWGP_GS39", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS39_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS39", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS39_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS39", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS39_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS39", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS39_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS39", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS39_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS39", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS39_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS39", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS39_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS39", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS39_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS39", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS39_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS39", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS39_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS39", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS39_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS39", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS39_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS39", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS39_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS39", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS39_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS39", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS39_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS39", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS39_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS39", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS39_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS39", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS39_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS39", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS39_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS39", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS39_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS39", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs40CountersGfx11 = {
        {4, "SQWGP_GS40_SQ_PERF_SEL_WAVES", "SQWGP_GS40", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS40_SQ_PERF_SEL_WAVES_32", "SQWGP_GS40", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS40_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS40", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS40_SQ_PERF_SEL_ITEMS", "SQWGP_GS40", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS40_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS40", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS40_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS40", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS40_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS40", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS40_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS40", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS40_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS40", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS40_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS40", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS40_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS40", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS40_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS40", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS40_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS40", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS40_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS40", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS40_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS40", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS40_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS40", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS40_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS40", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS40_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS40", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS40_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS40", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS40_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS40", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS40_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS40", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS40_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS40", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS40_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS40", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS40_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS40", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs41CountersGfx11 = {
        {4, "SQWGP_GS41_SQ_PERF_SEL_WAVES", "SQWGP_GS41", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS41_SQ_PERF_SEL_WAVES_32", "SQWGP_GS41", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS41_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS41", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS41_SQ_PERF_SEL_ITEMS", "SQWGP_GS41", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS41_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS41", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS41_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS41", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS41_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS41", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS41_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS41", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS41_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS41", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS41_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS41", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS41_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS41", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS41_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS41", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS41_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS41", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS41_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS41", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS41_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS41", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS41_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS41", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS41_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS41", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS41_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS41", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS41_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS41", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS41_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS41", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS41_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS41", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS41_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS41", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS41_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS41", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS41_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS41", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs42CountersGfx11 = {
        {4, "SQWGP_GS42_SQ_PERF_SEL_WAVES", "SQWGP_GS42", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS42_SQ_PERF_SEL_WAVES_32", "SQWGP_GS42", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS42_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS42", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS42_SQ_PERF_SEL_ITEMS", "SQWGP_GS42", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS42_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS42", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS42_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS42", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS42_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS42", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS42_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS42", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS42_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS42", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS42_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS42", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS42_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS42", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS42_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS42", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS42_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS42", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS42_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS42", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS42_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS42", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS42_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS42", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS42_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS42", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS42_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS42", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS42_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS42", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS42_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS42", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS42_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS42", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS42_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS42", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS42_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS42", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS42_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS42", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs43CountersGfx11 = {
        {4, "SQWGP_GS43_SQ_PERF_SEL_WAVES", "SQWGP_GS43", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS43_SQ_PERF_SEL_WAVES_32", "SQWGP_GS43", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS43_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS43", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS43_SQ_PERF_SEL_ITEMS", "SQWGP_GS43", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS43_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS43", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS43_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS43", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS43_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS43", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS43_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS43", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS43_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS43", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS43_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS43", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS43_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS43", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS43_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS43", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS43_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS43", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS43_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS43", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS43_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS43", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS43_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS43", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS43_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS43", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS43_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS43", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS43_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS43", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS43_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS43", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS43_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS43", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS43_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS43", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS43_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS43", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS43_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS43", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs44CountersGfx11 = {
        {4, "SQWGP_GS44_SQ_PERF_SEL_WAVES", "SQWGP_GS44", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS44_SQ_PERF_SEL_WAVES_32", "SQWGP_GS44", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS44_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS44", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS44_SQ_PERF_SEL_ITEMS", "SQWGP_GS44", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS44_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS44", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS44_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS44", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS44_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS44", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS44_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS44", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS44_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS44", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS44_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS44", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS44_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS44", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS44_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS44", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS44_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS44", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS44_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS44", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS44_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS44", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS44_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS44", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS44_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS44", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS44_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS44", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS44_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS44", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS44_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS44", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS44_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS44", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS44_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS44", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS44_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS44", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS44_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS44", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs45CountersGfx11 = {
        {4, "SQWGP_GS45_SQ_PERF_SEL_WAVES", "SQWGP_GS45", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS45_SQ_PERF_SEL_WAVES_32", "SQWGP_GS45", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS45_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS45", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS45_SQ_PERF_SEL_ITEMS", "SQWGP_GS45", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS45_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS45", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS45_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS45", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS45_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS45", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS45_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS45", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS45_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS45", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS45_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS45", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS45_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS45", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS45_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS45", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS45_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS45", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS45_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS45", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS45_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS45", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS45_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS45", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS45_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS45", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS45_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS45", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS45_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS45", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS45_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS45", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS45_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS45", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS45_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS45", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS45_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS45", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS45_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS45", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs46CountersGfx11 = {
        {4, "SQWGP_GS46_SQ_PERF_SEL_WAVES", "SQWGP_GS46", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS46_SQ_PERF_SEL_WAVES_32", "SQWGP_GS46", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS46_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS46", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS46_SQ_PERF_SEL_ITEMS", "SQWGP_GS46", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS46_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS46", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS46_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS46", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS46_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS46", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS46_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS46", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS46_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS46", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS46_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS46", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS46_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS46", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS46_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS46", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS46_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS46", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS46_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS46", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS46_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS46", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS46_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS46", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS46_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS46", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS46_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS46", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS46_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS46", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS46_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS46", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS46_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS46", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS46_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS46", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS46_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS46", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS46_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS46", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpGs47CountersGfx11 = {
        {4, "SQWGP_GS47_SQ_PERF_SEL_WAVES", "SQWGP_GS47", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_GS47_SQ_PERF_SEL_WAVES_32", "SQWGP_GS47", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_GS47_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_GS47", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_GS47_SQ_PERF_SEL_ITEMS", "SQWGP_GS47", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_GS47_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_GS47", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_GS47_SQ_PERF_SEL_INSTS_GDS", "SQWGP_GS47", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_GS47_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_GS47", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_GS47_SQ_PERF_SEL_INSTS_LDS", "SQWGP_GS47", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_GS47_SQ_PERF_SEL_INSTS_SALU", "SQWGP_GS47", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_GS47_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_GS47", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_GS47_SQ_PERF_SEL_INSTS_VALU", "SQWGP_GS47", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_GS47_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_GS47", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_GS47_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_GS47", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_GS47_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_GS47", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_GS47_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_GS47", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_GS47_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_GS47", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_GS47_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_GS47", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_GS47_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_GS47", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_GS47_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_GS47", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_GS47_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_GS47", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_GS47_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_GS47", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_GS47_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_GS47", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_GS47_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_GS47", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_GS47_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_GS47", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs0CountersGfx11 = {
        {4, "SQWGP_PS0_SQ_PERF_SEL_WAVES", "SQWGP_PS0", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS0_SQ_PERF_SEL_WAVES_32", "SQWGP_PS0", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS0_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS0", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS0_SQ_PERF_SEL_ITEMS", "SQWGP_PS0", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS0_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS0", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS0_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS0", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS0_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS0", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS0_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS0", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS0_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS0", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS0_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS0", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS0_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS0", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS0_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS0", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS0_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS0", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS0_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS0", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS0_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS0", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS0_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS0", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS0_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS0", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS0_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS0", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS0_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS0", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS0_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS0", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS0_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS0", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS0_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS0", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS0_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS0", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS0_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS0", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs1CountersGfx11 = {
        {4, "SQWGP_PS1_SQ_PERF_SEL_WAVES", "SQWGP_PS1", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS1_SQ_PERF_SEL_WAVES_32", "SQWGP_PS1", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS1_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS1", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS1_SQ_PERF_SEL_ITEMS", "SQWGP_PS1", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS1_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS1", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS1_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS1", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS1_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS1", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS1_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS1", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS1_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS1", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS1_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS1", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS1_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS1", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS1_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS1", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS1_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS1", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS1_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS1", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS1_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS1", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS1_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS1", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS1_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS1", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS1_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS1", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS1_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS1", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS1_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS1", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS1_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS1", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS1_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS1", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS1_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS1", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS1_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS1", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs2CountersGfx11 = {
        {4, "SQWGP_PS2_SQ_PERF_SEL_WAVES", "SQWGP_PS2", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS2_SQ_PERF_SEL_WAVES_32", "SQWGP_PS2", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS2_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS2", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS2_SQ_PERF_SEL_ITEMS", "SQWGP_PS2", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS2_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS2", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS2_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS2", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS2_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS2", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS2_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS2", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS2_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS2", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS2_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS2", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS2_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS2", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS2_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS2", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS2_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS2", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS2_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS2", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS2_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS2", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS2_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS2", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS2_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS2", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS2_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS2", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS2_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS2", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS2_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS2", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS2_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS2", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS2_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS2", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS2_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS2", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS2_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS2", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs3CountersGfx11 = {
        {4, "SQWGP_PS3_SQ_PERF_SEL_WAVES", "SQWGP_PS3", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS3_SQ_PERF_SEL_WAVES_32", "SQWGP_PS3", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS3_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS3", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS3_SQ_PERF_SEL_ITEMS", "SQWGP_PS3", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS3_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS3", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS3_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS3", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS3_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS3", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS3_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS3", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS3_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS3", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS3_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS3", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS3_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS3", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS3_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS3", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS3_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS3", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS3_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS3", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS3_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS3", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS3_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS3", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS3_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS3", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS3_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS3", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS3_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS3", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS3_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS3", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS3_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS3", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS3_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS3", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS3_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS3", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS3_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS3", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs4CountersGfx11 = {
        {4, "SQWGP_PS4_SQ_PERF_SEL_WAVES", "SQWGP_PS4", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS4_SQ_PERF_SEL_WAVES_32", "SQWGP_PS4", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS4_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS4", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS4_SQ_PERF_SEL_ITEMS", "SQWGP_PS4", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS4_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS4", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS4_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS4", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS4_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS4", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS4_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS4", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS4_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS4", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS4_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS4", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS4_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS4", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS4_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS4", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS4_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS4", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS4_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS4", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS4_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS4", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS4_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS4", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS4_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS4", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS4_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS4", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS4_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS4", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS4_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS4", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS4_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS4", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS4_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS4", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS4_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS4", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS4_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS4", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs5CountersGfx11 = {
        {4, "SQWGP_PS5_SQ_PERF_SEL_WAVES", "SQWGP_PS5", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS5_SQ_PERF_SEL_WAVES_32", "SQWGP_PS5", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS5_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS5", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS5_SQ_PERF_SEL_ITEMS", "SQWGP_PS5", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS5_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS5", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS5_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS5", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS5_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS5", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS5_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS5", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS5_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS5", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS5_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS5", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS5_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS5", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS5_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS5", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS5_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS5", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS5_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS5", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS5_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS5", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS5_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS5", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS5_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS5", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS5_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS5", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS5_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS5", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS5_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS5", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS5_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS5", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS5_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS5", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS5_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS5", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS5_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS5", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs6CountersGfx11 = {
        {4, "SQWGP_PS6_SQ_PERF_SEL_WAVES", "SQWGP_PS6", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS6_SQ_PERF_SEL_WAVES_32", "SQWGP_PS6", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS6_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS6", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS6_SQ_PERF_SEL_ITEMS", "SQWGP_PS6", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS6_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS6", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS6_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS6", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS6_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS6", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS6_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS6", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS6_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS6", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS6_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS6", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS6_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS6", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS6_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS6", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS6_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS6", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS6_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS6", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS6_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS6", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS6_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS6", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS6_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS6", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS6_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS6", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS6_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS6", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS6_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS6", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS6_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS6", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS6_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS6", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS6_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS6", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS6_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS6", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs7CountersGfx11 = {
        {4, "SQWGP_PS7_SQ_PERF_SEL_WAVES", "SQWGP_PS7", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS7_SQ_PERF_SEL_WAVES_32", "SQWGP_PS7", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS7_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS7", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS7_SQ_PERF_SEL_ITEMS", "SQWGP_PS7", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS7_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS7", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS7_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS7", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS7_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS7", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS7_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS7", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS7_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS7", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS7_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS7", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS7_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS7", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS7_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS7", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS7_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS7", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS7_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS7", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS7_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS7", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS7_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS7", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS7_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS7", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS7_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS7", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS7_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS7", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS7_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS7", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS7_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS7", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS7_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS7", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS7_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS7", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS7_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS7", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs8CountersGfx11 = {
        {4, "SQWGP_PS8_SQ_PERF_SEL_WAVES", "SQWGP_PS8", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS8_SQ_PERF_SEL_WAVES_32", "SQWGP_PS8", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS8_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS8", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS8_SQ_PERF_SEL_ITEMS", "SQWGP_PS8", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS8_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS8", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS8_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS8", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS8_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS8", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS8_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS8", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS8_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS8", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS8_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS8", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS8_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS8", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS8_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS8", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS8_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS8", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS8_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS8", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS8_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS8", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS8_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS8", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS8_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS8", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS8_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS8", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS8_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS8", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS8_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS8", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS8_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS8", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS8_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS8", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS8_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS8", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS8_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS8", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs9CountersGfx11 = {
        {4, "SQWGP_PS9_SQ_PERF_SEL_WAVES", "SQWGP_PS9", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS9_SQ_PERF_SEL_WAVES_32", "SQWGP_PS9", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS9_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS9", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS9_SQ_PERF_SEL_ITEMS", "SQWGP_PS9", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS9_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS9", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS9_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS9", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS9_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS9", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS9_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS9", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS9_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS9", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS9_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS9", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS9_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS9", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS9_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS9", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS9_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS9", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS9_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS9", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS9_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS9", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS9_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS9", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS9_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS9", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS9_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS9", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS9_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS9", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS9_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS9", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS9_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS9", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS9_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS9", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS9_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS9", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS9_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS9", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs10CountersGfx11 = {
        {4, "SQWGP_PS10_SQ_PERF_SEL_WAVES", "SQWGP_PS10", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS10_SQ_PERF_SEL_WAVES_32", "SQWGP_PS10", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS10_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS10", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS10_SQ_PERF_SEL_ITEMS", "SQWGP_PS10", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS10_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS10", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS10_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS10", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS10_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS10", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS10_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS10", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS10_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS10", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS10_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS10", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS10_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS10", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS10_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS10", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS10_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS10", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS10_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS10", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS10_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS10", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS10_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS10", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS10_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS10", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS10_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS10", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS10_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS10", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS10_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS10", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS10_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS10", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS10_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS10", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS10_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS10", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS10_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS10", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs11CountersGfx11 = {
        {4, "SQWGP_PS11_SQ_PERF_SEL_WAVES", "SQWGP_PS11", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS11_SQ_PERF_SEL_WAVES_32", "SQWGP_PS11", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS11_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS11", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS11_SQ_PERF_SEL_ITEMS", "SQWGP_PS11", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS11_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS11", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS11_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS11", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS11_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS11", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS11_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS11", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS11_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS11", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS11_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS11", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS11_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS11", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS11_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS11", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS11_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS11", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS11_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS11", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS11_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS11", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS11_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS11", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS11_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS11", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS11_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS11", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS11_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS11", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS11_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS11", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS11_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS11", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS11_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS11", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS11_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS11", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS11_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS11", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs12CountersGfx11 = {
        {4, "SQWGP_PS12_SQ_PERF_SEL_WAVES", "SQWGP_PS12", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS12_SQ_PERF_SEL_WAVES_32", "SQWGP_PS12", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS12_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS12", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS12_SQ_PERF_SEL_ITEMS", "SQWGP_PS12", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS12_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS12", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS12_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS12", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS12_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS12", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS12_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS12", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS12_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS12", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS12_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS12", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS12_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS12", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS12_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS12", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS12_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS12", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS12_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS12", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS12_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS12", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS12_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS12", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS12_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS12", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS12_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS12", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS12_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS12", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS12_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS12", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS12_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS12", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS12_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS12", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS12_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS12", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS12_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS12", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs13CountersGfx11 = {
        {4, "SQWGP_PS13_SQ_PERF_SEL_WAVES", "SQWGP_PS13", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS13_SQ_PERF_SEL_WAVES_32", "SQWGP_PS13", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS13_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS13", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS13_SQ_PERF_SEL_ITEMS", "SQWGP_PS13", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS13_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS13", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS13_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS13", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS13_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS13", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS13_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS13", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS13_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS13", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS13_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS13", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS13_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS13", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS13_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS13", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS13_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS13", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS13_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS13", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS13_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS13", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS13_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS13", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS13_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS13", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS13_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS13", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS13_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS13", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS13_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS13", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS13_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS13", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS13_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS13", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS13_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS13", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS13_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS13", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs14CountersGfx11 = {
        {4, "SQWGP_PS14_SQ_PERF_SEL_WAVES", "SQWGP_PS14", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS14_SQ_PERF_SEL_WAVES_32", "SQWGP_PS14", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS14_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS14", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS14_SQ_PERF_SEL_ITEMS", "SQWGP_PS14", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS14_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS14", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS14_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS14", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS14_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS14", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS14_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS14", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS14_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS14", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS14_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS14", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS14_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS14", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS14_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS14", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS14_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS14", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS14_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS14", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS14_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS14", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS14_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS14", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS14_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS14", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS14_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS14", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS14_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS14", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS14_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS14", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS14_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS14", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS14_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS14", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS14_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS14", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS14_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS14", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs15CountersGfx11 = {
        {4, "SQWGP_PS15_SQ_PERF_SEL_WAVES", "SQWGP_PS15", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS15_SQ_PERF_SEL_WAVES_32", "SQWGP_PS15", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS15_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS15", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS15_SQ_PERF_SEL_ITEMS", "SQWGP_PS15", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS15_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS15", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS15_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS15", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS15_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS15", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS15_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS15", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS15_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS15", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS15_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS15", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS15_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS15", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS15_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS15", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS15_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS15", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS15_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS15", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS15_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS15", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS15_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS15", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS15_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS15", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS15_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS15", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS15_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS15", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS15_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS15", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS15_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS15", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS15_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS15", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS15_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS15", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS15_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS15", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs16CountersGfx11 = {
        {4, "SQWGP_PS16_SQ_PERF_SEL_WAVES", "SQWGP_PS16", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS16_SQ_PERF_SEL_WAVES_32", "SQWGP_PS16", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS16_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS16", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS16_SQ_PERF_SEL_ITEMS", "SQWGP_PS16", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS16_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS16", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS16_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS16", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS16_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS16", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS16_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS16", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS16_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS16", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS16_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS16", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS16_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS16", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS16_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS16", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS16_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS16", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS16_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS16", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS16_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS16", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS16_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS16", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS16_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS16", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS16_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS16", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS16_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS16", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS16_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS16", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS16_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS16", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS16_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS16", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS16_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS16", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS16_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS16", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs17CountersGfx11 = {
        {4, "SQWGP_PS17_SQ_PERF_SEL_WAVES", "SQWGP_PS17", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS17_SQ_PERF_SEL_WAVES_32", "SQWGP_PS17", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS17_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS17", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS17_SQ_PERF_SEL_ITEMS", "SQWGP_PS17", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS17_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS17", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS17_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS17", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS17_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS17", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS17_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS17", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS17_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS17", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS17_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS17", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS17_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS17", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS17_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS17", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS17_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS17", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS17_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS17", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS17_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS17", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS17_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS17", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS17_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS17", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS17_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS17", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS17_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS17", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS17_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS17", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS17_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS17", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS17_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS17", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS17_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS17", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS17_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS17", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs18CountersGfx11 = {
        {4, "SQWGP_PS18_SQ_PERF_SEL_WAVES", "SQWGP_PS18", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS18_SQ_PERF_SEL_WAVES_32", "SQWGP_PS18", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS18_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS18", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS18_SQ_PERF_SEL_ITEMS", "SQWGP_PS18", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS18_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS18", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS18_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS18", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS18_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS18", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS18_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS18", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS18_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS18", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS18_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS18", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS18_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS18", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS18_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS18", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS18_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS18", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS18_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS18", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS18_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS18", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS18_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS18", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS18_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS18", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS18_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS18", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS18_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS18", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS18_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS18", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS18_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS18", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS18_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS18", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS18_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS18", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS18_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS18", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs19CountersGfx11 = {
        {4, "SQWGP_PS19_SQ_PERF_SEL_WAVES", "SQWGP_PS19", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS19_SQ_PERF_SEL_WAVES_32", "SQWGP_PS19", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS19_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS19", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS19_SQ_PERF_SEL_ITEMS", "SQWGP_PS19", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS19_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS19", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS19_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS19", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS19_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS19", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS19_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS19", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS19_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS19", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS19_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS19", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS19_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS19", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS19_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS19", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS19_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS19", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS19_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS19", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS19_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS19", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS19_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS19", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS19_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS19", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS19_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS19", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS19_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS19", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS19_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS19", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS19_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS19", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS19_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS19", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS19_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS19", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS19_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS19", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs20CountersGfx11 = {
        {4, "SQWGP_PS20_SQ_PERF_SEL_WAVES", "SQWGP_PS20", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS20_SQ_PERF_SEL_WAVES_32", "SQWGP_PS20", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS20_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS20", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS20_SQ_PERF_SEL_ITEMS", "SQWGP_PS20", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS20_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS20", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS20_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS20", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS20_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS20", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS20_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS20", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS20_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS20", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS20_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS20", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS20_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS20", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS20_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS20", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS20_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS20", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS20_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS20", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS20_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS20", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS20_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS20", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS20_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS20", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS20_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS20", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS20_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS20", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS20_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS20", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS20_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS20", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS20_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS20", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS20_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS20", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS20_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS20", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs21CountersGfx11 = {
        {4, "SQWGP_PS21_SQ_PERF_SEL_WAVES", "SQWGP_PS21", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS21_SQ_PERF_SEL_WAVES_32", "SQWGP_PS21", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS21_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS21", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS21_SQ_PERF_SEL_ITEMS", "SQWGP_PS21", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS21_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS21", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS21_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS21", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS21_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS21", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS21_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS21", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS21_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS21", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS21_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS21", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS21_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS21", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS21_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS21", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS21_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS21", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS21_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS21", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS21_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS21", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS21_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS21", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS21_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS21", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS21_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS21", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS21_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS21", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS21_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS21", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS21_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS21", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS21_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS21", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS21_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS21", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS21_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS21", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs22CountersGfx11 = {
        {4, "SQWGP_PS22_SQ_PERF_SEL_WAVES", "SQWGP_PS22", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS22_SQ_PERF_SEL_WAVES_32", "SQWGP_PS22", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS22_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS22", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS22_SQ_PERF_SEL_ITEMS", "SQWGP_PS22", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS22_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS22", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS22_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS22", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS22_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS22", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS22_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS22", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS22_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS22", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS22_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS22", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS22_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS22", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS22_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS22", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS22_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS22", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS22_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS22", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS22_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS22", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS22_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS22", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS22_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS22", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS22_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS22", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS22_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS22", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS22_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS22", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS22_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS22", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS22_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS22", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS22_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS22", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS22_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS22", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs23CountersGfx11 = {
        {4, "SQWGP_PS23_SQ_PERF_SEL_WAVES", "SQWGP_PS23", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS23_SQ_PERF_SEL_WAVES_32", "SQWGP_PS23", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS23_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS23", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS23_SQ_PERF_SEL_ITEMS", "SQWGP_PS23", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS23_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS23", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS23_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS23", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS23_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS23", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS23_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS23", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS23_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS23", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS23_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS23", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS23_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS23", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS23_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS23", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS23_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS23", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS23_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS23", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS23_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS23", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS23_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS23", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS23_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS23", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS23_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS23", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS23_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS23", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS23_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS23", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS23_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS23", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS23_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS23", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS23_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS23", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS23_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS23", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs24CountersGfx11 = {
        {4, "SQWGP_PS24_SQ_PERF_SEL_WAVES", "SQWGP_PS24", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS24_SQ_PERF_SEL_WAVES_32", "SQWGP_PS24", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS24_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS24", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS24_SQ_PERF_SEL_ITEMS", "SQWGP_PS24", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS24_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS24", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS24_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS24", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS24_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS24", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS24_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS24", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS24_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS24", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS24_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS24", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS24_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS24", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS24_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS24", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS24_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS24", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS24_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS24", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS24_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS24", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS24_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS24", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS24_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS24", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS24_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS24", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS24_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS24", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS24_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS24", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS24_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS24", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS24_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS24", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS24_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS24", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS24_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS24", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs25CountersGfx11 = {
        {4, "SQWGP_PS25_SQ_PERF_SEL_WAVES", "SQWGP_PS25", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS25_SQ_PERF_SEL_WAVES_32", "SQWGP_PS25", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS25_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS25", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS25_SQ_PERF_SEL_ITEMS", "SQWGP_PS25", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS25_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS25", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS25_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS25", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS25_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS25", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS25_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS25", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS25_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS25", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS25_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS25", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS25_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS25", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS25_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS25", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS25_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS25", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS25_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS25", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS25_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS25", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS25_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS25", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS25_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS25", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS25_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS25", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS25_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS25", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS25_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS25", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS25_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS25", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS25_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS25", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS25_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS25", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS25_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS25", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs26CountersGfx11 = {
        {4, "SQWGP_PS26_SQ_PERF_SEL_WAVES", "SQWGP_PS26", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS26_SQ_PERF_SEL_WAVES_32", "SQWGP_PS26", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS26_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS26", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS26_SQ_PERF_SEL_ITEMS", "SQWGP_PS26", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS26_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS26", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS26_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS26", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS26_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS26", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS26_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS26", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS26_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS26", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS26_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS26", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS26_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS26", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS26_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS26", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS26_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS26", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS26_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS26", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS26_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS26", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS26_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS26", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS26_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS26", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS26_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS26", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS26_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS26", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS26_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS26", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS26_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS26", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS26_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS26", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS26_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS26", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS26_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS26", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs27CountersGfx11 = {
        {4, "SQWGP_PS27_SQ_PERF_SEL_WAVES", "SQWGP_PS27", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS27_SQ_PERF_SEL_WAVES_32", "SQWGP_PS27", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS27_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS27", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS27_SQ_PERF_SEL_ITEMS", "SQWGP_PS27", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS27_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS27", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS27_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS27", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS27_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS27", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS27_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS27", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS27_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS27", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS27_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS27", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS27_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS27", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS27_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS27", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS27_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS27", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS27_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS27", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS27_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS27", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS27_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS27", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS27_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS27", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS27_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS27", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS27_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS27", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS27_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS27", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS27_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS27", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS27_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS27", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS27_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS27", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS27_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS27", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs28CountersGfx11 = {
        {4, "SQWGP_PS28_SQ_PERF_SEL_WAVES", "SQWGP_PS28", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS28_SQ_PERF_SEL_WAVES_32", "SQWGP_PS28", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS28_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS28", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS28_SQ_PERF_SEL_ITEMS", "SQWGP_PS28", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS28_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS28", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS28_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS28", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS28_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS28", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS28_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS28", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS28_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS28", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS28_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS28", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS28_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS28", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS28_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS28", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS28_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS28", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS28_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS28", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS28_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS28", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS28_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS28", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS28_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS28", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS28_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS28", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS28_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS28", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS28_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS28", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS28_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS28", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS28_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS28", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS28_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS28", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS28_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS28", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs29CountersGfx11 = {
        {4, "SQWGP_PS29_SQ_PERF_SEL_WAVES", "SQWGP_PS29", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS29_SQ_PERF_SEL_WAVES_32", "SQWGP_PS29", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS29_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS29", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS29_SQ_PERF_SEL_ITEMS", "SQWGP_PS29", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS29_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS29", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS29_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS29", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS29_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS29", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS29_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS29", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS29_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS29", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS29_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS29", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS29_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS29", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS29_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS29", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS29_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS29", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS29_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS29", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS29_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS29", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS29_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS29", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS29_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS29", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS29_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS29", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS29_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS29", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS29_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS29", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS29_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS29", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS29_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS29", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS29_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS29", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS29_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS29", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs30CountersGfx11 = {
        {4, "SQWGP_PS30_SQ_PERF_SEL_WAVES", "SQWGP_PS30", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS30_SQ_PERF_SEL_WAVES_32", "SQWGP_PS30", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS30_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS30", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS30_SQ_PERF_SEL_ITEMS", "SQWGP_PS30", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS30_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS30", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS30_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS30", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS30_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS30", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS30_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS30", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS30_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS30", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS30_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS30", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS30_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS30", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS30_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS30", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS30_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS30", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS30_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS30", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS30_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS30", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS30_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS30", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS30_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS30", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS30_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS30", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS30_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS30", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS30_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS30", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS30_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS30", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS30_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS30", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS30_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS30", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS30_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS30", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs31CountersGfx11 = {
        {4, "SQWGP_PS31_SQ_PERF_SEL_WAVES", "SQWGP_PS31", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS31_SQ_PERF_SEL_WAVES_32", "SQWGP_PS31", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS31_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS31", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS31_SQ_PERF_SEL_ITEMS", "SQWGP_PS31", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS31_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS31", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS31_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS31", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS31_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS31", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS31_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS31", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS31_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS31", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS31_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS31", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS31_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS31", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS31_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS31", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS31_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS31", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS31_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS31", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS31_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS31", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS31_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS31", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS31_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS31", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS31_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS31", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS31_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS31", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS31_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS31", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS31_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS31", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS31_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS31", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS31_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS31", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS31_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS31", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs32CountersGfx11 = {
        {4, "SQWGP_PS32_SQ_PERF_SEL_WAVES", "SQWGP_PS32", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS32_SQ_PERF_SEL_WAVES_32", "SQWGP_PS32", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS32_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS32", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS32_SQ_PERF_SEL_ITEMS", "SQWGP_PS32", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS32_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS32", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS32_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS32", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS32_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS32", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS32_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS32", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS32_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS32", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS32_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS32", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS32_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS32", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS32_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS32", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS32_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS32", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS32_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS32", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS32_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS32", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS32_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS32", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS32_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS32", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS32_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS32", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS32_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS32", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS32_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS32", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS32_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS32", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS32_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS32", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS32_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS32", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS32_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS32", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs33CountersGfx11 = {
        {4, "SQWGP_PS33_SQ_PERF_SEL_WAVES", "SQWGP_PS33", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS33_SQ_PERF_SEL_WAVES_32", "SQWGP_PS33", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS33_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS33", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS33_SQ_PERF_SEL_ITEMS", "SQWGP_PS33", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS33_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS33", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS33_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS33", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS33_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS33", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS33_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS33", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS33_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS33", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS33_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS33", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS33_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS33", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS33_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS33", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS33_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS33", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS33_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS33", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS33_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS33", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS33_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS33", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS33_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS33", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS33_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS33", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS33_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS33", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS33_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS33", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS33_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS33", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS33_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS33", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS33_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS33", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS33_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS33", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs34CountersGfx11 = {
        {4, "SQWGP_PS34_SQ_PERF_SEL_WAVES", "SQWGP_PS34", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS34_SQ_PERF_SEL_WAVES_32", "SQWGP_PS34", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS34_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS34", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS34_SQ_PERF_SEL_ITEMS", "SQWGP_PS34", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS34_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS34", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS34_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS34", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS34_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS34", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS34_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS34", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS34_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS34", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS34_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS34", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS34_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS34", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS34_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS34", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS34_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS34", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS34_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS34", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS34_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS34", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS34_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS34", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS34_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS34", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS34_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS34", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS34_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS34", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS34_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS34", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS34_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS34", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS34_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS34", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS34_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS34", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS34_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS34", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs35CountersGfx11 = {
        {4, "SQWGP_PS35_SQ_PERF_SEL_WAVES", "SQWGP_PS35", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS35_SQ_PERF_SEL_WAVES_32", "SQWGP_PS35", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS35_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS35", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS35_SQ_PERF_SEL_ITEMS", "SQWGP_PS35", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS35_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS35", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS35_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS35", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS35_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS35", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS35_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS35", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS35_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS35", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS35_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS35", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS35_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS35", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS35_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS35", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS35_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS35", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS35_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS35", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS35_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS35", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS35_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS35", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS35_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS35", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS35_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS35", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS35_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS35", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS35_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS35", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS35_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS35", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS35_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS35", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS35_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS35", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS35_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS35", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs36CountersGfx11 = {
        {4, "SQWGP_PS36_SQ_PERF_SEL_WAVES", "SQWGP_PS36", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS36_SQ_PERF_SEL_WAVES_32", "SQWGP_PS36", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS36_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS36", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS36_SQ_PERF_SEL_ITEMS", "SQWGP_PS36", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS36_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS36", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS36_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS36", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS36_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS36", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS36_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS36", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS36_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS36", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS36_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS36", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS36_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS36", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS36_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS36", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS36_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS36", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS36_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS36", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS36_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS36", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS36_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS36", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS36_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS36", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS36_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS36", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS36_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS36", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS36_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS36", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS36_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS36", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS36_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS36", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS36_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS36", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS36_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS36", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs37CountersGfx11 = {
        {4, "SQWGP_PS37_SQ_PERF_SEL_WAVES", "SQWGP_PS37", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS37_SQ_PERF_SEL_WAVES_32", "SQWGP_PS37", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS37_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS37", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS37_SQ_PERF_SEL_ITEMS", "SQWGP_PS37", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS37_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS37", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS37_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS37", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS37_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS37", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS37_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS37", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS37_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS37", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS37_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS37", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS37_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS37", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS37_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS37", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS37_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS37", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS37_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS37", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS37_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS37", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS37_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS37", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS37_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS37", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS37_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS37", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS37_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS37", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS37_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS37", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS37_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS37", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS37_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS37", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS37_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS37", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS37_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS37", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs38CountersGfx11 = {
        {4, "SQWGP_PS38_SQ_PERF_SEL_WAVES", "SQWGP_PS38", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS38_SQ_PERF_SEL_WAVES_32", "SQWGP_PS38", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS38_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS38", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS38_SQ_PERF_SEL_ITEMS", "SQWGP_PS38", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS38_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS38", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS38_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS38", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS38_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS38", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS38_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS38", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS38_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS38", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS38_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS38", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS38_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS38", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS38_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS38", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS38_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS38", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS38_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS38", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS38_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS38", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS38_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS38", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS38_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS38", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS38_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS38", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS38_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS38", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS38_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS38", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS38_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS38", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS38_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS38", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS38_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS38", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS38_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS38", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs39CountersGfx11 = {
        {4, "SQWGP_PS39_SQ_PERF_SEL_WAVES", "SQWGP_PS39", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS39_SQ_PERF_SEL_WAVES_32", "SQWGP_PS39", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS39_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS39", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS39_SQ_PERF_SEL_ITEMS", "SQWGP_PS39", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS39_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS39", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS39_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS39", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS39_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS39", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS39_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS39", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS39_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS39", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS39_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS39", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS39_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS39", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS39_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS39", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS39_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS39", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS39_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS39", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS39_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS39", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS39_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS39", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS39_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS39", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS39_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS39", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS39_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS39", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS39_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS39", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS39_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS39", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS39_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS39", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS39_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS39", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS39_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS39", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs40CountersGfx11 = {
        {4, "SQWGP_PS40_SQ_PERF_SEL_WAVES", "SQWGP_PS40", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS40_SQ_PERF_SEL_WAVES_32", "SQWGP_PS40", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS40_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS40", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS40_SQ_PERF_SEL_ITEMS", "SQWGP_PS40", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS40_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS40", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS40_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS40", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS40_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS40", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS40_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS40", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS40_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS40", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS40_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS40", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS40_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS40", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS40_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS40", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS40_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS40", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS40_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS40", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS40_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS40", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS40_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS40", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS40_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS40", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS40_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS40", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS40_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS40", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS40_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS40", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS40_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS40", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS40_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS40", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS40_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS40", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS40_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS40", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs41CountersGfx11 = {
        {4, "SQWGP_PS41_SQ_PERF_SEL_WAVES", "SQWGP_PS41", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS41_SQ_PERF_SEL_WAVES_32", "SQWGP_PS41", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS41_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS41", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS41_SQ_PERF_SEL_ITEMS", "SQWGP_PS41", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS41_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS41", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS41_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS41", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS41_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS41", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS41_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS41", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS41_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS41", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS41_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS41", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS41_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS41", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS41_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS41", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS41_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS41", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS41_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS41", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS41_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS41", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS41_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS41", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS41_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS41", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS41_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS41", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS41_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS41", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS41_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS41", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS41_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS41", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS41_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS41", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS41_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS41", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS41_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS41", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs42CountersGfx11 = {
        {4, "SQWGP_PS42_SQ_PERF_SEL_WAVES", "SQWGP_PS42", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS42_SQ_PERF_SEL_WAVES_32", "SQWGP_PS42", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS42_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS42", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS42_SQ_PERF_SEL_ITEMS", "SQWGP_PS42", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS42_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS42", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS42_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS42", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS42_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS42", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS42_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS42", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS42_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS42", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS42_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS42", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS42_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS42", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS42_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS42", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS42_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS42", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS42_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS42", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS42_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS42", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS42_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS42", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS42_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS42", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS42_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS42", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS42_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS42", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS42_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS42", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS42_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS42", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS42_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS42", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS42_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS42", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS42_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS42", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs43CountersGfx11 = {
        {4, "SQWGP_PS43_SQ_PERF_SEL_WAVES", "SQWGP_PS43", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS43_SQ_PERF_SEL_WAVES_32", "SQWGP_PS43", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS43_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS43", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS43_SQ_PERF_SEL_ITEMS", "SQWGP_PS43", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS43_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS43", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS43_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS43", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS43_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS43", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS43_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS43", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS43_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS43", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS43_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS43", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS43_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS43", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS43_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS43", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS43_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS43", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS43_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS43", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS43_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS43", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS43_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS43", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS43_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS43", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS43_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS43", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS43_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS43", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS43_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS43", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS43_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS43", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS43_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS43", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS43_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS43", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS43_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS43", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs44CountersGfx11 = {
        {4, "SQWGP_PS44_SQ_PERF_SEL_WAVES", "SQWGP_PS44", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS44_SQ_PERF_SEL_WAVES_32", "SQWGP_PS44", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS44_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS44", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS44_SQ_PERF_SEL_ITEMS", "SQWGP_PS44", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS44_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS44", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS44_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS44", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS44_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS44", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS44_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS44", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS44_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS44", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS44_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS44", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS44_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS44", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS44_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS44", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS44_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS44", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS44_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS44", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS44_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS44", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS44_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS44", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS44_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS44", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS44_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS44", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS44_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS44", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS44_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS44", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS44_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS44", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS44_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS44", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS44_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS44", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS44_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS44", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs45CountersGfx11 = {
        {4, "SQWGP_PS45_SQ_PERF_SEL_WAVES", "SQWGP_PS45", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS45_SQ_PERF_SEL_WAVES_32", "SQWGP_PS45", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS45_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS45", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS45_SQ_PERF_SEL_ITEMS", "SQWGP_PS45", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS45_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS45", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS45_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS45", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS45_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS45", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS45_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS45", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS45_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS45", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS45_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS45", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS45_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS45", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS45_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS45", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS45_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS45", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS45_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS45", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS45_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS45", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS45_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS45", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS45_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS45", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS45_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS45", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS45_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS45", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS45_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS45", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS45_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS45", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS45_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS45", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS45_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS45", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS45_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS45", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs46CountersGfx11 = {
        {4, "SQWGP_PS46_SQ_PERF_SEL_WAVES", "SQWGP_PS46", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS46_SQ_PERF_SEL_WAVES_32", "SQWGP_PS46", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS46_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS46", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS46_SQ_PERF_SEL_ITEMS", "SQWGP_PS46", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS46_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS46", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS46_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS46", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS46_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS46", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS46_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS46", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS46_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS46", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS46_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS46", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS46_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS46", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS46_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS46", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS46_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS46", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS46_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS46", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS46_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS46", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS46_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS46", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS46_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS46", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS46_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS46", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS46_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS46", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS46_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS46", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS46_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS46", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS46_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS46", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS46_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS46", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS46_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS46", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpPs47CountersGfx11 = {
        {4, "SQWGP_PS47_SQ_PERF_SEL_WAVES", "SQWGP_PS47", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_PS47_SQ_PERF_SEL_WAVES_32", "SQWGP_PS47", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_PS47_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_PS47", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_PS47_SQ_PERF_SEL_ITEMS", "SQWGP_PS47", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_PS47_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_PS47", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_PS47_SQ_PERF_SEL_INSTS_GDS", "SQWGP_PS47", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_PS47_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_PS47", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_PS47_SQ_PERF_SEL_INSTS_LDS", "SQWGP_PS47", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_PS47_SQ_PERF_SEL_INSTS_SALU", "SQWGP_PS47", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_PS47_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_PS47", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_PS47_SQ_PERF_SEL_INSTS_VALU", "SQWGP_PS47", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_PS47_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_PS47", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_PS47_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_PS47", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_PS47_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_PS47", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_PS47_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_PS47", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_PS47_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_PS47", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_PS47_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_PS47", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_PS47_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_PS47", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_PS47_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_PS47", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_PS47_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_PS47", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_PS47_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_PS47", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_PS47_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_PS47", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_PS47_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_PS47", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_PS47_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_PS47", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs0CountersGfx11 = {
        {4, "SQWGP_HS0_SQ_PERF_SEL_WAVES", "SQWGP_HS0", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS0_SQ_PERF_SEL_WAVES_32", "SQWGP_HS0", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS0_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS0", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS0_SQ_PERF_SEL_ITEMS", "SQWGP_HS0", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS0_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS0", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS0_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS0", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS0_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS0", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS0_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS0", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS0_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS0", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS0_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS0", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS0_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS0", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS0_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS0", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS0_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS0", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS0_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS0", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS0_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS0", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS0_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS0", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS0_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS0", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS0_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS0", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS0_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS0", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS0_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS0", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS0_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS0", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS0_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS0", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS0_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS0", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS0_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS0", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs1CountersGfx11 = {
        {4, "SQWGP_HS1_SQ_PERF_SEL_WAVES", "SQWGP_HS1", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS1_SQ_PERF_SEL_WAVES_32", "SQWGP_HS1", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS1_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS1", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS1_SQ_PERF_SEL_ITEMS", "SQWGP_HS1", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS1_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS1", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS1_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS1", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS1_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS1", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS1_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS1", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS1_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS1", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS1_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS1", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS1_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS1", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS1_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS1", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS1_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS1", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS1_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS1", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS1_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS1", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS1_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS1", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS1_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS1", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS1_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS1", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS1_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS1", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS1_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS1", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS1_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS1", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS1_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS1", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS1_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS1", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS1_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS1", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs2CountersGfx11 = {
        {4, "SQWGP_HS2_SQ_PERF_SEL_WAVES", "SQWGP_HS2", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS2_SQ_PERF_SEL_WAVES_32", "SQWGP_HS2", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS2_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS2", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS2_SQ_PERF_SEL_ITEMS", "SQWGP_HS2", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS2_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS2", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS2_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS2", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS2_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS2", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS2_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS2", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS2_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS2", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS2_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS2", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS2_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS2", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS2_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS2", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS2_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS2", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS2_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS2", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS2_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS2", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS2_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS2", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS2_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS2", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS2_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS2", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS2_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS2", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS2_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS2", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS2_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS2", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS2_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS2", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS2_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS2", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS2_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS2", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs3CountersGfx11 = {
        {4, "SQWGP_HS3_SQ_PERF_SEL_WAVES", "SQWGP_HS3", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS3_SQ_PERF_SEL_WAVES_32", "SQWGP_HS3", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS3_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS3", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS3_SQ_PERF_SEL_ITEMS", "SQWGP_HS3", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS3_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS3", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS3_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS3", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS3_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS3", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS3_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS3", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS3_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS3", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS3_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS3", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS3_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS3", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS3_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS3", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS3_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS3", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS3_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS3", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS3_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS3", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS3_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS3", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS3_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS3", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS3_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS3", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS3_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS3", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS3_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS3", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS3_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS3", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS3_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS3", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS3_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS3", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS3_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS3", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs4CountersGfx11 = {
        {4, "SQWGP_HS4_SQ_PERF_SEL_WAVES", "SQWGP_HS4", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS4_SQ_PERF_SEL_WAVES_32", "SQWGP_HS4", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS4_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS4", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS4_SQ_PERF_SEL_ITEMS", "SQWGP_HS4", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS4_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS4", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS4_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS4", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS4_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS4", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS4_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS4", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS4_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS4", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS4_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS4", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS4_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS4", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS4_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS4", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS4_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS4", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS4_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS4", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS4_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS4", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS4_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS4", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS4_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS4", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS4_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS4", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS4_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS4", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS4_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS4", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS4_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS4", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS4_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS4", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS4_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS4", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS4_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS4", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs5CountersGfx11 = {
        {4, "SQWGP_HS5_SQ_PERF_SEL_WAVES", "SQWGP_HS5", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS5_SQ_PERF_SEL_WAVES_32", "SQWGP_HS5", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS5_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS5", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS5_SQ_PERF_SEL_ITEMS", "SQWGP_HS5", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS5_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS5", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS5_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS5", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS5_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS5", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS5_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS5", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS5_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS5", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS5_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS5", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS5_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS5", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS5_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS5", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS5_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS5", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS5_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS5", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS5_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS5", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS5_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS5", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS5_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS5", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS5_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS5", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS5_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS5", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS5_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS5", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS5_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS5", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS5_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS5", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS5_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS5", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS5_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS5", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs6CountersGfx11 = {
        {4, "SQWGP_HS6_SQ_PERF_SEL_WAVES", "SQWGP_HS6", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS6_SQ_PERF_SEL_WAVES_32", "SQWGP_HS6", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS6_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS6", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS6_SQ_PERF_SEL_ITEMS", "SQWGP_HS6", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS6_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS6", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS6_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS6", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS6_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS6", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS6_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS6", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS6_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS6", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS6_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS6", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS6_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS6", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS6_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS6", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS6_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS6", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS6_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS6", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS6_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS6", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS6_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS6", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS6_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS6", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS6_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS6", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS6_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS6", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS6_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS6", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS6_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS6", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS6_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS6", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS6_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS6", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS6_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS6", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs7CountersGfx11 = {
        {4, "SQWGP_HS7_SQ_PERF_SEL_WAVES", "SQWGP_HS7", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS7_SQ_PERF_SEL_WAVES_32", "SQWGP_HS7", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS7_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS7", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS7_SQ_PERF_SEL_ITEMS", "SQWGP_HS7", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS7_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS7", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS7_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS7", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS7_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS7", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS7_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS7", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS7_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS7", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS7_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS7", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS7_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS7", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS7_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS7", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS7_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS7", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS7_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS7", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS7_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS7", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS7_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS7", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS7_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS7", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS7_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS7", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS7_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS7", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS7_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS7", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS7_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS7", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS7_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS7", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS7_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS7", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS7_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS7", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs8CountersGfx11 = {
        {4, "SQWGP_HS8_SQ_PERF_SEL_WAVES", "SQWGP_HS8", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS8_SQ_PERF_SEL_WAVES_32", "SQWGP_HS8", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS8_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS8", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS8_SQ_PERF_SEL_ITEMS", "SQWGP_HS8", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS8_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS8", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS8_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS8", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS8_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS8", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS8_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS8", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS8_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS8", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS8_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS8", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS8_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS8", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS8_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS8", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS8_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS8", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS8_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS8", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS8_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS8", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS8_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS8", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS8_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS8", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS8_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS8", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS8_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS8", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS8_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS8", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS8_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS8", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS8_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS8", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS8_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS8", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS8_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS8", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs9CountersGfx11 = {
        {4, "SQWGP_HS9_SQ_PERF_SEL_WAVES", "SQWGP_HS9", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS9_SQ_PERF_SEL_WAVES_32", "SQWGP_HS9", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS9_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS9", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS9_SQ_PERF_SEL_ITEMS", "SQWGP_HS9", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS9_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS9", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS9_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS9", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS9_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS9", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS9_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS9", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS9_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS9", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS9_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS9", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS9_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS9", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS9_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS9", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS9_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS9", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS9_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS9", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS9_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS9", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS9_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS9", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS9_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS9", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS9_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS9", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS9_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS9", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS9_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS9", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS9_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS9", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS9_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS9", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS9_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS9", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS9_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS9", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs10CountersGfx11 = {
        {4, "SQWGP_HS10_SQ_PERF_SEL_WAVES", "SQWGP_HS10", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS10_SQ_PERF_SEL_WAVES_32", "SQWGP_HS10", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS10_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS10", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS10_SQ_PERF_SEL_ITEMS", "SQWGP_HS10", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS10_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS10", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS10_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS10", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS10_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS10", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS10_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS10", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS10_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS10", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS10_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS10", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS10_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS10", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS10_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS10", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS10_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS10", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS10_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS10", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS10_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS10", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS10_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS10", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS10_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS10", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS10_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS10", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS10_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS10", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS10_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS10", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS10_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS10", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS10_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS10", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS10_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS10", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS10_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS10", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs11CountersGfx11 = {
        {4, "SQWGP_HS11_SQ_PERF_SEL_WAVES", "SQWGP_HS11", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS11_SQ_PERF_SEL_WAVES_32", "SQWGP_HS11", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS11_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS11", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS11_SQ_PERF_SEL_ITEMS", "SQWGP_HS11", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS11_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS11", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS11_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS11", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS11_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS11", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS11_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS11", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS11_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS11", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS11_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS11", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS11_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS11", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS11_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS11", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS11_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS11", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS11_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS11", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS11_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS11", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS11_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS11", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS11_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS11", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS11_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS11", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS11_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS11", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS11_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS11", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS11_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS11", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS11_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS11", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS11_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS11", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS11_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS11", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs12CountersGfx11 = {
        {4, "SQWGP_HS12_SQ_PERF_SEL_WAVES", "SQWGP_HS12", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS12_SQ_PERF_SEL_WAVES_32", "SQWGP_HS12", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS12_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS12", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS12_SQ_PERF_SEL_ITEMS", "SQWGP_HS12", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS12_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS12", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS12_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS12", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS12_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS12", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS12_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS12", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS12_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS12", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS12_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS12", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS12_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS12", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS12_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS12", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS12_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS12", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS12_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS12", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS12_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS12", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS12_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS12", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS12_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS12", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS12_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS12", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS12_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS12", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS12_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS12", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS12_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS12", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS12_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS12", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS12_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS12", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS12_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS12", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs13CountersGfx11 = {
        {4, "SQWGP_HS13_SQ_PERF_SEL_WAVES", "SQWGP_HS13", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS13_SQ_PERF_SEL_WAVES_32", "SQWGP_HS13", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS13_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS13", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS13_SQ_PERF_SEL_ITEMS", "SQWGP_HS13", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS13_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS13", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS13_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS13", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS13_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS13", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS13_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS13", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS13_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS13", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS13_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS13", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS13_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS13", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS13_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS13", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS13_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS13", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS13_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS13", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS13_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS13", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS13_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS13", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS13_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS13", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS13_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS13", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS13_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS13", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS13_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS13", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS13_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS13", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS13_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS13", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS13_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS13", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS13_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS13", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs14CountersGfx11 = {
        {4, "SQWGP_HS14_SQ_PERF_SEL_WAVES", "SQWGP_HS14", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS14_SQ_PERF_SEL_WAVES_32", "SQWGP_HS14", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS14_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS14", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS14_SQ_PERF_SEL_ITEMS", "SQWGP_HS14", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS14_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS14", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS14_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS14", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS14_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS14", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS14_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS14", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS14_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS14", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS14_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS14", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS14_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS14", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS14_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS14", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS14_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS14", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS14_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS14", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS14_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS14", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS14_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS14", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS14_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS14", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS14_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS14", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS14_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS14", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS14_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS14", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS14_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS14", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS14_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS14", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS14_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS14", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS14_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS14", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs15CountersGfx11 = {
        {4, "SQWGP_HS15_SQ_PERF_SEL_WAVES", "SQWGP_HS15", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS15_SQ_PERF_SEL_WAVES_32", "SQWGP_HS15", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS15_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS15", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS15_SQ_PERF_SEL_ITEMS", "SQWGP_HS15", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS15_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS15", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS15_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS15", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS15_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS15", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS15_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS15", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS15_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS15", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS15_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS15", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS15_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS15", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS15_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS15", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS15_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS15", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS15_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS15", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS15_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS15", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS15_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS15", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS15_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS15", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS15_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS15", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS15_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS15", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS15_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS15", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS15_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS15", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS15_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS15", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS15_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS15", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS15_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS15", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs16CountersGfx11 = {
        {4, "SQWGP_HS16_SQ_PERF_SEL_WAVES", "SQWGP_HS16", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS16_SQ_PERF_SEL_WAVES_32", "SQWGP_HS16", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS16_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS16", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS16_SQ_PERF_SEL_ITEMS", "SQWGP_HS16", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS16_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS16", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS16_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS16", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS16_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS16", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS16_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS16", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS16_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS16", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS16_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS16", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS16_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS16", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS16_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS16", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS16_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS16", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS16_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS16", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS16_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS16", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS16_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS16", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS16_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS16", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS16_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS16", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS16_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS16", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS16_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS16", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS16_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS16", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS16_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS16", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS16_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS16", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS16_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS16", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs17CountersGfx11 = {
        {4, "SQWGP_HS17_SQ_PERF_SEL_WAVES", "SQWGP_HS17", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS17_SQ_PERF_SEL_WAVES_32", "SQWGP_HS17", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS17_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS17", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS17_SQ_PERF_SEL_ITEMS", "SQWGP_HS17", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS17_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS17", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS17_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS17", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS17_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS17", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS17_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS17", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS17_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS17", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS17_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS17", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS17_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS17", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS17_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS17", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS17_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS17", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS17_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS17", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS17_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS17", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS17_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS17", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS17_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS17", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS17_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS17", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS17_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS17", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS17_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS17", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS17_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS17", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS17_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS17", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS17_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS17", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS17_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS17", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs18CountersGfx11 = {
        {4, "SQWGP_HS18_SQ_PERF_SEL_WAVES", "SQWGP_HS18", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS18_SQ_PERF_SEL_WAVES_32", "SQWGP_HS18", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS18_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS18", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS18_SQ_PERF_SEL_ITEMS", "SQWGP_HS18", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS18_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS18", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS18_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS18", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS18_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS18", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS18_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS18", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS18_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS18", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS18_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS18", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS18_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS18", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS18_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS18", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS18_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS18", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS18_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS18", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS18_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS18", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS18_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS18", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS18_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS18", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS18_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS18", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS18_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS18", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS18_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS18", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS18_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS18", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS18_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS18", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS18_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS18", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS18_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS18", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs19CountersGfx11 = {
        {4, "SQWGP_HS19_SQ_PERF_SEL_WAVES", "SQWGP_HS19", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS19_SQ_PERF_SEL_WAVES_32", "SQWGP_HS19", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS19_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS19", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS19_SQ_PERF_SEL_ITEMS", "SQWGP_HS19", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS19_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS19", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS19_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS19", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS19_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS19", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS19_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS19", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS19_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS19", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS19_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS19", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS19_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS19", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS19_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS19", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS19_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS19", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS19_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS19", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS19_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS19", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS19_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS19", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS19_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS19", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS19_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS19", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS19_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS19", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS19_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS19", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS19_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS19", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS19_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS19", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS19_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS19", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS19_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS19", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs20CountersGfx11 = {
        {4, "SQWGP_HS20_SQ_PERF_SEL_WAVES", "SQWGP_HS20", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS20_SQ_PERF_SEL_WAVES_32", "SQWGP_HS20", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS20_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS20", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS20_SQ_PERF_SEL_ITEMS", "SQWGP_HS20", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS20_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS20", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS20_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS20", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS20_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS20", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS20_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS20", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS20_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS20", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS20_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS20", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS20_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS20", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS20_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS20", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS20_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS20", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS20_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS20", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS20_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS20", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS20_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS20", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS20_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS20", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS20_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS20", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS20_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS20", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS20_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS20", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS20_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS20", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS20_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS20", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS20_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS20", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS20_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS20", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs21CountersGfx11 = {
        {4, "SQWGP_HS21_SQ_PERF_SEL_WAVES", "SQWGP_HS21", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS21_SQ_PERF_SEL_WAVES_32", "SQWGP_HS21", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS21_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS21", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS21_SQ_PERF_SEL_ITEMS", "SQWGP_HS21", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS21_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS21", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS21_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS21", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS21_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS21", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS21_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS21", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS21_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS21", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS21_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS21", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS21_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS21", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS21_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS21", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS21_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS21", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS21_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS21", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS21_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS21", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS21_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS21", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS21_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS21", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS21_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS21", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS21_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS21", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS21_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS21", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS21_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS21", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS21_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS21", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS21_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS21", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS21_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS21", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs22CountersGfx11 = {
        {4, "SQWGP_HS22_SQ_PERF_SEL_WAVES", "SQWGP_HS22", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS22_SQ_PERF_SEL_WAVES_32", "SQWGP_HS22", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS22_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS22", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS22_SQ_PERF_SEL_ITEMS", "SQWGP_HS22", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS22_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS22", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS22_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS22", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS22_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS22", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS22_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS22", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS22_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS22", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS22_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS22", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS22_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS22", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS22_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS22", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS22_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS22", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS22_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS22", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS22_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS22", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS22_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS22", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS22_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS22", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS22_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS22", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS22_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS22", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS22_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS22", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS22_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS22", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS22_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS22", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS22_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS22", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS22_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS22", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs23CountersGfx11 = {
        {4, "SQWGP_HS23_SQ_PERF_SEL_WAVES", "SQWGP_HS23", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS23_SQ_PERF_SEL_WAVES_32", "SQWGP_HS23", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS23_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS23", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS23_SQ_PERF_SEL_ITEMS", "SQWGP_HS23", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS23_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS23", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS23_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS23", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS23_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS23", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS23_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS23", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS23_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS23", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS23_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS23", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS23_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS23", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS23_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS23", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS23_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS23", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS23_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS23", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS23_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS23", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS23_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS23", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS23_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS23", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS23_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS23", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS23_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS23", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS23_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS23", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS23_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS23", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS23_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS23", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS23_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS23", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS23_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS23", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs24CountersGfx11 = {
        {4, "SQWGP_HS24_SQ_PERF_SEL_WAVES", "SQWGP_HS24", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS24_SQ_PERF_SEL_WAVES_32", "SQWGP_HS24", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS24_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS24", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS24_SQ_PERF_SEL_ITEMS", "SQWGP_HS24", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS24_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS24", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS24_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS24", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS24_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS24", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS24_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS24", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS24_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS24", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS24_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS24", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS24_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS24", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS24_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS24", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS24_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS24", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS24_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS24", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS24_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS24", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS24_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS24", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS24_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS24", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS24_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS24", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS24_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS24", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS24_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS24", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS24_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS24", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS24_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS24", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS24_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS24", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS24_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS24", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs25CountersGfx11 = {
        {4, "SQWGP_HS25_SQ_PERF_SEL_WAVES", "SQWGP_HS25", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS25_SQ_PERF_SEL_WAVES_32", "SQWGP_HS25", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS25_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS25", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS25_SQ_PERF_SEL_ITEMS", "SQWGP_HS25", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS25_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS25", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS25_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS25", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS25_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS25", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS25_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS25", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS25_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS25", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS25_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS25", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS25_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS25", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS25_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS25", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS25_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS25", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS25_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS25", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS25_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS25", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS25_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS25", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS25_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS25", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS25_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS25", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS25_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS25", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS25_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS25", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS25_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS25", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS25_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS25", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS25_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS25", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS25_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS25", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs26CountersGfx11 = {
        {4, "SQWGP_HS26_SQ_PERF_SEL_WAVES", "SQWGP_HS26", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS26_SQ_PERF_SEL_WAVES_32", "SQWGP_HS26", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS26_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS26", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS26_SQ_PERF_SEL_ITEMS", "SQWGP_HS26", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS26_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS26", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS26_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS26", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS26_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS26", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS26_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS26", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS26_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS26", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS26_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS26", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS26_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS26", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS26_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS26", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS26_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS26", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS26_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS26", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS26_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS26", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS26_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS26", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS26_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS26", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS26_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS26", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS26_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS26", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS26_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS26", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS26_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS26", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS26_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS26", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS26_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS26", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS26_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS26", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs27CountersGfx11 = {
        {4, "SQWGP_HS27_SQ_PERF_SEL_WAVES", "SQWGP_HS27", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS27_SQ_PERF_SEL_WAVES_32", "SQWGP_HS27", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS27_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS27", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS27_SQ_PERF_SEL_ITEMS", "SQWGP_HS27", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS27_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS27", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS27_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS27", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS27_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS27", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS27_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS27", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS27_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS27", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS27_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS27", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS27_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS27", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS27_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS27", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS27_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS27", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS27_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS27", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS27_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS27", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS27_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS27", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS27_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS27", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS27_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS27", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS27_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS27", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS27_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS27", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS27_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS27", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS27_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS27", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS27_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS27", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS27_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS27", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs28CountersGfx11 = {
        {4, "SQWGP_HS28_SQ_PERF_SEL_WAVES", "SQWGP_HS28", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS28_SQ_PERF_SEL_WAVES_32", "SQWGP_HS28", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS28_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS28", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS28_SQ_PERF_SEL_ITEMS", "SQWGP_HS28", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS28_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS28", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS28_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS28", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS28_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS28", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS28_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS28", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS28_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS28", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS28_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS28", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS28_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS28", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS28_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS28", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS28_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS28", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS28_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS28", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS28_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS28", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS28_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS28", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS28_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS28", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS28_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS28", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS28_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS28", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS28_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS28", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS28_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS28", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS28_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS28", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS28_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS28", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS28_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS28", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs29CountersGfx11 = {
        {4, "SQWGP_HS29_SQ_PERF_SEL_WAVES", "SQWGP_HS29", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS29_SQ_PERF_SEL_WAVES_32", "SQWGP_HS29", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS29_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS29", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS29_SQ_PERF_SEL_ITEMS", "SQWGP_HS29", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS29_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS29", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS29_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS29", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS29_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS29", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS29_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS29", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS29_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS29", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS29_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS29", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS29_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS29", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS29_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS29", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS29_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS29", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS29_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS29", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS29_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS29", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS29_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS29", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS29_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS29", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS29_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS29", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS29_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS29", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS29_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS29", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS29_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS29", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS29_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS29", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS29_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS29", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS29_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS29", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs30CountersGfx11 = {
        {4, "SQWGP_HS30_SQ_PERF_SEL_WAVES", "SQWGP_HS30", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS30_SQ_PERF_SEL_WAVES_32", "SQWGP_HS30", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS30_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS30", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS30_SQ_PERF_SEL_ITEMS", "SQWGP_HS30", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS30_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS30", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS30_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS30", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS30_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS30", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS30_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS30", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS30_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS30", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS30_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS30", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS30_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS30", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS30_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS30", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS30_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS30", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS30_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS30", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS30_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS30", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS30_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS30", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS30_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS30", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS30_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS30", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS30_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS30", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS30_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS30", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS30_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS30", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS30_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS30", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS30_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS30", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS30_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS30", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs31CountersGfx11 = {
        {4, "SQWGP_HS31_SQ_PERF_SEL_WAVES", "SQWGP_HS31", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS31_SQ_PERF_SEL_WAVES_32", "SQWGP_HS31", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS31_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS31", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS31_SQ_PERF_SEL_ITEMS", "SQWGP_HS31", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS31_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS31", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS31_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS31", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS31_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS31", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS31_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS31", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS31_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS31", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS31_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS31", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS31_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS31", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS31_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS31", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS31_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS31", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS31_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS31", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS31_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS31", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS31_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS31", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS31_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS31", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS31_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS31", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS31_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS31", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS31_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS31", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS31_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS31", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS31_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS31", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS31_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS31", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS31_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS31", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs32CountersGfx11 = {
        {4, "SQWGP_HS32_SQ_PERF_SEL_WAVES", "SQWGP_HS32", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS32_SQ_PERF_SEL_WAVES_32", "SQWGP_HS32", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS32_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS32", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS32_SQ_PERF_SEL_ITEMS", "SQWGP_HS32", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS32_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS32", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS32_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS32", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS32_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS32", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS32_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS32", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS32_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS32", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS32_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS32", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS32_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS32", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS32_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS32", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS32_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS32", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS32_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS32", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS32_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS32", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS32_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS32", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS32_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS32", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS32_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS32", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS32_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS32", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS32_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS32", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS32_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS32", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS32_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS32", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS32_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS32", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS32_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS32", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs33CountersGfx11 = {
        {4, "SQWGP_HS33_SQ_PERF_SEL_WAVES", "SQWGP_HS33", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS33_SQ_PERF_SEL_WAVES_32", "SQWGP_HS33", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS33_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS33", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS33_SQ_PERF_SEL_ITEMS", "SQWGP_HS33", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS33_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS33", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS33_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS33", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS33_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS33", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS33_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS33", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS33_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS33", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS33_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS33", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS33_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS33", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS33_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS33", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS33_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS33", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS33_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS33", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS33_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS33", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS33_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS33", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS33_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS33", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS33_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS33", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS33_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS33", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS33_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS33", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS33_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS33", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS33_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS33", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS33_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS33", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS33_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS33", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs34CountersGfx11 = {
        {4, "SQWGP_HS34_SQ_PERF_SEL_WAVES", "SQWGP_HS34", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS34_SQ_PERF_SEL_WAVES_32", "SQWGP_HS34", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS34_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS34", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS34_SQ_PERF_SEL_ITEMS", "SQWGP_HS34", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS34_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS34", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS34_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS34", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS34_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS34", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS34_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS34", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS34_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS34", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS34_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS34", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS34_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS34", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS34_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS34", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS34_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS34", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS34_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS34", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS34_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS34", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS34_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS34", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS34_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS34", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS34_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS34", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS34_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS34", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS34_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS34", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS34_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS34", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS34_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS34", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS34_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS34", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS34_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS34", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs35CountersGfx11 = {
        {4, "SQWGP_HS35_SQ_PERF_SEL_WAVES", "SQWGP_HS35", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS35_SQ_PERF_SEL_WAVES_32", "SQWGP_HS35", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS35_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS35", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS35_SQ_PERF_SEL_ITEMS", "SQWGP_HS35", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS35_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS35", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS35_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS35", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS35_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS35", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS35_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS35", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS35_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS35", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS35_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS35", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS35_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS35", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS35_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS35", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS35_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS35", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS35_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS35", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS35_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS35", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS35_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS35", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS35_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS35", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS35_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS35", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS35_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS35", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS35_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS35", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS35_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS35", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS35_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS35", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS35_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS35", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS35_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS35", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs36CountersGfx11 = {
        {4, "SQWGP_HS36_SQ_PERF_SEL_WAVES", "SQWGP_HS36", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS36_SQ_PERF_SEL_WAVES_32", "SQWGP_HS36", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS36_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS36", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS36_SQ_PERF_SEL_ITEMS", "SQWGP_HS36", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS36_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS36", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS36_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS36", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS36_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS36", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS36_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS36", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS36_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS36", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS36_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS36", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS36_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS36", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS36_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS36", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS36_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS36", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS36_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS36", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS36_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS36", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS36_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS36", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS36_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS36", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS36_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS36", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS36_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS36", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS36_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS36", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS36_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS36", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS36_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS36", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS36_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS36", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS36_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS36", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs37CountersGfx11 = {
        {4, "SQWGP_HS37_SQ_PERF_SEL_WAVES", "SQWGP_HS37", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS37_SQ_PERF_SEL_WAVES_32", "SQWGP_HS37", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS37_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS37", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS37_SQ_PERF_SEL_ITEMS", "SQWGP_HS37", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS37_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS37", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS37_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS37", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS37_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS37", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS37_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS37", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS37_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS37", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS37_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS37", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS37_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS37", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS37_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS37", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS37_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS37", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS37_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS37", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS37_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS37", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS37_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS37", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS37_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS37", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS37_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS37", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS37_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS37", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS37_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS37", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS37_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS37", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS37_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS37", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS37_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS37", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS37_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS37", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs38CountersGfx11 = {
        {4, "SQWGP_HS38_SQ_PERF_SEL_WAVES", "SQWGP_HS38", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS38_SQ_PERF_SEL_WAVES_32", "SQWGP_HS38", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS38_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS38", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS38_SQ_PERF_SEL_ITEMS", "SQWGP_HS38", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS38_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS38", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS38_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS38", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS38_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS38", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS38_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS38", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS38_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS38", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS38_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS38", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS38_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS38", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS38_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS38", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS38_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS38", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS38_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS38", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS38_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS38", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS38_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS38", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS38_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS38", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS38_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS38", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS38_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS38", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS38_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS38", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS38_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS38", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS38_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS38", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS38_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS38", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS38_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS38", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs39CountersGfx11 = {
        {4, "SQWGP_HS39_SQ_PERF_SEL_WAVES", "SQWGP_HS39", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS39_SQ_PERF_SEL_WAVES_32", "SQWGP_HS39", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS39_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS39", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS39_SQ_PERF_SEL_ITEMS", "SQWGP_HS39", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS39_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS39", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS39_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS39", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS39_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS39", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS39_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS39", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS39_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS39", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS39_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS39", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS39_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS39", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS39_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS39", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS39_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS39", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS39_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS39", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS39_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS39", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS39_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS39", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS39_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS39", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS39_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS39", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS39_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS39", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS39_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS39", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS39_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS39", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS39_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS39", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS39_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS39", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS39_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS39", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs40CountersGfx11 = {
        {4, "SQWGP_HS40_SQ_PERF_SEL_WAVES", "SQWGP_HS40", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS40_SQ_PERF_SEL_WAVES_32", "SQWGP_HS40", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS40_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS40", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS40_SQ_PERF_SEL_ITEMS", "SQWGP_HS40", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS40_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS40", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS40_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS40", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS40_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS40", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS40_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS40", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS40_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS40", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS40_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS40", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS40_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS40", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS40_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS40", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS40_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS40", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS40_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS40", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS40_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS40", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS40_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS40", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS40_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS40", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS40_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS40", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS40_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS40", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS40_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS40", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS40_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS40", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS40_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS40", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS40_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS40", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS40_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS40", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs41CountersGfx11 = {
        {4, "SQWGP_HS41_SQ_PERF_SEL_WAVES", "SQWGP_HS41", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS41_SQ_PERF_SEL_WAVES_32", "SQWGP_HS41", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS41_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS41", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS41_SQ_PERF_SEL_ITEMS", "SQWGP_HS41", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS41_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS41", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS41_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS41", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS41_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS41", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS41_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS41", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS41_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS41", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS41_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS41", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS41_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS41", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS41_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS41", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS41_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS41", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS41_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS41", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS41_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS41", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS41_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS41", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS41_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS41", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS41_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS41", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS41_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS41", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS41_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS41", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS41_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS41", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS41_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS41", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS41_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS41", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS41_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS41", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs42CountersGfx11 = {
        {4, "SQWGP_HS42_SQ_PERF_SEL_WAVES", "SQWGP_HS42", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS42_SQ_PERF_SEL_WAVES_32", "SQWGP_HS42", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS42_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS42", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS42_SQ_PERF_SEL_ITEMS", "SQWGP_HS42", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS42_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS42", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS42_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS42", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS42_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS42", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS42_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS42", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS42_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS42", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS42_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS42", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS42_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS42", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS42_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS42", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS42_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS42", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS42_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS42", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS42_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS42", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS42_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS42", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS42_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS42", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS42_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS42", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS42_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS42", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS42_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS42", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS42_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS42", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS42_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS42", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS42_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS42", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS42_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS42", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs43CountersGfx11 = {
        {4, "SQWGP_HS43_SQ_PERF_SEL_WAVES", "SQWGP_HS43", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS43_SQ_PERF_SEL_WAVES_32", "SQWGP_HS43", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS43_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS43", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS43_SQ_PERF_SEL_ITEMS", "SQWGP_HS43", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS43_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS43", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS43_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS43", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS43_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS43", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS43_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS43", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS43_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS43", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS43_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS43", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS43_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS43", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS43_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS43", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS43_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS43", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS43_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS43", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS43_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS43", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS43_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS43", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS43_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS43", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS43_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS43", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS43_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS43", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS43_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS43", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS43_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS43", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS43_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS43", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS43_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS43", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS43_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS43", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs44CountersGfx11 = {
        {4, "SQWGP_HS44_SQ_PERF_SEL_WAVES", "SQWGP_HS44", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS44_SQ_PERF_SEL_WAVES_32", "SQWGP_HS44", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS44_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS44", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS44_SQ_PERF_SEL_ITEMS", "SQWGP_HS44", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS44_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS44", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS44_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS44", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS44_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS44", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS44_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS44", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS44_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS44", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS44_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS44", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS44_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS44", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS44_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS44", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS44_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS44", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS44_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS44", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS44_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS44", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS44_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS44", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS44_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS44", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS44_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS44", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS44_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS44", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS44_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS44", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS44_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS44", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS44_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS44", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS44_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS44", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS44_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS44", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs45CountersGfx11 = {
        {4, "SQWGP_HS45_SQ_PERF_SEL_WAVES", "SQWGP_HS45", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS45_SQ_PERF_SEL_WAVES_32", "SQWGP_HS45", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS45_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS45", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS45_SQ_PERF_SEL_ITEMS", "SQWGP_HS45", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS45_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS45", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS45_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS45", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS45_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS45", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS45_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS45", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS45_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS45", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS45_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS45", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS45_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS45", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS45_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS45", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS45_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS45", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS45_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS45", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS45_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS45", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS45_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS45", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS45_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS45", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS45_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS45", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS45_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS45", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS45_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS45", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS45_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS45", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS45_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS45", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS45_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS45", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS45_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS45", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs46CountersGfx11 = {
        {4, "SQWGP_HS46_SQ_PERF_SEL_WAVES", "SQWGP_HS46", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS46_SQ_PERF_SEL_WAVES_32", "SQWGP_HS46", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS46_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS46", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS46_SQ_PERF_SEL_ITEMS", "SQWGP_HS46", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS46_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS46", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS46_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS46", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS46_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS46", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS46_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS46", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS46_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS46", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS46_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS46", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS46_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS46", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS46_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS46", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS46_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS46", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS46_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS46", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS46_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS46", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS46_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS46", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS46_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS46", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS46_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS46", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS46_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS46", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS46_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS46", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS46_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS46", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS46_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS46", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS46_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS46", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS46_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS46", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpHs47CountersGfx11 = {
        {4, "SQWGP_HS47_SQ_PERF_SEL_WAVES", "SQWGP_HS47", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_HS47_SQ_PERF_SEL_WAVES_32", "SQWGP_HS47", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_HS47_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_HS47", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_HS47_SQ_PERF_SEL_ITEMS", "SQWGP_HS47", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_HS47_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_HS47", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_HS47_SQ_PERF_SEL_INSTS_GDS", "SQWGP_HS47", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_HS47_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_HS47", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_HS47_SQ_PERF_SEL_INSTS_LDS", "SQWGP_HS47", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_HS47_SQ_PERF_SEL_INSTS_SALU", "SQWGP_HS47", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_HS47_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_HS47", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_HS47_SQ_PERF_SEL_INSTS_VALU", "SQWGP_HS47", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_HS47_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_HS47", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_HS47_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_HS47", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_HS47_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_HS47", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_HS47_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_HS47", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_HS47_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_HS47", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_HS47_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_HS47", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_HS47_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_HS47", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_HS47_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_HS47", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_HS47_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_HS47", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_HS47_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_HS47", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_HS47_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_HS47", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_HS47_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_HS47", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_HS47_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_HS47", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs0CountersGfx11 = {
        {4, "SQWGP_CS0_SQ_PERF_SEL_WAVES", "SQWGP_CS0", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS0_SQ_PERF_SEL_WAVES_32", "SQWGP_CS0", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS0_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS0", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS0_SQ_PERF_SEL_ITEMS", "SQWGP_CS0", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS0_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS0", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS0_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS0", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS0_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS0", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS0_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS0", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS0_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS0", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS0_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS0", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS0_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS0", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS0_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS0", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS0_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS0", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS0_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS0", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS0_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS0", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS0_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS0", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS0_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS0", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS0_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS0", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS0_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS0", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS0_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS0", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS0_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS0", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS0_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS0", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS0_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS0", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS0_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS0", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs1CountersGfx11 = {
        {4, "SQWGP_CS1_SQ_PERF_SEL_WAVES", "SQWGP_CS1", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS1_SQ_PERF_SEL_WAVES_32", "SQWGP_CS1", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS1_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS1", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS1_SQ_PERF_SEL_ITEMS", "SQWGP_CS1", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS1_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS1", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS1_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS1", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS1_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS1", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS1_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS1", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS1_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS1", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS1_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS1", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS1_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS1", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS1_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS1", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS1_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS1", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS1_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS1", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS1_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS1", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS1_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS1", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS1_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS1", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS1_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS1", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS1_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS1", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS1_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS1", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS1_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS1", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS1_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS1", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS1_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS1", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS1_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS1", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs2CountersGfx11 = {
        {4, "SQWGP_CS2_SQ_PERF_SEL_WAVES", "SQWGP_CS2", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS2_SQ_PERF_SEL_WAVES_32", "SQWGP_CS2", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS2_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS2", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS2_SQ_PERF_SEL_ITEMS", "SQWGP_CS2", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS2_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS2", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS2_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS2", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS2_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS2", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS2_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS2", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS2_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS2", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS2_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS2", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS2_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS2", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS2_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS2", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS2_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS2", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS2_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS2", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS2_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS2", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS2_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS2", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS2_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS2", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS2_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS2", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS2_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS2", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS2_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS2", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS2_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS2", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS2_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS2", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS2_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS2", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS2_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS2", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs3CountersGfx11 = {
        {4, "SQWGP_CS3_SQ_PERF_SEL_WAVES", "SQWGP_CS3", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS3_SQ_PERF_SEL_WAVES_32", "SQWGP_CS3", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS3_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS3", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS3_SQ_PERF_SEL_ITEMS", "SQWGP_CS3", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS3_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS3", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS3_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS3", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS3_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS3", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS3_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS3", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS3_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS3", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS3_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS3", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS3_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS3", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS3_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS3", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS3_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS3", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS3_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS3", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS3_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS3", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS3_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS3", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS3_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS3", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS3_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS3", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS3_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS3", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS3_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS3", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS3_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS3", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS3_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS3", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS3_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS3", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS3_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS3", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs4CountersGfx11 = {
        {4, "SQWGP_CS4_SQ_PERF_SEL_WAVES", "SQWGP_CS4", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS4_SQ_PERF_SEL_WAVES_32", "SQWGP_CS4", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS4_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS4", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS4_SQ_PERF_SEL_ITEMS", "SQWGP_CS4", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS4_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS4", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS4_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS4", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS4_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS4", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS4_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS4", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS4_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS4", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS4_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS4", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS4_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS4", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS4_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS4", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS4_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS4", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS4_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS4", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS4_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS4", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS4_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS4", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS4_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS4", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS4_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS4", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS4_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS4", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS4_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS4", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS4_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS4", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS4_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS4", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS4_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS4", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS4_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS4", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs5CountersGfx11 = {
        {4, "SQWGP_CS5_SQ_PERF_SEL_WAVES", "SQWGP_CS5", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS5_SQ_PERF_SEL_WAVES_32", "SQWGP_CS5", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS5_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS5", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS5_SQ_PERF_SEL_ITEMS", "SQWGP_CS5", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS5_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS5", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS5_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS5", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS5_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS5", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS5_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS5", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS5_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS5", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS5_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS5", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS5_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS5", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS5_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS5", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS5_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS5", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS5_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS5", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS5_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS5", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS5_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS5", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS5_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS5", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS5_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS5", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS5_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS5", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS5_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS5", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS5_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS5", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS5_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS5", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS5_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS5", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS5_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS5", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs6CountersGfx11 = {
        {4, "SQWGP_CS6_SQ_PERF_SEL_WAVES", "SQWGP_CS6", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS6_SQ_PERF_SEL_WAVES_32", "SQWGP_CS6", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS6_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS6", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS6_SQ_PERF_SEL_ITEMS", "SQWGP_CS6", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS6_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS6", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS6_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS6", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS6_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS6", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS6_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS6", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS6_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS6", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS6_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS6", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS6_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS6", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS6_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS6", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS6_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS6", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS6_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS6", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS6_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS6", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS6_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS6", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS6_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS6", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS6_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS6", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS6_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS6", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS6_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS6", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS6_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS6", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS6_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS6", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS6_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS6", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS6_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS6", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs7CountersGfx11 = {
        {4, "SQWGP_CS7_SQ_PERF_SEL_WAVES", "SQWGP_CS7", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS7_SQ_PERF_SEL_WAVES_32", "SQWGP_CS7", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS7_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS7", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS7_SQ_PERF_SEL_ITEMS", "SQWGP_CS7", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS7_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS7", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS7_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS7", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS7_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS7", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS7_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS7", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS7_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS7", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS7_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS7", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS7_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS7", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS7_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS7", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS7_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS7", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS7_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS7", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS7_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS7", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS7_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS7", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS7_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS7", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS7_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS7", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS7_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS7", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS7_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS7", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS7_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS7", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS7_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS7", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS7_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS7", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS7_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS7", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs8CountersGfx11 = {
        {4, "SQWGP_CS8_SQ_PERF_SEL_WAVES", "SQWGP_CS8", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS8_SQ_PERF_SEL_WAVES_32", "SQWGP_CS8", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS8_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS8", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS8_SQ_PERF_SEL_ITEMS", "SQWGP_CS8", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS8_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS8", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS8_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS8", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS8_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS8", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS8_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS8", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS8_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS8", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS8_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS8", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS8_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS8", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS8_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS8", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS8_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS8", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS8_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS8", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS8_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS8", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS8_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS8", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS8_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS8", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS8_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS8", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS8_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS8", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS8_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS8", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS8_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS8", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS8_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS8", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS8_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS8", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS8_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS8", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs9CountersGfx11 = {
        {4, "SQWGP_CS9_SQ_PERF_SEL_WAVES", "SQWGP_CS9", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS9_SQ_PERF_SEL_WAVES_32", "SQWGP_CS9", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS9_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS9", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS9_SQ_PERF_SEL_ITEMS", "SQWGP_CS9", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS9_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS9", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS9_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS9", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS9_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS9", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS9_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS9", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS9_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS9", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS9_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS9", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS9_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS9", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS9_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS9", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS9_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS9", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS9_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS9", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS9_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS9", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS9_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS9", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS9_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS9", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS9_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS9", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS9_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS9", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS9_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS9", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS9_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS9", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS9_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS9", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS9_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS9", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS9_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS9", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs10CountersGfx11 = {
        {4, "SQWGP_CS10_SQ_PERF_SEL_WAVES", "SQWGP_CS10", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS10_SQ_PERF_SEL_WAVES_32", "SQWGP_CS10", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS10_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS10", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS10_SQ_PERF_SEL_ITEMS", "SQWGP_CS10", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS10_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS10", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS10_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS10", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS10_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS10", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS10_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS10", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS10_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS10", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS10_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS10", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS10_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS10", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS10_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS10", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS10_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS10", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS10_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS10", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS10_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS10", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS10_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS10", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS10_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS10", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS10_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS10", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS10_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS10", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS10_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS10", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS10_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS10", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS10_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS10", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS10_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS10", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS10_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS10", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs11CountersGfx11 = {
        {4, "SQWGP_CS11_SQ_PERF_SEL_WAVES", "SQWGP_CS11", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS11_SQ_PERF_SEL_WAVES_32", "SQWGP_CS11", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS11_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS11", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS11_SQ_PERF_SEL_ITEMS", "SQWGP_CS11", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS11_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS11", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS11_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS11", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS11_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS11", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS11_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS11", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS11_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS11", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS11_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS11", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS11_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS11", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS11_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS11", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS11_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS11", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS11_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS11", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS11_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS11", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS11_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS11", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS11_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS11", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS11_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS11", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS11_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS11", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS11_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS11", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS11_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS11", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS11_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS11", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS11_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS11", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS11_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS11", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs12CountersGfx11 = {
        {4, "SQWGP_CS12_SQ_PERF_SEL_WAVES", "SQWGP_CS12", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS12_SQ_PERF_SEL_WAVES_32", "SQWGP_CS12", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS12_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS12", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS12_SQ_PERF_SEL_ITEMS", "SQWGP_CS12", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS12_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS12", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS12_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS12", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS12_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS12", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS12_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS12", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS12_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS12", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS12_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS12", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS12_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS12", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS12_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS12", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS12_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS12", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS12_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS12", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS12_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS12", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS12_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS12", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS12_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS12", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS12_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS12", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS12_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS12", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS12_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS12", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS12_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS12", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS12_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS12", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS12_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS12", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS12_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS12", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs13CountersGfx11 = {
        {4, "SQWGP_CS13_SQ_PERF_SEL_WAVES", "SQWGP_CS13", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS13_SQ_PERF_SEL_WAVES_32", "SQWGP_CS13", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS13_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS13", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS13_SQ_PERF_SEL_ITEMS", "SQWGP_CS13", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS13_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS13", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS13_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS13", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS13_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS13", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS13_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS13", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS13_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS13", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS13_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS13", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS13_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS13", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS13_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS13", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS13_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS13", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS13_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS13", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS13_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS13", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS13_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS13", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS13_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS13", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS13_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS13", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS13_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS13", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS13_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS13", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS13_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS13", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS13_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS13", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS13_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS13", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS13_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS13", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs14CountersGfx11 = {
        {4, "SQWGP_CS14_SQ_PERF_SEL_WAVES", "SQWGP_CS14", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS14_SQ_PERF_SEL_WAVES_32", "SQWGP_CS14", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS14_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS14", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS14_SQ_PERF_SEL_ITEMS", "SQWGP_CS14", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS14_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS14", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS14_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS14", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS14_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS14", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS14_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS14", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS14_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS14", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS14_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS14", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS14_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS14", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS14_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS14", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS14_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS14", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS14_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS14", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS14_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS14", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS14_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS14", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS14_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS14", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS14_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS14", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS14_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS14", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS14_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS14", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS14_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS14", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS14_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS14", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS14_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS14", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS14_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS14", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs15CountersGfx11 = {
        {4, "SQWGP_CS15_SQ_PERF_SEL_WAVES", "SQWGP_CS15", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS15_SQ_PERF_SEL_WAVES_32", "SQWGP_CS15", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS15_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS15", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS15_SQ_PERF_SEL_ITEMS", "SQWGP_CS15", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS15_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS15", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS15_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS15", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS15_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS15", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS15_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS15", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS15_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS15", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS15_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS15", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS15_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS15", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS15_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS15", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS15_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS15", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS15_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS15", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS15_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS15", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS15_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS15", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS15_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS15", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS15_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS15", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS15_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS15", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS15_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS15", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS15_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS15", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS15_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS15", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS15_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS15", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS15_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS15", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs16CountersGfx11 = {
        {4, "SQWGP_CS16_SQ_PERF_SEL_WAVES", "SQWGP_CS16", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS16_SQ_PERF_SEL_WAVES_32", "SQWGP_CS16", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS16_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS16", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS16_SQ_PERF_SEL_ITEMS", "SQWGP_CS16", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS16_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS16", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS16_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS16", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS16_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS16", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS16_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS16", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS16_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS16", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS16_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS16", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS16_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS16", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS16_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS16", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS16_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS16", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS16_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS16", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS16_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS16", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS16_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS16", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS16_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS16", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS16_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS16", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS16_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS16", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS16_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS16", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS16_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS16", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS16_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS16", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS16_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS16", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS16_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS16", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs17CountersGfx11 = {
        {4, "SQWGP_CS17_SQ_PERF_SEL_WAVES", "SQWGP_CS17", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS17_SQ_PERF_SEL_WAVES_32", "SQWGP_CS17", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS17_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS17", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS17_SQ_PERF_SEL_ITEMS", "SQWGP_CS17", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS17_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS17", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS17_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS17", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS17_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS17", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS17_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS17", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS17_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS17", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS17_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS17", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS17_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS17", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS17_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS17", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS17_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS17", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS17_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS17", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS17_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS17", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS17_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS17", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS17_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS17", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS17_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS17", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS17_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS17", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS17_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS17", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS17_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS17", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS17_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS17", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS17_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS17", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS17_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS17", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs18CountersGfx11 = {
        {4, "SQWGP_CS18_SQ_PERF_SEL_WAVES", "SQWGP_CS18", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS18_SQ_PERF_SEL_WAVES_32", "SQWGP_CS18", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS18_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS18", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS18_SQ_PERF_SEL_ITEMS", "SQWGP_CS18", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS18_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS18", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS18_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS18", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS18_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS18", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS18_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS18", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS18_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS18", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS18_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS18", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS18_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS18", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS18_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS18", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS18_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS18", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS18_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS18", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS18_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS18", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS18_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS18", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS18_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS18", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS18_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS18", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS18_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS18", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS18_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS18", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS18_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS18", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS18_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS18", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS18_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS18", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS18_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS18", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs19CountersGfx11 = {
        {4, "SQWGP_CS19_SQ_PERF_SEL_WAVES", "SQWGP_CS19", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS19_SQ_PERF_SEL_WAVES_32", "SQWGP_CS19", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS19_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS19", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS19_SQ_PERF_SEL_ITEMS", "SQWGP_CS19", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS19_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS19", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS19_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS19", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS19_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS19", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS19_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS19", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS19_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS19", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS19_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS19", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS19_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS19", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS19_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS19", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS19_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS19", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS19_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS19", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS19_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS19", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS19_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS19", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS19_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS19", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS19_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS19", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS19_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS19", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS19_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS19", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS19_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS19", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS19_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS19", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS19_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS19", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS19_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS19", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs20CountersGfx11 = {
        {4, "SQWGP_CS20_SQ_PERF_SEL_WAVES", "SQWGP_CS20", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS20_SQ_PERF_SEL_WAVES_32", "SQWGP_CS20", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS20_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS20", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS20_SQ_PERF_SEL_ITEMS", "SQWGP_CS20", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS20_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS20", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS20_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS20", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS20_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS20", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS20_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS20", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS20_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS20", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS20_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS20", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS20_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS20", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS20_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS20", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS20_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS20", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS20_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS20", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS20_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS20", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS20_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS20", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS20_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS20", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS20_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS20", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS20_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS20", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS20_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS20", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS20_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS20", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS20_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS20", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS20_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS20", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS20_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS20", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs21CountersGfx11 = {
        {4, "SQWGP_CS21_SQ_PERF_SEL_WAVES", "SQWGP_CS21", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS21_SQ_PERF_SEL_WAVES_32", "SQWGP_CS21", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS21_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS21", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS21_SQ_PERF_SEL_ITEMS", "SQWGP_CS21", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS21_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS21", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS21_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS21", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS21_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS21", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS21_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS21", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS21_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS21", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS21_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS21", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS21_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS21", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS21_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS21", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS21_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS21", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS21_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS21", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS21_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS21", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS21_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS21", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS21_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS21", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS21_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS21", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS21_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS21", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS21_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS21", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS21_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS21", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS21_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS21", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS21_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS21", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS21_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS21", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs22CountersGfx11 = {
        {4, "SQWGP_CS22_SQ_PERF_SEL_WAVES", "SQWGP_CS22", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS22_SQ_PERF_SEL_WAVES_32", "SQWGP_CS22", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS22_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS22", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS22_SQ_PERF_SEL_ITEMS", "SQWGP_CS22", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS22_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS22", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS22_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS22", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS22_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS22", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS22_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS22", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS22_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS22", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS22_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS22", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS22_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS22", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS22_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS22", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS22_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS22", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS22_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS22", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS22_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS22", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS22_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS22", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS22_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS22", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS22_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS22", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS22_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS22", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS22_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS22", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS22_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS22", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS22_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS22", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS22_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS22", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS22_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS22", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs23CountersGfx11 = {
        {4, "SQWGP_CS23_SQ_PERF_SEL_WAVES", "SQWGP_CS23", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS23_SQ_PERF_SEL_WAVES_32", "SQWGP_CS23", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS23_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS23", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS23_SQ_PERF_SEL_ITEMS", "SQWGP_CS23", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS23_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS23", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS23_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS23", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS23_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS23", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS23_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS23", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS23_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS23", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS23_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS23", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS23_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS23", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS23_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS23", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS23_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS23", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS23_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS23", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS23_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS23", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS23_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS23", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS23_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS23", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS23_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS23", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS23_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS23", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS23_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS23", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS23_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS23", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS23_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS23", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS23_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS23", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS23_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS23", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs24CountersGfx11 = {
        {4, "SQWGP_CS24_SQ_PERF_SEL_WAVES", "SQWGP_CS24", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS24_SQ_PERF_SEL_WAVES_32", "SQWGP_CS24", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS24_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS24", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS24_SQ_PERF_SEL_ITEMS", "SQWGP_CS24", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS24_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS24", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS24_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS24", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS24_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS24", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS24_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS24", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS24_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS24", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS24_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS24", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS24_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS24", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS24_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS24", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS24_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS24", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS24_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS24", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS24_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS24", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS24_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS24", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS24_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS24", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS24_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS24", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS24_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS24", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS24_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS24", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS24_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS24", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS24_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS24", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS24_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS24", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS24_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS24", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs25CountersGfx11 = {
        {4, "SQWGP_CS25_SQ_PERF_SEL_WAVES", "SQWGP_CS25", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS25_SQ_PERF_SEL_WAVES_32", "SQWGP_CS25", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS25_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS25", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS25_SQ_PERF_SEL_ITEMS", "SQWGP_CS25", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS25_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS25", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS25_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS25", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS25_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS25", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS25_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS25", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS25_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS25", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS25_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS25", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS25_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS25", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS25_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS25", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS25_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS25", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS25_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS25", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS25_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS25", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS25_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS25", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS25_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS25", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS25_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS25", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS25_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS25", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS25_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS25", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS25_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS25", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS25_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS25", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS25_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS25", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS25_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS25", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs26CountersGfx11 = {
        {4, "SQWGP_CS26_SQ_PERF_SEL_WAVES", "SQWGP_CS26", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS26_SQ_PERF_SEL_WAVES_32", "SQWGP_CS26", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS26_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS26", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS26_SQ_PERF_SEL_ITEMS", "SQWGP_CS26", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS26_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS26", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS26_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS26", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS26_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS26", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS26_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS26", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS26_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS26", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS26_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS26", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS26_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS26", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS26_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS26", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS26_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS26", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS26_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS26", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS26_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS26", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS26_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS26", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS26_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS26", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS26_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS26", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS26_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS26", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS26_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS26", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS26_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS26", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS26_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS26", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS26_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS26", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS26_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS26", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs27CountersGfx11 = {
        {4, "SQWGP_CS27_SQ_PERF_SEL_WAVES", "SQWGP_CS27", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS27_SQ_PERF_SEL_WAVES_32", "SQWGP_CS27", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS27_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS27", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS27_SQ_PERF_SEL_ITEMS", "SQWGP_CS27", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS27_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS27", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS27_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS27", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS27_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS27", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS27_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS27", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS27_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS27", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS27_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS27", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS27_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS27", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS27_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS27", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS27_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS27", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS27_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS27", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS27_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS27", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS27_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS27", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS27_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS27", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS27_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS27", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS27_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS27", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS27_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS27", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS27_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS27", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS27_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS27", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS27_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS27", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS27_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS27", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs28CountersGfx11 = {
        {4, "SQWGP_CS28_SQ_PERF_SEL_WAVES", "SQWGP_CS28", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS28_SQ_PERF_SEL_WAVES_32", "SQWGP_CS28", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS28_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS28", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS28_SQ_PERF_SEL_ITEMS", "SQWGP_CS28", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS28_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS28", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS28_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS28", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS28_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS28", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS28_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS28", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS28_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS28", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS28_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS28", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS28_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS28", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS28_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS28", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS28_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS28", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS28_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS28", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS28_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS28", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS28_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS28", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS28_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS28", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS28_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS28", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS28_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS28", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS28_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS28", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS28_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS28", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS28_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS28", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS28_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS28", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS28_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS28", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs29CountersGfx11 = {
        {4, "SQWGP_CS29_SQ_PERF_SEL_WAVES", "SQWGP_CS29", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS29_SQ_PERF_SEL_WAVES_32", "SQWGP_CS29", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS29_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS29", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS29_SQ_PERF_SEL_ITEMS", "SQWGP_CS29", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS29_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS29", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS29_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS29", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS29_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS29", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS29_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS29", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS29_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS29", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS29_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS29", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS29_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS29", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS29_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS29", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS29_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS29", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS29_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS29", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS29_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS29", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS29_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS29", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS29_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS29", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS29_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS29", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS29_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS29", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS29_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS29", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS29_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS29", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS29_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS29", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS29_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS29", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS29_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS29", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs30CountersGfx11 = {
        {4, "SQWGP_CS30_SQ_PERF_SEL_WAVES", "SQWGP_CS30", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS30_SQ_PERF_SEL_WAVES_32", "SQWGP_CS30", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS30_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS30", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS30_SQ_PERF_SEL_ITEMS", "SQWGP_CS30", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS30_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS30", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS30_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS30", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS30_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS30", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS30_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS30", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS30_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS30", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS30_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS30", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS30_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS30", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS30_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS30", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS30_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS30", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS30_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS30", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS30_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS30", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS30_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS30", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS30_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS30", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS30_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS30", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS30_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS30", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS30_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS30", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS30_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS30", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS30_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS30", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS30_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS30", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS30_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS30", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs31CountersGfx11 = {
        {4, "SQWGP_CS31_SQ_PERF_SEL_WAVES", "SQWGP_CS31", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS31_SQ_PERF_SEL_WAVES_32", "SQWGP_CS31", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS31_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS31", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS31_SQ_PERF_SEL_ITEMS", "SQWGP_CS31", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS31_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS31", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS31_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS31", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS31_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS31", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS31_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS31", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS31_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS31", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS31_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS31", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS31_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS31", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS31_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS31", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS31_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS31", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS31_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS31", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS31_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS31", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS31_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS31", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS31_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS31", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS31_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS31", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS31_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS31", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS31_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS31", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS31_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS31", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS31_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS31", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS31_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS31", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS31_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS31", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs32CountersGfx11 = {
        {4, "SQWGP_CS32_SQ_PERF_SEL_WAVES", "SQWGP_CS32", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS32_SQ_PERF_SEL_WAVES_32", "SQWGP_CS32", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS32_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS32", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS32_SQ_PERF_SEL_ITEMS", "SQWGP_CS32", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS32_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS32", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS32_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS32", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS32_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS32", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS32_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS32", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS32_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS32", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS32_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS32", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS32_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS32", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS32_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS32", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS32_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS32", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS32_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS32", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS32_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS32", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS32_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS32", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS32_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS32", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS32_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS32", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS32_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS32", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS32_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS32", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS32_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS32", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS32_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS32", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS32_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS32", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS32_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS32", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs33CountersGfx11 = {
        {4, "SQWGP_CS33_SQ_PERF_SEL_WAVES", "SQWGP_CS33", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS33_SQ_PERF_SEL_WAVES_32", "SQWGP_CS33", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS33_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS33", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS33_SQ_PERF_SEL_ITEMS", "SQWGP_CS33", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS33_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS33", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS33_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS33", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS33_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS33", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS33_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS33", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS33_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS33", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS33_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS33", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS33_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS33", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS33_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS33", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS33_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS33", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS33_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS33", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS33_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS33", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS33_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS33", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS33_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS33", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS33_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS33", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS33_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS33", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS33_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS33", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS33_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS33", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS33_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS33", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS33_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS33", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS33_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS33", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs34CountersGfx11 = {
        {4, "SQWGP_CS34_SQ_PERF_SEL_WAVES", "SQWGP_CS34", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS34_SQ_PERF_SEL_WAVES_32", "SQWGP_CS34", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS34_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS34", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS34_SQ_PERF_SEL_ITEMS", "SQWGP_CS34", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS34_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS34", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS34_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS34", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS34_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS34", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS34_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS34", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS34_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS34", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS34_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS34", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS34_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS34", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS34_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS34", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS34_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS34", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS34_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS34", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS34_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS34", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS34_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS34", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS34_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS34", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS34_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS34", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS34_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS34", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS34_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS34", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS34_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS34", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS34_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS34", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS34_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS34", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS34_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS34", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs35CountersGfx11 = {
        {4, "SQWGP_CS35_SQ_PERF_SEL_WAVES", "SQWGP_CS35", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS35_SQ_PERF_SEL_WAVES_32", "SQWGP_CS35", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS35_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS35", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS35_SQ_PERF_SEL_ITEMS", "SQWGP_CS35", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS35_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS35", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS35_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS35", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS35_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS35", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS35_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS35", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS35_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS35", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS35_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS35", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS35_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS35", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS35_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS35", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS35_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS35", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS35_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS35", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS35_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS35", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS35_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS35", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS35_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS35", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS35_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS35", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS35_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS35", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS35_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS35", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS35_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS35", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS35_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS35", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS35_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS35", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS35_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS35", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs36CountersGfx11 = {
        {4, "SQWGP_CS36_SQ_PERF_SEL_WAVES", "SQWGP_CS36", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS36_SQ_PERF_SEL_WAVES_32", "SQWGP_CS36", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS36_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS36", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS36_SQ_PERF_SEL_ITEMS", "SQWGP_CS36", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS36_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS36", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS36_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS36", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS36_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS36", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS36_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS36", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS36_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS36", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS36_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS36", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS36_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS36", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS36_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS36", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS36_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS36", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS36_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS36", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS36_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS36", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS36_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS36", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS36_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS36", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS36_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS36", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS36_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS36", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS36_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS36", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS36_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS36", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS36_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS36", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS36_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS36", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS36_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS36", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs37CountersGfx11 = {
        {4, "SQWGP_CS37_SQ_PERF_SEL_WAVES", "SQWGP_CS37", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS37_SQ_PERF_SEL_WAVES_32", "SQWGP_CS37", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS37_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS37", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS37_SQ_PERF_SEL_ITEMS", "SQWGP_CS37", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS37_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS37", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS37_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS37", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS37_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS37", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS37_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS37", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS37_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS37", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS37_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS37", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS37_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS37", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS37_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS37", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS37_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS37", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS37_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS37", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS37_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS37", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS37_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS37", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS37_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS37", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS37_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS37", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS37_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS37", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS37_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS37", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS37_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS37", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS37_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS37", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS37_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS37", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS37_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS37", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs38CountersGfx11 = {
        {4, "SQWGP_CS38_SQ_PERF_SEL_WAVES", "SQWGP_CS38", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS38_SQ_PERF_SEL_WAVES_32", "SQWGP_CS38", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS38_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS38", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS38_SQ_PERF_SEL_ITEMS", "SQWGP_CS38", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS38_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS38", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS38_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS38", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS38_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS38", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS38_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS38", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS38_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS38", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS38_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS38", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS38_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS38", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS38_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS38", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS38_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS38", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS38_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS38", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS38_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS38", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS38_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS38", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS38_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS38", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS38_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS38", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS38_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS38", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS38_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS38", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS38_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS38", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS38_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS38", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS38_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS38", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS38_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS38", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs39CountersGfx11 = {
        {4, "SQWGP_CS39_SQ_PERF_SEL_WAVES", "SQWGP_CS39", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS39_SQ_PERF_SEL_WAVES_32", "SQWGP_CS39", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS39_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS39", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS39_SQ_PERF_SEL_ITEMS", "SQWGP_CS39", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS39_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS39", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS39_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS39", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS39_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS39", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS39_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS39", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS39_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS39", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS39_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS39", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS39_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS39", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS39_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS39", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS39_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS39", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS39_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS39", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS39_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS39", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS39_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS39", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS39_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS39", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS39_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS39", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS39_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS39", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS39_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS39", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS39_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS39", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS39_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS39", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS39_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS39", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS39_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS39", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs40CountersGfx11 = {
        {4, "SQWGP_CS40_SQ_PERF_SEL_WAVES", "SQWGP_CS40", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS40_SQ_PERF_SEL_WAVES_32", "SQWGP_CS40", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS40_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS40", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS40_SQ_PERF_SEL_ITEMS", "SQWGP_CS40", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS40_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS40", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS40_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS40", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS40_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS40", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS40_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS40", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS40_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS40", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS40_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS40", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS40_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS40", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS40_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS40", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS40_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS40", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS40_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS40", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS40_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS40", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS40_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS40", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS40_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS40", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS40_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS40", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS40_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS40", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS40_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS40", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS40_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS40", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS40_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS40", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS40_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS40", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS40_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS40", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs41CountersGfx11 = {
        {4, "SQWGP_CS41_SQ_PERF_SEL_WAVES", "SQWGP_CS41", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS41_SQ_PERF_SEL_WAVES_32", "SQWGP_CS41", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS41_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS41", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS41_SQ_PERF_SEL_ITEMS", "SQWGP_CS41", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS41_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS41", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS41_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS41", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS41_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS41", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS41_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS41", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS41_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS41", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS41_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS41", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS41_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS41", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS41_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS41", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS41_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS41", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS41_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS41", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS41_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS41", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS41_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS41", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS41_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS41", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS41_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS41", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS41_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS41", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS41_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS41", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS41_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS41", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS41_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS41", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS41_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS41", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS41_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS41", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs42CountersGfx11 = {
        {4, "SQWGP_CS42_SQ_PERF_SEL_WAVES", "SQWGP_CS42", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS42_SQ_PERF_SEL_WAVES_32", "SQWGP_CS42", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS42_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS42", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS42_SQ_PERF_SEL_ITEMS", "SQWGP_CS42", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS42_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS42", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS42_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS42", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS42_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS42", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS42_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS42", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS42_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS42", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS42_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS42", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS42_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS42", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS42_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS42", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS42_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS42", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS42_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS42", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS42_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS42", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS42_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS42", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS42_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS42", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS42_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS42", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS42_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS42", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS42_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS42", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS42_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS42", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS42_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS42", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS42_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS42", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS42_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS42", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs43CountersGfx11 = {
        {4, "SQWGP_CS43_SQ_PERF_SEL_WAVES", "SQWGP_CS43", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS43_SQ_PERF_SEL_WAVES_32", "SQWGP_CS43", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS43_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS43", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS43_SQ_PERF_SEL_ITEMS", "SQWGP_CS43", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS43_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS43", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS43_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS43", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS43_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS43", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS43_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS43", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS43_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS43", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS43_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS43", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS43_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS43", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS43_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS43", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS43_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS43", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS43_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS43", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS43_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS43", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS43_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS43", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS43_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS43", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS43_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS43", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS43_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS43", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS43_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS43", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS43_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS43", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS43_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS43", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS43_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS43", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS43_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS43", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs44CountersGfx11 = {
        {4, "SQWGP_CS44_SQ_PERF_SEL_WAVES", "SQWGP_CS44", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS44_SQ_PERF_SEL_WAVES_32", "SQWGP_CS44", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS44_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS44", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS44_SQ_PERF_SEL_ITEMS", "SQWGP_CS44", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS44_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS44", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS44_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS44", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS44_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS44", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS44_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS44", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS44_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS44", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS44_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS44", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS44_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS44", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS44_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS44", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS44_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS44", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS44_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS44", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS44_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS44", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS44_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS44", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS44_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS44", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS44_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS44", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS44_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS44", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS44_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS44", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS44_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS44", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS44_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS44", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS44_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS44", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS44_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS44", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs45CountersGfx11 = {
        {4, "SQWGP_CS45_SQ_PERF_SEL_WAVES", "SQWGP_CS45", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS45_SQ_PERF_SEL_WAVES_32", "SQWGP_CS45", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS45_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS45", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS45_SQ_PERF_SEL_ITEMS", "SQWGP_CS45", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS45_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS45", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS45_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS45", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS45_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS45", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS45_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS45", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS45_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS45", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS45_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS45", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS45_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS45", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS45_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS45", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS45_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS45", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS45_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS45", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS45_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS45", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS45_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS45", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS45_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS45", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS45_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS45", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS45_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS45", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS45_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS45", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS45_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS45", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS45_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS45", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS45_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS45", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS45_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS45", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs46CountersGfx11 = {
        {4, "SQWGP_CS46_SQ_PERF_SEL_WAVES", "SQWGP_CS46", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS46_SQ_PERF_SEL_WAVES_32", "SQWGP_CS46", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS46_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS46", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS46_SQ_PERF_SEL_ITEMS", "SQWGP_CS46", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS46_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS46", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS46_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS46", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS46_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS46", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS46_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS46", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS46_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS46", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS46_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS46", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS46_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS46", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS46_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS46", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS46_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS46", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS46_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS46", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS46_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS46", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS46_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS46", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS46_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS46", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS46_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS46", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS46_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS46", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS46_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS46", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS46_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS46", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS46_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS46", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS46_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS46", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS46_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS46", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSqwgpCs47CountersGfx11 = {
        {4, "SQWGP_CS47_SQ_PERF_SEL_WAVES", "SQWGP_CS47", "Count number of waves sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "SQWGP_CS47_SQ_PERF_SEL_WAVES_32", "SQWGP_CS47", "Count number of wave32s sent to SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {7, "SQWGP_CS47_SQ_PERF_SEL_LEVEL_WAVES", "SQWGP_CS47", "Track the aggregated number of waves over certain period of time, Set next counter to ACCUM_PREV and divide by SQ_PERF_SEL_WAVES for average wave life cycle. {level, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {8, "SQWGP_CS47_SQ_PERF_SEL_ITEMS", "SQWGP_CS47", "Number of valid work items in SQs. {emulated, global, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SQWGP_CS47_SQ_PERF_SEL_WAIT_INST_LDS", "SQWGP_CS47", "Number of clock cycles spent waiting for LDS (indexed) instruction issue. In units of cycles. {nondeterministic, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "SQWGP_CS47_SQ_PERF_SEL_INSTS_GDS", "SQWGP_CS47", "Number of GDS instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "SQWGP_CS47_SQ_PERF_SEL_INSTS_FLAT", "SQWGP_CS47", "Number of FLAT instructions issued. {emulated, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "SQWGP_CS47_SQ_PERF_SEL_INSTS_LDS", "SQWGP_CS47", "Number of LDS indexed instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {58, "SQWGP_CS47_SQ_PERF_SEL_INSTS_SALU", "SQWGP_CS47", "Number of SALU instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {59, "SQWGP_CS47_SQ_PERF_SEL_INSTS_SMEM", "SQWGP_CS47", "Number of SMEM instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "SQWGP_CS47_SQ_PERF_SEL_INSTS_VALU", "SQWGP_CS47", "Number of VALU instructions issued excluding skipped instructions. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {66, "SQWGP_CS47_SQ_PERF_SEL_INSTS_TEX_LOAD", "SQWGP_CS47", "Number of buffer load, image load, sample, or atomic (with return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {67, "SQWGP_CS47_SQ_PERF_SEL_INSTS_TEX_STORE", "SQWGP_CS47", "Number of buffer store, image store, or atomic (without return) instructions issued. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {80, "SQWGP_CS47_SQ_PERF_SEL_ITEM_CYCLES_VALU", "SQWGP_CS47", "Number of item-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active workitems). {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {103, "SQWGP_CS47_SQ_PERF_SEL_INST_CYCLES_VALU", "SQWGP_CS47", "Number of cycles needed to execute VALU operations (SIMD cycles), where there is overlapping V_OP32_1 and V_OP32_T instruction, count them seperately. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {256, "SQWGP_CS47_SQC_PERF_SEL_LDS_BANK_CONFLICT", "SQWGP_CS47", "Number of cycles LDS is stalled by bank conflicts. {emulated, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {269, "SQWGP_CS47_SQC_PERF_SEL_ICACHE_REQ", "SQWGP_CS47", "Number of requests. {emulated, per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {270, "SQWGP_CS47_SQC_PERF_SEL_ICACHE_HITS", "SQWGP_CS47", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {271, "SQWGP_CS47_SQC_PERF_SEL_ICACHE_MISSES", "SQWGP_CS47", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {272, "SQWGP_CS47_SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE", "SQWGP_CS47", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {293, "SQWGP_CS47_SQC_PERF_SEL_DCACHE_REQ", "SQWGP_CS47", "Number of requests (post-bank-serialization). {per-Bank, C1}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {294, "SQWGP_CS47_SQC_PERF_SEL_DCACHE_HITS", "SQWGP_CS47", "Number of cache hits. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {295, "SQWGP_CS47_SQC_PERF_SEL_DCACHE_MISSES", "SQWGP_CS47", "Number of cache misses, includes uncached requests. {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {296, "SQWGP_CS47_SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE", "SQWGP_CS47", "Number of misses that were duplicates (access to a non-resident, miss pending CL). {per-Bank, nondeterministic, C2}", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSx0CountersGfx11 = {
        {12, "SX0_PERF_SEL_DB0_PIXELS", "SX0", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "SX0_PERF_SEL_DB0_PIXEL_STALL", "SX0", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "SX0_PERF_SEL_DB1_PIXELS", "SX0", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "SX0_PERF_SEL_DB1_PIXEL_STALL", "SX0", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SX0_PERF_SEL_DB2_PIXELS", "SX0", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SX0_PERF_SEL_DB2_PIXEL_STALL", "SX0", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SX0_PERF_SEL_DB3_PIXELS", "SX0", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SX0_PERF_SEL_DB3_PIXEL_STALL", "SX0", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSx1CountersGfx11 = {
        {12, "SX1_PERF_SEL_DB0_PIXELS", "SX1", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "SX1_PERF_SEL_DB0_PIXEL_STALL", "SX1", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "SX1_PERF_SEL_DB1_PIXELS", "SX1", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "SX1_PERF_SEL_DB1_PIXEL_STALL", "SX1", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SX1_PERF_SEL_DB2_PIXELS", "SX1", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SX1_PERF_SEL_DB2_PIXEL_STALL", "SX1", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SX1_PERF_SEL_DB3_PIXELS", "SX1", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SX1_PERF_SEL_DB3_PIXEL_STALL", "SX1", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSx2CountersGfx11 = {
        {12, "SX2_PERF_SEL_DB0_PIXELS", "SX2", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "SX2_PERF_SEL_DB0_PIXEL_STALL", "SX2", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "SX2_PERF_SEL_DB1_PIXELS", "SX2", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "SX2_PERF_SEL_DB1_PIXEL_STALL", "SX2", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SX2_PERF_SEL_DB2_PIXELS", "SX2", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SX2_PERF_SEL_DB2_PIXEL_STALL", "SX2", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SX2_PERF_SEL_DB3_PIXELS", "SX2", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SX2_PERF_SEL_DB3_PIXEL_STALL", "SX2", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSx3CountersGfx11 = {
        {12, "SX3_PERF_SEL_DB0_PIXELS", "SX3", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "SX3_PERF_SEL_DB0_PIXEL_STALL", "SX3", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "SX3_PERF_SEL_DB1_PIXELS", "SX3", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "SX3_PERF_SEL_DB1_PIXEL_STALL", "SX3", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SX3_PERF_SEL_DB2_PIXELS", "SX3", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SX3_PERF_SEL_DB2_PIXEL_STALL", "SX3", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SX3_PERF_SEL_DB3_PIXELS", "SX3", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SX3_PERF_SEL_DB3_PIXEL_STALL", "SX3", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSx4CountersGfx11 = {
        {12, "SX4_PERF_SEL_DB0_PIXELS", "SX4", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "SX4_PERF_SEL_DB0_PIXEL_STALL", "SX4", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "SX4_PERF_SEL_DB1_PIXELS", "SX4", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "SX4_PERF_SEL_DB1_PIXEL_STALL", "SX4", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SX4_PERF_SEL_DB2_PIXELS", "SX4", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SX4_PERF_SEL_DB2_PIXEL_STALL", "SX4", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SX4_PERF_SEL_DB3_PIXELS", "SX4", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SX4_PERF_SEL_DB3_PIXEL_STALL", "SX4", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSx5CountersGfx11 = {
        {12, "SX5_PERF_SEL_DB0_PIXELS", "SX5", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "SX5_PERF_SEL_DB0_PIXEL_STALL", "SX5", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "SX5_PERF_SEL_DB1_PIXELS", "SX5", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "SX5_PERF_SEL_DB1_PIXEL_STALL", "SX5", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SX5_PERF_SEL_DB2_PIXELS", "SX5", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SX5_PERF_SEL_DB2_PIXEL_STALL", "SX5", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SX5_PERF_SEL_DB3_PIXELS", "SX5", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SX5_PERF_SEL_DB3_PIXEL_STALL", "SX5", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSx6CountersGfx11 = {
        {12, "SX6_PERF_SEL_DB0_PIXELS", "SX6", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "SX6_PERF_SEL_DB0_PIXEL_STALL", "SX6", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "SX6_PERF_SEL_DB1_PIXELS", "SX6", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "SX6_PERF_SEL_DB1_PIXEL_STALL", "SX6", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SX6_PERF_SEL_DB2_PIXELS", "SX6", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SX6_PERF_SEL_DB2_PIXEL_STALL", "SX6", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SX6_PERF_SEL_DB3_PIXELS", "SX6", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SX6_PERF_SEL_DB3_PIXEL_STALL", "SX6", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSx7CountersGfx11 = {
        {12, "SX7_PERF_SEL_DB0_PIXELS", "SX7", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "SX7_PERF_SEL_DB0_PIXEL_STALL", "SX7", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "SX7_PERF_SEL_DB1_PIXELS", "SX7", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "SX7_PERF_SEL_DB1_PIXEL_STALL", "SX7", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SX7_PERF_SEL_DB2_PIXELS", "SX7", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SX7_PERF_SEL_DB2_PIXEL_STALL", "SX7", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SX7_PERF_SEL_DB3_PIXELS", "SX7", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SX7_PERF_SEL_DB3_PIXEL_STALL", "SX7", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSx8CountersGfx11 = {
        {12, "SX8_PERF_SEL_DB0_PIXELS", "SX8", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "SX8_PERF_SEL_DB0_PIXEL_STALL", "SX8", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "SX8_PERF_SEL_DB1_PIXELS", "SX8", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "SX8_PERF_SEL_DB1_PIXEL_STALL", "SX8", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SX8_PERF_SEL_DB2_PIXELS", "SX8", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SX8_PERF_SEL_DB2_PIXEL_STALL", "SX8", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SX8_PERF_SEL_DB3_PIXELS", "SX8", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SX8_PERF_SEL_DB3_PIXEL_STALL", "SX8", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSx9CountersGfx11 = {
        {12, "SX9_PERF_SEL_DB0_PIXELS", "SX9", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "SX9_PERF_SEL_DB0_PIXEL_STALL", "SX9", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "SX9_PERF_SEL_DB1_PIXELS", "SX9", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "SX9_PERF_SEL_DB1_PIXEL_STALL", "SX9", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SX9_PERF_SEL_DB2_PIXELS", "SX9", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SX9_PERF_SEL_DB2_PIXEL_STALL", "SX9", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SX9_PERF_SEL_DB3_PIXELS", "SX9", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SX9_PERF_SEL_DB3_PIXEL_STALL", "SX9", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSx10CountersGfx11 = {
        {12, "SX10_PERF_SEL_DB0_PIXELS", "SX10", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "SX10_PERF_SEL_DB0_PIXEL_STALL", "SX10", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "SX10_PERF_SEL_DB1_PIXELS", "SX10", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "SX10_PERF_SEL_DB1_PIXEL_STALL", "SX10", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SX10_PERF_SEL_DB2_PIXELS", "SX10", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SX10_PERF_SEL_DB2_PIXEL_STALL", "SX10", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SX10_PERF_SEL_DB3_PIXELS", "SX10", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SX10_PERF_SEL_DB3_PIXEL_STALL", "SX10", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kSx11CountersGfx11 = {
        {12, "SX11_PERF_SEL_DB0_PIXELS", "SX11", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "SX11_PERF_SEL_DB0_PIXEL_STALL", "SX11", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "SX11_PERF_SEL_DB1_PIXELS", "SX11", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "SX11_PERF_SEL_DB1_PIXEL_STALL", "SX11", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "SX11_PERF_SEL_DB2_PIXELS", "SX11", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {24, "SX11_PERF_SEL_DB2_PIXEL_STALL", "SX11", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {27, "SX11_PERF_SEL_DB3_PIXELS", "SX11", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "SX11_PERF_SEL_DB3_PIXEL_STALL", "SX11", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa0CountersGfx11 = {
        {15, "TA0_PERF_SEL_TA_BUSY", "TA0", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA0_PERF_SEL_MIP_1_CYCLE_QUADS", "TA0", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA0_PERF_SEL_MIP_2_CYCLE_QUADS", "TA0", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA0_PERF_SEL_VOL_1_CYCLE_QUADS", "TA0", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA0_PERF_SEL_VOL_2_CYCLE_QUADS", "TA0", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA0_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA0", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA0_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA0", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA0_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA0", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA0_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA0", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA0_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA0", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA0_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA0", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA0_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA0", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA0_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA0", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA0_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA0", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa1CountersGfx11 = {
        {15, "TA1_PERF_SEL_TA_BUSY", "TA1", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA1_PERF_SEL_MIP_1_CYCLE_QUADS", "TA1", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA1_PERF_SEL_MIP_2_CYCLE_QUADS", "TA1", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA1_PERF_SEL_VOL_1_CYCLE_QUADS", "TA1", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA1_PERF_SEL_VOL_2_CYCLE_QUADS", "TA1", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA1_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA1", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA1_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA1", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA1_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA1", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA1_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA1", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA1_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA1", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA1_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA1", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA1_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA1", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA1_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA1", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA1_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA1", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa2CountersGfx11 = {
        {15, "TA2_PERF_SEL_TA_BUSY", "TA2", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA2_PERF_SEL_MIP_1_CYCLE_QUADS", "TA2", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA2_PERF_SEL_MIP_2_CYCLE_QUADS", "TA2", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA2_PERF_SEL_VOL_1_CYCLE_QUADS", "TA2", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA2_PERF_SEL_VOL_2_CYCLE_QUADS", "TA2", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA2_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA2", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA2_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA2", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA2_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA2", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA2_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA2", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA2_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA2", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA2_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA2", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA2_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA2", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA2_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA2", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA2_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA2", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa3CountersGfx11 = {
        {15, "TA3_PERF_SEL_TA_BUSY", "TA3", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA3_PERF_SEL_MIP_1_CYCLE_QUADS", "TA3", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA3_PERF_SEL_MIP_2_CYCLE_QUADS", "TA3", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA3_PERF_SEL_VOL_1_CYCLE_QUADS", "TA3", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA3_PERF_SEL_VOL_2_CYCLE_QUADS", "TA3", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA3_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA3", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA3_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA3", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA3_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA3", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA3_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA3", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA3_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA3", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA3_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA3", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA3_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA3", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA3_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA3", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA3_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA3", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa4CountersGfx11 = {
        {15, "TA4_PERF_SEL_TA_BUSY", "TA4", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA4_PERF_SEL_MIP_1_CYCLE_QUADS", "TA4", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA4_PERF_SEL_MIP_2_CYCLE_QUADS", "TA4", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA4_PERF_SEL_VOL_1_CYCLE_QUADS", "TA4", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA4_PERF_SEL_VOL_2_CYCLE_QUADS", "TA4", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA4_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA4", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA4_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA4", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA4_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA4", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA4_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA4", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA4_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA4", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA4_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA4", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA4_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA4", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA4_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA4", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA4_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA4", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa5CountersGfx11 = {
        {15, "TA5_PERF_SEL_TA_BUSY", "TA5", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA5_PERF_SEL_MIP_1_CYCLE_QUADS", "TA5", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA5_PERF_SEL_MIP_2_CYCLE_QUADS", "TA5", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA5_PERF_SEL_VOL_1_CYCLE_QUADS", "TA5", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA5_PERF_SEL_VOL_2_CYCLE_QUADS", "TA5", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA5_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA5", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA5_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA5", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA5_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA5", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA5_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA5", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA5_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA5", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA5_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA5", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA5_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA5", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA5_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA5", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA5_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA5", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa6CountersGfx11 = {
        {15, "TA6_PERF_SEL_TA_BUSY", "TA6", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA6_PERF_SEL_MIP_1_CYCLE_QUADS", "TA6", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA6_PERF_SEL_MIP_2_CYCLE_QUADS", "TA6", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA6_PERF_SEL_VOL_1_CYCLE_QUADS", "TA6", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA6_PERF_SEL_VOL_2_CYCLE_QUADS", "TA6", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA6_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA6", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA6_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA6", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA6_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA6", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA6_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA6", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA6_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA6", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA6_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA6", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA6_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA6", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA6_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA6", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA6_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA6", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa7CountersGfx11 = {
        {15, "TA7_PERF_SEL_TA_BUSY", "TA7", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA7_PERF_SEL_MIP_1_CYCLE_QUADS", "TA7", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA7_PERF_SEL_MIP_2_CYCLE_QUADS", "TA7", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA7_PERF_SEL_VOL_1_CYCLE_QUADS", "TA7", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA7_PERF_SEL_VOL_2_CYCLE_QUADS", "TA7", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA7_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA7", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA7_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA7", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA7_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA7", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA7_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA7", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA7_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA7", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA7_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA7", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA7_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA7", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA7_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA7", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA7_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA7", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa8CountersGfx11 = {
        {15, "TA8_PERF_SEL_TA_BUSY", "TA8", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA8_PERF_SEL_MIP_1_CYCLE_QUADS", "TA8", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA8_PERF_SEL_MIP_2_CYCLE_QUADS", "TA8", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA8_PERF_SEL_VOL_1_CYCLE_QUADS", "TA8", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA8_PERF_SEL_VOL_2_CYCLE_QUADS", "TA8", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA8_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA8", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA8_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA8", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA8_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA8", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA8_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA8", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA8_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA8", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA8_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA8", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA8_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA8", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA8_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA8", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA8_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA8", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa9CountersGfx11 = {
        {15, "TA9_PERF_SEL_TA_BUSY", "TA9", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA9_PERF_SEL_MIP_1_CYCLE_QUADS", "TA9", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA9_PERF_SEL_MIP_2_CYCLE_QUADS", "TA9", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA9_PERF_SEL_VOL_1_CYCLE_QUADS", "TA9", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA9_PERF_SEL_VOL_2_CYCLE_QUADS", "TA9", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA9_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA9", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA9_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA9", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA9_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA9", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA9_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA9", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA9_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA9", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA9_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA9", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA9_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA9", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA9_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA9", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA9_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA9", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa10CountersGfx11 = {
        {15, "TA10_PERF_SEL_TA_BUSY", "TA10", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA10_PERF_SEL_MIP_1_CYCLE_QUADS", "TA10", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA10_PERF_SEL_MIP_2_CYCLE_QUADS", "TA10", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA10_PERF_SEL_VOL_1_CYCLE_QUADS", "TA10", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA10_PERF_SEL_VOL_2_CYCLE_QUADS", "TA10", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA10_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA10", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA10_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA10", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA10_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA10", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA10_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA10", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA10_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA10", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA10_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA10", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA10_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA10", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA10_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA10", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA10_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA10", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa11CountersGfx11 = {
        {15, "TA11_PERF_SEL_TA_BUSY", "TA11", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA11_PERF_SEL_MIP_1_CYCLE_QUADS", "TA11", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA11_PERF_SEL_MIP_2_CYCLE_QUADS", "TA11", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA11_PERF_SEL_VOL_1_CYCLE_QUADS", "TA11", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA11_PERF_SEL_VOL_2_CYCLE_QUADS", "TA11", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA11_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA11", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA11_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA11", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA11_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA11", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA11_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA11", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA11_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA11", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA11_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA11", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA11_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA11", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA11_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA11", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA11_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA11", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa12CountersGfx11 = {
        {15, "TA12_PERF_SEL_TA_BUSY", "TA12", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA12_PERF_SEL_MIP_1_CYCLE_QUADS", "TA12", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA12_PERF_SEL_MIP_2_CYCLE_QUADS", "TA12", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA12_PERF_SEL_VOL_1_CYCLE_QUADS", "TA12", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA12_PERF_SEL_VOL_2_CYCLE_QUADS", "TA12", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA12_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA12", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA12_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA12", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA12_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA12", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA12_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA12", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA12_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA12", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA12_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA12", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA12_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA12", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA12_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA12", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA12_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA12", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa13CountersGfx11 = {
        {15, "TA13_PERF_SEL_TA_BUSY", "TA13", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA13_PERF_SEL_MIP_1_CYCLE_QUADS", "TA13", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA13_PERF_SEL_MIP_2_CYCLE_QUADS", "TA13", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA13_PERF_SEL_VOL_1_CYCLE_QUADS", "TA13", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA13_PERF_SEL_VOL_2_CYCLE_QUADS", "TA13", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA13_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA13", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA13_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA13", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA13_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA13", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA13_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA13", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA13_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA13", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA13_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA13", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA13_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA13", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA13_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA13", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA13_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA13", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa14CountersGfx11 = {
        {15, "TA14_PERF_SEL_TA_BUSY", "TA14", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA14_PERF_SEL_MIP_1_CYCLE_QUADS", "TA14", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA14_PERF_SEL_MIP_2_CYCLE_QUADS", "TA14", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA14_PERF_SEL_VOL_1_CYCLE_QUADS", "TA14", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA14_PERF_SEL_VOL_2_CYCLE_QUADS", "TA14", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA14_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA14", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA14_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA14", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA14_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA14", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA14_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA14", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA14_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA14", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA14_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA14", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA14_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA14", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA14_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA14", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA14_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA14", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa15CountersGfx11 = {
        {15, "TA15_PERF_SEL_TA_BUSY", "TA15", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA15_PERF_SEL_MIP_1_CYCLE_QUADS", "TA15", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA15_PERF_SEL_MIP_2_CYCLE_QUADS", "TA15", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA15_PERF_SEL_VOL_1_CYCLE_QUADS", "TA15", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA15_PERF_SEL_VOL_2_CYCLE_QUADS", "TA15", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA15_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA15", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA15_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA15", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA15_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA15", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA15_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA15", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA15_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA15", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA15_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA15", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA15_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA15", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA15_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA15", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA15_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA15", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa16CountersGfx11 = {
        {15, "TA16_PERF_SEL_TA_BUSY", "TA16", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA16_PERF_SEL_MIP_1_CYCLE_QUADS", "TA16", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA16_PERF_SEL_MIP_2_CYCLE_QUADS", "TA16", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA16_PERF_SEL_VOL_1_CYCLE_QUADS", "TA16", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA16_PERF_SEL_VOL_2_CYCLE_QUADS", "TA16", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA16_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA16", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA16_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA16", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA16_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA16", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA16_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA16", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA16_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA16", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA16_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA16", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA16_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA16", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA16_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA16", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA16_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA16", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa17CountersGfx11 = {
        {15, "TA17_PERF_SEL_TA_BUSY", "TA17", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA17_PERF_SEL_MIP_1_CYCLE_QUADS", "TA17", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA17_PERF_SEL_MIP_2_CYCLE_QUADS", "TA17", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA17_PERF_SEL_VOL_1_CYCLE_QUADS", "TA17", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA17_PERF_SEL_VOL_2_CYCLE_QUADS", "TA17", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA17_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA17", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA17_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA17", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA17_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA17", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA17_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA17", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA17_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA17", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA17_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA17", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA17_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA17", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA17_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA17", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA17_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA17", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa18CountersGfx11 = {
        {15, "TA18_PERF_SEL_TA_BUSY", "TA18", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA18_PERF_SEL_MIP_1_CYCLE_QUADS", "TA18", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA18_PERF_SEL_MIP_2_CYCLE_QUADS", "TA18", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA18_PERF_SEL_VOL_1_CYCLE_QUADS", "TA18", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA18_PERF_SEL_VOL_2_CYCLE_QUADS", "TA18", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA18_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA18", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA18_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA18", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA18_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA18", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA18_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA18", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA18_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA18", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA18_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA18", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA18_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA18", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA18_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA18", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA18_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA18", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa19CountersGfx11 = {
        {15, "TA19_PERF_SEL_TA_BUSY", "TA19", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA19_PERF_SEL_MIP_1_CYCLE_QUADS", "TA19", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA19_PERF_SEL_MIP_2_CYCLE_QUADS", "TA19", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA19_PERF_SEL_VOL_1_CYCLE_QUADS", "TA19", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA19_PERF_SEL_VOL_2_CYCLE_QUADS", "TA19", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA19_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA19", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA19_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA19", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA19_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA19", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA19_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA19", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA19_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA19", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA19_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA19", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA19_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA19", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA19_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA19", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA19_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA19", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa20CountersGfx11 = {
        {15, "TA20_PERF_SEL_TA_BUSY", "TA20", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA20_PERF_SEL_MIP_1_CYCLE_QUADS", "TA20", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA20_PERF_SEL_MIP_2_CYCLE_QUADS", "TA20", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA20_PERF_SEL_VOL_1_CYCLE_QUADS", "TA20", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA20_PERF_SEL_VOL_2_CYCLE_QUADS", "TA20", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA20_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA20", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA20_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA20", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA20_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA20", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA20_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA20", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA20_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA20", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA20_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA20", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA20_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA20", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA20_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA20", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA20_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA20", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa21CountersGfx11 = {
        {15, "TA21_PERF_SEL_TA_BUSY", "TA21", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA21_PERF_SEL_MIP_1_CYCLE_QUADS", "TA21", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA21_PERF_SEL_MIP_2_CYCLE_QUADS", "TA21", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA21_PERF_SEL_VOL_1_CYCLE_QUADS", "TA21", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA21_PERF_SEL_VOL_2_CYCLE_QUADS", "TA21", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA21_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA21", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA21_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA21", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA21_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA21", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA21_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA21", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA21_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA21", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA21_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA21", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA21_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA21", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA21_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA21", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA21_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA21", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa22CountersGfx11 = {
        {15, "TA22_PERF_SEL_TA_BUSY", "TA22", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA22_PERF_SEL_MIP_1_CYCLE_QUADS", "TA22", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA22_PERF_SEL_MIP_2_CYCLE_QUADS", "TA22", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA22_PERF_SEL_VOL_1_CYCLE_QUADS", "TA22", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA22_PERF_SEL_VOL_2_CYCLE_QUADS", "TA22", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA22_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA22", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA22_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA22", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA22_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA22", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA22_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA22", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA22_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA22", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA22_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA22", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA22_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA22", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA22_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA22", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA22_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA22", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa23CountersGfx11 = {
        {15, "TA23_PERF_SEL_TA_BUSY", "TA23", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA23_PERF_SEL_MIP_1_CYCLE_QUADS", "TA23", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA23_PERF_SEL_MIP_2_CYCLE_QUADS", "TA23", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA23_PERF_SEL_VOL_1_CYCLE_QUADS", "TA23", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA23_PERF_SEL_VOL_2_CYCLE_QUADS", "TA23", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA23_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA23", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA23_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA23", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA23_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA23", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA23_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA23", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA23_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA23", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA23_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA23", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA23_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA23", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA23_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA23", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA23_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA23", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa24CountersGfx11 = {
        {15, "TA24_PERF_SEL_TA_BUSY", "TA24", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA24_PERF_SEL_MIP_1_CYCLE_QUADS", "TA24", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA24_PERF_SEL_MIP_2_CYCLE_QUADS", "TA24", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA24_PERF_SEL_VOL_1_CYCLE_QUADS", "TA24", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA24_PERF_SEL_VOL_2_CYCLE_QUADS", "TA24", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA24_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA24", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA24_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA24", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA24_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA24", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA24_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA24", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA24_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA24", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA24_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA24", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA24_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA24", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA24_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA24", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA24_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA24", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa25CountersGfx11 = {
        {15, "TA25_PERF_SEL_TA_BUSY", "TA25", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA25_PERF_SEL_MIP_1_CYCLE_QUADS", "TA25", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA25_PERF_SEL_MIP_2_CYCLE_QUADS", "TA25", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA25_PERF_SEL_VOL_1_CYCLE_QUADS", "TA25", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA25_PERF_SEL_VOL_2_CYCLE_QUADS", "TA25", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA25_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA25", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA25_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA25", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA25_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA25", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA25_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA25", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA25_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA25", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA25_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA25", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA25_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA25", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA25_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA25", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA25_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA25", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa26CountersGfx11 = {
        {15, "TA26_PERF_SEL_TA_BUSY", "TA26", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA26_PERF_SEL_MIP_1_CYCLE_QUADS", "TA26", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA26_PERF_SEL_MIP_2_CYCLE_QUADS", "TA26", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA26_PERF_SEL_VOL_1_CYCLE_QUADS", "TA26", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA26_PERF_SEL_VOL_2_CYCLE_QUADS", "TA26", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA26_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA26", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA26_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA26", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA26_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA26", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA26_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA26", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA26_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA26", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA26_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA26", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA26_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA26", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA26_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA26", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA26_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA26", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa27CountersGfx11 = {
        {15, "TA27_PERF_SEL_TA_BUSY", "TA27", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA27_PERF_SEL_MIP_1_CYCLE_QUADS", "TA27", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA27_PERF_SEL_MIP_2_CYCLE_QUADS", "TA27", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA27_PERF_SEL_VOL_1_CYCLE_QUADS", "TA27", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA27_PERF_SEL_VOL_2_CYCLE_QUADS", "TA27", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA27_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA27", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA27_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA27", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA27_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA27", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA27_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA27", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA27_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA27", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA27_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA27", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA27_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA27", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA27_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA27", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA27_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA27", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa28CountersGfx11 = {
        {15, "TA28_PERF_SEL_TA_BUSY", "TA28", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA28_PERF_SEL_MIP_1_CYCLE_QUADS", "TA28", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA28_PERF_SEL_MIP_2_CYCLE_QUADS", "TA28", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA28_PERF_SEL_VOL_1_CYCLE_QUADS", "TA28", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA28_PERF_SEL_VOL_2_CYCLE_QUADS", "TA28", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA28_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA28", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA28_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA28", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA28_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA28", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA28_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA28", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA28_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA28", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA28_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA28", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA28_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA28", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA28_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA28", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA28_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA28", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa29CountersGfx11 = {
        {15, "TA29_PERF_SEL_TA_BUSY", "TA29", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA29_PERF_SEL_MIP_1_CYCLE_QUADS", "TA29", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA29_PERF_SEL_MIP_2_CYCLE_QUADS", "TA29", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA29_PERF_SEL_VOL_1_CYCLE_QUADS", "TA29", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA29_PERF_SEL_VOL_2_CYCLE_QUADS", "TA29", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA29_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA29", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA29_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA29", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA29_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA29", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA29_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA29", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA29_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA29", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA29_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA29", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA29_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA29", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA29_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA29", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA29_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA29", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa30CountersGfx11 = {
        {15, "TA30_PERF_SEL_TA_BUSY", "TA30", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA30_PERF_SEL_MIP_1_CYCLE_QUADS", "TA30", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA30_PERF_SEL_MIP_2_CYCLE_QUADS", "TA30", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA30_PERF_SEL_VOL_1_CYCLE_QUADS", "TA30", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA30_PERF_SEL_VOL_2_CYCLE_QUADS", "TA30", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA30_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA30", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA30_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA30", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA30_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA30", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA30_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA30", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA30_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA30", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA30_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA30", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA30_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA30", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA30_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA30", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA30_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA30", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa31CountersGfx11 = {
        {15, "TA31_PERF_SEL_TA_BUSY", "TA31", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA31_PERF_SEL_MIP_1_CYCLE_QUADS", "TA31", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA31_PERF_SEL_MIP_2_CYCLE_QUADS", "TA31", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA31_PERF_SEL_VOL_1_CYCLE_QUADS", "TA31", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA31_PERF_SEL_VOL_2_CYCLE_QUADS", "TA31", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA31_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA31", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA31_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA31", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA31_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA31", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA31_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA31", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA31_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA31", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA31_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA31", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA31_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA31", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA31_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA31", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA31_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA31", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa32CountersGfx11 = {
        {15, "TA32_PERF_SEL_TA_BUSY", "TA32", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA32_PERF_SEL_MIP_1_CYCLE_QUADS", "TA32", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA32_PERF_SEL_MIP_2_CYCLE_QUADS", "TA32", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA32_PERF_SEL_VOL_1_CYCLE_QUADS", "TA32", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA32_PERF_SEL_VOL_2_CYCLE_QUADS", "TA32", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA32_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA32", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA32_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA32", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA32_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA32", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA32_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA32", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA32_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA32", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA32_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA32", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA32_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA32", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA32_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA32", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA32_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA32", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa33CountersGfx11 = {
        {15, "TA33_PERF_SEL_TA_BUSY", "TA33", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA33_PERF_SEL_MIP_1_CYCLE_QUADS", "TA33", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA33_PERF_SEL_MIP_2_CYCLE_QUADS", "TA33", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA33_PERF_SEL_VOL_1_CYCLE_QUADS", "TA33", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA33_PERF_SEL_VOL_2_CYCLE_QUADS", "TA33", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA33_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA33", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA33_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA33", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA33_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA33", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA33_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA33", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA33_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA33", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA33_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA33", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA33_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA33", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA33_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA33", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA33_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA33", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa34CountersGfx11 = {
        {15, "TA34_PERF_SEL_TA_BUSY", "TA34", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA34_PERF_SEL_MIP_1_CYCLE_QUADS", "TA34", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA34_PERF_SEL_MIP_2_CYCLE_QUADS", "TA34", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA34_PERF_SEL_VOL_1_CYCLE_QUADS", "TA34", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA34_PERF_SEL_VOL_2_CYCLE_QUADS", "TA34", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA34_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA34", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA34_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA34", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA34_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA34", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA34_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA34", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA34_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA34", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA34_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA34", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA34_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA34", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA34_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA34", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA34_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA34", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa35CountersGfx11 = {
        {15, "TA35_PERF_SEL_TA_BUSY", "TA35", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA35_PERF_SEL_MIP_1_CYCLE_QUADS", "TA35", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA35_PERF_SEL_MIP_2_CYCLE_QUADS", "TA35", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA35_PERF_SEL_VOL_1_CYCLE_QUADS", "TA35", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA35_PERF_SEL_VOL_2_CYCLE_QUADS", "TA35", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA35_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA35", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA35_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA35", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA35_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA35", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA35_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA35", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA35_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA35", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA35_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA35", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA35_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA35", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA35_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA35", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA35_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA35", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa36CountersGfx11 = {
        {15, "TA36_PERF_SEL_TA_BUSY", "TA36", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA36_PERF_SEL_MIP_1_CYCLE_QUADS", "TA36", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA36_PERF_SEL_MIP_2_CYCLE_QUADS", "TA36", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA36_PERF_SEL_VOL_1_CYCLE_QUADS", "TA36", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA36_PERF_SEL_VOL_2_CYCLE_QUADS", "TA36", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA36_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA36", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA36_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA36", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA36_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA36", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA36_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA36", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA36_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA36", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA36_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA36", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA36_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA36", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA36_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA36", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA36_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA36", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa37CountersGfx11 = {
        {15, "TA37_PERF_SEL_TA_BUSY", "TA37", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA37_PERF_SEL_MIP_1_CYCLE_QUADS", "TA37", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA37_PERF_SEL_MIP_2_CYCLE_QUADS", "TA37", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA37_PERF_SEL_VOL_1_CYCLE_QUADS", "TA37", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA37_PERF_SEL_VOL_2_CYCLE_QUADS", "TA37", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA37_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA37", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA37_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA37", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA37_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA37", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA37_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA37", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA37_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA37", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA37_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA37", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA37_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA37", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA37_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA37", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA37_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA37", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa38CountersGfx11 = {
        {15, "TA38_PERF_SEL_TA_BUSY", "TA38", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA38_PERF_SEL_MIP_1_CYCLE_QUADS", "TA38", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA38_PERF_SEL_MIP_2_CYCLE_QUADS", "TA38", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA38_PERF_SEL_VOL_1_CYCLE_QUADS", "TA38", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA38_PERF_SEL_VOL_2_CYCLE_QUADS", "TA38", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA38_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA38", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA38_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA38", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA38_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA38", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA38_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA38", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA38_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA38", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA38_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA38", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA38_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA38", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA38_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA38", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA38_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA38", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa39CountersGfx11 = {
        {15, "TA39_PERF_SEL_TA_BUSY", "TA39", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA39_PERF_SEL_MIP_1_CYCLE_QUADS", "TA39", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA39_PERF_SEL_MIP_2_CYCLE_QUADS", "TA39", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA39_PERF_SEL_VOL_1_CYCLE_QUADS", "TA39", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA39_PERF_SEL_VOL_2_CYCLE_QUADS", "TA39", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA39_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA39", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA39_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA39", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA39_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA39", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA39_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA39", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA39_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA39", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA39_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA39", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA39_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA39", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA39_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA39", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA39_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA39", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa40CountersGfx11 = {
        {15, "TA40_PERF_SEL_TA_BUSY", "TA40", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA40_PERF_SEL_MIP_1_CYCLE_QUADS", "TA40", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA40_PERF_SEL_MIP_2_CYCLE_QUADS", "TA40", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA40_PERF_SEL_VOL_1_CYCLE_QUADS", "TA40", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA40_PERF_SEL_VOL_2_CYCLE_QUADS", "TA40", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA40_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA40", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA40_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA40", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA40_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA40", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA40_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA40", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA40_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA40", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA40_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA40", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA40_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA40", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA40_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA40", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA40_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA40", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa41CountersGfx11 = {
        {15, "TA41_PERF_SEL_TA_BUSY", "TA41", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA41_PERF_SEL_MIP_1_CYCLE_QUADS", "TA41", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA41_PERF_SEL_MIP_2_CYCLE_QUADS", "TA41", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA41_PERF_SEL_VOL_1_CYCLE_QUADS", "TA41", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA41_PERF_SEL_VOL_2_CYCLE_QUADS", "TA41", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA41_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA41", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA41_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA41", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA41_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA41", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA41_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA41", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA41_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA41", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA41_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA41", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA41_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA41", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA41_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA41", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA41_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA41", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa42CountersGfx11 = {
        {15, "TA42_PERF_SEL_TA_BUSY", "TA42", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA42_PERF_SEL_MIP_1_CYCLE_QUADS", "TA42", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA42_PERF_SEL_MIP_2_CYCLE_QUADS", "TA42", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA42_PERF_SEL_VOL_1_CYCLE_QUADS", "TA42", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA42_PERF_SEL_VOL_2_CYCLE_QUADS", "TA42", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA42_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA42", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA42_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA42", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA42_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA42", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA42_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA42", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA42_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA42", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA42_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA42", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA42_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA42", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA42_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA42", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA42_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA42", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa43CountersGfx11 = {
        {15, "TA43_PERF_SEL_TA_BUSY", "TA43", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA43_PERF_SEL_MIP_1_CYCLE_QUADS", "TA43", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA43_PERF_SEL_MIP_2_CYCLE_QUADS", "TA43", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA43_PERF_SEL_VOL_1_CYCLE_QUADS", "TA43", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA43_PERF_SEL_VOL_2_CYCLE_QUADS", "TA43", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA43_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA43", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA43_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA43", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA43_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA43", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA43_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA43", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA43_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA43", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA43_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA43", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA43_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA43", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA43_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA43", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA43_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA43", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa44CountersGfx11 = {
        {15, "TA44_PERF_SEL_TA_BUSY", "TA44", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA44_PERF_SEL_MIP_1_CYCLE_QUADS", "TA44", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA44_PERF_SEL_MIP_2_CYCLE_QUADS", "TA44", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA44_PERF_SEL_VOL_1_CYCLE_QUADS", "TA44", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA44_PERF_SEL_VOL_2_CYCLE_QUADS", "TA44", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA44_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA44", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA44_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA44", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA44_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA44", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA44_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA44", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA44_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA44", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA44_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA44", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA44_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA44", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA44_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA44", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA44_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA44", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa45CountersGfx11 = {
        {15, "TA45_PERF_SEL_TA_BUSY", "TA45", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA45_PERF_SEL_MIP_1_CYCLE_QUADS", "TA45", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA45_PERF_SEL_MIP_2_CYCLE_QUADS", "TA45", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA45_PERF_SEL_VOL_1_CYCLE_QUADS", "TA45", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA45_PERF_SEL_VOL_2_CYCLE_QUADS", "TA45", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA45_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA45", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA45_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA45", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA45_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA45", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA45_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA45", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA45_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA45", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA45_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA45", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA45_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA45", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA45_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA45", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA45_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA45", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa46CountersGfx11 = {
        {15, "TA46_PERF_SEL_TA_BUSY", "TA46", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA46_PERF_SEL_MIP_1_CYCLE_QUADS", "TA46", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA46_PERF_SEL_MIP_2_CYCLE_QUADS", "TA46", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA46_PERF_SEL_VOL_1_CYCLE_QUADS", "TA46", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA46_PERF_SEL_VOL_2_CYCLE_QUADS", "TA46", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA46_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA46", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA46_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA46", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA46_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA46", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA46_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA46", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA46_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA46", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA46_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA46", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA46_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA46", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA46_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA46", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA46_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA46", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa47CountersGfx11 = {
        {15, "TA47_PERF_SEL_TA_BUSY", "TA47", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA47_PERF_SEL_MIP_1_CYCLE_QUADS", "TA47", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA47_PERF_SEL_MIP_2_CYCLE_QUADS", "TA47", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA47_PERF_SEL_VOL_1_CYCLE_QUADS", "TA47", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA47_PERF_SEL_VOL_2_CYCLE_QUADS", "TA47", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA47_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA47", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA47_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA47", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA47_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA47", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA47_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA47", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA47_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA47", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA47_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA47", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA47_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA47", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA47_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA47", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA47_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA47", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa48CountersGfx11 = {
        {15, "TA48_PERF_SEL_TA_BUSY", "TA48", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA48_PERF_SEL_MIP_1_CYCLE_QUADS", "TA48", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA48_PERF_SEL_MIP_2_CYCLE_QUADS", "TA48", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA48_PERF_SEL_VOL_1_CYCLE_QUADS", "TA48", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA48_PERF_SEL_VOL_2_CYCLE_QUADS", "TA48", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA48_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA48", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA48_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA48", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA48_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA48", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA48_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA48", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA48_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA48", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA48_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA48", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA48_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA48", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA48_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA48", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA48_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA48", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa49CountersGfx11 = {
        {15, "TA49_PERF_SEL_TA_BUSY", "TA49", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA49_PERF_SEL_MIP_1_CYCLE_QUADS", "TA49", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA49_PERF_SEL_MIP_2_CYCLE_QUADS", "TA49", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA49_PERF_SEL_VOL_1_CYCLE_QUADS", "TA49", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA49_PERF_SEL_VOL_2_CYCLE_QUADS", "TA49", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA49_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA49", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA49_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA49", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA49_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA49", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA49_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA49", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA49_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA49", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA49_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA49", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA49_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA49", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA49_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA49", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA49_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA49", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa50CountersGfx11 = {
        {15, "TA50_PERF_SEL_TA_BUSY", "TA50", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA50_PERF_SEL_MIP_1_CYCLE_QUADS", "TA50", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA50_PERF_SEL_MIP_2_CYCLE_QUADS", "TA50", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA50_PERF_SEL_VOL_1_CYCLE_QUADS", "TA50", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA50_PERF_SEL_VOL_2_CYCLE_QUADS", "TA50", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA50_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA50", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA50_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA50", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA50_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA50", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA50_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA50", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA50_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA50", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA50_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA50", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA50_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA50", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA50_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA50", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA50_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA50", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa51CountersGfx11 = {
        {15, "TA51_PERF_SEL_TA_BUSY", "TA51", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA51_PERF_SEL_MIP_1_CYCLE_QUADS", "TA51", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA51_PERF_SEL_MIP_2_CYCLE_QUADS", "TA51", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA51_PERF_SEL_VOL_1_CYCLE_QUADS", "TA51", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA51_PERF_SEL_VOL_2_CYCLE_QUADS", "TA51", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA51_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA51", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA51_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA51", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA51_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA51", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA51_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA51", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA51_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA51", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA51_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA51", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA51_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA51", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA51_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA51", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA51_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA51", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa52CountersGfx11 = {
        {15, "TA52_PERF_SEL_TA_BUSY", "TA52", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA52_PERF_SEL_MIP_1_CYCLE_QUADS", "TA52", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA52_PERF_SEL_MIP_2_CYCLE_QUADS", "TA52", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA52_PERF_SEL_VOL_1_CYCLE_QUADS", "TA52", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA52_PERF_SEL_VOL_2_CYCLE_QUADS", "TA52", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA52_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA52", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA52_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA52", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA52_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA52", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA52_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA52", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA52_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA52", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA52_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA52", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA52_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA52", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA52_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA52", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA52_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA52", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa53CountersGfx11 = {
        {15, "TA53_PERF_SEL_TA_BUSY", "TA53", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA53_PERF_SEL_MIP_1_CYCLE_QUADS", "TA53", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA53_PERF_SEL_MIP_2_CYCLE_QUADS", "TA53", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA53_PERF_SEL_VOL_1_CYCLE_QUADS", "TA53", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA53_PERF_SEL_VOL_2_CYCLE_QUADS", "TA53", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA53_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA53", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA53_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA53", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA53_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA53", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA53_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA53", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA53_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA53", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA53_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA53", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA53_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA53", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA53_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA53", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA53_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA53", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa54CountersGfx11 = {
        {15, "TA54_PERF_SEL_TA_BUSY", "TA54", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA54_PERF_SEL_MIP_1_CYCLE_QUADS", "TA54", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA54_PERF_SEL_MIP_2_CYCLE_QUADS", "TA54", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA54_PERF_SEL_VOL_1_CYCLE_QUADS", "TA54", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA54_PERF_SEL_VOL_2_CYCLE_QUADS", "TA54", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA54_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA54", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA54_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA54", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA54_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA54", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA54_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA54", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA54_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA54", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA54_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA54", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA54_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA54", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA54_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA54", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA54_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA54", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa55CountersGfx11 = {
        {15, "TA55_PERF_SEL_TA_BUSY", "TA55", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA55_PERF_SEL_MIP_1_CYCLE_QUADS", "TA55", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA55_PERF_SEL_MIP_2_CYCLE_QUADS", "TA55", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA55_PERF_SEL_VOL_1_CYCLE_QUADS", "TA55", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA55_PERF_SEL_VOL_2_CYCLE_QUADS", "TA55", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA55_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA55", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA55_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA55", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA55_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA55", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA55_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA55", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA55_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA55", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA55_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA55", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA55_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA55", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA55_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA55", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA55_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA55", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa56CountersGfx11 = {
        {15, "TA56_PERF_SEL_TA_BUSY", "TA56", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA56_PERF_SEL_MIP_1_CYCLE_QUADS", "TA56", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA56_PERF_SEL_MIP_2_CYCLE_QUADS", "TA56", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA56_PERF_SEL_VOL_1_CYCLE_QUADS", "TA56", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA56_PERF_SEL_VOL_2_CYCLE_QUADS", "TA56", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA56_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA56", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA56_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA56", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA56_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA56", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA56_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA56", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA56_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA56", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA56_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA56", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA56_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA56", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA56_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA56", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA56_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA56", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa57CountersGfx11 = {
        {15, "TA57_PERF_SEL_TA_BUSY", "TA57", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA57_PERF_SEL_MIP_1_CYCLE_QUADS", "TA57", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA57_PERF_SEL_MIP_2_CYCLE_QUADS", "TA57", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA57_PERF_SEL_VOL_1_CYCLE_QUADS", "TA57", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA57_PERF_SEL_VOL_2_CYCLE_QUADS", "TA57", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA57_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA57", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA57_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA57", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA57_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA57", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA57_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA57", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA57_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA57", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA57_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA57", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA57_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA57", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA57_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA57", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA57_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA57", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa58CountersGfx11 = {
        {15, "TA58_PERF_SEL_TA_BUSY", "TA58", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA58_PERF_SEL_MIP_1_CYCLE_QUADS", "TA58", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA58_PERF_SEL_MIP_2_CYCLE_QUADS", "TA58", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA58_PERF_SEL_VOL_1_CYCLE_QUADS", "TA58", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA58_PERF_SEL_VOL_2_CYCLE_QUADS", "TA58", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA58_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA58", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA58_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA58", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA58_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA58", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA58_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA58", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA58_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA58", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA58_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA58", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA58_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA58", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA58_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA58", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA58_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA58", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa59CountersGfx11 = {
        {15, "TA59_PERF_SEL_TA_BUSY", "TA59", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA59_PERF_SEL_MIP_1_CYCLE_QUADS", "TA59", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA59_PERF_SEL_MIP_2_CYCLE_QUADS", "TA59", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA59_PERF_SEL_VOL_1_CYCLE_QUADS", "TA59", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA59_PERF_SEL_VOL_2_CYCLE_QUADS", "TA59", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA59_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA59", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA59_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA59", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA59_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA59", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA59_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA59", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA59_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA59", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA59_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA59", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA59_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA59", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA59_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA59", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA59_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA59", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa60CountersGfx11 = {
        {15, "TA60_PERF_SEL_TA_BUSY", "TA60", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA60_PERF_SEL_MIP_1_CYCLE_QUADS", "TA60", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA60_PERF_SEL_MIP_2_CYCLE_QUADS", "TA60", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA60_PERF_SEL_VOL_1_CYCLE_QUADS", "TA60", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA60_PERF_SEL_VOL_2_CYCLE_QUADS", "TA60", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA60_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA60", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA60_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA60", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA60_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA60", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA60_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA60", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA60_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA60", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA60_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA60", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA60_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA60", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA60_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA60", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA60_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA60", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa61CountersGfx11 = {
        {15, "TA61_PERF_SEL_TA_BUSY", "TA61", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA61_PERF_SEL_MIP_1_CYCLE_QUADS", "TA61", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA61_PERF_SEL_MIP_2_CYCLE_QUADS", "TA61", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA61_PERF_SEL_VOL_1_CYCLE_QUADS", "TA61", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA61_PERF_SEL_VOL_2_CYCLE_QUADS", "TA61", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA61_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA61", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA61_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA61", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA61_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA61", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA61_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA61", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA61_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA61", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA61_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA61", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA61_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA61", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA61_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA61", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA61_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA61", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa62CountersGfx11 = {
        {15, "TA62_PERF_SEL_TA_BUSY", "TA62", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA62_PERF_SEL_MIP_1_CYCLE_QUADS", "TA62", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA62_PERF_SEL_MIP_2_CYCLE_QUADS", "TA62", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA62_PERF_SEL_VOL_1_CYCLE_QUADS", "TA62", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA62_PERF_SEL_VOL_2_CYCLE_QUADS", "TA62", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA62_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA62", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA62_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA62", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA62_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA62", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA62_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA62", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA62_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA62", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA62_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA62", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA62_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA62", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA62_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA62", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA62_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA62", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa63CountersGfx11 = {
        {15, "TA63_PERF_SEL_TA_BUSY", "TA63", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA63_PERF_SEL_MIP_1_CYCLE_QUADS", "TA63", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA63_PERF_SEL_MIP_2_CYCLE_QUADS", "TA63", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA63_PERF_SEL_VOL_1_CYCLE_QUADS", "TA63", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA63_PERF_SEL_VOL_2_CYCLE_QUADS", "TA63", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA63_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA63", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA63_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA63", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA63_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA63", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA63_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA63", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA63_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA63", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA63_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA63", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA63_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA63", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA63_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA63", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA63_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA63", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa64CountersGfx11 = {
        {15, "TA64_PERF_SEL_TA_BUSY", "TA64", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA64_PERF_SEL_MIP_1_CYCLE_QUADS", "TA64", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA64_PERF_SEL_MIP_2_CYCLE_QUADS", "TA64", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA64_PERF_SEL_VOL_1_CYCLE_QUADS", "TA64", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA64_PERF_SEL_VOL_2_CYCLE_QUADS", "TA64", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA64_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA64", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA64_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA64", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA64_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA64", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA64_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA64", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA64_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA64", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA64_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA64", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA64_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA64", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA64_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA64", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA64_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA64", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa65CountersGfx11 = {
        {15, "TA65_PERF_SEL_TA_BUSY", "TA65", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA65_PERF_SEL_MIP_1_CYCLE_QUADS", "TA65", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA65_PERF_SEL_MIP_2_CYCLE_QUADS", "TA65", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA65_PERF_SEL_VOL_1_CYCLE_QUADS", "TA65", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA65_PERF_SEL_VOL_2_CYCLE_QUADS", "TA65", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA65_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA65", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA65_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA65", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA65_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA65", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA65_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA65", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA65_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA65", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA65_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA65", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA65_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA65", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA65_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA65", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA65_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA65", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa66CountersGfx11 = {
        {15, "TA66_PERF_SEL_TA_BUSY", "TA66", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA66_PERF_SEL_MIP_1_CYCLE_QUADS", "TA66", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA66_PERF_SEL_MIP_2_CYCLE_QUADS", "TA66", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA66_PERF_SEL_VOL_1_CYCLE_QUADS", "TA66", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA66_PERF_SEL_VOL_2_CYCLE_QUADS", "TA66", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA66_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA66", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA66_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA66", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA66_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA66", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA66_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA66", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA66_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA66", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA66_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA66", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA66_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA66", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA66_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA66", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA66_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA66", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa67CountersGfx11 = {
        {15, "TA67_PERF_SEL_TA_BUSY", "TA67", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA67_PERF_SEL_MIP_1_CYCLE_QUADS", "TA67", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA67_PERF_SEL_MIP_2_CYCLE_QUADS", "TA67", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA67_PERF_SEL_VOL_1_CYCLE_QUADS", "TA67", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA67_PERF_SEL_VOL_2_CYCLE_QUADS", "TA67", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA67_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA67", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA67_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA67", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA67_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA67", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA67_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA67", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA67_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA67", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA67_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA67", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA67_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA67", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA67_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA67", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA67_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA67", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa68CountersGfx11 = {
        {15, "TA68_PERF_SEL_TA_BUSY", "TA68", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA68_PERF_SEL_MIP_1_CYCLE_QUADS", "TA68", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA68_PERF_SEL_MIP_2_CYCLE_QUADS", "TA68", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA68_PERF_SEL_VOL_1_CYCLE_QUADS", "TA68", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA68_PERF_SEL_VOL_2_CYCLE_QUADS", "TA68", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA68_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA68", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA68_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA68", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA68_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA68", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA68_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA68", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA68_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA68", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA68_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA68", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA68_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA68", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA68_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA68", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA68_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA68", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa69CountersGfx11 = {
        {15, "TA69_PERF_SEL_TA_BUSY", "TA69", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA69_PERF_SEL_MIP_1_CYCLE_QUADS", "TA69", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA69_PERF_SEL_MIP_2_CYCLE_QUADS", "TA69", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA69_PERF_SEL_VOL_1_CYCLE_QUADS", "TA69", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA69_PERF_SEL_VOL_2_CYCLE_QUADS", "TA69", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA69_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA69", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA69_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA69", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA69_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA69", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA69_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA69", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA69_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA69", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA69_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA69", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA69_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA69", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA69_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA69", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA69_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA69", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa70CountersGfx11 = {
        {15, "TA70_PERF_SEL_TA_BUSY", "TA70", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA70_PERF_SEL_MIP_1_CYCLE_QUADS", "TA70", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA70_PERF_SEL_MIP_2_CYCLE_QUADS", "TA70", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA70_PERF_SEL_VOL_1_CYCLE_QUADS", "TA70", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA70_PERF_SEL_VOL_2_CYCLE_QUADS", "TA70", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA70_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA70", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA70_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA70", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA70_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA70", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA70_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA70", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA70_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA70", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA70_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA70", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA70_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA70", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA70_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA70", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA70_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA70", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa71CountersGfx11 = {
        {15, "TA71_PERF_SEL_TA_BUSY", "TA71", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA71_PERF_SEL_MIP_1_CYCLE_QUADS", "TA71", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA71_PERF_SEL_MIP_2_CYCLE_QUADS", "TA71", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA71_PERF_SEL_VOL_1_CYCLE_QUADS", "TA71", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA71_PERF_SEL_VOL_2_CYCLE_QUADS", "TA71", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA71_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA71", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA71_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA71", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA71_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA71", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA71_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA71", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA71_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA71", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA71_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA71", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA71_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA71", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA71_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA71", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA71_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA71", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa72CountersGfx11 = {
        {15, "TA72_PERF_SEL_TA_BUSY", "TA72", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA72_PERF_SEL_MIP_1_CYCLE_QUADS", "TA72", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA72_PERF_SEL_MIP_2_CYCLE_QUADS", "TA72", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA72_PERF_SEL_VOL_1_CYCLE_QUADS", "TA72", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA72_PERF_SEL_VOL_2_CYCLE_QUADS", "TA72", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA72_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA72", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA72_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA72", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA72_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA72", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA72_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA72", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA72_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA72", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA72_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA72", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA72_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA72", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA72_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA72", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA72_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA72", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa73CountersGfx11 = {
        {15, "TA73_PERF_SEL_TA_BUSY", "TA73", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA73_PERF_SEL_MIP_1_CYCLE_QUADS", "TA73", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA73_PERF_SEL_MIP_2_CYCLE_QUADS", "TA73", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA73_PERF_SEL_VOL_1_CYCLE_QUADS", "TA73", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA73_PERF_SEL_VOL_2_CYCLE_QUADS", "TA73", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA73_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA73", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA73_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA73", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA73_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA73", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA73_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA73", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA73_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA73", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA73_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA73", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA73_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA73", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA73_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA73", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA73_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA73", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa74CountersGfx11 = {
        {15, "TA74_PERF_SEL_TA_BUSY", "TA74", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA74_PERF_SEL_MIP_1_CYCLE_QUADS", "TA74", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA74_PERF_SEL_MIP_2_CYCLE_QUADS", "TA74", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA74_PERF_SEL_VOL_1_CYCLE_QUADS", "TA74", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA74_PERF_SEL_VOL_2_CYCLE_QUADS", "TA74", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA74_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA74", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA74_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA74", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA74_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA74", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA74_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA74", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA74_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA74", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA74_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA74", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA74_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA74", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA74_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA74", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA74_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA74", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa75CountersGfx11 = {
        {15, "TA75_PERF_SEL_TA_BUSY", "TA75", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA75_PERF_SEL_MIP_1_CYCLE_QUADS", "TA75", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA75_PERF_SEL_MIP_2_CYCLE_QUADS", "TA75", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA75_PERF_SEL_VOL_1_CYCLE_QUADS", "TA75", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA75_PERF_SEL_VOL_2_CYCLE_QUADS", "TA75", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA75_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA75", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA75_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA75", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA75_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA75", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA75_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA75", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA75_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA75", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA75_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA75", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA75_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA75", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA75_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA75", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA75_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA75", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa76CountersGfx11 = {
        {15, "TA76_PERF_SEL_TA_BUSY", "TA76", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA76_PERF_SEL_MIP_1_CYCLE_QUADS", "TA76", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA76_PERF_SEL_MIP_2_CYCLE_QUADS", "TA76", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA76_PERF_SEL_VOL_1_CYCLE_QUADS", "TA76", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA76_PERF_SEL_VOL_2_CYCLE_QUADS", "TA76", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA76_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA76", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA76_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA76", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA76_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA76", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA76_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA76", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA76_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA76", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA76_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA76", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA76_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA76", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA76_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA76", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA76_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA76", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa77CountersGfx11 = {
        {15, "TA77_PERF_SEL_TA_BUSY", "TA77", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA77_PERF_SEL_MIP_1_CYCLE_QUADS", "TA77", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA77_PERF_SEL_MIP_2_CYCLE_QUADS", "TA77", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA77_PERF_SEL_VOL_1_CYCLE_QUADS", "TA77", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA77_PERF_SEL_VOL_2_CYCLE_QUADS", "TA77", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA77_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA77", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA77_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA77", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA77_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA77", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA77_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA77", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA77_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA77", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA77_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA77", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA77_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA77", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA77_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA77", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA77_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA77", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa78CountersGfx11 = {
        {15, "TA78_PERF_SEL_TA_BUSY", "TA78", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA78_PERF_SEL_MIP_1_CYCLE_QUADS", "TA78", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA78_PERF_SEL_MIP_2_CYCLE_QUADS", "TA78", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA78_PERF_SEL_VOL_1_CYCLE_QUADS", "TA78", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA78_PERF_SEL_VOL_2_CYCLE_QUADS", "TA78", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA78_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA78", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA78_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA78", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA78_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA78", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA78_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA78", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA78_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA78", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA78_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA78", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA78_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA78", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA78_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA78", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA78_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA78", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa79CountersGfx11 = {
        {15, "TA79_PERF_SEL_TA_BUSY", "TA79", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA79_PERF_SEL_MIP_1_CYCLE_QUADS", "TA79", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA79_PERF_SEL_MIP_2_CYCLE_QUADS", "TA79", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA79_PERF_SEL_VOL_1_CYCLE_QUADS", "TA79", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA79_PERF_SEL_VOL_2_CYCLE_QUADS", "TA79", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA79_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA79", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA79_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA79", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA79_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA79", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA79_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA79", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA79_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA79", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA79_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA79", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA79_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA79", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA79_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA79", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA79_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA79", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa80CountersGfx11 = {
        {15, "TA80_PERF_SEL_TA_BUSY", "TA80", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA80_PERF_SEL_MIP_1_CYCLE_QUADS", "TA80", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA80_PERF_SEL_MIP_2_CYCLE_QUADS", "TA80", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA80_PERF_SEL_VOL_1_CYCLE_QUADS", "TA80", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA80_PERF_SEL_VOL_2_CYCLE_QUADS", "TA80", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA80_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA80", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA80_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA80", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA80_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA80", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA80_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA80", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA80_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA80", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA80_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA80", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA80_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA80", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA80_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA80", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA80_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA80", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa81CountersGfx11 = {
        {15, "TA81_PERF_SEL_TA_BUSY", "TA81", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA81_PERF_SEL_MIP_1_CYCLE_QUADS", "TA81", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA81_PERF_SEL_MIP_2_CYCLE_QUADS", "TA81", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA81_PERF_SEL_VOL_1_CYCLE_QUADS", "TA81", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA81_PERF_SEL_VOL_2_CYCLE_QUADS", "TA81", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA81_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA81", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA81_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA81", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA81_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA81", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA81_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA81", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA81_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA81", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA81_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA81", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA81_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA81", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA81_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA81", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA81_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA81", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa82CountersGfx11 = {
        {15, "TA82_PERF_SEL_TA_BUSY", "TA82", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA82_PERF_SEL_MIP_1_CYCLE_QUADS", "TA82", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA82_PERF_SEL_MIP_2_CYCLE_QUADS", "TA82", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA82_PERF_SEL_VOL_1_CYCLE_QUADS", "TA82", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA82_PERF_SEL_VOL_2_CYCLE_QUADS", "TA82", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA82_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA82", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA82_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA82", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA82_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA82", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA82_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA82", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA82_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA82", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA82_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA82", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA82_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA82", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA82_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA82", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA82_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA82", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa83CountersGfx11 = {
        {15, "TA83_PERF_SEL_TA_BUSY", "TA83", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA83_PERF_SEL_MIP_1_CYCLE_QUADS", "TA83", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA83_PERF_SEL_MIP_2_CYCLE_QUADS", "TA83", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA83_PERF_SEL_VOL_1_CYCLE_QUADS", "TA83", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA83_PERF_SEL_VOL_2_CYCLE_QUADS", "TA83", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA83_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA83", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA83_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA83", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA83_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA83", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA83_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA83", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA83_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA83", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA83_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA83", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA83_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA83", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA83_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA83", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA83_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA83", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa84CountersGfx11 = {
        {15, "TA84_PERF_SEL_TA_BUSY", "TA84", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA84_PERF_SEL_MIP_1_CYCLE_QUADS", "TA84", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA84_PERF_SEL_MIP_2_CYCLE_QUADS", "TA84", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA84_PERF_SEL_VOL_1_CYCLE_QUADS", "TA84", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA84_PERF_SEL_VOL_2_CYCLE_QUADS", "TA84", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA84_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA84", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA84_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA84", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA84_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA84", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA84_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA84", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA84_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA84", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA84_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA84", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA84_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA84", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA84_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA84", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA84_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA84", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa85CountersGfx11 = {
        {15, "TA85_PERF_SEL_TA_BUSY", "TA85", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA85_PERF_SEL_MIP_1_CYCLE_QUADS", "TA85", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA85_PERF_SEL_MIP_2_CYCLE_QUADS", "TA85", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA85_PERF_SEL_VOL_1_CYCLE_QUADS", "TA85", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA85_PERF_SEL_VOL_2_CYCLE_QUADS", "TA85", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA85_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA85", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA85_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA85", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA85_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA85", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA85_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA85", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA85_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA85", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA85_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA85", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA85_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA85", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA85_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA85", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA85_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA85", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa86CountersGfx11 = {
        {15, "TA86_PERF_SEL_TA_BUSY", "TA86", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA86_PERF_SEL_MIP_1_CYCLE_QUADS", "TA86", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA86_PERF_SEL_MIP_2_CYCLE_QUADS", "TA86", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA86_PERF_SEL_VOL_1_CYCLE_QUADS", "TA86", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA86_PERF_SEL_VOL_2_CYCLE_QUADS", "TA86", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA86_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA86", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA86_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA86", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA86_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA86", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA86_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA86", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA86_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA86", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA86_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA86", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA86_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA86", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA86_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA86", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA86_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA86", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa87CountersGfx11 = {
        {15, "TA87_PERF_SEL_TA_BUSY", "TA87", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA87_PERF_SEL_MIP_1_CYCLE_QUADS", "TA87", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA87_PERF_SEL_MIP_2_CYCLE_QUADS", "TA87", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA87_PERF_SEL_VOL_1_CYCLE_QUADS", "TA87", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA87_PERF_SEL_VOL_2_CYCLE_QUADS", "TA87", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA87_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA87", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA87_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA87", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA87_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA87", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA87_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA87", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA87_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA87", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA87_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA87", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA87_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA87", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA87_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA87", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA87_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA87", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa88CountersGfx11 = {
        {15, "TA88_PERF_SEL_TA_BUSY", "TA88", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA88_PERF_SEL_MIP_1_CYCLE_QUADS", "TA88", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA88_PERF_SEL_MIP_2_CYCLE_QUADS", "TA88", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA88_PERF_SEL_VOL_1_CYCLE_QUADS", "TA88", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA88_PERF_SEL_VOL_2_CYCLE_QUADS", "TA88", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA88_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA88", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA88_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA88", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA88_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA88", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA88_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA88", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA88_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA88", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA88_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA88", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA88_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA88", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA88_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA88", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA88_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA88", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa89CountersGfx11 = {
        {15, "TA89_PERF_SEL_TA_BUSY", "TA89", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA89_PERF_SEL_MIP_1_CYCLE_QUADS", "TA89", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA89_PERF_SEL_MIP_2_CYCLE_QUADS", "TA89", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA89_PERF_SEL_VOL_1_CYCLE_QUADS", "TA89", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA89_PERF_SEL_VOL_2_CYCLE_QUADS", "TA89", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA89_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA89", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA89_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA89", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA89_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA89", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA89_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA89", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA89_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA89", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA89_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA89", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA89_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA89", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA89_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA89", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA89_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA89", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa90CountersGfx11 = {
        {15, "TA90_PERF_SEL_TA_BUSY", "TA90", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA90_PERF_SEL_MIP_1_CYCLE_QUADS", "TA90", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA90_PERF_SEL_MIP_2_CYCLE_QUADS", "TA90", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA90_PERF_SEL_VOL_1_CYCLE_QUADS", "TA90", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA90_PERF_SEL_VOL_2_CYCLE_QUADS", "TA90", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA90_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA90", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA90_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA90", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA90_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA90", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA90_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA90", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA90_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA90", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA90_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA90", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA90_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA90", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA90_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA90", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA90_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA90", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa91CountersGfx11 = {
        {15, "TA91_PERF_SEL_TA_BUSY", "TA91", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA91_PERF_SEL_MIP_1_CYCLE_QUADS", "TA91", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA91_PERF_SEL_MIP_2_CYCLE_QUADS", "TA91", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA91_PERF_SEL_VOL_1_CYCLE_QUADS", "TA91", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA91_PERF_SEL_VOL_2_CYCLE_QUADS", "TA91", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA91_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA91", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA91_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA91", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA91_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA91", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA91_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA91", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA91_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA91", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA91_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA91", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA91_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA91", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA91_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA91", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA91_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA91", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa92CountersGfx11 = {
        {15, "TA92_PERF_SEL_TA_BUSY", "TA92", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA92_PERF_SEL_MIP_1_CYCLE_QUADS", "TA92", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA92_PERF_SEL_MIP_2_CYCLE_QUADS", "TA92", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA92_PERF_SEL_VOL_1_CYCLE_QUADS", "TA92", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA92_PERF_SEL_VOL_2_CYCLE_QUADS", "TA92", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA92_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA92", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA92_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA92", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA92_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA92", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA92_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA92", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA92_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA92", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA92_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA92", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA92_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA92", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA92_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA92", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA92_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA92", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa93CountersGfx11 = {
        {15, "TA93_PERF_SEL_TA_BUSY", "TA93", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA93_PERF_SEL_MIP_1_CYCLE_QUADS", "TA93", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA93_PERF_SEL_MIP_2_CYCLE_QUADS", "TA93", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA93_PERF_SEL_VOL_1_CYCLE_QUADS", "TA93", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA93_PERF_SEL_VOL_2_CYCLE_QUADS", "TA93", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA93_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA93", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA93_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA93", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA93_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA93", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA93_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA93", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA93_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA93", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA93_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA93", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA93_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA93", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA93_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA93", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA93_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA93", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa94CountersGfx11 = {
        {15, "TA94_PERF_SEL_TA_BUSY", "TA94", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA94_PERF_SEL_MIP_1_CYCLE_QUADS", "TA94", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA94_PERF_SEL_MIP_2_CYCLE_QUADS", "TA94", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA94_PERF_SEL_VOL_1_CYCLE_QUADS", "TA94", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA94_PERF_SEL_VOL_2_CYCLE_QUADS", "TA94", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA94_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA94", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA94_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA94", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA94_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA94", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA94_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA94", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA94_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA94", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA94_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA94", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA94_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA94", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA94_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA94", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA94_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA94", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTa95CountersGfx11 = {
        {15, "TA95_PERF_SEL_TA_BUSY", "TA95", "Cycles TA block is busy. Perf_windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {68, "TA95_PERF_SEL_MIP_1_CYCLE_QUADS", "TA95", "Quads requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {69, "TA95_PERF_SEL_MIP_2_CYCLE_QUADS", "TA95", "Quads requiring sampler state machine to take 2 cycles due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {70, "TA95_PERF_SEL_VOL_1_CYCLE_QUADS", "TA95", "Quads requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {71, "TA95_PERF_SEL_VOL_2_CYCLE_QUADS", "TA95", "Quads requiring sampler state machine to take 2 cycles due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {89, "TA95_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA95", "Quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {90, "TA95_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA95", "Quads requiring 2 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {91, "TA95_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA95", "Quads requiring 4 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {92, "TA95_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA95", "Quads requiring 6 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {93, "TA95_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA95", "Quads requiring 8 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {94, "TA95_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA95", "Quads requiring 10 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {95, "TA95_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA95", "Quads requiring 12 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {96, "TA95_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA95", "Quads requiring 14 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {97, "TA95_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA95", "Quads requiring 16 aniso samples.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd0CountersGfx11 = {
        {82, "TD0_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD0", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD0_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD0", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD0_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD0", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD0_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD0", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd1CountersGfx11 = {
        {82, "TD1_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD1", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD1_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD1", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD1_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD1", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD1_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD1", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd2CountersGfx11 = {
        {82, "TD2_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD2", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD2_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD2", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD2_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD2", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD2_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD2", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd3CountersGfx11 = {
        {82, "TD3_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD3", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD3_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD3", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD3_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD3", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD3_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD3", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd4CountersGfx11 = {
        {82, "TD4_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD4", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD4_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD4", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD4_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD4", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD4_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD4", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd5CountersGfx11 = {
        {82, "TD5_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD5", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD5_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD5", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD5_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD5", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD5_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD5", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd6CountersGfx11 = {
        {82, "TD6_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD6", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD6_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD6", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD6_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD6", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD6_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD6", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd7CountersGfx11 = {
        {82, "TD7_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD7", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD7_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD7", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD7_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD7", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD7_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD7", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd8CountersGfx11 = {
        {82, "TD8_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD8", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD8_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD8", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD8_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD8", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD8_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD8", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd9CountersGfx11 = {
        {82, "TD9_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD9", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD9_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD9", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD9_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD9", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD9_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD9", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd10CountersGfx11 = {
        {82, "TD10_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD10", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD10_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD10", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD10_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD10", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD10_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD10", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd11CountersGfx11 = {
        {82, "TD11_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD11", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD11_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD11", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD11_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD11", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD11_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD11", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd12CountersGfx11 = {
        {82, "TD12_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD12", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD12_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD12", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD12_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD12", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD12_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD12", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd13CountersGfx11 = {
        {82, "TD13_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD13", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD13_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD13", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD13_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD13", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD13_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD13", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd14CountersGfx11 = {
        {82, "TD14_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD14", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD14_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD14", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD14_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD14", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD14_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD14", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd15CountersGfx11 = {
        {82, "TD15_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD15", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD15_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD15", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD15_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD15", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD15_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD15", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd16CountersGfx11 = {
        {82, "TD16_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD16", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD16_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD16", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD16_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD16", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD16_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD16", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd17CountersGfx11 = {
        {82, "TD17_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD17", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD17_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD17", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD17_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD17", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD17_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD17", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd18CountersGfx11 = {
        {82, "TD18_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD18", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD18_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD18", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD18_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD18", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD18_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD18", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd19CountersGfx11 = {
        {82, "TD19_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD19", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD19_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD19", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD19_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD19", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD19_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD19", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd20CountersGfx11 = {
        {82, "TD20_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD20", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD20_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD20", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD20_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD20", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD20_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD20", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd21CountersGfx11 = {
        {82, "TD21_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD21", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD21_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD21", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD21_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD21", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD21_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD21", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd22CountersGfx11 = {
        {82, "TD22_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD22", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD22_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD22", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD22_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD22", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD22_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD22", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd23CountersGfx11 = {
        {82, "TD23_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD23", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD23_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD23", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD23_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD23", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD23_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD23", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd24CountersGfx11 = {
        {82, "TD24_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD24", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD24_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD24", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD24_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD24", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD24_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD24", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd25CountersGfx11 = {
        {82, "TD25_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD25", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD25_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD25", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD25_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD25", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD25_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD25", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd26CountersGfx11 = {
        {82, "TD26_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD26", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD26_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD26", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD26_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD26", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD26_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD26", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd27CountersGfx11 = {
        {82, "TD27_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD27", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD27_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD27", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD27_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD27", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD27_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD27", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd28CountersGfx11 = {
        {82, "TD28_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD28", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD28_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD28", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD28_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD28", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD28_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD28", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd29CountersGfx11 = {
        {82, "TD29_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD29", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD29_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD29", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD29_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD29", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD29_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD29", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd30CountersGfx11 = {
        {82, "TD30_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD30", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD30_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD30", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD30_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD30", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD30_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD30", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd31CountersGfx11 = {
        {82, "TD31_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD31", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD31_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD31", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD31_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD31", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD31_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD31", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd32CountersGfx11 = {
        {82, "TD32_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD32", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD32_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD32", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD32_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD32", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD32_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD32", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd33CountersGfx11 = {
        {82, "TD33_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD33", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD33_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD33", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD33_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD33", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD33_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD33", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd34CountersGfx11 = {
        {82, "TD34_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD34", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD34_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD34", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD34_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD34", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD34_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD34", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd35CountersGfx11 = {
        {82, "TD35_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD35", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD35_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD35", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD35_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD35", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD35_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD35", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd36CountersGfx11 = {
        {82, "TD36_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD36", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD36_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD36", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD36_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD36", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD36_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD36", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd37CountersGfx11 = {
        {82, "TD37_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD37", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD37_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD37", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD37_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD37", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD37_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD37", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd38CountersGfx11 = {
        {82, "TD38_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD38", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD38_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD38", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD38_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD38", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD38_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD38", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd39CountersGfx11 = {
        {82, "TD39_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD39", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD39_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD39", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD39_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD39", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD39_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD39", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd40CountersGfx11 = {
        {82, "TD40_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD40", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD40_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD40", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD40_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD40", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD40_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD40", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd41CountersGfx11 = {
        {82, "TD41_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD41", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD41_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD41", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD41_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD41", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD41_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD41", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd42CountersGfx11 = {
        {82, "TD42_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD42", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD42_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD42", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD42_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD42", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD42_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD42", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd43CountersGfx11 = {
        {82, "TD43_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD43", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD43_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD43", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD43_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD43", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD43_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD43", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd44CountersGfx11 = {
        {82, "TD44_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD44", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD44_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD44", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD44_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD44", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD44_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD44", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd45CountersGfx11 = {
        {82, "TD45_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD45", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD45_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD45", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD45_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD45", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD45_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD45", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd46CountersGfx11 = {
        {82, "TD46_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD46", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD46_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD46", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD46_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD46", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD46_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD46", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd47CountersGfx11 = {
        {82, "TD47_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD47", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD47_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD47", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD47_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD47", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD47_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD47", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd48CountersGfx11 = {
        {82, "TD48_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD48", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD48_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD48", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD48_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD48", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD48_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD48", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd49CountersGfx11 = {
        {82, "TD49_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD49", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD49_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD49", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD49_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD49", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD49_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD49", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd50CountersGfx11 = {
        {82, "TD50_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD50", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD50_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD50", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD50_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD50", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD50_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD50", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd51CountersGfx11 = {
        {82, "TD51_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD51", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD51_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD51", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD51_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD51", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD51_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD51", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd52CountersGfx11 = {
        {82, "TD52_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD52", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD52_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD52", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD52_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD52", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD52_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD52", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd53CountersGfx11 = {
        {82, "TD53_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD53", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD53_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD53", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD53_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD53", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD53_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD53", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd54CountersGfx11 = {
        {82, "TD54_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD54", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD54_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD54", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD54_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD54", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD54_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD54", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd55CountersGfx11 = {
        {82, "TD55_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD55", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD55_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD55", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD55_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD55", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD55_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD55", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd56CountersGfx11 = {
        {82, "TD56_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD56", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD56_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD56", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD56_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD56", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD56_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD56", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd57CountersGfx11 = {
        {82, "TD57_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD57", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD57_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD57", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD57_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD57", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD57_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD57", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd58CountersGfx11 = {
        {82, "TD58_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD58", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD58_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD58", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD58_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD58", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD58_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD58", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd59CountersGfx11 = {
        {82, "TD59_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD59", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD59_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD59", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD59_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD59", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD59_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD59", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd60CountersGfx11 = {
        {82, "TD60_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD60", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD60_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD60", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD60_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD60", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD60_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD60", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd61CountersGfx11 = {
        {82, "TD61_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD61", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD61_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD61", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD61_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD61", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD61_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD61", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd62CountersGfx11 = {
        {82, "TD62_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD62", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD62_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD62", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD62_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD62", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD62_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD62", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd63CountersGfx11 = {
        {82, "TD63_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD63", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD63_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD63", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD63_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD63", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD63_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD63", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd64CountersGfx11 = {
        {82, "TD64_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD64", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD64_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD64", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD64_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD64", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD64_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD64", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd65CountersGfx11 = {
        {82, "TD65_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD65", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD65_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD65", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD65_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD65", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD65_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD65", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd66CountersGfx11 = {
        {82, "TD66_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD66", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD66_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD66", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD66_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD66", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD66_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD66", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd67CountersGfx11 = {
        {82, "TD67_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD67", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD67_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD67", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD67_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD67", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD67_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD67", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd68CountersGfx11 = {
        {82, "TD68_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD68", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD68_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD68", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD68_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD68", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD68_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD68", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd69CountersGfx11 = {
        {82, "TD69_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD69", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD69_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD69", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD69_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD69", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD69_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD69", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd70CountersGfx11 = {
        {82, "TD70_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD70", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD70_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD70", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD70_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD70", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD70_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD70", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd71CountersGfx11 = {
        {82, "TD71_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD71", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD71_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD71", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD71_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD71", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD71_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD71", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd72CountersGfx11 = {
        {82, "TD72_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD72", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD72_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD72", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD72_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD72", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD72_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD72", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd73CountersGfx11 = {
        {82, "TD73_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD73", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD73_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD73", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD73_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD73", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD73_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD73", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd74CountersGfx11 = {
        {82, "TD74_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD74", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD74_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD74", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD74_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD74", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD74_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD74", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd75CountersGfx11 = {
        {82, "TD75_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD75", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD75_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD75", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD75_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD75", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD75_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD75", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd76CountersGfx11 = {
        {82, "TD76_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD76", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD76_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD76", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD76_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD76", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD76_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD76", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd77CountersGfx11 = {
        {82, "TD77_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD77", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD77_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD77", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD77_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD77", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD77_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD77", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd78CountersGfx11 = {
        {82, "TD78_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD78", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD78_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD78", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD78_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD78", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD78_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD78", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd79CountersGfx11 = {
        {82, "TD79_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD79", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD79_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD79", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD79_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD79", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD79_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD79", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd80CountersGfx11 = {
        {82, "TD80_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD80", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD80_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD80", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD80_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD80", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD80_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD80", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd81CountersGfx11 = {
        {82, "TD81_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD81", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD81_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD81", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD81_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD81", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD81_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD81", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd82CountersGfx11 = {
        {82, "TD82_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD82", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD82_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD82", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD82_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD82", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD82_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD82", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd83CountersGfx11 = {
        {82, "TD83_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD83", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD83_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD83", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD83_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD83", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD83_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD83", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd84CountersGfx11 = {
        {82, "TD84_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD84", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD84_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD84", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD84_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD84", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD84_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD84", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd85CountersGfx11 = {
        {82, "TD85_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD85", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD85_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD85", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD85_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD85", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD85_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD85", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd86CountersGfx11 = {
        {82, "TD86_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD86", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD86_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD86", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD86_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD86", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD86_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD86", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd87CountersGfx11 = {
        {82, "TD87_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD87", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD87_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD87", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD87_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD87", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD87_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD87", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd88CountersGfx11 = {
        {82, "TD88_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD88", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD88_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD88", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD88_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD88", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD88_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD88", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd89CountersGfx11 = {
        {82, "TD89_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD89", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD89_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD89", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD89_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD89", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD89_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD89", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd90CountersGfx11 = {
        {82, "TD90_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD90", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD90_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD90", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD90_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD90", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD90_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD90", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd91CountersGfx11 = {
        {82, "TD91_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD91", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD91_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD91", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD91_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD91", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD91_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD91", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd92CountersGfx11 = {
        {82, "TD92_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD92", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD92_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD92", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD92_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD92", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD92_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD92", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd93CountersGfx11 = {
        {82, "TD93_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD93", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD93_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD93", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD93_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD93", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD93_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD93", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd94CountersGfx11 = {
        {82, "TD94_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD94", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD94_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD94", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD94_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD94", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD94_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD94", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTd95CountersGfx11 = {
        {82, "TD95_PERF_SEL_TOTAL_NUM_RAY_TRACING_BVH4_INSTR", "TD95", "The total number of ray tracing bvh4 instructions seen by this TD. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "TD95_PERF_SEL_RAY_TRACING_BVH4_FP16_BOX_NODE", "TD95", "Count the number of FP16 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "TD95_PERF_SEL_RAY_TRACING_BVH4_FP32_BOX_NODE", "TD95", "Count the number of FP32 box nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "TD95_PERF_SEL_RAY_TRACING_BVH4_TRI_NODE", "TD95", "Count the number of triangle nodes that could write out to the shader (exec_mask = 1) from all bvh4 instructions.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp0CountersGfx11 = {
        {9, "TCP0_PERF_SEL_REQ", "TCP0", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP0_PERF_SEL_REQ_MISS", "TCP0", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP0_PERF_SEL_TCP_TA_REQ_STALL", "TCP0", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP0_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP0", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP0_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP0", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP0_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP0", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp1CountersGfx11 = {
        {9, "TCP1_PERF_SEL_REQ", "TCP1", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP1_PERF_SEL_REQ_MISS", "TCP1", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP1_PERF_SEL_TCP_TA_REQ_STALL", "TCP1", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP1_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP1", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP1_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP1", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP1_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP1", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp2CountersGfx11 = {
        {9, "TCP2_PERF_SEL_REQ", "TCP2", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP2_PERF_SEL_REQ_MISS", "TCP2", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP2_PERF_SEL_TCP_TA_REQ_STALL", "TCP2", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP2_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP2", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP2_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP2", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP2_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP2", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp3CountersGfx11 = {
        {9, "TCP3_PERF_SEL_REQ", "TCP3", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP3_PERF_SEL_REQ_MISS", "TCP3", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP3_PERF_SEL_TCP_TA_REQ_STALL", "TCP3", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP3_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP3", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP3_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP3", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP3_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP3", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp4CountersGfx11 = {
        {9, "TCP4_PERF_SEL_REQ", "TCP4", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP4_PERF_SEL_REQ_MISS", "TCP4", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP4_PERF_SEL_TCP_TA_REQ_STALL", "TCP4", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP4_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP4", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP4_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP4", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP4_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP4", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp5CountersGfx11 = {
        {9, "TCP5_PERF_SEL_REQ", "TCP5", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP5_PERF_SEL_REQ_MISS", "TCP5", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP5_PERF_SEL_TCP_TA_REQ_STALL", "TCP5", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP5_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP5", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP5_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP5", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP5_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP5", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp6CountersGfx11 = {
        {9, "TCP6_PERF_SEL_REQ", "TCP6", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP6_PERF_SEL_REQ_MISS", "TCP6", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP6_PERF_SEL_TCP_TA_REQ_STALL", "TCP6", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP6_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP6", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP6_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP6", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP6_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP6", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp7CountersGfx11 = {
        {9, "TCP7_PERF_SEL_REQ", "TCP7", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP7_PERF_SEL_REQ_MISS", "TCP7", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP7_PERF_SEL_TCP_TA_REQ_STALL", "TCP7", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP7_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP7", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP7_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP7", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP7_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP7", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp8CountersGfx11 = {
        {9, "TCP8_PERF_SEL_REQ", "TCP8", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP8_PERF_SEL_REQ_MISS", "TCP8", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP8_PERF_SEL_TCP_TA_REQ_STALL", "TCP8", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP8_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP8", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP8_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP8", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP8_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP8", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp9CountersGfx11 = {
        {9, "TCP9_PERF_SEL_REQ", "TCP9", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP9_PERF_SEL_REQ_MISS", "TCP9", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP9_PERF_SEL_TCP_TA_REQ_STALL", "TCP9", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP9_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP9", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP9_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP9", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP9_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP9", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp10CountersGfx11 = {
        {9, "TCP10_PERF_SEL_REQ", "TCP10", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP10_PERF_SEL_REQ_MISS", "TCP10", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP10_PERF_SEL_TCP_TA_REQ_STALL", "TCP10", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP10_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP10", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP10_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP10", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP10_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP10", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp11CountersGfx11 = {
        {9, "TCP11_PERF_SEL_REQ", "TCP11", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP11_PERF_SEL_REQ_MISS", "TCP11", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP11_PERF_SEL_TCP_TA_REQ_STALL", "TCP11", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP11_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP11", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP11_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP11", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP11_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP11", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp12CountersGfx11 = {
        {9, "TCP12_PERF_SEL_REQ", "TCP12", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP12_PERF_SEL_REQ_MISS", "TCP12", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP12_PERF_SEL_TCP_TA_REQ_STALL", "TCP12", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP12_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP12", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP12_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP12", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP12_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP12", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp13CountersGfx11 = {
        {9, "TCP13_PERF_SEL_REQ", "TCP13", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP13_PERF_SEL_REQ_MISS", "TCP13", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP13_PERF_SEL_TCP_TA_REQ_STALL", "TCP13", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP13_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP13", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP13_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP13", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP13_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP13", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp14CountersGfx11 = {
        {9, "TCP14_PERF_SEL_REQ", "TCP14", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP14_PERF_SEL_REQ_MISS", "TCP14", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP14_PERF_SEL_TCP_TA_REQ_STALL", "TCP14", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP14_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP14", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP14_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP14", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP14_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP14", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp15CountersGfx11 = {
        {9, "TCP15_PERF_SEL_REQ", "TCP15", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP15_PERF_SEL_REQ_MISS", "TCP15", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP15_PERF_SEL_TCP_TA_REQ_STALL", "TCP15", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP15_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP15", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP15_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP15", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP15_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP15", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp16CountersGfx11 = {
        {9, "TCP16_PERF_SEL_REQ", "TCP16", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP16_PERF_SEL_REQ_MISS", "TCP16", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP16_PERF_SEL_TCP_TA_REQ_STALL", "TCP16", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP16_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP16", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP16_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP16", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP16_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP16", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp17CountersGfx11 = {
        {9, "TCP17_PERF_SEL_REQ", "TCP17", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP17_PERF_SEL_REQ_MISS", "TCP17", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP17_PERF_SEL_TCP_TA_REQ_STALL", "TCP17", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP17_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP17", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP17_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP17", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP17_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP17", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp18CountersGfx11 = {
        {9, "TCP18_PERF_SEL_REQ", "TCP18", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP18_PERF_SEL_REQ_MISS", "TCP18", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP18_PERF_SEL_TCP_TA_REQ_STALL", "TCP18", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP18_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP18", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP18_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP18", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP18_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP18", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp19CountersGfx11 = {
        {9, "TCP19_PERF_SEL_REQ", "TCP19", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP19_PERF_SEL_REQ_MISS", "TCP19", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP19_PERF_SEL_TCP_TA_REQ_STALL", "TCP19", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP19_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP19", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP19_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP19", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP19_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP19", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp20CountersGfx11 = {
        {9, "TCP20_PERF_SEL_REQ", "TCP20", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP20_PERF_SEL_REQ_MISS", "TCP20", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP20_PERF_SEL_TCP_TA_REQ_STALL", "TCP20", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP20_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP20", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP20_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP20", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP20_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP20", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp21CountersGfx11 = {
        {9, "TCP21_PERF_SEL_REQ", "TCP21", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP21_PERF_SEL_REQ_MISS", "TCP21", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP21_PERF_SEL_TCP_TA_REQ_STALL", "TCP21", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP21_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP21", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP21_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP21", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP21_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP21", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp22CountersGfx11 = {
        {9, "TCP22_PERF_SEL_REQ", "TCP22", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP22_PERF_SEL_REQ_MISS", "TCP22", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP22_PERF_SEL_TCP_TA_REQ_STALL", "TCP22", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP22_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP22", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP22_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP22", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP22_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP22", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp23CountersGfx11 = {
        {9, "TCP23_PERF_SEL_REQ", "TCP23", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP23_PERF_SEL_REQ_MISS", "TCP23", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP23_PERF_SEL_TCP_TA_REQ_STALL", "TCP23", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP23_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP23", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP23_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP23", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP23_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP23", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp24CountersGfx11 = {
        {9, "TCP24_PERF_SEL_REQ", "TCP24", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP24_PERF_SEL_REQ_MISS", "TCP24", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP24_PERF_SEL_TCP_TA_REQ_STALL", "TCP24", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP24_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP24", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP24_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP24", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP24_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP24", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp25CountersGfx11 = {
        {9, "TCP25_PERF_SEL_REQ", "TCP25", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP25_PERF_SEL_REQ_MISS", "TCP25", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP25_PERF_SEL_TCP_TA_REQ_STALL", "TCP25", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP25_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP25", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP25_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP25", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP25_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP25", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp26CountersGfx11 = {
        {9, "TCP26_PERF_SEL_REQ", "TCP26", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP26_PERF_SEL_REQ_MISS", "TCP26", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP26_PERF_SEL_TCP_TA_REQ_STALL", "TCP26", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP26_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP26", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP26_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP26", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP26_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP26", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp27CountersGfx11 = {
        {9, "TCP27_PERF_SEL_REQ", "TCP27", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP27_PERF_SEL_REQ_MISS", "TCP27", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP27_PERF_SEL_TCP_TA_REQ_STALL", "TCP27", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP27_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP27", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP27_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP27", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP27_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP27", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp28CountersGfx11 = {
        {9, "TCP28_PERF_SEL_REQ", "TCP28", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP28_PERF_SEL_REQ_MISS", "TCP28", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP28_PERF_SEL_TCP_TA_REQ_STALL", "TCP28", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP28_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP28", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP28_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP28", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP28_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP28", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp29CountersGfx11 = {
        {9, "TCP29_PERF_SEL_REQ", "TCP29", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP29_PERF_SEL_REQ_MISS", "TCP29", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP29_PERF_SEL_TCP_TA_REQ_STALL", "TCP29", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP29_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP29", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP29_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP29", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP29_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP29", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp30CountersGfx11 = {
        {9, "TCP30_PERF_SEL_REQ", "TCP30", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP30_PERF_SEL_REQ_MISS", "TCP30", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP30_PERF_SEL_TCP_TA_REQ_STALL", "TCP30", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP30_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP30", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP30_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP30", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP30_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP30", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp31CountersGfx11 = {
        {9, "TCP31_PERF_SEL_REQ", "TCP31", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP31_PERF_SEL_REQ_MISS", "TCP31", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP31_PERF_SEL_TCP_TA_REQ_STALL", "TCP31", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP31_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP31", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP31_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP31", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP31_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP31", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp32CountersGfx11 = {
        {9, "TCP32_PERF_SEL_REQ", "TCP32", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP32_PERF_SEL_REQ_MISS", "TCP32", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP32_PERF_SEL_TCP_TA_REQ_STALL", "TCP32", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP32_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP32", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP32_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP32", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP32_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP32", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp33CountersGfx11 = {
        {9, "TCP33_PERF_SEL_REQ", "TCP33", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP33_PERF_SEL_REQ_MISS", "TCP33", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP33_PERF_SEL_TCP_TA_REQ_STALL", "TCP33", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP33_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP33", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP33_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP33", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP33_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP33", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp34CountersGfx11 = {
        {9, "TCP34_PERF_SEL_REQ", "TCP34", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP34_PERF_SEL_REQ_MISS", "TCP34", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP34_PERF_SEL_TCP_TA_REQ_STALL", "TCP34", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP34_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP34", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP34_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP34", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP34_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP34", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp35CountersGfx11 = {
        {9, "TCP35_PERF_SEL_REQ", "TCP35", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP35_PERF_SEL_REQ_MISS", "TCP35", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP35_PERF_SEL_TCP_TA_REQ_STALL", "TCP35", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP35_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP35", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP35_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP35", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP35_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP35", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp36CountersGfx11 = {
        {9, "TCP36_PERF_SEL_REQ", "TCP36", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP36_PERF_SEL_REQ_MISS", "TCP36", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP36_PERF_SEL_TCP_TA_REQ_STALL", "TCP36", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP36_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP36", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP36_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP36", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP36_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP36", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp37CountersGfx11 = {
        {9, "TCP37_PERF_SEL_REQ", "TCP37", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP37_PERF_SEL_REQ_MISS", "TCP37", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP37_PERF_SEL_TCP_TA_REQ_STALL", "TCP37", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP37_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP37", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP37_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP37", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP37_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP37", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp38CountersGfx11 = {
        {9, "TCP38_PERF_SEL_REQ", "TCP38", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP38_PERF_SEL_REQ_MISS", "TCP38", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP38_PERF_SEL_TCP_TA_REQ_STALL", "TCP38", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP38_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP38", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP38_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP38", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP38_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP38", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp39CountersGfx11 = {
        {9, "TCP39_PERF_SEL_REQ", "TCP39", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP39_PERF_SEL_REQ_MISS", "TCP39", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP39_PERF_SEL_TCP_TA_REQ_STALL", "TCP39", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP39_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP39", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP39_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP39", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP39_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP39", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp40CountersGfx11 = {
        {9, "TCP40_PERF_SEL_REQ", "TCP40", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP40_PERF_SEL_REQ_MISS", "TCP40", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP40_PERF_SEL_TCP_TA_REQ_STALL", "TCP40", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP40_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP40", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP40_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP40", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP40_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP40", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp41CountersGfx11 = {
        {9, "TCP41_PERF_SEL_REQ", "TCP41", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP41_PERF_SEL_REQ_MISS", "TCP41", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP41_PERF_SEL_TCP_TA_REQ_STALL", "TCP41", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP41_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP41", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP41_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP41", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP41_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP41", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp42CountersGfx11 = {
        {9, "TCP42_PERF_SEL_REQ", "TCP42", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP42_PERF_SEL_REQ_MISS", "TCP42", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP42_PERF_SEL_TCP_TA_REQ_STALL", "TCP42", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP42_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP42", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP42_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP42", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP42_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP42", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp43CountersGfx11 = {
        {9, "TCP43_PERF_SEL_REQ", "TCP43", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP43_PERF_SEL_REQ_MISS", "TCP43", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP43_PERF_SEL_TCP_TA_REQ_STALL", "TCP43", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP43_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP43", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP43_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP43", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP43_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP43", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp44CountersGfx11 = {
        {9, "TCP44_PERF_SEL_REQ", "TCP44", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP44_PERF_SEL_REQ_MISS", "TCP44", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP44_PERF_SEL_TCP_TA_REQ_STALL", "TCP44", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP44_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP44", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP44_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP44", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP44_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP44", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp45CountersGfx11 = {
        {9, "TCP45_PERF_SEL_REQ", "TCP45", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP45_PERF_SEL_REQ_MISS", "TCP45", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP45_PERF_SEL_TCP_TA_REQ_STALL", "TCP45", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP45_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP45", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP45_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP45", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP45_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP45", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp46CountersGfx11 = {
        {9, "TCP46_PERF_SEL_REQ", "TCP46", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP46_PERF_SEL_REQ_MISS", "TCP46", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP46_PERF_SEL_TCP_TA_REQ_STALL", "TCP46", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP46_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP46", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP46_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP46", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP46_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP46", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp47CountersGfx11 = {
        {9, "TCP47_PERF_SEL_REQ", "TCP47", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP47_PERF_SEL_REQ_MISS", "TCP47", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP47_PERF_SEL_TCP_TA_REQ_STALL", "TCP47", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP47_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP47", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP47_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP47", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP47_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP47", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp48CountersGfx11 = {
        {9, "TCP48_PERF_SEL_REQ", "TCP48", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP48_PERF_SEL_REQ_MISS", "TCP48", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP48_PERF_SEL_TCP_TA_REQ_STALL", "TCP48", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP48_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP48", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP48_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP48", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP48_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP48", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp49CountersGfx11 = {
        {9, "TCP49_PERF_SEL_REQ", "TCP49", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP49_PERF_SEL_REQ_MISS", "TCP49", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP49_PERF_SEL_TCP_TA_REQ_STALL", "TCP49", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP49_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP49", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP49_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP49", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP49_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP49", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp50CountersGfx11 = {
        {9, "TCP50_PERF_SEL_REQ", "TCP50", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP50_PERF_SEL_REQ_MISS", "TCP50", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP50_PERF_SEL_TCP_TA_REQ_STALL", "TCP50", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP50_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP50", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP50_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP50", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP50_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP50", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp51CountersGfx11 = {
        {9, "TCP51_PERF_SEL_REQ", "TCP51", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP51_PERF_SEL_REQ_MISS", "TCP51", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP51_PERF_SEL_TCP_TA_REQ_STALL", "TCP51", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP51_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP51", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP51_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP51", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP51_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP51", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp52CountersGfx11 = {
        {9, "TCP52_PERF_SEL_REQ", "TCP52", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP52_PERF_SEL_REQ_MISS", "TCP52", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP52_PERF_SEL_TCP_TA_REQ_STALL", "TCP52", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP52_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP52", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP52_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP52", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP52_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP52", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp53CountersGfx11 = {
        {9, "TCP53_PERF_SEL_REQ", "TCP53", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP53_PERF_SEL_REQ_MISS", "TCP53", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP53_PERF_SEL_TCP_TA_REQ_STALL", "TCP53", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP53_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP53", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP53_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP53", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP53_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP53", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp54CountersGfx11 = {
        {9, "TCP54_PERF_SEL_REQ", "TCP54", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP54_PERF_SEL_REQ_MISS", "TCP54", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP54_PERF_SEL_TCP_TA_REQ_STALL", "TCP54", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP54_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP54", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP54_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP54", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP54_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP54", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp55CountersGfx11 = {
        {9, "TCP55_PERF_SEL_REQ", "TCP55", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP55_PERF_SEL_REQ_MISS", "TCP55", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP55_PERF_SEL_TCP_TA_REQ_STALL", "TCP55", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP55_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP55", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP55_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP55", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP55_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP55", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp56CountersGfx11 = {
        {9, "TCP56_PERF_SEL_REQ", "TCP56", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP56_PERF_SEL_REQ_MISS", "TCP56", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP56_PERF_SEL_TCP_TA_REQ_STALL", "TCP56", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP56_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP56", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP56_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP56", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP56_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP56", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp57CountersGfx11 = {
        {9, "TCP57_PERF_SEL_REQ", "TCP57", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP57_PERF_SEL_REQ_MISS", "TCP57", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP57_PERF_SEL_TCP_TA_REQ_STALL", "TCP57", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP57_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP57", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP57_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP57", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP57_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP57", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp58CountersGfx11 = {
        {9, "TCP58_PERF_SEL_REQ", "TCP58", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP58_PERF_SEL_REQ_MISS", "TCP58", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP58_PERF_SEL_TCP_TA_REQ_STALL", "TCP58", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP58_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP58", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP58_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP58", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP58_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP58", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp59CountersGfx11 = {
        {9, "TCP59_PERF_SEL_REQ", "TCP59", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP59_PERF_SEL_REQ_MISS", "TCP59", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP59_PERF_SEL_TCP_TA_REQ_STALL", "TCP59", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP59_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP59", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP59_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP59", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP59_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP59", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp60CountersGfx11 = {
        {9, "TCP60_PERF_SEL_REQ", "TCP60", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP60_PERF_SEL_REQ_MISS", "TCP60", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP60_PERF_SEL_TCP_TA_REQ_STALL", "TCP60", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP60_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP60", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP60_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP60", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP60_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP60", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp61CountersGfx11 = {
        {9, "TCP61_PERF_SEL_REQ", "TCP61", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP61_PERF_SEL_REQ_MISS", "TCP61", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP61_PERF_SEL_TCP_TA_REQ_STALL", "TCP61", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP61_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP61", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP61_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP61", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP61_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP61", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp62CountersGfx11 = {
        {9, "TCP62_PERF_SEL_REQ", "TCP62", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP62_PERF_SEL_REQ_MISS", "TCP62", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP62_PERF_SEL_TCP_TA_REQ_STALL", "TCP62", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP62_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP62", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP62_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP62", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP62_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP62", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp63CountersGfx11 = {
        {9, "TCP63_PERF_SEL_REQ", "TCP63", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP63_PERF_SEL_REQ_MISS", "TCP63", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP63_PERF_SEL_TCP_TA_REQ_STALL", "TCP63", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP63_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP63", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP63_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP63", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP63_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP63", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp64CountersGfx11 = {
        {9, "TCP64_PERF_SEL_REQ", "TCP64", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP64_PERF_SEL_REQ_MISS", "TCP64", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP64_PERF_SEL_TCP_TA_REQ_STALL", "TCP64", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP64_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP64", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP64_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP64", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP64_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP64", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp65CountersGfx11 = {
        {9, "TCP65_PERF_SEL_REQ", "TCP65", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP65_PERF_SEL_REQ_MISS", "TCP65", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP65_PERF_SEL_TCP_TA_REQ_STALL", "TCP65", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP65_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP65", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP65_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP65", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP65_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP65", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp66CountersGfx11 = {
        {9, "TCP66_PERF_SEL_REQ", "TCP66", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP66_PERF_SEL_REQ_MISS", "TCP66", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP66_PERF_SEL_TCP_TA_REQ_STALL", "TCP66", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP66_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP66", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP66_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP66", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP66_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP66", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp67CountersGfx11 = {
        {9, "TCP67_PERF_SEL_REQ", "TCP67", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP67_PERF_SEL_REQ_MISS", "TCP67", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP67_PERF_SEL_TCP_TA_REQ_STALL", "TCP67", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP67_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP67", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP67_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP67", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP67_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP67", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp68CountersGfx11 = {
        {9, "TCP68_PERF_SEL_REQ", "TCP68", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP68_PERF_SEL_REQ_MISS", "TCP68", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP68_PERF_SEL_TCP_TA_REQ_STALL", "TCP68", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP68_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP68", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP68_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP68", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP68_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP68", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp69CountersGfx11 = {
        {9, "TCP69_PERF_SEL_REQ", "TCP69", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP69_PERF_SEL_REQ_MISS", "TCP69", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP69_PERF_SEL_TCP_TA_REQ_STALL", "TCP69", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP69_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP69", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP69_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP69", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP69_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP69", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp70CountersGfx11 = {
        {9, "TCP70_PERF_SEL_REQ", "TCP70", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP70_PERF_SEL_REQ_MISS", "TCP70", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP70_PERF_SEL_TCP_TA_REQ_STALL", "TCP70", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP70_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP70", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP70_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP70", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP70_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP70", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp71CountersGfx11 = {
        {9, "TCP71_PERF_SEL_REQ", "TCP71", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP71_PERF_SEL_REQ_MISS", "TCP71", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP71_PERF_SEL_TCP_TA_REQ_STALL", "TCP71", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP71_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP71", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP71_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP71", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP71_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP71", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp72CountersGfx11 = {
        {9, "TCP72_PERF_SEL_REQ", "TCP72", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP72_PERF_SEL_REQ_MISS", "TCP72", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP72_PERF_SEL_TCP_TA_REQ_STALL", "TCP72", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP72_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP72", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP72_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP72", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP72_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP72", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp73CountersGfx11 = {
        {9, "TCP73_PERF_SEL_REQ", "TCP73", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP73_PERF_SEL_REQ_MISS", "TCP73", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP73_PERF_SEL_TCP_TA_REQ_STALL", "TCP73", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP73_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP73", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP73_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP73", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP73_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP73", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp74CountersGfx11 = {
        {9, "TCP74_PERF_SEL_REQ", "TCP74", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP74_PERF_SEL_REQ_MISS", "TCP74", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP74_PERF_SEL_TCP_TA_REQ_STALL", "TCP74", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP74_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP74", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP74_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP74", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP74_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP74", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp75CountersGfx11 = {
        {9, "TCP75_PERF_SEL_REQ", "TCP75", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP75_PERF_SEL_REQ_MISS", "TCP75", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP75_PERF_SEL_TCP_TA_REQ_STALL", "TCP75", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP75_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP75", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP75_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP75", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP75_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP75", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp76CountersGfx11 = {
        {9, "TCP76_PERF_SEL_REQ", "TCP76", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP76_PERF_SEL_REQ_MISS", "TCP76", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP76_PERF_SEL_TCP_TA_REQ_STALL", "TCP76", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP76_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP76", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP76_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP76", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP76_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP76", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp77CountersGfx11 = {
        {9, "TCP77_PERF_SEL_REQ", "TCP77", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP77_PERF_SEL_REQ_MISS", "TCP77", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP77_PERF_SEL_TCP_TA_REQ_STALL", "TCP77", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP77_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP77", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP77_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP77", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP77_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP77", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp78CountersGfx11 = {
        {9, "TCP78_PERF_SEL_REQ", "TCP78", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP78_PERF_SEL_REQ_MISS", "TCP78", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP78_PERF_SEL_TCP_TA_REQ_STALL", "TCP78", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP78_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP78", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP78_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP78", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP78_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP78", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp79CountersGfx11 = {
        {9, "TCP79_PERF_SEL_REQ", "TCP79", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP79_PERF_SEL_REQ_MISS", "TCP79", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP79_PERF_SEL_TCP_TA_REQ_STALL", "TCP79", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP79_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP79", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP79_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP79", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP79_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP79", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp80CountersGfx11 = {
        {9, "TCP80_PERF_SEL_REQ", "TCP80", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP80_PERF_SEL_REQ_MISS", "TCP80", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP80_PERF_SEL_TCP_TA_REQ_STALL", "TCP80", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP80_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP80", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP80_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP80", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP80_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP80", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp81CountersGfx11 = {
        {9, "TCP81_PERF_SEL_REQ", "TCP81", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP81_PERF_SEL_REQ_MISS", "TCP81", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP81_PERF_SEL_TCP_TA_REQ_STALL", "TCP81", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP81_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP81", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP81_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP81", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP81_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP81", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp82CountersGfx11 = {
        {9, "TCP82_PERF_SEL_REQ", "TCP82", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP82_PERF_SEL_REQ_MISS", "TCP82", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP82_PERF_SEL_TCP_TA_REQ_STALL", "TCP82", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP82_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP82", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP82_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP82", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP82_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP82", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp83CountersGfx11 = {
        {9, "TCP83_PERF_SEL_REQ", "TCP83", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP83_PERF_SEL_REQ_MISS", "TCP83", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP83_PERF_SEL_TCP_TA_REQ_STALL", "TCP83", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP83_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP83", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP83_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP83", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP83_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP83", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp84CountersGfx11 = {
        {9, "TCP84_PERF_SEL_REQ", "TCP84", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP84_PERF_SEL_REQ_MISS", "TCP84", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP84_PERF_SEL_TCP_TA_REQ_STALL", "TCP84", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP84_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP84", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP84_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP84", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP84_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP84", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp85CountersGfx11 = {
        {9, "TCP85_PERF_SEL_REQ", "TCP85", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP85_PERF_SEL_REQ_MISS", "TCP85", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP85_PERF_SEL_TCP_TA_REQ_STALL", "TCP85", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP85_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP85", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP85_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP85", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP85_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP85", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp86CountersGfx11 = {
        {9, "TCP86_PERF_SEL_REQ", "TCP86", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP86_PERF_SEL_REQ_MISS", "TCP86", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP86_PERF_SEL_TCP_TA_REQ_STALL", "TCP86", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP86_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP86", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP86_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP86", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP86_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP86", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp87CountersGfx11 = {
        {9, "TCP87_PERF_SEL_REQ", "TCP87", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP87_PERF_SEL_REQ_MISS", "TCP87", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP87_PERF_SEL_TCP_TA_REQ_STALL", "TCP87", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP87_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP87", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP87_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP87", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP87_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP87", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp88CountersGfx11 = {
        {9, "TCP88_PERF_SEL_REQ", "TCP88", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP88_PERF_SEL_REQ_MISS", "TCP88", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP88_PERF_SEL_TCP_TA_REQ_STALL", "TCP88", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP88_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP88", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP88_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP88", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP88_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP88", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp89CountersGfx11 = {
        {9, "TCP89_PERF_SEL_REQ", "TCP89", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP89_PERF_SEL_REQ_MISS", "TCP89", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP89_PERF_SEL_TCP_TA_REQ_STALL", "TCP89", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP89_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP89", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP89_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP89", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP89_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP89", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp90CountersGfx11 = {
        {9, "TCP90_PERF_SEL_REQ", "TCP90", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP90_PERF_SEL_REQ_MISS", "TCP90", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP90_PERF_SEL_TCP_TA_REQ_STALL", "TCP90", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP90_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP90", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP90_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP90", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP90_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP90", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp91CountersGfx11 = {
        {9, "TCP91_PERF_SEL_REQ", "TCP91", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP91_PERF_SEL_REQ_MISS", "TCP91", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP91_PERF_SEL_TCP_TA_REQ_STALL", "TCP91", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP91_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP91", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP91_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP91", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP91_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP91", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp92CountersGfx11 = {
        {9, "TCP92_PERF_SEL_REQ", "TCP92", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP92_PERF_SEL_REQ_MISS", "TCP92", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP92_PERF_SEL_TCP_TA_REQ_STALL", "TCP92", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP92_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP92", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP92_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP92", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP92_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP92", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp93CountersGfx11 = {
        {9, "TCP93_PERF_SEL_REQ", "TCP93", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP93_PERF_SEL_REQ_MISS", "TCP93", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP93_PERF_SEL_TCP_TA_REQ_STALL", "TCP93", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP93_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP93", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP93_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP93", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP93_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP93", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp94CountersGfx11 = {
        {9, "TCP94_PERF_SEL_REQ", "TCP94", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP94_PERF_SEL_REQ_MISS", "TCP94", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP94_PERF_SEL_TCP_TA_REQ_STALL", "TCP94", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP94_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP94", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP94_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP94", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP94_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP94", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcp95CountersGfx11 = {
        {9, "TCP95_PERF_SEL_REQ", "TCP95", "Total cache line accesses", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {17, "TCP95_PERF_SEL_REQ_MISS", "TCP95", "Total cache requests that missed", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {39, "TCP95_PERF_SEL_TCP_TA_REQ_STALL", "TCP95", "TCP stalls TA req interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "TCP95_PERF_SEL_READ_TAGCONFLICT_STALL", "TCP95", "Tag conflict stall on a read", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {47, "TCP95_PERF_SEL_WRITE_TAGCONFLICT_STALL", "TCP95", "Tag conflict stall on a write", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "TCP95_PERF_SEL_ATOMIC_TAGCONFLICT_STALL", "TCP95", "Tag conflict stall on an atomic", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c0CountersGfx11 = {
        {3, "GL2C0_PERF_SEL_REQ", "GL2C0", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C0_PERF_SEL_MISS", "GL2C0", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C0_PERF_SEL_MC_WRREQ", "GL2C0", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C0_PERF_SEL_EA_WRREQ_64B", "GL2C0", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C0_PERF_SEL_MC_WRREQ_STALL", "GL2C0", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C0_PERF_SEL_EA_RDREQ_32B", "GL2C0", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C0_PERF_SEL_EA_RDREQ_64B", "GL2C0", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C0_PERF_SEL_EA_RDREQ_96B", "GL2C0", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C0_PERF_SEL_EA_RDREQ_128B", "GL2C0", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c1CountersGfx11 = {
        {3, "GL2C1_PERF_SEL_REQ", "GL2C1", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C1_PERF_SEL_MISS", "GL2C1", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C1_PERF_SEL_MC_WRREQ", "GL2C1", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C1_PERF_SEL_EA_WRREQ_64B", "GL2C1", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C1_PERF_SEL_MC_WRREQ_STALL", "GL2C1", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C1_PERF_SEL_EA_RDREQ_32B", "GL2C1", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C1_PERF_SEL_EA_RDREQ_64B", "GL2C1", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C1_PERF_SEL_EA_RDREQ_96B", "GL2C1", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C1_PERF_SEL_EA_RDREQ_128B", "GL2C1", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c2CountersGfx11 = {
        {3, "GL2C2_PERF_SEL_REQ", "GL2C2", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C2_PERF_SEL_MISS", "GL2C2", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C2_PERF_SEL_MC_WRREQ", "GL2C2", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C2_PERF_SEL_EA_WRREQ_64B", "GL2C2", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C2_PERF_SEL_MC_WRREQ_STALL", "GL2C2", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C2_PERF_SEL_EA_RDREQ_32B", "GL2C2", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C2_PERF_SEL_EA_RDREQ_64B", "GL2C2", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C2_PERF_SEL_EA_RDREQ_96B", "GL2C2", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C2_PERF_SEL_EA_RDREQ_128B", "GL2C2", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c3CountersGfx11 = {
        {3, "GL2C3_PERF_SEL_REQ", "GL2C3", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C3_PERF_SEL_MISS", "GL2C3", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C3_PERF_SEL_MC_WRREQ", "GL2C3", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C3_PERF_SEL_EA_WRREQ_64B", "GL2C3", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C3_PERF_SEL_MC_WRREQ_STALL", "GL2C3", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C3_PERF_SEL_EA_RDREQ_32B", "GL2C3", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C3_PERF_SEL_EA_RDREQ_64B", "GL2C3", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C3_PERF_SEL_EA_RDREQ_96B", "GL2C3", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C3_PERF_SEL_EA_RDREQ_128B", "GL2C3", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c4CountersGfx11 = {
        {3, "GL2C4_PERF_SEL_REQ", "GL2C4", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C4_PERF_SEL_MISS", "GL2C4", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C4_PERF_SEL_MC_WRREQ", "GL2C4", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C4_PERF_SEL_EA_WRREQ_64B", "GL2C4", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C4_PERF_SEL_MC_WRREQ_STALL", "GL2C4", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C4_PERF_SEL_EA_RDREQ_32B", "GL2C4", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C4_PERF_SEL_EA_RDREQ_64B", "GL2C4", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C4_PERF_SEL_EA_RDREQ_96B", "GL2C4", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C4_PERF_SEL_EA_RDREQ_128B", "GL2C4", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c5CountersGfx11 = {
        {3, "GL2C5_PERF_SEL_REQ", "GL2C5", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C5_PERF_SEL_MISS", "GL2C5", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C5_PERF_SEL_MC_WRREQ", "GL2C5", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C5_PERF_SEL_EA_WRREQ_64B", "GL2C5", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C5_PERF_SEL_MC_WRREQ_STALL", "GL2C5", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C5_PERF_SEL_EA_RDREQ_32B", "GL2C5", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C5_PERF_SEL_EA_RDREQ_64B", "GL2C5", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C5_PERF_SEL_EA_RDREQ_96B", "GL2C5", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C5_PERF_SEL_EA_RDREQ_128B", "GL2C5", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c6CountersGfx11 = {
        {3, "GL2C6_PERF_SEL_REQ", "GL2C6", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C6_PERF_SEL_MISS", "GL2C6", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C6_PERF_SEL_MC_WRREQ", "GL2C6", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C6_PERF_SEL_EA_WRREQ_64B", "GL2C6", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C6_PERF_SEL_MC_WRREQ_STALL", "GL2C6", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C6_PERF_SEL_EA_RDREQ_32B", "GL2C6", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C6_PERF_SEL_EA_RDREQ_64B", "GL2C6", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C6_PERF_SEL_EA_RDREQ_96B", "GL2C6", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C6_PERF_SEL_EA_RDREQ_128B", "GL2C6", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c7CountersGfx11 = {
        {3, "GL2C7_PERF_SEL_REQ", "GL2C7", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C7_PERF_SEL_MISS", "GL2C7", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C7_PERF_SEL_MC_WRREQ", "GL2C7", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C7_PERF_SEL_EA_WRREQ_64B", "GL2C7", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C7_PERF_SEL_MC_WRREQ_STALL", "GL2C7", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C7_PERF_SEL_EA_RDREQ_32B", "GL2C7", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C7_PERF_SEL_EA_RDREQ_64B", "GL2C7", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C7_PERF_SEL_EA_RDREQ_96B", "GL2C7", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C7_PERF_SEL_EA_RDREQ_128B", "GL2C7", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c8CountersGfx11 = {
        {3, "GL2C8_PERF_SEL_REQ", "GL2C8", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C8_PERF_SEL_MISS", "GL2C8", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C8_PERF_SEL_MC_WRREQ", "GL2C8", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C8_PERF_SEL_EA_WRREQ_64B", "GL2C8", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C8_PERF_SEL_MC_WRREQ_STALL", "GL2C8", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C8_PERF_SEL_EA_RDREQ_32B", "GL2C8", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C8_PERF_SEL_EA_RDREQ_64B", "GL2C8", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C8_PERF_SEL_EA_RDREQ_96B", "GL2C8", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C8_PERF_SEL_EA_RDREQ_128B", "GL2C8", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c9CountersGfx11 = {
        {3, "GL2C9_PERF_SEL_REQ", "GL2C9", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C9_PERF_SEL_MISS", "GL2C9", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C9_PERF_SEL_MC_WRREQ", "GL2C9", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C9_PERF_SEL_EA_WRREQ_64B", "GL2C9", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C9_PERF_SEL_MC_WRREQ_STALL", "GL2C9", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C9_PERF_SEL_EA_RDREQ_32B", "GL2C9", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C9_PERF_SEL_EA_RDREQ_64B", "GL2C9", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C9_PERF_SEL_EA_RDREQ_96B", "GL2C9", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C9_PERF_SEL_EA_RDREQ_128B", "GL2C9", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c10CountersGfx11 = {
        {3, "GL2C10_PERF_SEL_REQ", "GL2C10", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C10_PERF_SEL_MISS", "GL2C10", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C10_PERF_SEL_MC_WRREQ", "GL2C10", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C10_PERF_SEL_EA_WRREQ_64B", "GL2C10", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C10_PERF_SEL_MC_WRREQ_STALL", "GL2C10", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C10_PERF_SEL_EA_RDREQ_32B", "GL2C10", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C10_PERF_SEL_EA_RDREQ_64B", "GL2C10", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C10_PERF_SEL_EA_RDREQ_96B", "GL2C10", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C10_PERF_SEL_EA_RDREQ_128B", "GL2C10", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c11CountersGfx11 = {
        {3, "GL2C11_PERF_SEL_REQ", "GL2C11", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C11_PERF_SEL_MISS", "GL2C11", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C11_PERF_SEL_MC_WRREQ", "GL2C11", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C11_PERF_SEL_EA_WRREQ_64B", "GL2C11", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C11_PERF_SEL_MC_WRREQ_STALL", "GL2C11", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C11_PERF_SEL_EA_RDREQ_32B", "GL2C11", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C11_PERF_SEL_EA_RDREQ_64B", "GL2C11", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C11_PERF_SEL_EA_RDREQ_96B", "GL2C11", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C11_PERF_SEL_EA_RDREQ_128B", "GL2C11", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c12CountersGfx11 = {
        {3, "GL2C12_PERF_SEL_REQ", "GL2C12", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C12_PERF_SEL_MISS", "GL2C12", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C12_PERF_SEL_MC_WRREQ", "GL2C12", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C12_PERF_SEL_EA_WRREQ_64B", "GL2C12", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C12_PERF_SEL_MC_WRREQ_STALL", "GL2C12", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C12_PERF_SEL_EA_RDREQ_32B", "GL2C12", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C12_PERF_SEL_EA_RDREQ_64B", "GL2C12", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C12_PERF_SEL_EA_RDREQ_96B", "GL2C12", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C12_PERF_SEL_EA_RDREQ_128B", "GL2C12", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c13CountersGfx11 = {
        {3, "GL2C13_PERF_SEL_REQ", "GL2C13", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C13_PERF_SEL_MISS", "GL2C13", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C13_PERF_SEL_MC_WRREQ", "GL2C13", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C13_PERF_SEL_EA_WRREQ_64B", "GL2C13", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C13_PERF_SEL_MC_WRREQ_STALL", "GL2C13", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C13_PERF_SEL_EA_RDREQ_32B", "GL2C13", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C13_PERF_SEL_EA_RDREQ_64B", "GL2C13", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C13_PERF_SEL_EA_RDREQ_96B", "GL2C13", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C13_PERF_SEL_EA_RDREQ_128B", "GL2C13", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c14CountersGfx11 = {
        {3, "GL2C14_PERF_SEL_REQ", "GL2C14", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C14_PERF_SEL_MISS", "GL2C14", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C14_PERF_SEL_MC_WRREQ", "GL2C14", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C14_PERF_SEL_EA_WRREQ_64B", "GL2C14", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C14_PERF_SEL_MC_WRREQ_STALL", "GL2C14", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C14_PERF_SEL_EA_RDREQ_32B", "GL2C14", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C14_PERF_SEL_EA_RDREQ_64B", "GL2C14", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C14_PERF_SEL_EA_RDREQ_96B", "GL2C14", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C14_PERF_SEL_EA_RDREQ_128B", "GL2C14", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c15CountersGfx11 = {
        {3, "GL2C15_PERF_SEL_REQ", "GL2C15", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C15_PERF_SEL_MISS", "GL2C15", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C15_PERF_SEL_MC_WRREQ", "GL2C15", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C15_PERF_SEL_EA_WRREQ_64B", "GL2C15", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C15_PERF_SEL_MC_WRREQ_STALL", "GL2C15", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C15_PERF_SEL_EA_RDREQ_32B", "GL2C15", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C15_PERF_SEL_EA_RDREQ_64B", "GL2C15", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C15_PERF_SEL_EA_RDREQ_96B", "GL2C15", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C15_PERF_SEL_EA_RDREQ_128B", "GL2C15", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c16CountersGfx11 = {
        {3, "GL2C16_PERF_SEL_REQ", "GL2C16", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C16_PERF_SEL_MISS", "GL2C16", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C16_PERF_SEL_MC_WRREQ", "GL2C16", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C16_PERF_SEL_EA_WRREQ_64B", "GL2C16", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C16_PERF_SEL_MC_WRREQ_STALL", "GL2C16", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C16_PERF_SEL_EA_RDREQ_32B", "GL2C16", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C16_PERF_SEL_EA_RDREQ_64B", "GL2C16", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C16_PERF_SEL_EA_RDREQ_96B", "GL2C16", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C16_PERF_SEL_EA_RDREQ_128B", "GL2C16", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c17CountersGfx11 = {
        {3, "GL2C17_PERF_SEL_REQ", "GL2C17", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C17_PERF_SEL_MISS", "GL2C17", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C17_PERF_SEL_MC_WRREQ", "GL2C17", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C17_PERF_SEL_EA_WRREQ_64B", "GL2C17", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C17_PERF_SEL_MC_WRREQ_STALL", "GL2C17", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C17_PERF_SEL_EA_RDREQ_32B", "GL2C17", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C17_PERF_SEL_EA_RDREQ_64B", "GL2C17", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C17_PERF_SEL_EA_RDREQ_96B", "GL2C17", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C17_PERF_SEL_EA_RDREQ_128B", "GL2C17", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c18CountersGfx11 = {
        {3, "GL2C18_PERF_SEL_REQ", "GL2C18", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C18_PERF_SEL_MISS", "GL2C18", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C18_PERF_SEL_MC_WRREQ", "GL2C18", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C18_PERF_SEL_EA_WRREQ_64B", "GL2C18", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C18_PERF_SEL_MC_WRREQ_STALL", "GL2C18", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C18_PERF_SEL_EA_RDREQ_32B", "GL2C18", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C18_PERF_SEL_EA_RDREQ_64B", "GL2C18", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C18_PERF_SEL_EA_RDREQ_96B", "GL2C18", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C18_PERF_SEL_EA_RDREQ_128B", "GL2C18", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c19CountersGfx11 = {
        {3, "GL2C19_PERF_SEL_REQ", "GL2C19", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C19_PERF_SEL_MISS", "GL2C19", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C19_PERF_SEL_MC_WRREQ", "GL2C19", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C19_PERF_SEL_EA_WRREQ_64B", "GL2C19", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C19_PERF_SEL_MC_WRREQ_STALL", "GL2C19", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C19_PERF_SEL_EA_RDREQ_32B", "GL2C19", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C19_PERF_SEL_EA_RDREQ_64B", "GL2C19", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C19_PERF_SEL_EA_RDREQ_96B", "GL2C19", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C19_PERF_SEL_EA_RDREQ_128B", "GL2C19", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c20CountersGfx11 = {
        {3, "GL2C20_PERF_SEL_REQ", "GL2C20", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C20_PERF_SEL_MISS", "GL2C20", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C20_PERF_SEL_MC_WRREQ", "GL2C20", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C20_PERF_SEL_EA_WRREQ_64B", "GL2C20", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C20_PERF_SEL_MC_WRREQ_STALL", "GL2C20", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C20_PERF_SEL_EA_RDREQ_32B", "GL2C20", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C20_PERF_SEL_EA_RDREQ_64B", "GL2C20", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C20_PERF_SEL_EA_RDREQ_96B", "GL2C20", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C20_PERF_SEL_EA_RDREQ_128B", "GL2C20", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c21CountersGfx11 = {
        {3, "GL2C21_PERF_SEL_REQ", "GL2C21", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C21_PERF_SEL_MISS", "GL2C21", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C21_PERF_SEL_MC_WRREQ", "GL2C21", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C21_PERF_SEL_EA_WRREQ_64B", "GL2C21", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C21_PERF_SEL_MC_WRREQ_STALL", "GL2C21", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C21_PERF_SEL_EA_RDREQ_32B", "GL2C21", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C21_PERF_SEL_EA_RDREQ_64B", "GL2C21", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C21_PERF_SEL_EA_RDREQ_96B", "GL2C21", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C21_PERF_SEL_EA_RDREQ_128B", "GL2C21", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c22CountersGfx11 = {
        {3, "GL2C22_PERF_SEL_REQ", "GL2C22", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C22_PERF_SEL_MISS", "GL2C22", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C22_PERF_SEL_MC_WRREQ", "GL2C22", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C22_PERF_SEL_EA_WRREQ_64B", "GL2C22", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C22_PERF_SEL_MC_WRREQ_STALL", "GL2C22", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C22_PERF_SEL_EA_RDREQ_32B", "GL2C22", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C22_PERF_SEL_EA_RDREQ_64B", "GL2C22", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C22_PERF_SEL_EA_RDREQ_96B", "GL2C22", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C22_PERF_SEL_EA_RDREQ_128B", "GL2C22", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl2c23CountersGfx11 = {
        {3, "GL2C23_PERF_SEL_REQ", "GL2C23", "Number of requests of all types. This is measured at the tag block. This may be more than the number of requests arriving at the GL2C, but it is a good indication of the total amount of work that needs to be performed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {43, "GL2C23_PERF_SEL_MISS", "GL2C23", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {83, "GL2C23_PERF_SEL_MC_WRREQ", "GL2C23", "Number of transactions (either 32-byte or 64-byte) going over the GL2C_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {85, "GL2C23_PERF_SEL_EA_WRREQ_64B", "GL2C23", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {88, "GL2C23_PERF_SEL_MC_WRREQ_STALL", "GL2C23", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {99, "GL2C23_PERF_SEL_EA_RDREQ_32B", "GL2C23", "Number of 32-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {100, "GL2C23_PERF_SEL_EA_RDREQ_64B", "GL2C23", "Number of 64-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {101, "GL2C23_PERF_SEL_EA_RDREQ_96B", "GL2C23", "Number of 96-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {102, "GL2C23_PERF_SEL_EA_RDREQ_128B", "GL2C23", "Number of 128-byte GL2C/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c0CountersGfx11 = {
        {14, "GL1C0_PERF_SEL_REQ", "GL1C0", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C0_PERF_SEL_REQ_MISS", "GL1C0", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c1CountersGfx11 = {
        {14, "GL1C1_PERF_SEL_REQ", "GL1C1", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C1_PERF_SEL_REQ_MISS", "GL1C1", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c2CountersGfx11 = {
        {14, "GL1C2_PERF_SEL_REQ", "GL1C2", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C2_PERF_SEL_REQ_MISS", "GL1C2", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c3CountersGfx11 = {
        {14, "GL1C3_PERF_SEL_REQ", "GL1C3", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C3_PERF_SEL_REQ_MISS", "GL1C3", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c4CountersGfx11 = {
        {14, "GL1C4_PERF_SEL_REQ", "GL1C4", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C4_PERF_SEL_REQ_MISS", "GL1C4", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c5CountersGfx11 = {
        {14, "GL1C5_PERF_SEL_REQ", "GL1C5", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C5_PERF_SEL_REQ_MISS", "GL1C5", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c6CountersGfx11 = {
        {14, "GL1C6_PERF_SEL_REQ", "GL1C6", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C6_PERF_SEL_REQ_MISS", "GL1C6", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c7CountersGfx11 = {
        {14, "GL1C7_PERF_SEL_REQ", "GL1C7", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C7_PERF_SEL_REQ_MISS", "GL1C7", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c8CountersGfx11 = {
        {14, "GL1C8_PERF_SEL_REQ", "GL1C8", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C8_PERF_SEL_REQ_MISS", "GL1C8", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c9CountersGfx11 = {
        {14, "GL1C9_PERF_SEL_REQ", "GL1C9", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C9_PERF_SEL_REQ_MISS", "GL1C9", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c10CountersGfx11 = {
        {14, "GL1C10_PERF_SEL_REQ", "GL1C10", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C10_PERF_SEL_REQ_MISS", "GL1C10", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c11CountersGfx11 = {
        {14, "GL1C11_PERF_SEL_REQ", "GL1C11", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C11_PERF_SEL_REQ_MISS", "GL1C11", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c12CountersGfx11 = {
        {14, "GL1C12_PERF_SEL_REQ", "GL1C12", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C12_PERF_SEL_REQ_MISS", "GL1C12", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c13CountersGfx11 = {
        {14, "GL1C13_PERF_SEL_REQ", "GL1C13", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C13_PERF_SEL_REQ_MISS", "GL1C13", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c14CountersGfx11 = {
        {14, "GL1C14_PERF_SEL_REQ", "GL1C14", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C14_PERF_SEL_REQ_MISS", "GL1C14", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c15CountersGfx11 = {
        {14, "GL1C15_PERF_SEL_REQ", "GL1C15", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C15_PERF_SEL_REQ_MISS", "GL1C15", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c16CountersGfx11 = {
        {14, "GL1C16_PERF_SEL_REQ", "GL1C16", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C16_PERF_SEL_REQ_MISS", "GL1C16", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c17CountersGfx11 = {
        {14, "GL1C17_PERF_SEL_REQ", "GL1C17", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C17_PERF_SEL_REQ_MISS", "GL1C17", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c18CountersGfx11 = {
        {14, "GL1C18_PERF_SEL_REQ", "GL1C18", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C18_PERF_SEL_REQ_MISS", "GL1C18", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c19CountersGfx11 = {
        {14, "GL1C19_PERF_SEL_REQ", "GL1C19", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C19_PERF_SEL_REQ_MISS", "GL1C19", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c20CountersGfx11 = {
        {14, "GL1C20_PERF_SEL_REQ", "GL1C20", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C20_PERF_SEL_REQ_MISS", "GL1C20", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c21CountersGfx11 = {
        {14, "GL1C21_PERF_SEL_REQ", "GL1C21", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C21_PERF_SEL_REQ_MISS", "GL1C21", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c22CountersGfx11 = {
        {14, "GL1C22_PERF_SEL_REQ", "GL1C22", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C22_PERF_SEL_REQ_MISS", "GL1C22", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c23CountersGfx11 = {
        {14, "GL1C23_PERF_SEL_REQ", "GL1C23", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C23_PERF_SEL_REQ_MISS", "GL1C23", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c24CountersGfx11 = {
        {14, "GL1C24_PERF_SEL_REQ", "GL1C24", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C24_PERF_SEL_REQ_MISS", "GL1C24", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c25CountersGfx11 = {
        {14, "GL1C25_PERF_SEL_REQ", "GL1C25", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C25_PERF_SEL_REQ_MISS", "GL1C25", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c26CountersGfx11 = {
        {14, "GL1C26_PERF_SEL_REQ", "GL1C26", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C26_PERF_SEL_REQ_MISS", "GL1C26", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c27CountersGfx11 = {
        {14, "GL1C27_PERF_SEL_REQ", "GL1C27", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C27_PERF_SEL_REQ_MISS", "GL1C27", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c28CountersGfx11 = {
        {14, "GL1C28_PERF_SEL_REQ", "GL1C28", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C28_PERF_SEL_REQ_MISS", "GL1C28", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c29CountersGfx11 = {
        {14, "GL1C29_PERF_SEL_REQ", "GL1C29", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C29_PERF_SEL_REQ_MISS", "GL1C29", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c30CountersGfx11 = {
        {14, "GL1C30_PERF_SEL_REQ", "GL1C30", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C30_PERF_SEL_REQ_MISS", "GL1C30", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c31CountersGfx11 = {
        {14, "GL1C31_PERF_SEL_REQ", "GL1C31", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C31_PERF_SEL_REQ_MISS", "GL1C31", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c32CountersGfx11 = {
        {14, "GL1C32_PERF_SEL_REQ", "GL1C32", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C32_PERF_SEL_REQ_MISS", "GL1C32", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c33CountersGfx11 = {
        {14, "GL1C33_PERF_SEL_REQ", "GL1C33", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C33_PERF_SEL_REQ_MISS", "GL1C33", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c34CountersGfx11 = {
        {14, "GL1C34_PERF_SEL_REQ", "GL1C34", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C34_PERF_SEL_REQ_MISS", "GL1C34", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c35CountersGfx11 = {
        {14, "GL1C35_PERF_SEL_REQ", "GL1C35", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C35_PERF_SEL_REQ_MISS", "GL1C35", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c36CountersGfx11 = {
        {14, "GL1C36_PERF_SEL_REQ", "GL1C36", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C36_PERF_SEL_REQ_MISS", "GL1C36", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c37CountersGfx11 = {
        {14, "GL1C37_PERF_SEL_REQ", "GL1C37", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C37_PERF_SEL_REQ_MISS", "GL1C37", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c38CountersGfx11 = {
        {14, "GL1C38_PERF_SEL_REQ", "GL1C38", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C38_PERF_SEL_REQ_MISS", "GL1C38", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c39CountersGfx11 = {
        {14, "GL1C39_PERF_SEL_REQ", "GL1C39", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C39_PERF_SEL_REQ_MISS", "GL1C39", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c40CountersGfx11 = {
        {14, "GL1C40_PERF_SEL_REQ", "GL1C40", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C40_PERF_SEL_REQ_MISS", "GL1C40", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c41CountersGfx11 = {
        {14, "GL1C41_PERF_SEL_REQ", "GL1C41", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C41_PERF_SEL_REQ_MISS", "GL1C41", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c42CountersGfx11 = {
        {14, "GL1C42_PERF_SEL_REQ", "GL1C42", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C42_PERF_SEL_REQ_MISS", "GL1C42", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c43CountersGfx11 = {
        {14, "GL1C43_PERF_SEL_REQ", "GL1C43", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C43_PERF_SEL_REQ_MISS", "GL1C43", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c44CountersGfx11 = {
        {14, "GL1C44_PERF_SEL_REQ", "GL1C44", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C44_PERF_SEL_REQ_MISS", "GL1C44", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c45CountersGfx11 = {
        {14, "GL1C45_PERF_SEL_REQ", "GL1C45", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C45_PERF_SEL_REQ_MISS", "GL1C45", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c46CountersGfx11 = {
        {14, "GL1C46_PERF_SEL_REQ", "GL1C46", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C46_PERF_SEL_REQ_MISS", "GL1C46", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGl1c47CountersGfx11 = {
        {14, "GL1C47_PERF_SEL_REQ", "GL1C47", "Read, writes, atomics, nop. Invalids are not counted as requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {18, "GL1C47_PERF_SEL_REQ_MISS", "GL1C47", "Count of requests that miss in the cache. Writes and atomics always miss. Partial miss counts as miss.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb0CountersGfx11 = {
        {5, "CB0_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB0", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB0_PERF_SEL_CC_MA_WRITE_REQUEST", "CB0", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB0_PERF_SEL_CC_MA_READ_REQUEST", "CB0", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB0_PERF_SEL_DC_MA_WRITE_REQUEST", "CB0", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB0_PERF_SEL_DC_MA_READ_REQUEST", "CB0", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb1CountersGfx11 = {
        {5, "CB1_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB1", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB1_PERF_SEL_CC_MA_WRITE_REQUEST", "CB1", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB1_PERF_SEL_CC_MA_READ_REQUEST", "CB1", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB1_PERF_SEL_DC_MA_WRITE_REQUEST", "CB1", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB1_PERF_SEL_DC_MA_READ_REQUEST", "CB1", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb2CountersGfx11 = {
        {5, "CB2_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB2", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB2_PERF_SEL_CC_MA_WRITE_REQUEST", "CB2", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB2_PERF_SEL_CC_MA_READ_REQUEST", "CB2", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB2_PERF_SEL_DC_MA_WRITE_REQUEST", "CB2", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB2_PERF_SEL_DC_MA_READ_REQUEST", "CB2", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb3CountersGfx11 = {
        {5, "CB3_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB3", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB3_PERF_SEL_CC_MA_WRITE_REQUEST", "CB3", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB3_PERF_SEL_CC_MA_READ_REQUEST", "CB3", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB3_PERF_SEL_DC_MA_WRITE_REQUEST", "CB3", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB3_PERF_SEL_DC_MA_READ_REQUEST", "CB3", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb4CountersGfx11 = {
        {5, "CB4_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB4", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB4_PERF_SEL_CC_MA_WRITE_REQUEST", "CB4", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB4_PERF_SEL_CC_MA_READ_REQUEST", "CB4", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB4_PERF_SEL_DC_MA_WRITE_REQUEST", "CB4", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB4_PERF_SEL_DC_MA_READ_REQUEST", "CB4", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb5CountersGfx11 = {
        {5, "CB5_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB5", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB5_PERF_SEL_CC_MA_WRITE_REQUEST", "CB5", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB5_PERF_SEL_CC_MA_READ_REQUEST", "CB5", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB5_PERF_SEL_DC_MA_WRITE_REQUEST", "CB5", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB5_PERF_SEL_DC_MA_READ_REQUEST", "CB5", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb6CountersGfx11 = {
        {5, "CB6_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB6", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB6_PERF_SEL_CC_MA_WRITE_REQUEST", "CB6", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB6_PERF_SEL_CC_MA_READ_REQUEST", "CB6", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB6_PERF_SEL_DC_MA_WRITE_REQUEST", "CB6", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB6_PERF_SEL_DC_MA_READ_REQUEST", "CB6", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb7CountersGfx11 = {
        {5, "CB7_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB7", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB7_PERF_SEL_CC_MA_WRITE_REQUEST", "CB7", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB7_PERF_SEL_CC_MA_READ_REQUEST", "CB7", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB7_PERF_SEL_DC_MA_WRITE_REQUEST", "CB7", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB7_PERF_SEL_DC_MA_READ_REQUEST", "CB7", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb8CountersGfx11 = {
        {5, "CB8_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB8", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB8_PERF_SEL_CC_MA_WRITE_REQUEST", "CB8", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB8_PERF_SEL_CC_MA_READ_REQUEST", "CB8", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB8_PERF_SEL_DC_MA_WRITE_REQUEST", "CB8", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB8_PERF_SEL_DC_MA_READ_REQUEST", "CB8", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb9CountersGfx11 = {
        {5, "CB9_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB9", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB9_PERF_SEL_CC_MA_WRITE_REQUEST", "CB9", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB9_PERF_SEL_CC_MA_READ_REQUEST", "CB9", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB9_PERF_SEL_DC_MA_WRITE_REQUEST", "CB9", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB9_PERF_SEL_DC_MA_READ_REQUEST", "CB9", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb10CountersGfx11 = {
        {5, "CB10_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB10", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB10_PERF_SEL_CC_MA_WRITE_REQUEST", "CB10", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB10_PERF_SEL_CC_MA_READ_REQUEST", "CB10", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB10_PERF_SEL_DC_MA_WRITE_REQUEST", "CB10", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB10_PERF_SEL_DC_MA_READ_REQUEST", "CB10", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb11CountersGfx11 = {
        {5, "CB11_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB11", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB11_PERF_SEL_CC_MA_WRITE_REQUEST", "CB11", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB11_PERF_SEL_CC_MA_READ_REQUEST", "CB11", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB11_PERF_SEL_DC_MA_WRITE_REQUEST", "CB11", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB11_PERF_SEL_DC_MA_READ_REQUEST", "CB11", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb12CountersGfx11 = {
        {5, "CB12_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB12", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB12_PERF_SEL_CC_MA_WRITE_REQUEST", "CB12", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB12_PERF_SEL_CC_MA_READ_REQUEST", "CB12", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB12_PERF_SEL_DC_MA_WRITE_REQUEST", "CB12", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB12_PERF_SEL_DC_MA_READ_REQUEST", "CB12", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb13CountersGfx11 = {
        {5, "CB13_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB13", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB13_PERF_SEL_CC_MA_WRITE_REQUEST", "CB13", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB13_PERF_SEL_CC_MA_READ_REQUEST", "CB13", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB13_PERF_SEL_DC_MA_WRITE_REQUEST", "CB13", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB13_PERF_SEL_DC_MA_READ_REQUEST", "CB13", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb14CountersGfx11 = {
        {5, "CB14_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB14", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB14_PERF_SEL_CC_MA_WRITE_REQUEST", "CB14", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB14_PERF_SEL_CC_MA_READ_REQUEST", "CB14", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB14_PERF_SEL_DC_MA_WRITE_REQUEST", "CB14", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB14_PERF_SEL_DC_MA_READ_REQUEST", "CB14", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb15CountersGfx11 = {
        {5, "CB15_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB15", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB15_PERF_SEL_CC_MA_WRITE_REQUEST", "CB15", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB15_PERF_SEL_CC_MA_READ_REQUEST", "CB15", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB15_PERF_SEL_DC_MA_WRITE_REQUEST", "CB15", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB15_PERF_SEL_DC_MA_READ_REQUEST", "CB15", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb16CountersGfx11 = {
        {5, "CB16_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB16", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB16_PERF_SEL_CC_MA_WRITE_REQUEST", "CB16", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB16_PERF_SEL_CC_MA_READ_REQUEST", "CB16", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB16_PERF_SEL_DC_MA_WRITE_REQUEST", "CB16", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB16_PERF_SEL_DC_MA_READ_REQUEST", "CB16", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb17CountersGfx11 = {
        {5, "CB17_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB17", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB17_PERF_SEL_CC_MA_WRITE_REQUEST", "CB17", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB17_PERF_SEL_CC_MA_READ_REQUEST", "CB17", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB17_PERF_SEL_DC_MA_WRITE_REQUEST", "CB17", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB17_PERF_SEL_DC_MA_READ_REQUEST", "CB17", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb18CountersGfx11 = {
        {5, "CB18_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB18", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB18_PERF_SEL_CC_MA_WRITE_REQUEST", "CB18", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB18_PERF_SEL_CC_MA_READ_REQUEST", "CB18", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB18_PERF_SEL_DC_MA_WRITE_REQUEST", "CB18", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB18_PERF_SEL_DC_MA_READ_REQUEST", "CB18", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb19CountersGfx11 = {
        {5, "CB19_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB19", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB19_PERF_SEL_CC_MA_WRITE_REQUEST", "CB19", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB19_PERF_SEL_CC_MA_READ_REQUEST", "CB19", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB19_PERF_SEL_DC_MA_WRITE_REQUEST", "CB19", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB19_PERF_SEL_DC_MA_READ_REQUEST", "CB19", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb20CountersGfx11 = {
        {5, "CB20_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB20", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB20_PERF_SEL_CC_MA_WRITE_REQUEST", "CB20", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB20_PERF_SEL_CC_MA_READ_REQUEST", "CB20", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB20_PERF_SEL_DC_MA_WRITE_REQUEST", "CB20", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB20_PERF_SEL_DC_MA_READ_REQUEST", "CB20", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb21CountersGfx11 = {
        {5, "CB21_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB21", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB21_PERF_SEL_CC_MA_WRITE_REQUEST", "CB21", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB21_PERF_SEL_CC_MA_READ_REQUEST", "CB21", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB21_PERF_SEL_DC_MA_WRITE_REQUEST", "CB21", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB21_PERF_SEL_DC_MA_READ_REQUEST", "CB21", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb22CountersGfx11 = {
        {5, "CB22_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB22", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB22_PERF_SEL_CC_MA_WRITE_REQUEST", "CB22", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB22_PERF_SEL_CC_MA_READ_REQUEST", "CB22", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB22_PERF_SEL_DC_MA_WRITE_REQUEST", "CB22", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB22_PERF_SEL_DC_MA_READ_REQUEST", "CB22", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb23CountersGfx11 = {
        {5, "CB23_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB23", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {19, "CB23_PERF_SEL_CC_MA_WRITE_REQUEST", "CB23", "Number of 32-byte color ma write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "CB23_PERF_SEL_CC_MA_READ_REQUEST", "CB23", "Number of 32-byte color ma read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "CB23_PERF_SEL_DC_MA_WRITE_REQUEST", "CB23", "Number of 32-byte DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {32, "CB23_PERF_SEL_DC_MA_READ_REQUEST", "CB23", "Number of 32-byte fDCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb0CountersGfx11 = {
        {4, "DB0_PERF_SEL_SC_DB_TILE_TILES", "DB0", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB0_PERF_SEL_DB_SC_TILE_CULLED", "DB0", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB0_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB0", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB0_PERF_SEL_DB_CB_EXPORT_STALLS", "DB0", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB0_PERF_SEL_TILE_RD_SENDS", "DB0", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB0_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB0", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB0_PERF_SEL_TILE_WR_SENDS", "DB0", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB0_PERF_SEL_QUAD_WR_SENDS", "DB0", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB0_PERF_SEL_OP_PIPE_BUSY", "DB0", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB0_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB0", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB0_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB0", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB0_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB0", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB0_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB0", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB0_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB0", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB0_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB0", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb1CountersGfx11 = {
        {4, "DB1_PERF_SEL_SC_DB_TILE_TILES", "DB1", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB1_PERF_SEL_DB_SC_TILE_CULLED", "DB1", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB1_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB1", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB1_PERF_SEL_DB_CB_EXPORT_STALLS", "DB1", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB1_PERF_SEL_TILE_RD_SENDS", "DB1", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB1_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB1", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB1_PERF_SEL_TILE_WR_SENDS", "DB1", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB1_PERF_SEL_QUAD_WR_SENDS", "DB1", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB1_PERF_SEL_OP_PIPE_BUSY", "DB1", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB1_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB1", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB1_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB1", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB1_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB1", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB1_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB1", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB1_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB1", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB1_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB1", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb2CountersGfx11 = {
        {4, "DB2_PERF_SEL_SC_DB_TILE_TILES", "DB2", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB2_PERF_SEL_DB_SC_TILE_CULLED", "DB2", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB2_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB2", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB2_PERF_SEL_DB_CB_EXPORT_STALLS", "DB2", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB2_PERF_SEL_TILE_RD_SENDS", "DB2", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB2_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB2", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB2_PERF_SEL_TILE_WR_SENDS", "DB2", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB2_PERF_SEL_QUAD_WR_SENDS", "DB2", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB2_PERF_SEL_OP_PIPE_BUSY", "DB2", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB2_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB2", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB2_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB2", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB2_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB2", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB2_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB2", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB2_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB2", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB2_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB2", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb3CountersGfx11 = {
        {4, "DB3_PERF_SEL_SC_DB_TILE_TILES", "DB3", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB3_PERF_SEL_DB_SC_TILE_CULLED", "DB3", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB3_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB3", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB3_PERF_SEL_DB_CB_EXPORT_STALLS", "DB3", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB3_PERF_SEL_TILE_RD_SENDS", "DB3", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB3_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB3", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB3_PERF_SEL_TILE_WR_SENDS", "DB3", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB3_PERF_SEL_QUAD_WR_SENDS", "DB3", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB3_PERF_SEL_OP_PIPE_BUSY", "DB3", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB3_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB3", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB3_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB3", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB3_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB3", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB3_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB3", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB3_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB3", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB3_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB3", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb4CountersGfx11 = {
        {4, "DB4_PERF_SEL_SC_DB_TILE_TILES", "DB4", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB4_PERF_SEL_DB_SC_TILE_CULLED", "DB4", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB4_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB4", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB4_PERF_SEL_DB_CB_EXPORT_STALLS", "DB4", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB4_PERF_SEL_TILE_RD_SENDS", "DB4", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB4_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB4", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB4_PERF_SEL_TILE_WR_SENDS", "DB4", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB4_PERF_SEL_QUAD_WR_SENDS", "DB4", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB4_PERF_SEL_OP_PIPE_BUSY", "DB4", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB4_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB4", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB4_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB4", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB4_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB4", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB4_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB4", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB4_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB4", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB4_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB4", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb5CountersGfx11 = {
        {4, "DB5_PERF_SEL_SC_DB_TILE_TILES", "DB5", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB5_PERF_SEL_DB_SC_TILE_CULLED", "DB5", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB5_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB5", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB5_PERF_SEL_DB_CB_EXPORT_STALLS", "DB5", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB5_PERF_SEL_TILE_RD_SENDS", "DB5", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB5_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB5", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB5_PERF_SEL_TILE_WR_SENDS", "DB5", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB5_PERF_SEL_QUAD_WR_SENDS", "DB5", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB5_PERF_SEL_OP_PIPE_BUSY", "DB5", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB5_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB5", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB5_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB5", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB5_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB5", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB5_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB5", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB5_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB5", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB5_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB5", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb6CountersGfx11 = {
        {4, "DB6_PERF_SEL_SC_DB_TILE_TILES", "DB6", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB6_PERF_SEL_DB_SC_TILE_CULLED", "DB6", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB6_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB6", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB6_PERF_SEL_DB_CB_EXPORT_STALLS", "DB6", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB6_PERF_SEL_TILE_RD_SENDS", "DB6", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB6_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB6", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB6_PERF_SEL_TILE_WR_SENDS", "DB6", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB6_PERF_SEL_QUAD_WR_SENDS", "DB6", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB6_PERF_SEL_OP_PIPE_BUSY", "DB6", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB6_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB6", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB6_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB6", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB6_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB6", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB6_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB6", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB6_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB6", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB6_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB6", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb7CountersGfx11 = {
        {4, "DB7_PERF_SEL_SC_DB_TILE_TILES", "DB7", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB7_PERF_SEL_DB_SC_TILE_CULLED", "DB7", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB7_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB7", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB7_PERF_SEL_DB_CB_EXPORT_STALLS", "DB7", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB7_PERF_SEL_TILE_RD_SENDS", "DB7", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB7_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB7", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB7_PERF_SEL_TILE_WR_SENDS", "DB7", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB7_PERF_SEL_QUAD_WR_SENDS", "DB7", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB7_PERF_SEL_OP_PIPE_BUSY", "DB7", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB7_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB7", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB7_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB7", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB7_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB7", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB7_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB7", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB7_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB7", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB7_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB7", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb8CountersGfx11 = {
        {4, "DB8_PERF_SEL_SC_DB_TILE_TILES", "DB8", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB8_PERF_SEL_DB_SC_TILE_CULLED", "DB8", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB8_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB8", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB8_PERF_SEL_DB_CB_EXPORT_STALLS", "DB8", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB8_PERF_SEL_TILE_RD_SENDS", "DB8", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB8_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB8", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB8_PERF_SEL_TILE_WR_SENDS", "DB8", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB8_PERF_SEL_QUAD_WR_SENDS", "DB8", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB8_PERF_SEL_OP_PIPE_BUSY", "DB8", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB8_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB8", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB8_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB8", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB8_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB8", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB8_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB8", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB8_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB8", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB8_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB8", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb9CountersGfx11 = {
        {4, "DB9_PERF_SEL_SC_DB_TILE_TILES", "DB9", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB9_PERF_SEL_DB_SC_TILE_CULLED", "DB9", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB9_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB9", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB9_PERF_SEL_DB_CB_EXPORT_STALLS", "DB9", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB9_PERF_SEL_TILE_RD_SENDS", "DB9", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB9_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB9", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB9_PERF_SEL_TILE_WR_SENDS", "DB9", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB9_PERF_SEL_QUAD_WR_SENDS", "DB9", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB9_PERF_SEL_OP_PIPE_BUSY", "DB9", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB9_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB9", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB9_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB9", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB9_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB9", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB9_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB9", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB9_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB9", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB9_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB9", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb10CountersGfx11 = {
        {4, "DB10_PERF_SEL_SC_DB_TILE_TILES", "DB10", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB10_PERF_SEL_DB_SC_TILE_CULLED", "DB10", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB10_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB10", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB10_PERF_SEL_DB_CB_EXPORT_STALLS", "DB10", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB10_PERF_SEL_TILE_RD_SENDS", "DB10", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB10_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB10", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB10_PERF_SEL_TILE_WR_SENDS", "DB10", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB10_PERF_SEL_QUAD_WR_SENDS", "DB10", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB10_PERF_SEL_OP_PIPE_BUSY", "DB10", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB10_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB10", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB10_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB10", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB10_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB10", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB10_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB10", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB10_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB10", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB10_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB10", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb11CountersGfx11 = {
        {4, "DB11_PERF_SEL_SC_DB_TILE_TILES", "DB11", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB11_PERF_SEL_DB_SC_TILE_CULLED", "DB11", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB11_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB11", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB11_PERF_SEL_DB_CB_EXPORT_STALLS", "DB11", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB11_PERF_SEL_TILE_RD_SENDS", "DB11", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB11_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB11", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB11_PERF_SEL_TILE_WR_SENDS", "DB11", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB11_PERF_SEL_QUAD_WR_SENDS", "DB11", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB11_PERF_SEL_OP_PIPE_BUSY", "DB11", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB11_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB11", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB11_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB11", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB11_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB11", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB11_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB11", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB11_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB11", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB11_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB11", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb12CountersGfx11 = {
        {4, "DB12_PERF_SEL_SC_DB_TILE_TILES", "DB12", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB12_PERF_SEL_DB_SC_TILE_CULLED", "DB12", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB12_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB12", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB12_PERF_SEL_DB_CB_EXPORT_STALLS", "DB12", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB12_PERF_SEL_TILE_RD_SENDS", "DB12", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB12_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB12", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB12_PERF_SEL_TILE_WR_SENDS", "DB12", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB12_PERF_SEL_QUAD_WR_SENDS", "DB12", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB12_PERF_SEL_OP_PIPE_BUSY", "DB12", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB12_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB12", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB12_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB12", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB12_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB12", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB12_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB12", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB12_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB12", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB12_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB12", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb13CountersGfx11 = {
        {4, "DB13_PERF_SEL_SC_DB_TILE_TILES", "DB13", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB13_PERF_SEL_DB_SC_TILE_CULLED", "DB13", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB13_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB13", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB13_PERF_SEL_DB_CB_EXPORT_STALLS", "DB13", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB13_PERF_SEL_TILE_RD_SENDS", "DB13", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB13_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB13", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB13_PERF_SEL_TILE_WR_SENDS", "DB13", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB13_PERF_SEL_QUAD_WR_SENDS", "DB13", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB13_PERF_SEL_OP_PIPE_BUSY", "DB13", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB13_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB13", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB13_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB13", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB13_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB13", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB13_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB13", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB13_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB13", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB13_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB13", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb14CountersGfx11 = {
        {4, "DB14_PERF_SEL_SC_DB_TILE_TILES", "DB14", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB14_PERF_SEL_DB_SC_TILE_CULLED", "DB14", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB14_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB14", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB14_PERF_SEL_DB_CB_EXPORT_STALLS", "DB14", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB14_PERF_SEL_TILE_RD_SENDS", "DB14", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB14_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB14", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB14_PERF_SEL_TILE_WR_SENDS", "DB14", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB14_PERF_SEL_QUAD_WR_SENDS", "DB14", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB14_PERF_SEL_OP_PIPE_BUSY", "DB14", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB14_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB14", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB14_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB14", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB14_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB14", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB14_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB14", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB14_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB14", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB14_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB14", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb15CountersGfx11 = {
        {4, "DB15_PERF_SEL_SC_DB_TILE_TILES", "DB15", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB15_PERF_SEL_DB_SC_TILE_CULLED", "DB15", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB15_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB15", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB15_PERF_SEL_DB_CB_EXPORT_STALLS", "DB15", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB15_PERF_SEL_TILE_RD_SENDS", "DB15", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB15_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB15", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB15_PERF_SEL_TILE_WR_SENDS", "DB15", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB15_PERF_SEL_QUAD_WR_SENDS", "DB15", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB15_PERF_SEL_OP_PIPE_BUSY", "DB15", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB15_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB15", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB15_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB15", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB15_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB15", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB15_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB15", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB15_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB15", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB15_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB15", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb16CountersGfx11 = {
        {4, "DB16_PERF_SEL_SC_DB_TILE_TILES", "DB16", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB16_PERF_SEL_DB_SC_TILE_CULLED", "DB16", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB16_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB16", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB16_PERF_SEL_DB_CB_EXPORT_STALLS", "DB16", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB16_PERF_SEL_TILE_RD_SENDS", "DB16", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB16_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB16", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB16_PERF_SEL_TILE_WR_SENDS", "DB16", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB16_PERF_SEL_QUAD_WR_SENDS", "DB16", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB16_PERF_SEL_OP_PIPE_BUSY", "DB16", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB16_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB16", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB16_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB16", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB16_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB16", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB16_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB16", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB16_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB16", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB16_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB16", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb17CountersGfx11 = {
        {4, "DB17_PERF_SEL_SC_DB_TILE_TILES", "DB17", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB17_PERF_SEL_DB_SC_TILE_CULLED", "DB17", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB17_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB17", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB17_PERF_SEL_DB_CB_EXPORT_STALLS", "DB17", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB17_PERF_SEL_TILE_RD_SENDS", "DB17", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB17_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB17", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB17_PERF_SEL_TILE_WR_SENDS", "DB17", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB17_PERF_SEL_QUAD_WR_SENDS", "DB17", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB17_PERF_SEL_OP_PIPE_BUSY", "DB17", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB17_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB17", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB17_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB17", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB17_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB17", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB17_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB17", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB17_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB17", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB17_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB17", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb18CountersGfx11 = {
        {4, "DB18_PERF_SEL_SC_DB_TILE_TILES", "DB18", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB18_PERF_SEL_DB_SC_TILE_CULLED", "DB18", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB18_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB18", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB18_PERF_SEL_DB_CB_EXPORT_STALLS", "DB18", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB18_PERF_SEL_TILE_RD_SENDS", "DB18", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB18_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB18", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB18_PERF_SEL_TILE_WR_SENDS", "DB18", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB18_PERF_SEL_QUAD_WR_SENDS", "DB18", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB18_PERF_SEL_OP_PIPE_BUSY", "DB18", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB18_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB18", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB18_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB18", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB18_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB18", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB18_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB18", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB18_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB18", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB18_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB18", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb19CountersGfx11 = {
        {4, "DB19_PERF_SEL_SC_DB_TILE_TILES", "DB19", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB19_PERF_SEL_DB_SC_TILE_CULLED", "DB19", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB19_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB19", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB19_PERF_SEL_DB_CB_EXPORT_STALLS", "DB19", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB19_PERF_SEL_TILE_RD_SENDS", "DB19", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB19_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB19", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB19_PERF_SEL_TILE_WR_SENDS", "DB19", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB19_PERF_SEL_QUAD_WR_SENDS", "DB19", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB19_PERF_SEL_OP_PIPE_BUSY", "DB19", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB19_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB19", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB19_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB19", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB19_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB19", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB19_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB19", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB19_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB19", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB19_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB19", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb20CountersGfx11 = {
        {4, "DB20_PERF_SEL_SC_DB_TILE_TILES", "DB20", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB20_PERF_SEL_DB_SC_TILE_CULLED", "DB20", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB20_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB20", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB20_PERF_SEL_DB_CB_EXPORT_STALLS", "DB20", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB20_PERF_SEL_TILE_RD_SENDS", "DB20", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB20_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB20", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB20_PERF_SEL_TILE_WR_SENDS", "DB20", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB20_PERF_SEL_QUAD_WR_SENDS", "DB20", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB20_PERF_SEL_OP_PIPE_BUSY", "DB20", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB20_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB20", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB20_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB20", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB20_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB20", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB20_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB20", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB20_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB20", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB20_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB20", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb21CountersGfx11 = {
        {4, "DB21_PERF_SEL_SC_DB_TILE_TILES", "DB21", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB21_PERF_SEL_DB_SC_TILE_CULLED", "DB21", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB21_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB21", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB21_PERF_SEL_DB_CB_EXPORT_STALLS", "DB21", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB21_PERF_SEL_TILE_RD_SENDS", "DB21", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB21_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB21", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB21_PERF_SEL_TILE_WR_SENDS", "DB21", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB21_PERF_SEL_QUAD_WR_SENDS", "DB21", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB21_PERF_SEL_OP_PIPE_BUSY", "DB21", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB21_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB21", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB21_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB21", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB21_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB21", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB21_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB21", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB21_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB21", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB21_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB21", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb22CountersGfx11 = {
        {4, "DB22_PERF_SEL_SC_DB_TILE_TILES", "DB22", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB22_PERF_SEL_DB_SC_TILE_CULLED", "DB22", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB22_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB22", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB22_PERF_SEL_DB_CB_EXPORT_STALLS", "DB22", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB22_PERF_SEL_TILE_RD_SENDS", "DB22", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB22_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB22", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB22_PERF_SEL_TILE_WR_SENDS", "DB22", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB22_PERF_SEL_QUAD_WR_SENDS", "DB22", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB22_PERF_SEL_OP_PIPE_BUSY", "DB22", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB22_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB22", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB22_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB22", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB22_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB22", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB22_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB22", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB22_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB22", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB22_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB22", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kDb23CountersGfx11 = {
        {4, "DB23_PERF_SEL_SC_DB_TILE_TILES", "DB23", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {15, "DB23_PERF_SEL_DB_SC_TILE_CULLED", "DB23", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {28, "DB23_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB23", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {46, "DB23_PERF_SEL_DB_CB_EXPORT_STALLS", "DB23", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {48, "DB23_PERF_SEL_TILE_RD_SENDS", "DB23", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "DB23_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB23", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {60, "DB23_PERF_SEL_TILE_WR_SENDS", "DB23", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {63, "DB23_PERF_SEL_QUAD_WR_SENDS", "DB23", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {144, "DB23_PERF_SEL_OP_PIPE_BUSY", "DB23", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {174, "DB23_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB23", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {175, "DB23_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB23", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {176, "DB23_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB23", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {177, "DB23_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB23", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {178, "DB23_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB23", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {179, "DB23_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB23", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea0CountersGfx11 = {
        {55, "GCEA0_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA0", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA0_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA0", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea1CountersGfx11 = {
        {55, "GCEA1_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA1", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA1_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA1", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea2CountersGfx11 = {
        {55, "GCEA2_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA2", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA2_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA2", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea3CountersGfx11 = {
        {55, "GCEA3_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA3", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA3_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA3", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea4CountersGfx11 = {
        {55, "GCEA4_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA4", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA4_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA4", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea5CountersGfx11 = {
        {55, "GCEA5_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA5", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA5_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA5", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea6CountersGfx11 = {
        {55, "GCEA6_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA6", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA6_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA6", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea7CountersGfx11 = {
        {55, "GCEA7_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA7", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA7_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA7", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea8CountersGfx11 = {
        {55, "GCEA8_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA8", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA8_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA8", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea9CountersGfx11 = {
        {55, "GCEA9_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA9", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA9_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA9", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea10CountersGfx11 = {
        {55, "GCEA10_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA10", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA10_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA10", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea11CountersGfx11 = {
        {55, "GCEA11_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA11", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA11_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA11", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea12CountersGfx11 = {
        {55, "GCEA12_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA12", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA12_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA12", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea13CountersGfx11 = {
        {55, "GCEA13_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA13", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA13_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA13", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea14CountersGfx11 = {
        {55, "GCEA14_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA14", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA14_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA14", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea15CountersGfx11 = {
        {55, "GCEA15_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA15", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA15_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA15", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea16CountersGfx11 = {
        {55, "GCEA16_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA16", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA16_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA16", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea17CountersGfx11 = {
        {55, "GCEA17_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA17", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA17_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA17", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea18CountersGfx11 = {
        {55, "GCEA18_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA18", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA18_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA18", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea19CountersGfx11 = {
        {55, "GCEA19_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA19", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA19_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA19", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea20CountersGfx11 = {
        {55, "GCEA20_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA20", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA20_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA20", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea21CountersGfx11 = {
        {55, "GCEA21_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA21", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA21_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA21", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea22CountersGfx11 = {
        {55, "GCEA22_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA22", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA22_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA22", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea23CountersGfx11 = {
        {55, "GCEA23_PERF_SEL_SARB_DRAM_SIZE_REQ", "GCEA23", "55 | (size_p1 ) & (4(reqdram)) | DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA23_PERF_SEL_SARB_IO_SIZE_REQ", "GCEA23", "57 | (size_p1 ) & (4(reqio )) | I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGpuTimeCountersGfx11 = {
        {0, "GPUTime_BOTTOM_TO_BOTTOM_DURATION", "GPUTime", "delta between the previous command reaching bottom of pipe and the current command reaching bottom of pipe, will not include latency of first data to travel through pipeline, best for large data sets.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {1, "GPUTime_BOTTOM_TO_BOTTOM_START", "GPUTime", "time of the previous command reaching bottom of pipe", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {2, "GPUTime_BOTTOM_TO_BOTTOM_END", "GPUTime", "time of the current command reaching bottom of pipe", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {3, "GPUTime_TOP_TO_BOTTOM_DURATION", "GPUTime", "execution duration of the current command from top of pipe to bottom of pipe, may include overhead of time in queue", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {4, "GPUTime_TOP_TO_BOTTOM_START", "GPUTime", "time that the current command reaches the top of pipe", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {5, "GPUTime_TOP_TO_BOTTOM_END", "GPUTime", "time that the current command reaches the bottom of pipe", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
} // counter_gfx11

// clang-format on
