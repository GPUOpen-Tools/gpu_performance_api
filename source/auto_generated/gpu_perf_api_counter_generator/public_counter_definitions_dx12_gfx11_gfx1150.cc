//==============================================================================
// Copyright (c) 2010-2025 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief Public Counter Definitions for DX12 GFX11_GFX1150.
//==============================================================================

#include <array>
#include "gpu_perf_api_common/gpa_array_view.hpp"
// clang-format off
#include "gpu_perf_api_counter_generator/gpa_counter.h"
#include "auto_generated/gpu_perf_api_counter_generator/public_counter_definitions_dx12_gfx11_gfx1150.h"

// *** Note, this is an auto-generated file. Do not edit. Execute PublicCounterCompiler to rebuild.

#include "auto_generated/gpu_perf_api_counter_generator/gpa_hw_counter_gfx11_gfx1150.h"

namespace dx12_gfx11_gfx1150
{
bool UpdatePublicAsicSpecificCounters(GDT_HW_GENERATION desired_generation, GDT_HW_ASIC_TYPE asic_type, GpaDerivedCounters& c)
{
    UNREFERENCED_PARAMETER(desired_generation);
    UNREFERENCED_PARAMETER(c);  // Unreferenced if there are no ASIC specific block instance registers

    if (!counter_gfx11_gfx1150::MatchAsic(asic_type))
    {
        return false;
    }

    counter_gfx11_gfx1150::OverrideBlockInstanceCounters(asic_type);

    { // Index:0
        static constexpr std::array<GpaUInt32, 25> kHardwareCounters = {
                72260,
                72653,
                73046,
                73439,
                73832,
                74225,
                74618,
                75011,
                75404,
                75797,
                76190,
                76583,
                76976,
                77369,
                77762,
                78155,
                78548,
                78941,
                79334,
                79727,
                80120,
                80513,
                80906,
                81299,
                24,
        };
        c.UpdateAsicSpecificDerivedCounter("DepthStencilTestBusy",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24,24,/,(100),*");
    }
    { // Index:1
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72260,
                72653,
                73046,
                73439,
                73832,
                74225,
                74618,
                75011,
                75404,
                75797,
                76190,
                76583,
                76976,
                77369,
                77762,
                78155,
                78548,
                78941,
                79334,
                79727,
                80120,
                80513,
                80906,
                81299,
        };
        c.UpdateAsicSpecificDerivedCounter("DepthStencilTestBusyCycles",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24");
    }
    { // Index:2
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                72131,
                72524,
                72917,
                73310,
                73703,
                74096,
                74489,
                74882,
                75275,
                75668,
                76061,
                76454,
                76847,
                77240,
                77633,
                78026,
                78419,
                78812,
                79205,
                79598,
                79991,
                80384,
                80777,
                81170,
                72120,
                72513,
                72906,
                73299,
                73692,
                74085,
                74478,
                74871,
                75264,
                75657,
                76050,
                76443,
                76836,
                77229,
                77622,
                78015,
                78408,
                78801,
                79194,
                79587,
                79980,
                80373,
                80766,
                81159,
        };
        c.UpdateAsicSpecificDerivedCounter("HiZTilesAccepted",
                                           kHardwareCounters,
                                           "24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,-,(0),max,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,/,(100),*");
    }
    { // Index:3
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                72120,
                72513,
                72906,
                73299,
                73692,
                74085,
                74478,
                74871,
                75264,
                75657,
                76050,
                76443,
                76836,
                77229,
                77622,
                78015,
                78408,
                78801,
                79194,
                79587,
                79980,
                80373,
                80766,
                81159,
                72131,
                72524,
                72917,
                73310,
                73703,
                74096,
                74489,
                74882,
                75275,
                75668,
                76061,
                76454,
                76847,
                77240,
                77633,
                78026,
                78419,
                78812,
                79205,
                79598,
                79991,
                80384,
                80777,
                81170,
        };
        c.UpdateAsicSpecificDerivedCounter("HiZTilesAcceptedCount",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max");
    }
    { // Index:4
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72131,
                72524,
                72917,
                73310,
                73703,
                74096,
                74489,
                74882,
                75275,
                75668,
                76061,
                76454,
                76847,
                77240,
                77633,
                78026,
                78419,
                78812,
                79205,
                79598,
                79991,
                80384,
                80777,
                81170,
        };
        c.UpdateAsicSpecificDerivedCounter("HiZTilesRejectedCount",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24");
    }
    { // Index:5
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                72120,
                72513,
                72906,
                73299,
                73692,
                74085,
                74478,
                74871,
                75264,
                75657,
                76050,
                76443,
                76836,
                77229,
                77622,
                78015,
                78408,
                78801,
                79194,
                79587,
                79980,
                80373,
                80766,
                81159,
                72144,
                72537,
                72930,
                73323,
                73716,
                74109,
                74502,
                74895,
                75288,
                75681,
                76074,
                76467,
                76860,
                77253,
                77646,
                78039,
                78432,
                78825,
                79218,
                79611,
                80004,
                80397,
                80790,
                81183,
        };
        c.UpdateAsicSpecificDerivedCounter("PreZTilesDetailCulled",
                                           kHardwareCounters,
                                           "24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,/,(100),*");
    }
    { // Index:6
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72144,
                72537,
                72930,
                73323,
                73716,
                74109,
                74502,
                74895,
                75288,
                75681,
                76074,
                76467,
                76860,
                77253,
                77646,
                78039,
                78432,
                78825,
                79218,
                79611,
                80004,
                80397,
                80790,
                81183,
        };
        c.UpdateAsicSpecificDerivedCounter("PreZTilesDetailCulledCount",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24");
    }
    { // Index:7
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72120,
                72513,
                72906,
                73299,
                73692,
                74085,
                74478,
                74871,
                75264,
                75657,
                76050,
                76443,
                76836,
                77229,
                77622,
                78015,
                78408,
                78801,
                79194,
                79587,
                79980,
                80373,
                80766,
                81159,
        };
        c.UpdateAsicSpecificDerivedCounter("PreZTilesDetailSurvivingCount",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24");
    }
    { // Index:8
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                2069,
                2744,
                3419,
                4094,
                4769,
                5444,
                6119,
                6794,
                7469,
                8144,
                8819,
                9494,
                10169,
                10844,
                11519,
                12194,
                12869,
                13544,
                14219,
                14894,
                15569,
                16244,
                16919,
                17594,
                2145,
                2820,
                3495,
                4170,
                4845,
                5520,
                6195,
                6870,
                7545,
                8220,
                8895,
                9570,
                10245,
                10920,
                11595,
                12270,
                12945,
                13620,
                14295,
                14970,
                15645,
                16320,
                16995,
                17670,
        };
        c.UpdateAsicSpecificDerivedCounter("HiZQuadsCulled",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,/,(100),*");
    }
    { // Index:9
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                2069,
                2744,
                3419,
                4094,
                4769,
                5444,
                6119,
                6794,
                7469,
                8144,
                8819,
                9494,
                10169,
                10844,
                11519,
                12194,
                12869,
                13544,
                14219,
                14894,
                15569,
                16244,
                16919,
                17594,
                2145,
                2820,
                3495,
                4170,
                4845,
                5520,
                6195,
                6870,
                7545,
                8220,
                8895,
                9570,
                10245,
                10920,
                11595,
                12270,
                12945,
                13620,
                14295,
                14970,
                15645,
                16320,
                16995,
                17670,
        };
        c.UpdateAsicSpecificDerivedCounter("HiZQuadsCulledCount",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max");
    }
    { // Index:10
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                2145,
                2820,
                3495,
                4170,
                4845,
                5520,
                6195,
                6870,
                7545,
                8220,
                8895,
                9570,
                10245,
                10920,
                11595,
                12270,
                12945,
                13620,
                14295,
                14970,
                15645,
                16320,
                16995,
                17670,
        };
        c.UpdateAsicSpecificDerivedCounter("HiZQuadsAcceptedCount",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24");
    }
    { // Index:11
        static constexpr std::array<GpaUInt32, 72> kHardwareCounters = {
                2145,
                2820,
                3495,
                4170,
                4845,
                5520,
                6195,
                6870,
                7545,
                8220,
                8895,
                9570,
                10245,
                10920,
                11595,
                12270,
                12945,
                13620,
                14295,
                14970,
                15645,
                16320,
                16995,
                17670,
                2169,
                2844,
                3519,
                4194,
                4869,
                5544,
                6219,
                6894,
                7569,
                8244,
                8919,
                9594,
                10269,
                10944,
                11619,
                12294,
                12969,
                13644,
                14319,
                14994,
                15669,
                16344,
                17019,
                17694,
                2069,
                2744,
                3419,
                4094,
                4769,
                5444,
                6119,
                6794,
                7469,
                8144,
                8819,
                9494,
                10169,
                10844,
                11519,
                12194,
                12869,
                13544,
                14219,
                14894,
                15569,
                16244,
                16919,
                17594,
        };
        c.UpdateAsicSpecificDerivedCounter("PreZQuadsCulled",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,sum24,/,(100),*");
    }
    { // Index:12
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                2145,
                2820,
                3495,
                4170,
                4845,
                5520,
                6195,
                6870,
                7545,
                8220,
                8895,
                9570,
                10245,
                10920,
                11595,
                12270,
                12945,
                13620,
                14295,
                14970,
                15645,
                16320,
                16995,
                17670,
                2169,
                2844,
                3519,
                4194,
                4869,
                5544,
                6219,
                6894,
                7569,
                8244,
                8919,
                9594,
                10269,
                10944,
                11619,
                12294,
                12969,
                13644,
                14319,
                14994,
                15669,
                16344,
                17019,
                17694,
        };
        c.UpdateAsicSpecificDerivedCounter("PreZQuadsCulledCount",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max");
    }
    { // Index:13
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                2169,
                2844,
                3519,
                4194,
                4869,
                5544,
                6219,
                6894,
                7569,
                8244,
                8919,
                9594,
                10269,
                10944,
                11619,
                12294,
                12969,
                13644,
                14319,
                14994,
                15669,
                16344,
                17019,
                17694,
        };
        c.UpdateAsicSpecificDerivedCounter("PreZQuadsSurvivingCount",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24");
    }
    { // Index:14
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                2169,
                2844,
                3519,
                4194,
                4869,
                5544,
                6219,
                6894,
                7569,
                8244,
                8919,
                9594,
                10269,
                10944,
                11619,
                12294,
                12969,
                13644,
                14319,
                14994,
                15669,
                16344,
                17019,
                17694,
                2069,
                2744,
                3419,
                4094,
                4769,
                5444,
                6119,
                6794,
                7469,
                8144,
                8819,
                9494,
                10169,
                10844,
                11519,
                12194,
                12869,
                13544,
                14219,
                14894,
                15569,
                16244,
                16919,
                17594,
        };
        c.UpdateAsicSpecificDerivedCounter("PostZQuads",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,/,(100),*");
    }
    { // Index:15
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                2169,
                2844,
                3519,
                4194,
                4869,
                5544,
                6219,
                6894,
                7569,
                8244,
                8919,
                9594,
                10269,
                10944,
                11619,
                12294,
                12969,
                13644,
                14319,
                14994,
                15669,
                16344,
                17019,
                17694,
        };
        c.UpdateAsicSpecificDerivedCounter("PostZQuadCount",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24");
    }
    { // Index:16
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72293,
                72686,
                73079,
                73472,
                73865,
                74258,
                74651,
                75044,
                75437,
                75830,
                76223,
                76616,
                77009,
                77402,
                77795,
                78188,
                78581,
                78974,
                79367,
                79760,
                80153,
                80546,
                80939,
                81332,
        };
        c.UpdateAsicSpecificDerivedCounter("PreZSamplesPassing",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24");
    }
    { // Index:17
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72295,
                72688,
                73081,
                73474,
                73867,
                74260,
                74653,
                75046,
                75439,
                75832,
                76225,
                76618,
                77011,
                77404,
                77797,
                78190,
                78583,
                78976,
                79369,
                79762,
                80155,
                80548,
                80941,
                81334,
        };
        c.UpdateAsicSpecificDerivedCounter("PreZSamplesFailingS",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24");
    }
    { // Index:18
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72294,
                72687,
                73080,
                73473,
                73866,
                74259,
                74652,
                75045,
                75438,
                75831,
                76224,
                76617,
                77010,
                77403,
                77796,
                78189,
                78582,
                78975,
                79368,
                79761,
                80154,
                80547,
                80940,
                81333,
        };
        c.UpdateAsicSpecificDerivedCounter("PreZSamplesFailingZ",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24");
    }
    { // Index:19
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72290,
                72683,
                73076,
                73469,
                73862,
                74255,
                74648,
                75041,
                75434,
                75827,
                76220,
                76613,
                77006,
                77399,
                77792,
                78185,
                78578,
                78971,
                79364,
                79757,
                80150,
                80543,
                80936,
                81329,
        };
        c.UpdateAsicSpecificDerivedCounter("PostZSamplesPassing",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24");
    }
    { // Index:20
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72292,
                72685,
                73078,
                73471,
                73864,
                74257,
                74650,
                75043,
                75436,
                75829,
                76222,
                76615,
                77008,
                77401,
                77794,
                78187,
                78580,
                78973,
                79366,
                79759,
                80152,
                80545,
                80938,
                81331,
        };
        c.UpdateAsicSpecificDerivedCounter("PostZSamplesFailingS",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24");
    }
    { // Index:21
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72291,
                72684,
                73077,
                73470,
                73863,
                74256,
                74649,
                75042,
                75435,
                75828,
                76221,
                76614,
                77007,
                77400,
                77793,
                78186,
                78579,
                78972,
                79365,
                79758,
                80151,
                80544,
                80937,
                81330,
        };
        c.UpdateAsicSpecificDerivedCounter("PostZSamplesFailingZ",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24");
    }
    { // Index:22
        static constexpr std::array<GpaUInt32, 25> kHardwareCounters = {
                72162,
                72555,
                72948,
                73341,
                73734,
                74127,
                74520,
                74913,
                75306,
                75699,
                76092,
                76485,
                76878,
                77271,
                77664,
                78057,
                78450,
                78843,
                79236,
                79629,
                80022,
                80415,
                80808,
                81201,
                24,
        };
        c.UpdateAsicSpecificDerivedCounter("ZUnitStalled",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24,24,/,(100),*");
    }
    { // Index:23
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72162,
                72555,
                72948,
                73341,
                73734,
                74127,
                74520,
                74913,
                75306,
                75699,
                76092,
                76485,
                76878,
                77271,
                77664,
                78057,
                78450,
                78843,
                79236,
                79629,
                80022,
                80415,
                80808,
                81201,
        };
        c.UpdateAsicSpecificDerivedCounter("ZUnitStalledCycles",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24");
    }
    { // Index:24
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                72164,
                72557,
                72950,
                73343,
                73736,
                74129,
                74522,
                74915,
                75308,
                75701,
                76094,
                76487,
                76880,
                77273,
                77666,
                78059,
                78452,
                78845,
                79238,
                79631,
                80024,
                80417,
                80810,
                81203,
                72171,
                72564,
                72957,
                73350,
                73743,
                74136,
                74529,
                74922,
                75315,
                75708,
                76101,
                76494,
                76887,
                77280,
                77673,
                78066,
                78459,
                78852,
                79245,
                79638,
                80031,
                80424,
                80817,
                81210,
        };
        c.UpdateAsicSpecificDerivedCounter("DBMemRead",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,(256),*,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,(32),*,+");
    }
    { // Index:25
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                72176,
                72569,
                72962,
                73355,
                73748,
                74141,
                74534,
                74927,
                75320,
                75713,
                76106,
                76499,
                76892,
                77285,
                77678,
                78071,
                78464,
                78857,
                79250,
                79643,
                80036,
                80429,
                80822,
                81215,
                72179,
                72572,
                72965,
                73358,
                73751,
                74144,
                74537,
                74930,
                75323,
                75716,
                76109,
                76502,
                76895,
                77288,
                77681,
                78074,
                78467,
                78860,
                79253,
                79646,
                80039,
                80432,
                80825,
                81218,
        };
        c.UpdateAsicSpecificDerivedCounter("DBMemWritten",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,(32),*,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,(32),*,+");
    }
    { // Index:26
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                64541,
                64620,
                64699,
                64778,
                64857,
                64936,
                65015,
                65094,
                65173,
                65252,
                65331,
                65410,
                65489,
                65568,
                65647,
                65726,
                65805,
                65884,
                65963,
                66042,
                66121,
                66200,
                66279,
                66358,
                66437,
                66516,
                66595,
                66674,
                66753,
                66832,
                66911,
                66990,
                67069,
                67148,
                67227,
                67306,
                67385,
                67464,
                67543,
                67622,
                67701,
                67780,
                67859,
                67938,
                68017,
                68096,
                68175,
                68254,
                68333,
                68412,
                68491,
                68570,
                68649,
                68728,
                68807,
                68886,
                68965,
                69044,
                69123,
                69202,
                69281,
                69360,
                69439,
                69518,
                69597,
                69676,
                69755,
                69834,
                69913,
                69992,
                70071,
                70150,
                70229,
                70308,
                70387,
                70466,
                70545,
                70624,
                70703,
                70782,
                70861,
                70940,
                71019,
                71098,
                71177,
                71256,
                71335,
                71414,
                71493,
                71572,
                71651,
                71730,
                71809,
                71888,
                71967,
                72046,
                64549,
                64628,
                64707,
                64786,
                64865,
                64944,
                65023,
                65102,
                65181,
                65260,
                65339,
                65418,
                65497,
                65576,
                65655,
                65734,
                65813,
                65892,
                65971,
                66050,
                66129,
                66208,
                66287,
                66366,
                66445,
                66524,
                66603,
                66682,
                66761,
                66840,
                66919,
                66998,
                67077,
                67156,
                67235,
                67314,
                67393,
                67472,
                67551,
                67630,
                67709,
                67788,
                67867,
                67946,
                68025,
                68104,
                68183,
                68262,
                68341,
                68420,
                68499,
                68578,
                68657,
                68736,
                68815,
                68894,
                68973,
                69052,
                69131,
                69210,
                69289,
                69368,
                69447,
                69526,
                69605,
                69684,
                69763,
                69842,
                69921,
                70000,
                70079,
                70158,
                70237,
                70316,
                70395,
                70474,
                70553,
                70632,
                70711,
                70790,
                70869,
                70948,
                71027,
                71106,
                71185,
                71264,
                71343,
                71422,
                71501,
                71580,
                71659,
                71738,
                71817,
                71896,
                71975,
                72054,
        };
        c.UpdateAsicSpecificDerivedCounter("L0CacheHit",
                                           kHardwareCounters,
                                           "(0),(1),96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,/,-,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,ifnotzero");
    }
    { // Index:27
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                64541,
                64620,
                64699,
                64778,
                64857,
                64936,
                65015,
                65094,
                65173,
                65252,
                65331,
                65410,
                65489,
                65568,
                65647,
                65726,
                65805,
                65884,
                65963,
                66042,
                66121,
                66200,
                66279,
                66358,
                66437,
                66516,
                66595,
                66674,
                66753,
                66832,
                66911,
                66990,
                67069,
                67148,
                67227,
                67306,
                67385,
                67464,
                67543,
                67622,
                67701,
                67780,
                67859,
                67938,
                68017,
                68096,
                68175,
                68254,
                68333,
                68412,
                68491,
                68570,
                68649,
                68728,
                68807,
                68886,
                68965,
                69044,
                69123,
                69202,
                69281,
                69360,
                69439,
                69518,
                69597,
                69676,
                69755,
                69834,
                69913,
                69992,
                70071,
                70150,
                70229,
                70308,
                70387,
                70466,
                70545,
                70624,
                70703,
                70782,
                70861,
                70940,
                71019,
                71098,
                71177,
                71256,
                71335,
                71414,
                71493,
                71572,
                71651,
                71730,
                71809,
                71888,
                71967,
                72046,
        };
        c.UpdateAsicSpecificDerivedCounter("L0CacheRequestCount",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96");
    }
    { // Index:28
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                64541,
                64620,
                64699,
                64778,
                64857,
                64936,
                65015,
                65094,
                65173,
                65252,
                65331,
                65410,
                65489,
                65568,
                65647,
                65726,
                65805,
                65884,
                65963,
                66042,
                66121,
                66200,
                66279,
                66358,
                66437,
                66516,
                66595,
                66674,
                66753,
                66832,
                66911,
                66990,
                67069,
                67148,
                67227,
                67306,
                67385,
                67464,
                67543,
                67622,
                67701,
                67780,
                67859,
                67938,
                68017,
                68096,
                68175,
                68254,
                68333,
                68412,
                68491,
                68570,
                68649,
                68728,
                68807,
                68886,
                68965,
                69044,
                69123,
                69202,
                69281,
                69360,
                69439,
                69518,
                69597,
                69676,
                69755,
                69834,
                69913,
                69992,
                70071,
                70150,
                70229,
                70308,
                70387,
                70466,
                70545,
                70624,
                70703,
                70782,
                70861,
                70940,
                71019,
                71098,
                71177,
                71256,
                71335,
                71414,
                71493,
                71572,
                71651,
                71730,
                71809,
                71888,
                71967,
                72046,
                64549,
                64628,
                64707,
                64786,
                64865,
                64944,
                65023,
                65102,
                65181,
                65260,
                65339,
                65418,
                65497,
                65576,
                65655,
                65734,
                65813,
                65892,
                65971,
                66050,
                66129,
                66208,
                66287,
                66366,
                66445,
                66524,
                66603,
                66682,
                66761,
                66840,
                66919,
                66998,
                67077,
                67156,
                67235,
                67314,
                67393,
                67472,
                67551,
                67630,
                67709,
                67788,
                67867,
                67946,
                68025,
                68104,
                68183,
                68262,
                68341,
                68420,
                68499,
                68578,
                68657,
                68736,
                68815,
                68894,
                68973,
                69052,
                69131,
                69210,
                69289,
                69368,
                69447,
                69526,
                69605,
                69684,
                69763,
                69842,
                69921,
                70000,
                70079,
                70158,
                70237,
                70316,
                70395,
                70474,
                70553,
                70632,
                70711,
                70790,
                70869,
                70948,
                71027,
                71106,
                71185,
                71264,
                71343,
                71422,
                71501,
                71580,
                71659,
                71738,
                71817,
                71896,
                71975,
                72054,
        };
        c.UpdateAsicSpecificDerivedCounter("L0CacheHitCount",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,-");
    }
    { // Index:29
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                64549,
                64628,
                64707,
                64786,
                64865,
                64944,
                65023,
                65102,
                65181,
                65260,
                65339,
                65418,
                65497,
                65576,
                65655,
                65734,
                65813,
                65892,
                65971,
                66050,
                66129,
                66208,
                66287,
                66366,
                66445,
                66524,
                66603,
                66682,
                66761,
                66840,
                66919,
                66998,
                67077,
                67156,
                67235,
                67314,
                67393,
                67472,
                67551,
                67630,
                67709,
                67788,
                67867,
                67946,
                68025,
                68104,
                68183,
                68262,
                68341,
                68420,
                68499,
                68578,
                68657,
                68736,
                68815,
                68894,
                68973,
                69052,
                69131,
                69210,
                69289,
                69368,
                69447,
                69526,
                69605,
                69684,
                69763,
                69842,
                69921,
                70000,
                70079,
                70158,
                70237,
                70316,
                70395,
                70474,
                70553,
                70632,
                70711,
                70790,
                70869,
                70948,
                71027,
                71106,
                71185,
                71264,
                71343,
                71422,
                71501,
                71580,
                71659,
                71738,
                71817,
                71896,
                71975,
                72054,
        };
        c.UpdateAsicSpecificDerivedCounter("L0CacheMissCount",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96");
    }
    { // Index:30
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                64578,
                64657,
                64736,
                64815,
                64894,
                64973,
                65052,
                65131,
                65210,
                65289,
                65368,
                65447,
                65526,
                65605,
                65684,
                65763,
                65842,
                65921,
                66000,
                66079,
                66158,
                66237,
                66316,
                66395,
                66474,
                66553,
                66632,
                66711,
                66790,
                66869,
                66948,
                67027,
                67106,
                67185,
                67264,
                67343,
                67422,
                67501,
                67580,
                67659,
                67738,
                67817,
                67896,
                67975,
                68054,
                68133,
                68212,
                68291,
                68370,
                68449,
                68528,
                68607,
                68686,
                68765,
                68844,
                68923,
                69002,
                69081,
                69160,
                69239,
                69318,
                69397,
                69476,
                69555,
                69634,
                69713,
                69792,
                69871,
                69950,
                70029,
                70108,
                70187,
                70266,
                70345,
                70424,
                70503,
                70582,
                70661,
                70740,
                70819,
                70898,
                70977,
                71056,
                71135,
                71214,
                71293,
                71372,
                71451,
                71530,
                71609,
                71688,
                71767,
                71846,
                71925,
                72004,
                72083,
        };
        c.UpdateAsicSpecificDerivedCounter("L0TagConflictReadStalledCycles",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96");
    }
    { // Index:31
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                64579,
                64658,
                64737,
                64816,
                64895,
                64974,
                65053,
                65132,
                65211,
                65290,
                65369,
                65448,
                65527,
                65606,
                65685,
                65764,
                65843,
                65922,
                66001,
                66080,
                66159,
                66238,
                66317,
                66396,
                66475,
                66554,
                66633,
                66712,
                66791,
                66870,
                66949,
                67028,
                67107,
                67186,
                67265,
                67344,
                67423,
                67502,
                67581,
                67660,
                67739,
                67818,
                67897,
                67976,
                68055,
                68134,
                68213,
                68292,
                68371,
                68450,
                68529,
                68608,
                68687,
                68766,
                68845,
                68924,
                69003,
                69082,
                69161,
                69240,
                69319,
                69398,
                69477,
                69556,
                69635,
                69714,
                69793,
                69872,
                69951,
                70030,
                70109,
                70188,
                70267,
                70346,
                70425,
                70504,
                70583,
                70662,
                70741,
                70820,
                70899,
                70978,
                71057,
                71136,
                71215,
                71294,
                71373,
                71452,
                71531,
                71610,
                71689,
                71768,
                71847,
                71926,
                72005,
                72084,
        };
        c.UpdateAsicSpecificDerivedCounter("L0TagConflictWriteStalledCycles",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96");
    }
    { // Index:32
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                64580,
                64659,
                64738,
                64817,
                64896,
                64975,
                65054,
                65133,
                65212,
                65291,
                65370,
                65449,
                65528,
                65607,
                65686,
                65765,
                65844,
                65923,
                66002,
                66081,
                66160,
                66239,
                66318,
                66397,
                66476,
                66555,
                66634,
                66713,
                66792,
                66871,
                66950,
                67029,
                67108,
                67187,
                67266,
                67345,
                67424,
                67503,
                67582,
                67661,
                67740,
                67819,
                67898,
                67977,
                68056,
                68135,
                68214,
                68293,
                68372,
                68451,
                68530,
                68609,
                68688,
                68767,
                68846,
                68925,
                69004,
                69083,
                69162,
                69241,
                69320,
                69399,
                69478,
                69557,
                69636,
                69715,
                69794,
                69873,
                69952,
                70031,
                70110,
                70189,
                70268,
                70347,
                70426,
                70505,
                70584,
                70663,
                70742,
                70821,
                70900,
                70979,
                71058,
                71137,
                71216,
                71295,
                71374,
                71453,
                71532,
                71611,
                71690,
                71769,
                71848,
                71927,
                72006,
                72085,
        };
        c.UpdateAsicSpecificDerivedCounter("L0TagConflictAtomicStalledCycles",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96");
    }
    { // Index:33
        static constexpr std::array<GpaUInt32, 97> kHardwareCounters = {
                64571,
                64650,
                64729,
                64808,
                64887,
                64966,
                65045,
                65124,
                65203,
                65282,
                65361,
                65440,
                65519,
                65598,
                65677,
                65756,
                65835,
                65914,
                65993,
                66072,
                66151,
                66230,
                66309,
                66388,
                66467,
                66546,
                66625,
                66704,
                66783,
                66862,
                66941,
                67020,
                67099,
                67178,
                67257,
                67336,
                67415,
                67494,
                67573,
                67652,
                67731,
                67810,
                67889,
                67968,
                68047,
                68126,
                68205,
                68284,
                68363,
                68442,
                68521,
                68600,
                68679,
                68758,
                68837,
                68916,
                68995,
                69074,
                69153,
                69232,
                69311,
                69390,
                69469,
                69548,
                69627,
                69706,
                69785,
                69864,
                69943,
                70022,
                70101,
                70180,
                70259,
                70338,
                70417,
                70496,
                70575,
                70654,
                70733,
                70812,
                70891,
                70970,
                71049,
                71128,
                71207,
                71286,
                71365,
                71444,
                71523,
                71602,
                71681,
                71760,
                71839,
                71918,
                71997,
                72076,
                24,
        };
        c.UpdateAsicSpecificDerivedCounter("MemUnitStalled",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96,96,/,(100),*");
    }
    { // Index:34
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                64571,
                64650,
                64729,
                64808,
                64887,
                64966,
                65045,
                65124,
                65203,
                65282,
                65361,
                65440,
                65519,
                65598,
                65677,
                65756,
                65835,
                65914,
                65993,
                66072,
                66151,
                66230,
                66309,
                66388,
                66467,
                66546,
                66625,
                66704,
                66783,
                66862,
                66941,
                67020,
                67099,
                67178,
                67257,
                67336,
                67415,
                67494,
                67573,
                67652,
                67731,
                67810,
                67889,
                67968,
                68047,
                68126,
                68205,
                68284,
                68363,
                68442,
                68521,
                68600,
                68679,
                68758,
                68837,
                68916,
                68995,
                69074,
                69153,
                69232,
                69311,
                69390,
                69469,
                69548,
                69627,
                69706,
                69785,
                69864,
                69943,
                70022,
                70101,
                70180,
                70259,
                70338,
                70417,
                70496,
                70575,
                70654,
                70733,
                70812,
                70891,
                70970,
                71049,
                71128,
                71207,
                71286,
                71365,
                71444,
                71523,
                71602,
                71681,
                71760,
                71839,
                71918,
                71997,
                72076,
        };
        c.UpdateAsicSpecificDerivedCounter("MemUnitStalledCycles",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96");
    }
    { // Index:35
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                44682,
                44890,
                45098,
                45306,
                45514,
                45722,
                45930,
                46138,
                46346,
                46554,
                46762,
                46970,
                47178,
                47386,
                47594,
                47802,
                48010,
                48218,
                48426,
                48634,
                48842,
                49050,
                49258,
                49466,
                49674,
                49882,
                50090,
                50298,
                50506,
                50714,
                50922,
                51130,
                51338,
                51546,
                51754,
                51962,
                52170,
                52378,
                52586,
                52794,
                53002,
                53210,
                53418,
                53626,
                53834,
                54042,
                54250,
                54458,
                54666,
                54874,
                55082,
                55290,
                55498,
                55706,
                55914,
                56122,
                56330,
                56538,
                56746,
                56954,
                57162,
                57370,
                57578,
                57786,
                57994,
                58202,
                58410,
                58618,
                58826,
                59034,
                59242,
                59450,
                59658,
                59866,
                60074,
                60282,
                60490,
                60698,
                60906,
                61114,
                61322,
                61530,
                61738,
                61946,
                62154,
                62362,
                62570,
                62778,
                62986,
                63194,
                63402,
                63610,
                63818,
                64026,
                64234,
                64442,
        };
        c.UpdateAsicSpecificDerivedCounter("RayTriTests",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96");
    }
    { // Index:36
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                44680,
                44888,
                45096,
                45304,
                45512,
                45720,
                45928,
                46136,
                46344,
                46552,
                46760,
                46968,
                47176,
                47384,
                47592,
                47800,
                48008,
                48216,
                48424,
                48632,
                48840,
                49048,
                49256,
                49464,
                49672,
                49880,
                50088,
                50296,
                50504,
                50712,
                50920,
                51128,
                51336,
                51544,
                51752,
                51960,
                52168,
                52376,
                52584,
                52792,
                53000,
                53208,
                53416,
                53624,
                53832,
                54040,
                54248,
                54456,
                54664,
                54872,
                55080,
                55288,
                55496,
                55704,
                55912,
                56120,
                56328,
                56536,
                56744,
                56952,
                57160,
                57368,
                57576,
                57784,
                57992,
                58200,
                58408,
                58616,
                58824,
                59032,
                59240,
                59448,
                59656,
                59864,
                60072,
                60280,
                60488,
                60696,
                60904,
                61112,
                61320,
                61528,
                61736,
                61944,
                62152,
                62360,
                62568,
                62776,
                62984,
                63192,
                63400,
                63608,
                63816,
                64024,
                64232,
                64440,
                44681,
                44889,
                45097,
                45305,
                45513,
                45721,
                45929,
                46137,
                46345,
                46553,
                46761,
                46969,
                47177,
                47385,
                47593,
                47801,
                48009,
                48217,
                48425,
                48633,
                48841,
                49049,
                49257,
                49465,
                49673,
                49881,
                50089,
                50297,
                50505,
                50713,
                50921,
                51129,
                51337,
                51545,
                51753,
                51961,
                52169,
                52377,
                52585,
                52793,
                53001,
                53209,
                53417,
                53625,
                53833,
                54041,
                54249,
                54457,
                54665,
                54873,
                55081,
                55289,
                55497,
                55705,
                55913,
                56121,
                56329,
                56537,
                56745,
                56953,
                57161,
                57369,
                57577,
                57785,
                57993,
                58201,
                58409,
                58617,
                58825,
                59033,
                59241,
                59449,
                59657,
                59865,
                60073,
                60281,
                60489,
                60697,
                60905,
                61113,
                61321,
                61529,
                61737,
                61945,
                62153,
                62361,
                62569,
                62777,
                62985,
                63193,
                63401,
                63609,
                63817,
                64025,
                64233,
                64441,
        };
        c.UpdateAsicSpecificDerivedCounter("RayBoxTests",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,sum2");
    }
    { // Index:37
        static constexpr std::array<GpaUInt32, 288> kHardwareCounters = {
                44682,
                44890,
                45098,
                45306,
                45514,
                45722,
                45930,
                46138,
                46346,
                46554,
                46762,
                46970,
                47178,
                47386,
                47594,
                47802,
                48010,
                48218,
                48426,
                48634,
                48842,
                49050,
                49258,
                49466,
                49674,
                49882,
                50090,
                50298,
                50506,
                50714,
                50922,
                51130,
                51338,
                51546,
                51754,
                51962,
                52170,
                52378,
                52586,
                52794,
                53002,
                53210,
                53418,
                53626,
                53834,
                54042,
                54250,
                54458,
                54666,
                54874,
                55082,
                55290,
                55498,
                55706,
                55914,
                56122,
                56330,
                56538,
                56746,
                56954,
                57162,
                57370,
                57578,
                57786,
                57994,
                58202,
                58410,
                58618,
                58826,
                59034,
                59242,
                59450,
                59658,
                59866,
                60074,
                60282,
                60490,
                60698,
                60906,
                61114,
                61322,
                61530,
                61738,
                61946,
                62154,
                62362,
                62570,
                62778,
                62986,
                63194,
                63402,
                63610,
                63818,
                64026,
                64234,
                64442,
                44680,
                44888,
                45096,
                45304,
                45512,
                45720,
                45928,
                46136,
                46344,
                46552,
                46760,
                46968,
                47176,
                47384,
                47592,
                47800,
                48008,
                48216,
                48424,
                48632,
                48840,
                49048,
                49256,
                49464,
                49672,
                49880,
                50088,
                50296,
                50504,
                50712,
                50920,
                51128,
                51336,
                51544,
                51752,
                51960,
                52168,
                52376,
                52584,
                52792,
                53000,
                53208,
                53416,
                53624,
                53832,
                54040,
                54248,
                54456,
                54664,
                54872,
                55080,
                55288,
                55496,
                55704,
                55912,
                56120,
                56328,
                56536,
                56744,
                56952,
                57160,
                57368,
                57576,
                57784,
                57992,
                58200,
                58408,
                58616,
                58824,
                59032,
                59240,
                59448,
                59656,
                59864,
                60072,
                60280,
                60488,
                60696,
                60904,
                61112,
                61320,
                61528,
                61736,
                61944,
                62152,
                62360,
                62568,
                62776,
                62984,
                63192,
                63400,
                63608,
                63816,
                64024,
                64232,
                64440,
                44681,
                44889,
                45097,
                45305,
                45513,
                45721,
                45929,
                46137,
                46345,
                46553,
                46761,
                46969,
                47177,
                47385,
                47593,
                47801,
                48009,
                48217,
                48425,
                48633,
                48841,
                49049,
                49257,
                49465,
                49673,
                49881,
                50089,
                50297,
                50505,
                50713,
                50921,
                51129,
                51337,
                51545,
                51753,
                51961,
                52169,
                52377,
                52585,
                52793,
                53001,
                53209,
                53417,
                53625,
                53833,
                54041,
                54249,
                54457,
                54665,
                54873,
                55081,
                55289,
                55497,
                55705,
                55913,
                56121,
                56329,
                56537,
                56745,
                56953,
                57161,
                57369,
                57577,
                57785,
                57993,
                58201,
                58409,
                58617,
                58825,
                59033,
                59241,
                59449,
                59657,
                59865,
                60073,
                60281,
                60489,
                60697,
                60905,
                61113,
                61321,
                61529,
                61737,
                61945,
                62153,
                62361,
                62569,
                62777,
                62985,
                63193,
                63401,
                63609,
                63817,
                64025,
                64233,
                64441,
        };
        c.UpdateAsicSpecificDerivedCounter("TotalRayTests",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,sum2,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,sum96,sum2");
    }
    { // Index:38
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                44646,
                44854,
                45062,
                45270,
                45478,
                45686,
                45894,
                46102,
                46310,
                46518,
                46726,
                46934,
                47142,
                47350,
                47558,
                47766,
                47974,
                48182,
                48390,
                48598,
                48806,
                49014,
                49222,
                49430,
                49638,
                49846,
                50054,
                50262,
                50470,
                50678,
                50886,
                51094,
                51302,
                51510,
                51718,
                51926,
                52134,
                52342,
                52550,
                52758,
                52966,
                53174,
                53382,
                53590,
                53798,
                54006,
                54214,
                54422,
                54630,
                54838,
                55046,
                55254,
                55462,
                55670,
                55878,
                56086,
                56294,
                56502,
                56710,
                56918,
                57126,
                57334,
                57542,
                57750,
                57958,
                58166,
                58374,
                58582,
                58790,
                58998,
                59206,
                59414,
                59622,
                59830,
                60038,
                60246,
                60454,
                60662,
                60870,
                61078,
                61286,
                61494,
                61702,
                61910,
                62118,
                62326,
                62534,
                62742,
                62950,
                63158,
                63366,
                63574,
                63782,
                63990,
                64198,
                64406,
        };
        c.UpdateAsicSpecificDerivedCounter("RayTestsPerWave",
                                           kHardwareCounters,
                                           "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96");
    }
    return true;
}

}  // namespace dx12_gfx11_gfx1150

// clang-format on

