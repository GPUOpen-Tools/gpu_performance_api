//==============================================================================
// Copyright (c) 2019-2021 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief  GPA hardware exposed counter info for GFX8.
//==============================================================================

// This file is autogenerated by the ConvertHWEnums project.

#include "gpu_perf_api_counter_generator/gpa_counter.h"
#include "gpu_performance_api/gpu_perf_api_types.h"

namespace counter_gfx8
{

    GpaHardwareCounterDesc kCb0ExposedCountersGfx8[] = {
    {7, "CB0_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB0", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB0_PERF_SEL_CM_MC_WRITE_REQUEST", "CB0", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB0_PERF_SEL_FC_MC_WRITE_REQUEST", "CB0", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB0_PERF_SEL_CC_MC_WRITE_REQUEST", "CB0", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB0_PERF_SEL_CM_MC_READ_REQUEST", "CB0", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB0_PERF_SEL_FC_MC_READ_REQUEST", "CB0", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB0_PERF_SEL_CC_MC_READ_REQUEST", "CB0", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB0_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB0", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB0_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB0", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB0_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB0", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb1ExposedCountersGfx8[] = {
    {7, "CB1_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB1", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB1_PERF_SEL_CM_MC_WRITE_REQUEST", "CB1", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB1_PERF_SEL_FC_MC_WRITE_REQUEST", "CB1", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB1_PERF_SEL_CC_MC_WRITE_REQUEST", "CB1", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB1_PERF_SEL_CM_MC_READ_REQUEST", "CB1", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB1_PERF_SEL_FC_MC_READ_REQUEST", "CB1", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB1_PERF_SEL_CC_MC_READ_REQUEST", "CB1", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB1_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB1", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB1_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB1", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB1_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB1", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb2ExposedCountersGfx8[] = {
    {7, "CB2_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB2", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB2_PERF_SEL_CM_MC_WRITE_REQUEST", "CB2", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB2_PERF_SEL_FC_MC_WRITE_REQUEST", "CB2", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB2_PERF_SEL_CC_MC_WRITE_REQUEST", "CB2", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB2_PERF_SEL_CM_MC_READ_REQUEST", "CB2", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB2_PERF_SEL_FC_MC_READ_REQUEST", "CB2", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB2_PERF_SEL_CC_MC_READ_REQUEST", "CB2", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB2_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB2", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB2_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB2", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB2_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB2", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb3ExposedCountersGfx8[] = {
    {7, "CB3_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB3", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB3_PERF_SEL_CM_MC_WRITE_REQUEST", "CB3", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB3_PERF_SEL_FC_MC_WRITE_REQUEST", "CB3", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB3_PERF_SEL_CC_MC_WRITE_REQUEST", "CB3", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB3_PERF_SEL_CM_MC_READ_REQUEST", "CB3", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB3_PERF_SEL_FC_MC_READ_REQUEST", "CB3", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB3_PERF_SEL_CC_MC_READ_REQUEST", "CB3", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB3_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB3", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB3_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB3", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB3_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB3", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb4ExposedCountersGfx8[] = {
    {7, "CB4_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB4", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB4_PERF_SEL_CM_MC_WRITE_REQUEST", "CB4", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB4_PERF_SEL_FC_MC_WRITE_REQUEST", "CB4", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB4_PERF_SEL_CC_MC_WRITE_REQUEST", "CB4", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB4_PERF_SEL_CM_MC_READ_REQUEST", "CB4", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB4_PERF_SEL_FC_MC_READ_REQUEST", "CB4", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB4_PERF_SEL_CC_MC_READ_REQUEST", "CB4", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB4_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB4", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB4_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB4", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB4_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB4", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb5ExposedCountersGfx8[] = {
    {7, "CB5_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB5", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB5_PERF_SEL_CM_MC_WRITE_REQUEST", "CB5", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB5_PERF_SEL_FC_MC_WRITE_REQUEST", "CB5", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB5_PERF_SEL_CC_MC_WRITE_REQUEST", "CB5", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB5_PERF_SEL_CM_MC_READ_REQUEST", "CB5", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB5_PERF_SEL_FC_MC_READ_REQUEST", "CB5", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB5_PERF_SEL_CC_MC_READ_REQUEST", "CB5", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB5_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB5", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB5_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB5", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB5_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB5", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb6ExposedCountersGfx8[] = {
    {7, "CB6_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB6", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB6_PERF_SEL_CM_MC_WRITE_REQUEST", "CB6", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB6_PERF_SEL_FC_MC_WRITE_REQUEST", "CB6", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB6_PERF_SEL_CC_MC_WRITE_REQUEST", "CB6", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB6_PERF_SEL_CM_MC_READ_REQUEST", "CB6", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB6_PERF_SEL_FC_MC_READ_REQUEST", "CB6", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB6_PERF_SEL_CC_MC_READ_REQUEST", "CB6", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB6_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB6", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB6_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB6", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB6_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB6", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb7ExposedCountersGfx8[] = {
    {7, "CB7_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB7", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB7_PERF_SEL_CM_MC_WRITE_REQUEST", "CB7", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB7_PERF_SEL_FC_MC_WRITE_REQUEST", "CB7", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB7_PERF_SEL_CC_MC_WRITE_REQUEST", "CB7", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB7_PERF_SEL_CM_MC_READ_REQUEST", "CB7", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB7_PERF_SEL_FC_MC_READ_REQUEST", "CB7", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB7_PERF_SEL_CC_MC_READ_REQUEST", "CB7", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB7_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB7", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB7_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB7", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB7_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB7", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb8ExposedCountersGfx8[] = {
    {7, "CB8_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB8", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB8_PERF_SEL_CM_MC_WRITE_REQUEST", "CB8", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB8_PERF_SEL_FC_MC_WRITE_REQUEST", "CB8", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB8_PERF_SEL_CC_MC_WRITE_REQUEST", "CB8", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB8_PERF_SEL_CM_MC_READ_REQUEST", "CB8", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB8_PERF_SEL_FC_MC_READ_REQUEST", "CB8", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB8_PERF_SEL_CC_MC_READ_REQUEST", "CB8", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB8_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB8", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB8_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB8", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB8_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB8", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb9ExposedCountersGfx8[] = {
    {7, "CB9_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB9", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB9_PERF_SEL_CM_MC_WRITE_REQUEST", "CB9", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB9_PERF_SEL_FC_MC_WRITE_REQUEST", "CB9", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB9_PERF_SEL_CC_MC_WRITE_REQUEST", "CB9", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB9_PERF_SEL_CM_MC_READ_REQUEST", "CB9", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB9_PERF_SEL_FC_MC_READ_REQUEST", "CB9", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB9_PERF_SEL_CC_MC_READ_REQUEST", "CB9", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB9_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB9", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB9_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB9", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB9_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB9", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb10ExposedCountersGfx8[] = {
    {7, "CB10_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB10", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB10_PERF_SEL_CM_MC_WRITE_REQUEST", "CB10", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB10_PERF_SEL_FC_MC_WRITE_REQUEST", "CB10", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB10_PERF_SEL_CC_MC_WRITE_REQUEST", "CB10", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB10_PERF_SEL_CM_MC_READ_REQUEST", "CB10", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB10_PERF_SEL_FC_MC_READ_REQUEST", "CB10", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB10_PERF_SEL_CC_MC_READ_REQUEST", "CB10", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB10_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB10", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB10_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB10", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB10_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB10", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb11ExposedCountersGfx8[] = {
    {7, "CB11_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB11", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB11_PERF_SEL_CM_MC_WRITE_REQUEST", "CB11", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB11_PERF_SEL_FC_MC_WRITE_REQUEST", "CB11", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB11_PERF_SEL_CC_MC_WRITE_REQUEST", "CB11", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB11_PERF_SEL_CM_MC_READ_REQUEST", "CB11", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB11_PERF_SEL_FC_MC_READ_REQUEST", "CB11", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB11_PERF_SEL_CC_MC_READ_REQUEST", "CB11", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB11_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB11", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB11_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB11", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB11_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB11", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb12ExposedCountersGfx8[] = {
    {7, "CB12_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB12", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB12_PERF_SEL_CM_MC_WRITE_REQUEST", "CB12", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB12_PERF_SEL_FC_MC_WRITE_REQUEST", "CB12", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB12_PERF_SEL_CC_MC_WRITE_REQUEST", "CB12", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB12_PERF_SEL_CM_MC_READ_REQUEST", "CB12", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB12_PERF_SEL_FC_MC_READ_REQUEST", "CB12", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB12_PERF_SEL_CC_MC_READ_REQUEST", "CB12", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB12_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB12", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB12_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB12", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB12_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB12", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb13ExposedCountersGfx8[] = {
    {7, "CB13_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB13", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB13_PERF_SEL_CM_MC_WRITE_REQUEST", "CB13", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB13_PERF_SEL_FC_MC_WRITE_REQUEST", "CB13", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB13_PERF_SEL_CC_MC_WRITE_REQUEST", "CB13", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB13_PERF_SEL_CM_MC_READ_REQUEST", "CB13", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB13_PERF_SEL_FC_MC_READ_REQUEST", "CB13", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB13_PERF_SEL_CC_MC_READ_REQUEST", "CB13", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB13_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB13", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB13_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB13", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB13_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB13", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb14ExposedCountersGfx8[] = {
    {7, "CB14_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB14", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB14_PERF_SEL_CM_MC_WRITE_REQUEST", "CB14", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB14_PERF_SEL_FC_MC_WRITE_REQUEST", "CB14", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB14_PERF_SEL_CC_MC_WRITE_REQUEST", "CB14", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB14_PERF_SEL_CM_MC_READ_REQUEST", "CB14", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB14_PERF_SEL_FC_MC_READ_REQUEST", "CB14", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB14_PERF_SEL_CC_MC_READ_REQUEST", "CB14", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB14_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB14", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB14_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB14", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB14_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB14", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kCb15ExposedCountersGfx8[] = {
    {7, "CB15_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB15", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {116, "CB15_PERF_SEL_CM_MC_WRITE_REQUEST", "CB15", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {117, "CB15_PERF_SEL_FC_MC_WRITE_REQUEST", "CB15", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {118, "CB15_PERF_SEL_CC_MC_WRITE_REQUEST", "CB15", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {126, "CB15_PERF_SEL_CM_MC_READ_REQUEST", "CB15", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {127, "CB15_PERF_SEL_FC_MC_READ_REQUEST", "CB15", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {128, "CB15_PERF_SEL_CC_MC_READ_REQUEST", "CB15", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {162, "CB15_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB15", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {257, "CB15_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB15", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {259, "CB15_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB15", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb0ExposedCountersGfx8[] = {
    {4, "DB0_PERF_SEL_SC_DB_TILE_TILES", "DB0", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB0_PERF_SEL_DB_SC_TILE_CULLED", "DB0", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB0_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB0", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB0_PERF_SEL_DB_CB_LQUAD_STALLS", "DB0", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB0_PERF_SEL_TILE_RD_SENDS", "DB0", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB0_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB0", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB0_PERF_SEL_TILE_WR_SENDS", "DB0", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB0_PERF_SEL_QUAD_WR_SENDS", "DB0", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB0_PERF_SEL_OP_PIPE_BUSY", "DB0", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB0_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB0", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB0_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB0", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB0_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB0", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB0_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB0", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB0_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB0", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB0_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB0", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb1ExposedCountersGfx8[] = {
    {4, "DB1_PERF_SEL_SC_DB_TILE_TILES", "DB1", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB1_PERF_SEL_DB_SC_TILE_CULLED", "DB1", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB1_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB1", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB1_PERF_SEL_DB_CB_LQUAD_STALLS", "DB1", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB1_PERF_SEL_TILE_RD_SENDS", "DB1", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB1_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB1", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB1_PERF_SEL_TILE_WR_SENDS", "DB1", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB1_PERF_SEL_QUAD_WR_SENDS", "DB1", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB1_PERF_SEL_OP_PIPE_BUSY", "DB1", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB1_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB1", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB1_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB1", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB1_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB1", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB1_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB1", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB1_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB1", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB1_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB1", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb2ExposedCountersGfx8[] = {
    {4, "DB2_PERF_SEL_SC_DB_TILE_TILES", "DB2", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB2_PERF_SEL_DB_SC_TILE_CULLED", "DB2", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB2_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB2", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB2_PERF_SEL_DB_CB_LQUAD_STALLS", "DB2", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB2_PERF_SEL_TILE_RD_SENDS", "DB2", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB2_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB2", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB2_PERF_SEL_TILE_WR_SENDS", "DB2", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB2_PERF_SEL_QUAD_WR_SENDS", "DB2", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB2_PERF_SEL_OP_PIPE_BUSY", "DB2", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB2_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB2", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB2_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB2", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB2_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB2", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB2_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB2", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB2_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB2", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB2_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB2", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb3ExposedCountersGfx8[] = {
    {4, "DB3_PERF_SEL_SC_DB_TILE_TILES", "DB3", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB3_PERF_SEL_DB_SC_TILE_CULLED", "DB3", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB3_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB3", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB3_PERF_SEL_DB_CB_LQUAD_STALLS", "DB3", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB3_PERF_SEL_TILE_RD_SENDS", "DB3", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB3_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB3", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB3_PERF_SEL_TILE_WR_SENDS", "DB3", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB3_PERF_SEL_QUAD_WR_SENDS", "DB3", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB3_PERF_SEL_OP_PIPE_BUSY", "DB3", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB3_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB3", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB3_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB3", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB3_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB3", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB3_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB3", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB3_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB3", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB3_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB3", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb4ExposedCountersGfx8[] = {
    {4, "DB4_PERF_SEL_SC_DB_TILE_TILES", "DB4", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB4_PERF_SEL_DB_SC_TILE_CULLED", "DB4", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB4_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB4", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB4_PERF_SEL_DB_CB_LQUAD_STALLS", "DB4", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB4_PERF_SEL_TILE_RD_SENDS", "DB4", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB4_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB4", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB4_PERF_SEL_TILE_WR_SENDS", "DB4", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB4_PERF_SEL_QUAD_WR_SENDS", "DB4", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB4_PERF_SEL_OP_PIPE_BUSY", "DB4", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB4_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB4", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB4_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB4", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB4_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB4", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB4_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB4", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB4_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB4", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB4_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB4", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb5ExposedCountersGfx8[] = {
    {4, "DB5_PERF_SEL_SC_DB_TILE_TILES", "DB5", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB5_PERF_SEL_DB_SC_TILE_CULLED", "DB5", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB5_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB5", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB5_PERF_SEL_DB_CB_LQUAD_STALLS", "DB5", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB5_PERF_SEL_TILE_RD_SENDS", "DB5", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB5_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB5", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB5_PERF_SEL_TILE_WR_SENDS", "DB5", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB5_PERF_SEL_QUAD_WR_SENDS", "DB5", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB5_PERF_SEL_OP_PIPE_BUSY", "DB5", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB5_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB5", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB5_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB5", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB5_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB5", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB5_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB5", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB5_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB5", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB5_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB5", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb6ExposedCountersGfx8[] = {
    {4, "DB6_PERF_SEL_SC_DB_TILE_TILES", "DB6", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB6_PERF_SEL_DB_SC_TILE_CULLED", "DB6", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB6_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB6", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB6_PERF_SEL_DB_CB_LQUAD_STALLS", "DB6", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB6_PERF_SEL_TILE_RD_SENDS", "DB6", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB6_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB6", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB6_PERF_SEL_TILE_WR_SENDS", "DB6", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB6_PERF_SEL_QUAD_WR_SENDS", "DB6", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB6_PERF_SEL_OP_PIPE_BUSY", "DB6", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB6_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB6", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB6_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB6", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB6_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB6", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB6_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB6", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB6_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB6", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB6_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB6", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb7ExposedCountersGfx8[] = {
    {4, "DB7_PERF_SEL_SC_DB_TILE_TILES", "DB7", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB7_PERF_SEL_DB_SC_TILE_CULLED", "DB7", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB7_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB7", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB7_PERF_SEL_DB_CB_LQUAD_STALLS", "DB7", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB7_PERF_SEL_TILE_RD_SENDS", "DB7", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB7_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB7", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB7_PERF_SEL_TILE_WR_SENDS", "DB7", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB7_PERF_SEL_QUAD_WR_SENDS", "DB7", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB7_PERF_SEL_OP_PIPE_BUSY", "DB7", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB7_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB7", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB7_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB7", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB7_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB7", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB7_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB7", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB7_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB7", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB7_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB7", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb8ExposedCountersGfx8[] = {
    {4, "DB8_PERF_SEL_SC_DB_TILE_TILES", "DB8", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB8_PERF_SEL_DB_SC_TILE_CULLED", "DB8", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB8_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB8", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB8_PERF_SEL_DB_CB_LQUAD_STALLS", "DB8", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB8_PERF_SEL_TILE_RD_SENDS", "DB8", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB8_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB8", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB8_PERF_SEL_TILE_WR_SENDS", "DB8", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB8_PERF_SEL_QUAD_WR_SENDS", "DB8", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB8_PERF_SEL_OP_PIPE_BUSY", "DB8", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB8_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB8", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB8_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB8", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB8_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB8", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB8_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB8", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB8_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB8", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB8_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB8", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb9ExposedCountersGfx8[] = {
    {4, "DB9_PERF_SEL_SC_DB_TILE_TILES", "DB9", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB9_PERF_SEL_DB_SC_TILE_CULLED", "DB9", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB9_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB9", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB9_PERF_SEL_DB_CB_LQUAD_STALLS", "DB9", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB9_PERF_SEL_TILE_RD_SENDS", "DB9", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB9_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB9", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB9_PERF_SEL_TILE_WR_SENDS", "DB9", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB9_PERF_SEL_QUAD_WR_SENDS", "DB9", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB9_PERF_SEL_OP_PIPE_BUSY", "DB9", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB9_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB9", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB9_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB9", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB9_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB9", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB9_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB9", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB9_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB9", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB9_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB9", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb10ExposedCountersGfx8[] = {
    {4, "DB10_PERF_SEL_SC_DB_TILE_TILES", "DB10", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB10_PERF_SEL_DB_SC_TILE_CULLED", "DB10", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB10_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB10", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB10_PERF_SEL_DB_CB_LQUAD_STALLS", "DB10", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB10_PERF_SEL_TILE_RD_SENDS", "DB10", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB10_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB10", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB10_PERF_SEL_TILE_WR_SENDS", "DB10", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB10_PERF_SEL_QUAD_WR_SENDS", "DB10", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB10_PERF_SEL_OP_PIPE_BUSY", "DB10", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB10_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB10", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB10_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB10", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB10_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB10", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB10_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB10", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB10_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB10", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB10_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB10", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb11ExposedCountersGfx8[] = {
    {4, "DB11_PERF_SEL_SC_DB_TILE_TILES", "DB11", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB11_PERF_SEL_DB_SC_TILE_CULLED", "DB11", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB11_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB11", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB11_PERF_SEL_DB_CB_LQUAD_STALLS", "DB11", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB11_PERF_SEL_TILE_RD_SENDS", "DB11", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB11_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB11", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB11_PERF_SEL_TILE_WR_SENDS", "DB11", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB11_PERF_SEL_QUAD_WR_SENDS", "DB11", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB11_PERF_SEL_OP_PIPE_BUSY", "DB11", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB11_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB11", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB11_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB11", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB11_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB11", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB11_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB11", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB11_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB11", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB11_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB11", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb12ExposedCountersGfx8[] = {
    {4, "DB12_PERF_SEL_SC_DB_TILE_TILES", "DB12", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB12_PERF_SEL_DB_SC_TILE_CULLED", "DB12", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB12_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB12", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB12_PERF_SEL_DB_CB_LQUAD_STALLS", "DB12", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB12_PERF_SEL_TILE_RD_SENDS", "DB12", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB12_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB12", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB12_PERF_SEL_TILE_WR_SENDS", "DB12", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB12_PERF_SEL_QUAD_WR_SENDS", "DB12", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB12_PERF_SEL_OP_PIPE_BUSY", "DB12", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB12_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB12", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB12_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB12", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB12_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB12", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB12_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB12", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB12_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB12", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB12_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB12", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb13ExposedCountersGfx8[] = {
    {4, "DB13_PERF_SEL_SC_DB_TILE_TILES", "DB13", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB13_PERF_SEL_DB_SC_TILE_CULLED", "DB13", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB13_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB13", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB13_PERF_SEL_DB_CB_LQUAD_STALLS", "DB13", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB13_PERF_SEL_TILE_RD_SENDS", "DB13", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB13_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB13", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB13_PERF_SEL_TILE_WR_SENDS", "DB13", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB13_PERF_SEL_QUAD_WR_SENDS", "DB13", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB13_PERF_SEL_OP_PIPE_BUSY", "DB13", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB13_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB13", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB13_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB13", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB13_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB13", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB13_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB13", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB13_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB13", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB13_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB13", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb14ExposedCountersGfx8[] = {
    {4, "DB14_PERF_SEL_SC_DB_TILE_TILES", "DB14", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB14_PERF_SEL_DB_SC_TILE_CULLED", "DB14", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB14_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB14", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB14_PERF_SEL_DB_CB_LQUAD_STALLS", "DB14", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB14_PERF_SEL_TILE_RD_SENDS", "DB14", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB14_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB14", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB14_PERF_SEL_TILE_WR_SENDS", "DB14", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB14_PERF_SEL_QUAD_WR_SENDS", "DB14", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB14_PERF_SEL_OP_PIPE_BUSY", "DB14", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB14_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB14", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB14_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB14", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB14_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB14", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB14_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB14", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB14_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB14", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB14_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB14", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kDb15ExposedCountersGfx8[] = {
    {4, "DB15_PERF_SEL_SC_DB_TILE_TILES", "DB15", "Tiles sent over interface", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {15, "DB15_PERF_SEL_DB_SC_TILE_CULLED", "DB15", "Tiles culled in total", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "DB15_PERF_SEL_SC_DB_QUAD_KILLED_TILES", "DB15", "Number of detail killed tiles", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {46, "DB15_PERF_SEL_DB_CB_LQUAD_STALLS", "DB15", "Cycles Interface is stalled", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "DB15_PERF_SEL_TILE_RD_SENDS", "DB15", "HTile reads. Each is 256B", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "DB15_PERF_SEL_QUAD_RD_32BYTE_REQS", "DB15", "Number of 32 Byte quad read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {60, "DB15_PERF_SEL_TILE_WR_SENDS", "DB15", "32 Byte HTile writes", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {63, "DB15_PERF_SEL_QUAD_WR_SENDS", "DB15", "Cycles quad is sending write requests to the memory interface block of the DB", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {144, "DB15_PERF_SEL_OP_PIPE_BUSY", "DB15", "Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {174, "DB15_PERF_SEL_POSTZ_SAMPLES_PASSING_Z", "DB15", "Samples passing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {175, "DB15_PERF_SEL_POSTZ_SAMPLES_FAILING_Z", "DB15", "Samples failing Z test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {176, "DB15_PERF_SEL_POSTZ_SAMPLES_FAILING_S", "DB15", "Samples failing Stencil test during a PostZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {177, "DB15_PERF_SEL_PREZ_SAMPLES_PASSING_Z", "DB15", "Samples passing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {178, "DB15_PERF_SEL_PREZ_SAMPLES_FAILING_Z", "DB15", "Samples failing Z test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {179, "DB15_PERF_SEL_PREZ_SAMPLES_FAILING_S", "DB15", "Samples failing Stencil test during a PreZ pass", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kGrbmExposedCountersGfx8[] = {
    {0, "GRBM_PERF_SEL_COUNT", "GRBM", "Tie High - Count Number of Clocks", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {2, "GRBM_PERF_SEL_GUI_ACTIVE", "GRBM", "The GUI is Active", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kPaSu0ExposedCountersGfx8[] = {
    {8, "PA_SU0_PERF_PAPC_PA_INPUT_PRIM", "PA_SU0", "PERF_PAPC_PA_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "PA_SU0_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU0", "PERF_PAPC_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {21, "PA_SU0_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU0", "PERF_PAPC_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {54, "PA_SU0_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU0", "PERF_PAPC_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "PA_SU0_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU0", "PERF_PAPC_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {56, "PA_SU0_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU0", "PERF_PAPC_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {57, "PA_SU0_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU0", "PERF_PAPC_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "PA_SU0_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU0", "PERF_PAPC_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {62, "PA_SU0_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU0", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {73, "PA_SU0_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU0", "PERF_PAPC_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {74, "PA_SU0_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU0", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {105, "PA_SU0_PERF_PAPC_CLIP_BUSY", "PA_SU0", "PERF_PAPC_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {109, "PA_SU0_PERF_PAPC_SU_STALLED_SC", "PA_SU0", "PERF_PAPC_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kPaSu1ExposedCountersGfx8[] = {
    {8, "PA_SU1_PERF_PAPC_PA_INPUT_PRIM", "PA_SU1", "PERF_PAPC_PA_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "PA_SU1_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU1", "PERF_PAPC_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {21, "PA_SU1_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU1", "PERF_PAPC_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {54, "PA_SU1_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU1", "PERF_PAPC_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "PA_SU1_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU1", "PERF_PAPC_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {56, "PA_SU1_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU1", "PERF_PAPC_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {57, "PA_SU1_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU1", "PERF_PAPC_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "PA_SU1_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU1", "PERF_PAPC_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {62, "PA_SU1_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU1", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {73, "PA_SU1_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU1", "PERF_PAPC_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {74, "PA_SU1_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU1", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {105, "PA_SU1_PERF_PAPC_CLIP_BUSY", "PA_SU1", "PERF_PAPC_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {109, "PA_SU1_PERF_PAPC_SU_STALLED_SC", "PA_SU1", "PERF_PAPC_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kPaSu2ExposedCountersGfx8[] = {
    {8, "PA_SU2_PERF_PAPC_PA_INPUT_PRIM", "PA_SU2", "PERF_PAPC_PA_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "PA_SU2_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU2", "PERF_PAPC_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {21, "PA_SU2_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU2", "PERF_PAPC_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {54, "PA_SU2_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU2", "PERF_PAPC_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "PA_SU2_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU2", "PERF_PAPC_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {56, "PA_SU2_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU2", "PERF_PAPC_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {57, "PA_SU2_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU2", "PERF_PAPC_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "PA_SU2_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU2", "PERF_PAPC_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {62, "PA_SU2_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU2", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {73, "PA_SU2_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU2", "PERF_PAPC_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {74, "PA_SU2_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU2", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {105, "PA_SU2_PERF_PAPC_CLIP_BUSY", "PA_SU2", "PERF_PAPC_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {109, "PA_SU2_PERF_PAPC_SU_STALLED_SC", "PA_SU2", "PERF_PAPC_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kPaSu3ExposedCountersGfx8[] = {
    {8, "PA_SU3_PERF_PAPC_PA_INPUT_PRIM", "PA_SU3", "PERF_PAPC_PA_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "PA_SU3_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU3", "PERF_PAPC_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {21, "PA_SU3_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU3", "PERF_PAPC_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {54, "PA_SU3_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU3", "PERF_PAPC_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {55, "PA_SU3_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU3", "PERF_PAPC_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {56, "PA_SU3_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU3", "PERF_PAPC_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {57, "PA_SU3_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU3", "PERF_PAPC_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "PA_SU3_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU3", "PERF_PAPC_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {62, "PA_SU3_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU3", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {73, "PA_SU3_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU3", "PERF_PAPC_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {74, "PA_SU3_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU3", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {105, "PA_SU3_PERF_PAPC_CLIP_BUSY", "PA_SU3", "PERF_PAPC_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {109, "PA_SU3_PERF_PAPC_SU_STALLED_SC", "PA_SU3", "PERF_PAPC_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kPaSc0ExposedCountersGfx8[] = {
    {163, "PA_SC0_QZ0_QUAD_COUNT", "PA_SC0", "SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {164, "PA_SC0_QZ1_QUAD_COUNT", "PA_SC0", "SC_QZ1_QUAD_COUNT quad count; quad-z pipe 1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {165, "PA_SC0_QZ2_QUAD_COUNT", "PA_SC0", "SC_QZ2_QUAD_COUNT quad count; quad-z pipe 2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {166, "PA_SC0_QZ3_QUAD_COUNT", "PA_SC0", "SC_QZ3_QUAD_COUNT quad count; quad-z pipe 3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {239, "PA_SC0_P0_HIZ_QUAD_COUNT", "PA_SC0", "SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {240, "PA_SC0_P1_HIZ_QUAD_COUNT", "PA_SC0", "SC_P1_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {241, "PA_SC0_P2_HIZ_QUAD_COUNT", "PA_SC0", "SC_P2_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {242, "PA_SC0_P3_HIZ_QUAD_COUNT", "PA_SC0", "SC_P3_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {263, "PA_SC0_EARLYZ_QUAD_COUNT", "PA_SC0", "SC_EARLYZ_QUAD_COUNT total quads surviving early-z", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kPaSc1ExposedCountersGfx8[] = {
    {163, "PA_SC1_QZ0_QUAD_COUNT", "PA_SC1", "SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {164, "PA_SC1_QZ1_QUAD_COUNT", "PA_SC1", "SC_QZ1_QUAD_COUNT quad count; quad-z pipe 1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {165, "PA_SC1_QZ2_QUAD_COUNT", "PA_SC1", "SC_QZ2_QUAD_COUNT quad count; quad-z pipe 2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {166, "PA_SC1_QZ3_QUAD_COUNT", "PA_SC1", "SC_QZ3_QUAD_COUNT quad count; quad-z pipe 3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {239, "PA_SC1_P0_HIZ_QUAD_COUNT", "PA_SC1", "SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {240, "PA_SC1_P1_HIZ_QUAD_COUNT", "PA_SC1", "SC_P1_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {241, "PA_SC1_P2_HIZ_QUAD_COUNT", "PA_SC1", "SC_P2_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {242, "PA_SC1_P3_HIZ_QUAD_COUNT", "PA_SC1", "SC_P3_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {263, "PA_SC1_EARLYZ_QUAD_COUNT", "PA_SC1", "SC_EARLYZ_QUAD_COUNT total quads surviving early-z", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kPaSc2ExposedCountersGfx8[] = {
    {163, "PA_SC2_QZ0_QUAD_COUNT", "PA_SC2", "SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {164, "PA_SC2_QZ1_QUAD_COUNT", "PA_SC2", "SC_QZ1_QUAD_COUNT quad count; quad-z pipe 1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {165, "PA_SC2_QZ2_QUAD_COUNT", "PA_SC2", "SC_QZ2_QUAD_COUNT quad count; quad-z pipe 2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {166, "PA_SC2_QZ3_QUAD_COUNT", "PA_SC2", "SC_QZ3_QUAD_COUNT quad count; quad-z pipe 3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {239, "PA_SC2_P0_HIZ_QUAD_COUNT", "PA_SC2", "SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {240, "PA_SC2_P1_HIZ_QUAD_COUNT", "PA_SC2", "SC_P1_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {241, "PA_SC2_P2_HIZ_QUAD_COUNT", "PA_SC2", "SC_P2_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {242, "PA_SC2_P3_HIZ_QUAD_COUNT", "PA_SC2", "SC_P3_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {263, "PA_SC2_EARLYZ_QUAD_COUNT", "PA_SC2", "SC_EARLYZ_QUAD_COUNT total quads surviving early-z", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kPaSc3ExposedCountersGfx8[] = {
    {163, "PA_SC3_QZ0_QUAD_COUNT", "PA_SC3", "SC_QZ0_QUAD_COUNT quad count; quad-z pipe 0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {164, "PA_SC3_QZ1_QUAD_COUNT", "PA_SC3", "SC_QZ1_QUAD_COUNT quad count; quad-z pipe 1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {165, "PA_SC3_QZ2_QUAD_COUNT", "PA_SC3", "SC_QZ2_QUAD_COUNT quad count; quad-z pipe 2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {166, "PA_SC3_QZ3_QUAD_COUNT", "PA_SC3", "SC_QZ3_QUAD_COUNT quad count; quad-z pipe 3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {239, "PA_SC3_P0_HIZ_QUAD_COUNT", "PA_SC3", "SC_P0_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {240, "PA_SC3_P1_HIZ_QUAD_COUNT", "PA_SC3", "SC_P1_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {241, "PA_SC3_P2_HIZ_QUAD_COUNT", "PA_SC3", "SC_P2_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {242, "PA_SC3_P3_HIZ_QUAD_COUNT", "PA_SC3", "SC_P3_HIZ_QUAD_COUNT total quads surviving hi-z; db pipe 3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {263, "PA_SC3_EARLYZ_QUAD_COUNT", "PA_SC3", "SC_EARLYZ_QUAD_COUNT total quads surviving early-z", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSx0ExposedCountersGfx8[] = {
    {12, "SX0_PERF_SEL_DB0_PIXELS", "SX0", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SX0_PERF_SEL_DB0_PIXEL_STALL", "SX0", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {17, "SX0_PERF_SEL_DB1_PIXELS", "SX0", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "SX0_PERF_SEL_DB1_PIXEL_STALL", "SX0", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {22, "SX0_PERF_SEL_DB2_PIXELS", "SX0", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {24, "SX0_PERF_SEL_DB2_PIXEL_STALL", "SX0", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SX0_PERF_SEL_DB3_PIXELS", "SX0", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {29, "SX0_PERF_SEL_DB3_PIXEL_STALL", "SX0", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSx1ExposedCountersGfx8[] = {
    {12, "SX1_PERF_SEL_DB0_PIXELS", "SX1", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SX1_PERF_SEL_DB0_PIXEL_STALL", "SX1", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {17, "SX1_PERF_SEL_DB1_PIXELS", "SX1", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "SX1_PERF_SEL_DB1_PIXEL_STALL", "SX1", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {22, "SX1_PERF_SEL_DB2_PIXELS", "SX1", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {24, "SX1_PERF_SEL_DB2_PIXEL_STALL", "SX1", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SX1_PERF_SEL_DB3_PIXELS", "SX1", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {29, "SX1_PERF_SEL_DB3_PIXEL_STALL", "SX1", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSx2ExposedCountersGfx8[] = {
    {12, "SX2_PERF_SEL_DB0_PIXELS", "SX2", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SX2_PERF_SEL_DB0_PIXEL_STALL", "SX2", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {17, "SX2_PERF_SEL_DB1_PIXELS", "SX2", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "SX2_PERF_SEL_DB1_PIXEL_STALL", "SX2", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {22, "SX2_PERF_SEL_DB2_PIXELS", "SX2", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {24, "SX2_PERF_SEL_DB2_PIXEL_STALL", "SX2", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SX2_PERF_SEL_DB3_PIXELS", "SX2", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {29, "SX2_PERF_SEL_DB3_PIXEL_STALL", "SX2", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSx3ExposedCountersGfx8[] = {
    {12, "SX3_PERF_SEL_DB0_PIXELS", "SX3", "Number of pixels sent to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SX3_PERF_SEL_DB0_PIXEL_STALL", "SX3", "Number of cycles where pixel traffic is stalled due to the DB0", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {17, "SX3_PERF_SEL_DB1_PIXELS", "SX3", "Number of pixels sent to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "SX3_PERF_SEL_DB1_PIXEL_STALL", "SX3", "Number of cycles where pixel traffic is stalled due to the DB1", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {22, "SX3_PERF_SEL_DB2_PIXELS", "SX3", "Number of pixels sent to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {24, "SX3_PERF_SEL_DB2_PIXEL_STALL", "SX3", "Number of cycles where pixel traffic is stalled due to the DB2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SX3_PERF_SEL_DB3_PIXELS", "SX3", "Number of pixels sent to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {29, "SX3_PERF_SEL_DB3_PIXEL_STALL", "SX3", "Number of cycles where pixel traffic is stalled due to the DB3", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSpi0ExposedCountersGfx8[] = {
    {1, "SPI0_PERF_VS_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {10, "SPI0_PERF_VS_WAVE", "SPI0", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {17, "SPI0_PERF_GS_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {20, "SPI0_PERF_GS_WAVE", "SPI0", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SPI0_PERF_ES_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SPI0_PERF_ES_WAVE", "SPI0", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {38, "SPI0_PERF_HS_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {44, "SPI0_PERF_HS_WAVE", "SPI0", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "SPI0_PERF_LS_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {54, "SPI0_PERF_LS_WAVE", "SPI0", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {58, "SPI0_PERF_CSG_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {59, "SPI0_PERF_CSG_NUM_THREADGROUPS", "SPI0", "Number of threadgroups launched", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {62, "SPI0_PERF_CSG_WAVE", "SPI0", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {64, "SPI0_PERF_CSN_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {65, "SPI0_PERF_CSN_NUM_THREADGROUPS", "SPI0", "Number of threadgroups launched", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "SPI0_PERF_CSN_WAVE", "SPI0", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "SPI0_PERF_PS_CTL_BUSY", "SPI0", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {75, "SPI0_PERF_PS_CTL_WAVE", "SPI0", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSpi1ExposedCountersGfx8[] = {
    {1, "SPI1_PERF_VS_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {10, "SPI1_PERF_VS_WAVE", "SPI1", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {17, "SPI1_PERF_GS_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {20, "SPI1_PERF_GS_WAVE", "SPI1", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SPI1_PERF_ES_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SPI1_PERF_ES_WAVE", "SPI1", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {38, "SPI1_PERF_HS_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {44, "SPI1_PERF_HS_WAVE", "SPI1", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "SPI1_PERF_LS_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {54, "SPI1_PERF_LS_WAVE", "SPI1", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {58, "SPI1_PERF_CSG_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {59, "SPI1_PERF_CSG_NUM_THREADGROUPS", "SPI1", "Number of threadgroups launched", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {62, "SPI1_PERF_CSG_WAVE", "SPI1", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {64, "SPI1_PERF_CSN_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {65, "SPI1_PERF_CSN_NUM_THREADGROUPS", "SPI1", "Number of threadgroups launched", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "SPI1_PERF_CSN_WAVE", "SPI1", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "SPI1_PERF_PS_CTL_BUSY", "SPI1", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {75, "SPI1_PERF_PS_CTL_WAVE", "SPI1", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSpi2ExposedCountersGfx8[] = {
    {1, "SPI2_PERF_VS_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {10, "SPI2_PERF_VS_WAVE", "SPI2", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {17, "SPI2_PERF_GS_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {20, "SPI2_PERF_GS_WAVE", "SPI2", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SPI2_PERF_ES_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SPI2_PERF_ES_WAVE", "SPI2", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {38, "SPI2_PERF_HS_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {44, "SPI2_PERF_HS_WAVE", "SPI2", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "SPI2_PERF_LS_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {54, "SPI2_PERF_LS_WAVE", "SPI2", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {58, "SPI2_PERF_CSG_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {59, "SPI2_PERF_CSG_NUM_THREADGROUPS", "SPI2", "Number of threadgroups launched", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {62, "SPI2_PERF_CSG_WAVE", "SPI2", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {64, "SPI2_PERF_CSN_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {65, "SPI2_PERF_CSN_NUM_THREADGROUPS", "SPI2", "Number of threadgroups launched", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "SPI2_PERF_CSN_WAVE", "SPI2", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "SPI2_PERF_PS_CTL_BUSY", "SPI2", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {75, "SPI2_PERF_PS_CTL_WAVE", "SPI2", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSpi3ExposedCountersGfx8[] = {
    {1, "SPI3_PERF_VS_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {10, "SPI3_PERF_VS_WAVE", "SPI3", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {17, "SPI3_PERF_GS_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {20, "SPI3_PERF_GS_WAVE", "SPI3", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SPI3_PERF_ES_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SPI3_PERF_ES_WAVE", "SPI3", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {38, "SPI3_PERF_HS_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {44, "SPI3_PERF_HS_WAVE", "SPI3", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {48, "SPI3_PERF_LS_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {54, "SPI3_PERF_LS_WAVE", "SPI3", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {58, "SPI3_PERF_CSG_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {59, "SPI3_PERF_CSG_NUM_THREADGROUPS", "SPI3", "Number of threadgroups launched", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {62, "SPI3_PERF_CSG_WAVE", "SPI3", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {64, "SPI3_PERF_CSN_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {65, "SPI3_PERF_CSN_NUM_THREADGROUPS", "SPI3", "Number of threadgroups launched", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "SPI3_PERF_CSN_WAVE", "SPI3", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "SPI3_PERF_PS_CTL_BUSY", "SPI3", "Number of clocks with outstanding waves (SPI or SH).", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {75, "SPI3_PERF_PS_CTL_WAVE", "SPI3", "Number of waves", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSq0ExposedCountersGfx8[] = {
    {4, "SQ0_PERF_SEL_WAVES", "SQ0", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ0_PERF_SEL_ITEMS", "SQ0", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ0_PERF_SEL_INSTS_VALU", "SQ0", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ0_PERF_SEL_INSTS_VMEM_WR", "SQ0", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ0_PERF_SEL_INSTS_VMEM_RD", "SQ0", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ0_PERF_SEL_INSTS_SALU", "SQ0", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ0_PERF_SEL_INSTS_SMEM", "SQ0", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ0_PERF_SEL_INSTS_FLAT", "SQ0", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ0_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ0", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ0_PERF_SEL_INSTS_LDS", "SQ0", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ0_PERF_SEL_INSTS_GDS", "SQ0", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ0_PERF_SEL_WAIT_INST_LDS", "SQ0", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ0_PERF_SEL_INST_CYCLES_VALU", "SQ0", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ0_PERF_SEL_INST_CYCLES_SALU", "SQ0", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ0_PERF_SEL_THREAD_CYCLES_VALU", "SQ0", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ0_PERF_SEL_LDS_BANK_CONFLICT", "SQ0", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSq1ExposedCountersGfx8[] = {
    {4, "SQ1_PERF_SEL_WAVES", "SQ1", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ1_PERF_SEL_ITEMS", "SQ1", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ1_PERF_SEL_INSTS_VALU", "SQ1", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ1_PERF_SEL_INSTS_VMEM_WR", "SQ1", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ1_PERF_SEL_INSTS_VMEM_RD", "SQ1", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ1_PERF_SEL_INSTS_SALU", "SQ1", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ1_PERF_SEL_INSTS_SMEM", "SQ1", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ1_PERF_SEL_INSTS_FLAT", "SQ1", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ1_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ1", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ1_PERF_SEL_INSTS_LDS", "SQ1", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ1_PERF_SEL_INSTS_GDS", "SQ1", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ1_PERF_SEL_WAIT_INST_LDS", "SQ1", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ1_PERF_SEL_INST_CYCLES_VALU", "SQ1", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ1_PERF_SEL_INST_CYCLES_SALU", "SQ1", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ1_PERF_SEL_THREAD_CYCLES_VALU", "SQ1", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ1_PERF_SEL_LDS_BANK_CONFLICT", "SQ1", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSq2ExposedCountersGfx8[] = {
    {4, "SQ2_PERF_SEL_WAVES", "SQ2", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ2_PERF_SEL_ITEMS", "SQ2", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ2_PERF_SEL_INSTS_VALU", "SQ2", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ2_PERF_SEL_INSTS_VMEM_WR", "SQ2", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ2_PERF_SEL_INSTS_VMEM_RD", "SQ2", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ2_PERF_SEL_INSTS_SALU", "SQ2", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ2_PERF_SEL_INSTS_SMEM", "SQ2", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ2_PERF_SEL_INSTS_FLAT", "SQ2", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ2_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ2", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ2_PERF_SEL_INSTS_LDS", "SQ2", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ2_PERF_SEL_INSTS_GDS", "SQ2", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ2_PERF_SEL_WAIT_INST_LDS", "SQ2", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ2_PERF_SEL_INST_CYCLES_VALU", "SQ2", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ2_PERF_SEL_INST_CYCLES_SALU", "SQ2", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ2_PERF_SEL_THREAD_CYCLES_VALU", "SQ2", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ2_PERF_SEL_LDS_BANK_CONFLICT", "SQ2", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSq3ExposedCountersGfx8[] = {
    {4, "SQ3_PERF_SEL_WAVES", "SQ3", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ3_PERF_SEL_ITEMS", "SQ3", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ3_PERF_SEL_INSTS_VALU", "SQ3", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ3_PERF_SEL_INSTS_VMEM_WR", "SQ3", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ3_PERF_SEL_INSTS_VMEM_RD", "SQ3", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ3_PERF_SEL_INSTS_SALU", "SQ3", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ3_PERF_SEL_INSTS_SMEM", "SQ3", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ3_PERF_SEL_INSTS_FLAT", "SQ3", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ3_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ3", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ3_PERF_SEL_INSTS_LDS", "SQ3", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ3_PERF_SEL_INSTS_GDS", "SQ3", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ3_PERF_SEL_WAIT_INST_LDS", "SQ3", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ3_PERF_SEL_INST_CYCLES_VALU", "SQ3", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ3_PERF_SEL_INST_CYCLES_SALU", "SQ3", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ3_PERF_SEL_THREAD_CYCLES_VALU", "SQ3", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ3_PERF_SEL_LDS_BANK_CONFLICT", "SQ3", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqEs0ExposedCountersGfx8[] = {
    {4, "SQ_ES0_PERF_SEL_WAVES", "SQ_ES0", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_ES0_PERF_SEL_ITEMS", "SQ_ES0", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_ES0_PERF_SEL_INSTS_VALU", "SQ_ES0", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_ES0_PERF_SEL_INSTS_VMEM_WR", "SQ_ES0", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_ES0_PERF_SEL_INSTS_VMEM_RD", "SQ_ES0", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_ES0_PERF_SEL_INSTS_SALU", "SQ_ES0", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_ES0_PERF_SEL_INSTS_SMEM", "SQ_ES0", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_ES0_PERF_SEL_INSTS_FLAT", "SQ_ES0", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_ES0_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_ES0", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_ES0_PERF_SEL_INSTS_LDS", "SQ_ES0", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_ES0_PERF_SEL_INSTS_GDS", "SQ_ES0", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_ES0_PERF_SEL_WAIT_INST_LDS", "SQ_ES0", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_ES0_PERF_SEL_INST_CYCLES_VALU", "SQ_ES0", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_ES0_PERF_SEL_INST_CYCLES_SALU", "SQ_ES0", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_ES0_PERF_SEL_THREAD_CYCLES_VALU", "SQ_ES0", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_ES0_PERF_SEL_LDS_BANK_CONFLICT", "SQ_ES0", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqEs1ExposedCountersGfx8[] = {
    {4, "SQ_ES1_PERF_SEL_WAVES", "SQ_ES1", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_ES1_PERF_SEL_ITEMS", "SQ_ES1", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_ES1_PERF_SEL_INSTS_VALU", "SQ_ES1", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_ES1_PERF_SEL_INSTS_VMEM_WR", "SQ_ES1", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_ES1_PERF_SEL_INSTS_VMEM_RD", "SQ_ES1", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_ES1_PERF_SEL_INSTS_SALU", "SQ_ES1", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_ES1_PERF_SEL_INSTS_SMEM", "SQ_ES1", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_ES1_PERF_SEL_INSTS_FLAT", "SQ_ES1", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_ES1_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_ES1", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_ES1_PERF_SEL_INSTS_LDS", "SQ_ES1", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_ES1_PERF_SEL_INSTS_GDS", "SQ_ES1", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_ES1_PERF_SEL_WAIT_INST_LDS", "SQ_ES1", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_ES1_PERF_SEL_INST_CYCLES_VALU", "SQ_ES1", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_ES1_PERF_SEL_INST_CYCLES_SALU", "SQ_ES1", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_ES1_PERF_SEL_THREAD_CYCLES_VALU", "SQ_ES1", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_ES1_PERF_SEL_LDS_BANK_CONFLICT", "SQ_ES1", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqEs2ExposedCountersGfx8[] = {
    {4, "SQ_ES2_PERF_SEL_WAVES", "SQ_ES2", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_ES2_PERF_SEL_ITEMS", "SQ_ES2", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_ES2_PERF_SEL_INSTS_VALU", "SQ_ES2", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_ES2_PERF_SEL_INSTS_VMEM_WR", "SQ_ES2", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_ES2_PERF_SEL_INSTS_VMEM_RD", "SQ_ES2", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_ES2_PERF_SEL_INSTS_SALU", "SQ_ES2", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_ES2_PERF_SEL_INSTS_SMEM", "SQ_ES2", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_ES2_PERF_SEL_INSTS_FLAT", "SQ_ES2", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_ES2_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_ES2", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_ES2_PERF_SEL_INSTS_LDS", "SQ_ES2", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_ES2_PERF_SEL_INSTS_GDS", "SQ_ES2", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_ES2_PERF_SEL_WAIT_INST_LDS", "SQ_ES2", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_ES2_PERF_SEL_INST_CYCLES_VALU", "SQ_ES2", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_ES2_PERF_SEL_INST_CYCLES_SALU", "SQ_ES2", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_ES2_PERF_SEL_THREAD_CYCLES_VALU", "SQ_ES2", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_ES2_PERF_SEL_LDS_BANK_CONFLICT", "SQ_ES2", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqEs3ExposedCountersGfx8[] = {
    {4, "SQ_ES3_PERF_SEL_WAVES", "SQ_ES3", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_ES3_PERF_SEL_ITEMS", "SQ_ES3", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_ES3_PERF_SEL_INSTS_VALU", "SQ_ES3", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_ES3_PERF_SEL_INSTS_VMEM_WR", "SQ_ES3", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_ES3_PERF_SEL_INSTS_VMEM_RD", "SQ_ES3", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_ES3_PERF_SEL_INSTS_SALU", "SQ_ES3", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_ES3_PERF_SEL_INSTS_SMEM", "SQ_ES3", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_ES3_PERF_SEL_INSTS_FLAT", "SQ_ES3", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_ES3_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_ES3", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_ES3_PERF_SEL_INSTS_LDS", "SQ_ES3", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_ES3_PERF_SEL_INSTS_GDS", "SQ_ES3", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_ES3_PERF_SEL_WAIT_INST_LDS", "SQ_ES3", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_ES3_PERF_SEL_INST_CYCLES_VALU", "SQ_ES3", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_ES3_PERF_SEL_INST_CYCLES_SALU", "SQ_ES3", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_ES3_PERF_SEL_THREAD_CYCLES_VALU", "SQ_ES3", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_ES3_PERF_SEL_LDS_BANK_CONFLICT", "SQ_ES3", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqGs0ExposedCountersGfx8[] = {
    {4, "SQ_GS0_PERF_SEL_WAVES", "SQ_GS0", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_GS0_PERF_SEL_ITEMS", "SQ_GS0", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_GS0_PERF_SEL_INSTS_VALU", "SQ_GS0", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_GS0_PERF_SEL_INSTS_VMEM_WR", "SQ_GS0", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_GS0_PERF_SEL_INSTS_VMEM_RD", "SQ_GS0", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_GS0_PERF_SEL_INSTS_SALU", "SQ_GS0", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_GS0_PERF_SEL_INSTS_SMEM", "SQ_GS0", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_GS0_PERF_SEL_INSTS_FLAT", "SQ_GS0", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_GS0_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_GS0", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_GS0_PERF_SEL_INSTS_LDS", "SQ_GS0", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_GS0_PERF_SEL_INSTS_GDS", "SQ_GS0", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_GS0_PERF_SEL_WAIT_INST_LDS", "SQ_GS0", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_GS0_PERF_SEL_INST_CYCLES_VALU", "SQ_GS0", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_GS0_PERF_SEL_INST_CYCLES_SALU", "SQ_GS0", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_GS0_PERF_SEL_THREAD_CYCLES_VALU", "SQ_GS0", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_GS0_PERF_SEL_LDS_BANK_CONFLICT", "SQ_GS0", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqGs1ExposedCountersGfx8[] = {
    {4, "SQ_GS1_PERF_SEL_WAVES", "SQ_GS1", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_GS1_PERF_SEL_ITEMS", "SQ_GS1", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_GS1_PERF_SEL_INSTS_VALU", "SQ_GS1", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_GS1_PERF_SEL_INSTS_VMEM_WR", "SQ_GS1", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_GS1_PERF_SEL_INSTS_VMEM_RD", "SQ_GS1", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_GS1_PERF_SEL_INSTS_SALU", "SQ_GS1", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_GS1_PERF_SEL_INSTS_SMEM", "SQ_GS1", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_GS1_PERF_SEL_INSTS_FLAT", "SQ_GS1", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_GS1_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_GS1", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_GS1_PERF_SEL_INSTS_LDS", "SQ_GS1", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_GS1_PERF_SEL_INSTS_GDS", "SQ_GS1", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_GS1_PERF_SEL_WAIT_INST_LDS", "SQ_GS1", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_GS1_PERF_SEL_INST_CYCLES_VALU", "SQ_GS1", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_GS1_PERF_SEL_INST_CYCLES_SALU", "SQ_GS1", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_GS1_PERF_SEL_THREAD_CYCLES_VALU", "SQ_GS1", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_GS1_PERF_SEL_LDS_BANK_CONFLICT", "SQ_GS1", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqGs2ExposedCountersGfx8[] = {
    {4, "SQ_GS2_PERF_SEL_WAVES", "SQ_GS2", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_GS2_PERF_SEL_ITEMS", "SQ_GS2", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_GS2_PERF_SEL_INSTS_VALU", "SQ_GS2", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_GS2_PERF_SEL_INSTS_VMEM_WR", "SQ_GS2", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_GS2_PERF_SEL_INSTS_VMEM_RD", "SQ_GS2", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_GS2_PERF_SEL_INSTS_SALU", "SQ_GS2", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_GS2_PERF_SEL_INSTS_SMEM", "SQ_GS2", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_GS2_PERF_SEL_INSTS_FLAT", "SQ_GS2", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_GS2_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_GS2", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_GS2_PERF_SEL_INSTS_LDS", "SQ_GS2", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_GS2_PERF_SEL_INSTS_GDS", "SQ_GS2", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_GS2_PERF_SEL_WAIT_INST_LDS", "SQ_GS2", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_GS2_PERF_SEL_INST_CYCLES_VALU", "SQ_GS2", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_GS2_PERF_SEL_INST_CYCLES_SALU", "SQ_GS2", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_GS2_PERF_SEL_THREAD_CYCLES_VALU", "SQ_GS2", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_GS2_PERF_SEL_LDS_BANK_CONFLICT", "SQ_GS2", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqGs3ExposedCountersGfx8[] = {
    {4, "SQ_GS3_PERF_SEL_WAVES", "SQ_GS3", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_GS3_PERF_SEL_ITEMS", "SQ_GS3", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_GS3_PERF_SEL_INSTS_VALU", "SQ_GS3", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_GS3_PERF_SEL_INSTS_VMEM_WR", "SQ_GS3", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_GS3_PERF_SEL_INSTS_VMEM_RD", "SQ_GS3", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_GS3_PERF_SEL_INSTS_SALU", "SQ_GS3", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_GS3_PERF_SEL_INSTS_SMEM", "SQ_GS3", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_GS3_PERF_SEL_INSTS_FLAT", "SQ_GS3", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_GS3_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_GS3", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_GS3_PERF_SEL_INSTS_LDS", "SQ_GS3", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_GS3_PERF_SEL_INSTS_GDS", "SQ_GS3", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_GS3_PERF_SEL_WAIT_INST_LDS", "SQ_GS3", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_GS3_PERF_SEL_INST_CYCLES_VALU", "SQ_GS3", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_GS3_PERF_SEL_INST_CYCLES_SALU", "SQ_GS3", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_GS3_PERF_SEL_THREAD_CYCLES_VALU", "SQ_GS3", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_GS3_PERF_SEL_LDS_BANK_CONFLICT", "SQ_GS3", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqVs0ExposedCountersGfx8[] = {
    {4, "SQ_VS0_PERF_SEL_WAVES", "SQ_VS0", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_VS0_PERF_SEL_ITEMS", "SQ_VS0", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_VS0_PERF_SEL_INSTS_VALU", "SQ_VS0", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_VS0_PERF_SEL_INSTS_VMEM_WR", "SQ_VS0", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_VS0_PERF_SEL_INSTS_VMEM_RD", "SQ_VS0", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_VS0_PERF_SEL_INSTS_SALU", "SQ_VS0", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_VS0_PERF_SEL_INSTS_SMEM", "SQ_VS0", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_VS0_PERF_SEL_INSTS_FLAT", "SQ_VS0", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_VS0_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_VS0", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_VS0_PERF_SEL_INSTS_LDS", "SQ_VS0", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_VS0_PERF_SEL_INSTS_GDS", "SQ_VS0", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_VS0_PERF_SEL_WAIT_INST_LDS", "SQ_VS0", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_VS0_PERF_SEL_INST_CYCLES_VALU", "SQ_VS0", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_VS0_PERF_SEL_INST_CYCLES_SALU", "SQ_VS0", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_VS0_PERF_SEL_THREAD_CYCLES_VALU", "SQ_VS0", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_VS0_PERF_SEL_LDS_BANK_CONFLICT", "SQ_VS0", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqVs1ExposedCountersGfx8[] = {
    {4, "SQ_VS1_PERF_SEL_WAVES", "SQ_VS1", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_VS1_PERF_SEL_ITEMS", "SQ_VS1", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_VS1_PERF_SEL_INSTS_VALU", "SQ_VS1", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_VS1_PERF_SEL_INSTS_VMEM_WR", "SQ_VS1", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_VS1_PERF_SEL_INSTS_VMEM_RD", "SQ_VS1", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_VS1_PERF_SEL_INSTS_SALU", "SQ_VS1", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_VS1_PERF_SEL_INSTS_SMEM", "SQ_VS1", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_VS1_PERF_SEL_INSTS_FLAT", "SQ_VS1", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_VS1_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_VS1", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_VS1_PERF_SEL_INSTS_LDS", "SQ_VS1", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_VS1_PERF_SEL_INSTS_GDS", "SQ_VS1", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_VS1_PERF_SEL_WAIT_INST_LDS", "SQ_VS1", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_VS1_PERF_SEL_INST_CYCLES_VALU", "SQ_VS1", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_VS1_PERF_SEL_INST_CYCLES_SALU", "SQ_VS1", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_VS1_PERF_SEL_THREAD_CYCLES_VALU", "SQ_VS1", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_VS1_PERF_SEL_LDS_BANK_CONFLICT", "SQ_VS1", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqVs2ExposedCountersGfx8[] = {
    {4, "SQ_VS2_PERF_SEL_WAVES", "SQ_VS2", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_VS2_PERF_SEL_ITEMS", "SQ_VS2", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_VS2_PERF_SEL_INSTS_VALU", "SQ_VS2", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_VS2_PERF_SEL_INSTS_VMEM_WR", "SQ_VS2", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_VS2_PERF_SEL_INSTS_VMEM_RD", "SQ_VS2", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_VS2_PERF_SEL_INSTS_SALU", "SQ_VS2", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_VS2_PERF_SEL_INSTS_SMEM", "SQ_VS2", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_VS2_PERF_SEL_INSTS_FLAT", "SQ_VS2", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_VS2_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_VS2", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_VS2_PERF_SEL_INSTS_LDS", "SQ_VS2", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_VS2_PERF_SEL_INSTS_GDS", "SQ_VS2", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_VS2_PERF_SEL_WAIT_INST_LDS", "SQ_VS2", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_VS2_PERF_SEL_INST_CYCLES_VALU", "SQ_VS2", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_VS2_PERF_SEL_INST_CYCLES_SALU", "SQ_VS2", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_VS2_PERF_SEL_THREAD_CYCLES_VALU", "SQ_VS2", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_VS2_PERF_SEL_LDS_BANK_CONFLICT", "SQ_VS2", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqVs3ExposedCountersGfx8[] = {
    {4, "SQ_VS3_PERF_SEL_WAVES", "SQ_VS3", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_VS3_PERF_SEL_ITEMS", "SQ_VS3", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_VS3_PERF_SEL_INSTS_VALU", "SQ_VS3", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_VS3_PERF_SEL_INSTS_VMEM_WR", "SQ_VS3", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_VS3_PERF_SEL_INSTS_VMEM_RD", "SQ_VS3", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_VS3_PERF_SEL_INSTS_SALU", "SQ_VS3", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_VS3_PERF_SEL_INSTS_SMEM", "SQ_VS3", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_VS3_PERF_SEL_INSTS_FLAT", "SQ_VS3", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_VS3_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_VS3", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_VS3_PERF_SEL_INSTS_LDS", "SQ_VS3", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_VS3_PERF_SEL_INSTS_GDS", "SQ_VS3", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_VS3_PERF_SEL_WAIT_INST_LDS", "SQ_VS3", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_VS3_PERF_SEL_INST_CYCLES_VALU", "SQ_VS3", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_VS3_PERF_SEL_INST_CYCLES_SALU", "SQ_VS3", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_VS3_PERF_SEL_THREAD_CYCLES_VALU", "SQ_VS3", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_VS3_PERF_SEL_LDS_BANK_CONFLICT", "SQ_VS3", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqPs0ExposedCountersGfx8[] = {
    {4, "SQ_PS0_PERF_SEL_WAVES", "SQ_PS0", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_PS0_PERF_SEL_ITEMS", "SQ_PS0", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_PS0_PERF_SEL_INSTS_VALU", "SQ_PS0", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_PS0_PERF_SEL_INSTS_VMEM_WR", "SQ_PS0", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_PS0_PERF_SEL_INSTS_VMEM_RD", "SQ_PS0", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_PS0_PERF_SEL_INSTS_SALU", "SQ_PS0", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_PS0_PERF_SEL_INSTS_SMEM", "SQ_PS0", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_PS0_PERF_SEL_INSTS_FLAT", "SQ_PS0", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_PS0_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_PS0", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_PS0_PERF_SEL_INSTS_LDS", "SQ_PS0", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_PS0_PERF_SEL_INSTS_GDS", "SQ_PS0", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_PS0_PERF_SEL_WAIT_INST_LDS", "SQ_PS0", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_PS0_PERF_SEL_INST_CYCLES_VALU", "SQ_PS0", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_PS0_PERF_SEL_INST_CYCLES_SALU", "SQ_PS0", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_PS0_PERF_SEL_THREAD_CYCLES_VALU", "SQ_PS0", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_PS0_PERF_SEL_LDS_BANK_CONFLICT", "SQ_PS0", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqPs1ExposedCountersGfx8[] = {
    {4, "SQ_PS1_PERF_SEL_WAVES", "SQ_PS1", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_PS1_PERF_SEL_ITEMS", "SQ_PS1", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_PS1_PERF_SEL_INSTS_VALU", "SQ_PS1", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_PS1_PERF_SEL_INSTS_VMEM_WR", "SQ_PS1", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_PS1_PERF_SEL_INSTS_VMEM_RD", "SQ_PS1", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_PS1_PERF_SEL_INSTS_SALU", "SQ_PS1", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_PS1_PERF_SEL_INSTS_SMEM", "SQ_PS1", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_PS1_PERF_SEL_INSTS_FLAT", "SQ_PS1", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_PS1_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_PS1", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_PS1_PERF_SEL_INSTS_LDS", "SQ_PS1", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_PS1_PERF_SEL_INSTS_GDS", "SQ_PS1", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_PS1_PERF_SEL_WAIT_INST_LDS", "SQ_PS1", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_PS1_PERF_SEL_INST_CYCLES_VALU", "SQ_PS1", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_PS1_PERF_SEL_INST_CYCLES_SALU", "SQ_PS1", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_PS1_PERF_SEL_THREAD_CYCLES_VALU", "SQ_PS1", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_PS1_PERF_SEL_LDS_BANK_CONFLICT", "SQ_PS1", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqPs2ExposedCountersGfx8[] = {
    {4, "SQ_PS2_PERF_SEL_WAVES", "SQ_PS2", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_PS2_PERF_SEL_ITEMS", "SQ_PS2", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_PS2_PERF_SEL_INSTS_VALU", "SQ_PS2", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_PS2_PERF_SEL_INSTS_VMEM_WR", "SQ_PS2", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_PS2_PERF_SEL_INSTS_VMEM_RD", "SQ_PS2", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_PS2_PERF_SEL_INSTS_SALU", "SQ_PS2", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_PS2_PERF_SEL_INSTS_SMEM", "SQ_PS2", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_PS2_PERF_SEL_INSTS_FLAT", "SQ_PS2", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_PS2_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_PS2", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_PS2_PERF_SEL_INSTS_LDS", "SQ_PS2", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_PS2_PERF_SEL_INSTS_GDS", "SQ_PS2", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_PS2_PERF_SEL_WAIT_INST_LDS", "SQ_PS2", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_PS2_PERF_SEL_INST_CYCLES_VALU", "SQ_PS2", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_PS2_PERF_SEL_INST_CYCLES_SALU", "SQ_PS2", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_PS2_PERF_SEL_THREAD_CYCLES_VALU", "SQ_PS2", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_PS2_PERF_SEL_LDS_BANK_CONFLICT", "SQ_PS2", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqPs3ExposedCountersGfx8[] = {
    {4, "SQ_PS3_PERF_SEL_WAVES", "SQ_PS3", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_PS3_PERF_SEL_ITEMS", "SQ_PS3", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_PS3_PERF_SEL_INSTS_VALU", "SQ_PS3", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_PS3_PERF_SEL_INSTS_VMEM_WR", "SQ_PS3", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_PS3_PERF_SEL_INSTS_VMEM_RD", "SQ_PS3", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_PS3_PERF_SEL_INSTS_SALU", "SQ_PS3", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_PS3_PERF_SEL_INSTS_SMEM", "SQ_PS3", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_PS3_PERF_SEL_INSTS_FLAT", "SQ_PS3", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_PS3_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_PS3", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_PS3_PERF_SEL_INSTS_LDS", "SQ_PS3", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_PS3_PERF_SEL_INSTS_GDS", "SQ_PS3", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_PS3_PERF_SEL_WAIT_INST_LDS", "SQ_PS3", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_PS3_PERF_SEL_INST_CYCLES_VALU", "SQ_PS3", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_PS3_PERF_SEL_INST_CYCLES_SALU", "SQ_PS3", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_PS3_PERF_SEL_THREAD_CYCLES_VALU", "SQ_PS3", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_PS3_PERF_SEL_LDS_BANK_CONFLICT", "SQ_PS3", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqLs0ExposedCountersGfx8[] = {
    {4, "SQ_LS0_PERF_SEL_WAVES", "SQ_LS0", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_LS0_PERF_SEL_ITEMS", "SQ_LS0", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_LS0_PERF_SEL_INSTS_VALU", "SQ_LS0", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_LS0_PERF_SEL_INSTS_VMEM_WR", "SQ_LS0", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_LS0_PERF_SEL_INSTS_VMEM_RD", "SQ_LS0", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_LS0_PERF_SEL_INSTS_SALU", "SQ_LS0", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_LS0_PERF_SEL_INSTS_SMEM", "SQ_LS0", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_LS0_PERF_SEL_INSTS_FLAT", "SQ_LS0", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_LS0_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_LS0", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_LS0_PERF_SEL_INSTS_LDS", "SQ_LS0", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_LS0_PERF_SEL_INSTS_GDS", "SQ_LS0", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_LS0_PERF_SEL_WAIT_INST_LDS", "SQ_LS0", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_LS0_PERF_SEL_INST_CYCLES_VALU", "SQ_LS0", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_LS0_PERF_SEL_INST_CYCLES_SALU", "SQ_LS0", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_LS0_PERF_SEL_THREAD_CYCLES_VALU", "SQ_LS0", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_LS0_PERF_SEL_LDS_BANK_CONFLICT", "SQ_LS0", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqLs1ExposedCountersGfx8[] = {
    {4, "SQ_LS1_PERF_SEL_WAVES", "SQ_LS1", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_LS1_PERF_SEL_ITEMS", "SQ_LS1", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_LS1_PERF_SEL_INSTS_VALU", "SQ_LS1", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_LS1_PERF_SEL_INSTS_VMEM_WR", "SQ_LS1", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_LS1_PERF_SEL_INSTS_VMEM_RD", "SQ_LS1", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_LS1_PERF_SEL_INSTS_SALU", "SQ_LS1", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_LS1_PERF_SEL_INSTS_SMEM", "SQ_LS1", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_LS1_PERF_SEL_INSTS_FLAT", "SQ_LS1", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_LS1_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_LS1", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_LS1_PERF_SEL_INSTS_LDS", "SQ_LS1", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_LS1_PERF_SEL_INSTS_GDS", "SQ_LS1", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_LS1_PERF_SEL_WAIT_INST_LDS", "SQ_LS1", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_LS1_PERF_SEL_INST_CYCLES_VALU", "SQ_LS1", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_LS1_PERF_SEL_INST_CYCLES_SALU", "SQ_LS1", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_LS1_PERF_SEL_THREAD_CYCLES_VALU", "SQ_LS1", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_LS1_PERF_SEL_LDS_BANK_CONFLICT", "SQ_LS1", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqLs2ExposedCountersGfx8[] = {
    {4, "SQ_LS2_PERF_SEL_WAVES", "SQ_LS2", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_LS2_PERF_SEL_ITEMS", "SQ_LS2", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_LS2_PERF_SEL_INSTS_VALU", "SQ_LS2", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_LS2_PERF_SEL_INSTS_VMEM_WR", "SQ_LS2", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_LS2_PERF_SEL_INSTS_VMEM_RD", "SQ_LS2", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_LS2_PERF_SEL_INSTS_SALU", "SQ_LS2", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_LS2_PERF_SEL_INSTS_SMEM", "SQ_LS2", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_LS2_PERF_SEL_INSTS_FLAT", "SQ_LS2", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_LS2_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_LS2", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_LS2_PERF_SEL_INSTS_LDS", "SQ_LS2", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_LS2_PERF_SEL_INSTS_GDS", "SQ_LS2", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_LS2_PERF_SEL_WAIT_INST_LDS", "SQ_LS2", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_LS2_PERF_SEL_INST_CYCLES_VALU", "SQ_LS2", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_LS2_PERF_SEL_INST_CYCLES_SALU", "SQ_LS2", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_LS2_PERF_SEL_THREAD_CYCLES_VALU", "SQ_LS2", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_LS2_PERF_SEL_LDS_BANK_CONFLICT", "SQ_LS2", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqLs3ExposedCountersGfx8[] = {
    {4, "SQ_LS3_PERF_SEL_WAVES", "SQ_LS3", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_LS3_PERF_SEL_ITEMS", "SQ_LS3", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_LS3_PERF_SEL_INSTS_VALU", "SQ_LS3", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_LS3_PERF_SEL_INSTS_VMEM_WR", "SQ_LS3", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_LS3_PERF_SEL_INSTS_VMEM_RD", "SQ_LS3", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_LS3_PERF_SEL_INSTS_SALU", "SQ_LS3", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_LS3_PERF_SEL_INSTS_SMEM", "SQ_LS3", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_LS3_PERF_SEL_INSTS_FLAT", "SQ_LS3", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_LS3_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_LS3", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_LS3_PERF_SEL_INSTS_LDS", "SQ_LS3", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_LS3_PERF_SEL_INSTS_GDS", "SQ_LS3", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_LS3_PERF_SEL_WAIT_INST_LDS", "SQ_LS3", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_LS3_PERF_SEL_INST_CYCLES_VALU", "SQ_LS3", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_LS3_PERF_SEL_INST_CYCLES_SALU", "SQ_LS3", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_LS3_PERF_SEL_THREAD_CYCLES_VALU", "SQ_LS3", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_LS3_PERF_SEL_LDS_BANK_CONFLICT", "SQ_LS3", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqHs0ExposedCountersGfx8[] = {
    {4, "SQ_HS0_PERF_SEL_WAVES", "SQ_HS0", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_HS0_PERF_SEL_ITEMS", "SQ_HS0", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_HS0_PERF_SEL_INSTS_VALU", "SQ_HS0", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_HS0_PERF_SEL_INSTS_VMEM_WR", "SQ_HS0", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_HS0_PERF_SEL_INSTS_VMEM_RD", "SQ_HS0", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_HS0_PERF_SEL_INSTS_SALU", "SQ_HS0", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_HS0_PERF_SEL_INSTS_SMEM", "SQ_HS0", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_HS0_PERF_SEL_INSTS_FLAT", "SQ_HS0", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_HS0_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_HS0", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_HS0_PERF_SEL_INSTS_LDS", "SQ_HS0", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_HS0_PERF_SEL_INSTS_GDS", "SQ_HS0", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_HS0_PERF_SEL_WAIT_INST_LDS", "SQ_HS0", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_HS0_PERF_SEL_INST_CYCLES_VALU", "SQ_HS0", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_HS0_PERF_SEL_INST_CYCLES_SALU", "SQ_HS0", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_HS0_PERF_SEL_THREAD_CYCLES_VALU", "SQ_HS0", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_HS0_PERF_SEL_LDS_BANK_CONFLICT", "SQ_HS0", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqHs1ExposedCountersGfx8[] = {
    {4, "SQ_HS1_PERF_SEL_WAVES", "SQ_HS1", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_HS1_PERF_SEL_ITEMS", "SQ_HS1", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_HS1_PERF_SEL_INSTS_VALU", "SQ_HS1", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_HS1_PERF_SEL_INSTS_VMEM_WR", "SQ_HS1", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_HS1_PERF_SEL_INSTS_VMEM_RD", "SQ_HS1", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_HS1_PERF_SEL_INSTS_SALU", "SQ_HS1", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_HS1_PERF_SEL_INSTS_SMEM", "SQ_HS1", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_HS1_PERF_SEL_INSTS_FLAT", "SQ_HS1", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_HS1_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_HS1", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_HS1_PERF_SEL_INSTS_LDS", "SQ_HS1", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_HS1_PERF_SEL_INSTS_GDS", "SQ_HS1", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_HS1_PERF_SEL_WAIT_INST_LDS", "SQ_HS1", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_HS1_PERF_SEL_INST_CYCLES_VALU", "SQ_HS1", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_HS1_PERF_SEL_INST_CYCLES_SALU", "SQ_HS1", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_HS1_PERF_SEL_THREAD_CYCLES_VALU", "SQ_HS1", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_HS1_PERF_SEL_LDS_BANK_CONFLICT", "SQ_HS1", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqHs2ExposedCountersGfx8[] = {
    {4, "SQ_HS2_PERF_SEL_WAVES", "SQ_HS2", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_HS2_PERF_SEL_ITEMS", "SQ_HS2", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_HS2_PERF_SEL_INSTS_VALU", "SQ_HS2", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_HS2_PERF_SEL_INSTS_VMEM_WR", "SQ_HS2", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_HS2_PERF_SEL_INSTS_VMEM_RD", "SQ_HS2", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_HS2_PERF_SEL_INSTS_SALU", "SQ_HS2", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_HS2_PERF_SEL_INSTS_SMEM", "SQ_HS2", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_HS2_PERF_SEL_INSTS_FLAT", "SQ_HS2", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_HS2_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_HS2", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_HS2_PERF_SEL_INSTS_LDS", "SQ_HS2", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_HS2_PERF_SEL_INSTS_GDS", "SQ_HS2", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_HS2_PERF_SEL_WAIT_INST_LDS", "SQ_HS2", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_HS2_PERF_SEL_INST_CYCLES_VALU", "SQ_HS2", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_HS2_PERF_SEL_INST_CYCLES_SALU", "SQ_HS2", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_HS2_PERF_SEL_THREAD_CYCLES_VALU", "SQ_HS2", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_HS2_PERF_SEL_LDS_BANK_CONFLICT", "SQ_HS2", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqHs3ExposedCountersGfx8[] = {
    {4, "SQ_HS3_PERF_SEL_WAVES", "SQ_HS3", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_HS3_PERF_SEL_ITEMS", "SQ_HS3", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_HS3_PERF_SEL_INSTS_VALU", "SQ_HS3", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_HS3_PERF_SEL_INSTS_VMEM_WR", "SQ_HS3", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_HS3_PERF_SEL_INSTS_VMEM_RD", "SQ_HS3", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_HS3_PERF_SEL_INSTS_SALU", "SQ_HS3", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_HS3_PERF_SEL_INSTS_SMEM", "SQ_HS3", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_HS3_PERF_SEL_INSTS_FLAT", "SQ_HS3", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_HS3_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_HS3", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_HS3_PERF_SEL_INSTS_LDS", "SQ_HS3", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_HS3_PERF_SEL_INSTS_GDS", "SQ_HS3", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_HS3_PERF_SEL_WAIT_INST_LDS", "SQ_HS3", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_HS3_PERF_SEL_INST_CYCLES_VALU", "SQ_HS3", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_HS3_PERF_SEL_INST_CYCLES_SALU", "SQ_HS3", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_HS3_PERF_SEL_THREAD_CYCLES_VALU", "SQ_HS3", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_HS3_PERF_SEL_LDS_BANK_CONFLICT", "SQ_HS3", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqCs0ExposedCountersGfx8[] = {
    {4, "SQ_CS0_PERF_SEL_WAVES", "SQ_CS0", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_CS0_PERF_SEL_ITEMS", "SQ_CS0", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_CS0_PERF_SEL_INSTS_VALU", "SQ_CS0", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_CS0_PERF_SEL_INSTS_VMEM_WR", "SQ_CS0", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_CS0_PERF_SEL_INSTS_VMEM_RD", "SQ_CS0", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_CS0_PERF_SEL_INSTS_SALU", "SQ_CS0", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_CS0_PERF_SEL_INSTS_SMEM", "SQ_CS0", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_CS0_PERF_SEL_INSTS_FLAT", "SQ_CS0", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_CS0_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_CS0", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_CS0_PERF_SEL_INSTS_LDS", "SQ_CS0", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_CS0_PERF_SEL_INSTS_GDS", "SQ_CS0", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_CS0_PERF_SEL_WAIT_INST_LDS", "SQ_CS0", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_CS0_PERF_SEL_INST_CYCLES_VALU", "SQ_CS0", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_CS0_PERF_SEL_INST_CYCLES_SALU", "SQ_CS0", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_CS0_PERF_SEL_THREAD_CYCLES_VALU", "SQ_CS0", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_CS0_PERF_SEL_LDS_BANK_CONFLICT", "SQ_CS0", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqCs1ExposedCountersGfx8[] = {
    {4, "SQ_CS1_PERF_SEL_WAVES", "SQ_CS1", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_CS1_PERF_SEL_ITEMS", "SQ_CS1", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_CS1_PERF_SEL_INSTS_VALU", "SQ_CS1", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_CS1_PERF_SEL_INSTS_VMEM_WR", "SQ_CS1", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_CS1_PERF_SEL_INSTS_VMEM_RD", "SQ_CS1", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_CS1_PERF_SEL_INSTS_SALU", "SQ_CS1", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_CS1_PERF_SEL_INSTS_SMEM", "SQ_CS1", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_CS1_PERF_SEL_INSTS_FLAT", "SQ_CS1", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_CS1_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_CS1", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_CS1_PERF_SEL_INSTS_LDS", "SQ_CS1", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_CS1_PERF_SEL_INSTS_GDS", "SQ_CS1", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_CS1_PERF_SEL_WAIT_INST_LDS", "SQ_CS1", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_CS1_PERF_SEL_INST_CYCLES_VALU", "SQ_CS1", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_CS1_PERF_SEL_INST_CYCLES_SALU", "SQ_CS1", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_CS1_PERF_SEL_THREAD_CYCLES_VALU", "SQ_CS1", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_CS1_PERF_SEL_LDS_BANK_CONFLICT", "SQ_CS1", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqCs2ExposedCountersGfx8[] = {
    {4, "SQ_CS2_PERF_SEL_WAVES", "SQ_CS2", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_CS2_PERF_SEL_ITEMS", "SQ_CS2", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_CS2_PERF_SEL_INSTS_VALU", "SQ_CS2", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_CS2_PERF_SEL_INSTS_VMEM_WR", "SQ_CS2", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_CS2_PERF_SEL_INSTS_VMEM_RD", "SQ_CS2", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_CS2_PERF_SEL_INSTS_SALU", "SQ_CS2", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_CS2_PERF_SEL_INSTS_SMEM", "SQ_CS2", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_CS2_PERF_SEL_INSTS_FLAT", "SQ_CS2", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_CS2_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_CS2", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_CS2_PERF_SEL_INSTS_LDS", "SQ_CS2", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_CS2_PERF_SEL_INSTS_GDS", "SQ_CS2", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_CS2_PERF_SEL_WAIT_INST_LDS", "SQ_CS2", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_CS2_PERF_SEL_INST_CYCLES_VALU", "SQ_CS2", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_CS2_PERF_SEL_INST_CYCLES_SALU", "SQ_CS2", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_CS2_PERF_SEL_THREAD_CYCLES_VALU", "SQ_CS2", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_CS2_PERF_SEL_LDS_BANK_CONFLICT", "SQ_CS2", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kSqCs3ExposedCountersGfx8[] = {
    {4, "SQ_CS3_PERF_SEL_WAVES", "SQ_CS3", "Count number of waves sent to SQs. (per-simd, emulated, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {14, "SQ_CS3_PERF_SEL_ITEMS", "SQ_CS3", "Number of valid items per wave. (per-simd, global)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "SQ_CS3_PERF_SEL_INSTS_VALU", "SQ_CS3", "Number of VALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {27, "SQ_CS3_PERF_SEL_INSTS_VMEM_WR", "SQ_CS3", "Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "SQ_CS3_PERF_SEL_INSTS_VMEM_RD", "SQ_CS3", "Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {30, "SQ_CS3_PERF_SEL_INSTS_SALU", "SQ_CS3", "Number of SALU instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {31, "SQ_CS3_PERF_SEL_INSTS_SMEM", "SQ_CS3", "Number of SMEM read instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {32, "SQ_CS3_PERF_SEL_INSTS_FLAT", "SQ_CS3", "Number of FLAT instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {33, "SQ_CS3_PERF_SEL_INSTS_FLAT_LDS_ONLY", "SQ_CS3", "Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {34, "SQ_CS3_PERF_SEL_INSTS_LDS", "SQ_CS3", "Number of LDS instructions issued (including FLAT). (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "SQ_CS3_PERF_SEL_INSTS_GDS", "SQ_CS3", "Number of GDS instructions issued. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {61, "SQ_CS3_PERF_SEL_WAIT_INST_LDS", "SQ_CS3", "Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {81, "SQ_CS3_PERF_SEL_INST_CYCLES_VALU", "SQ_CS3", "Number of cycles needed to execute VALU instructions. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {86, "SQ_CS3_PERF_SEL_INST_CYCLES_SALU", "SQ_CS3", "Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "SQ_CS3_PERF_SEL_THREAD_CYCLES_VALU", "SQ_CS3", "Number of thread-cycles used to execute VALU operations (similar to INST_CYCLES_VALU but multiplied by number of active threads). (per-simd)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "SQ_CS3_PERF_SEL_LDS_BANK_CONFLICT", "SQ_CS3", "Number of cycles LDS is stalled by bank conflicts. (emulated)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa0ExposedCountersGfx8[] = {
    {15, "TA0_PERF_SEL_TA_BUSY", "TA0", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA0_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA0", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA0_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA0", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA0_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA0", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA0_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA0", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA0_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA0", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA0_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA0", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA0_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA0", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA0_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA0", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA0_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA0", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA0_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA0", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA0_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA0", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA0_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA0", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA0_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA0", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA0_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA0", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA0_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA0", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa1ExposedCountersGfx8[] = {
    {15, "TA1_PERF_SEL_TA_BUSY", "TA1", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA1_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA1", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA1_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA1", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA1_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA1", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA1_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA1", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA1_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA1", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA1_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA1", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA1_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA1", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA1_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA1", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA1_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA1", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA1_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA1", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA1_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA1", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA1_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA1", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA1_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA1", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA1_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA1", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA1_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA1", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa2ExposedCountersGfx8[] = {
    {15, "TA2_PERF_SEL_TA_BUSY", "TA2", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA2_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA2", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA2_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA2", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA2_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA2", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA2_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA2", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA2_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA2", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA2_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA2", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA2_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA2", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA2_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA2", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA2_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA2", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA2_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA2", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA2_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA2", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA2_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA2", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA2_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA2", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA2_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA2", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA2_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA2", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa3ExposedCountersGfx8[] = {
    {15, "TA3_PERF_SEL_TA_BUSY", "TA3", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA3_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA3", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA3_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA3", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA3_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA3", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA3_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA3", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA3_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA3", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA3_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA3", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA3_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA3", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA3_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA3", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA3_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA3", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA3_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA3", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA3_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA3", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA3_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA3", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA3_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA3", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA3_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA3", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA3_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA3", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa4ExposedCountersGfx8[] = {
    {15, "TA4_PERF_SEL_TA_BUSY", "TA4", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA4_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA4", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA4_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA4", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA4_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA4", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA4_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA4", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA4_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA4", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA4_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA4", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA4_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA4", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA4_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA4", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA4_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA4", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA4_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA4", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA4_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA4", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA4_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA4", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA4_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA4", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA4_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA4", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA4_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA4", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa5ExposedCountersGfx8[] = {
    {15, "TA5_PERF_SEL_TA_BUSY", "TA5", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA5_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA5", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA5_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA5", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA5_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA5", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA5_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA5", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA5_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA5", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA5_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA5", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA5_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA5", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA5_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA5", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA5_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA5", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA5_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA5", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA5_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA5", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA5_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA5", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA5_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA5", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA5_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA5", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA5_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA5", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa6ExposedCountersGfx8[] = {
    {15, "TA6_PERF_SEL_TA_BUSY", "TA6", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA6_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA6", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA6_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA6", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA6_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA6", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA6_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA6", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA6_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA6", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA6_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA6", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA6_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA6", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA6_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA6", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA6_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA6", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA6_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA6", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA6_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA6", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA6_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA6", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA6_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA6", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA6_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA6", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA6_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA6", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa7ExposedCountersGfx8[] = {
    {15, "TA7_PERF_SEL_TA_BUSY", "TA7", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA7_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA7", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA7_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA7", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA7_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA7", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA7_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA7", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA7_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA7", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA7_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA7", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA7_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA7", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA7_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA7", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA7_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA7", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA7_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA7", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA7_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA7", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA7_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA7", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA7_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA7", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA7_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA7", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA7_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA7", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa8ExposedCountersGfx8[] = {
    {15, "TA8_PERF_SEL_TA_BUSY", "TA8", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA8_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA8", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA8_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA8", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA8_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA8", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA8_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA8", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA8_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA8", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA8_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA8", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA8_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA8", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA8_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA8", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA8_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA8", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA8_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA8", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA8_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA8", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA8_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA8", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA8_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA8", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA8_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA8", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA8_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA8", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa9ExposedCountersGfx8[] = {
    {15, "TA9_PERF_SEL_TA_BUSY", "TA9", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA9_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA9", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA9_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA9", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA9_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA9", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA9_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA9", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA9_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA9", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA9_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA9", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA9_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA9", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA9_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA9", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA9_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA9", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA9_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA9", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA9_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA9", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA9_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA9", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA9_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA9", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA9_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA9", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA9_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA9", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa10ExposedCountersGfx8[] = {
    {15, "TA10_PERF_SEL_TA_BUSY", "TA10", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA10_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA10", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA10_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA10", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA10_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA10", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA10_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA10", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA10_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA10", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA10_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA10", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA10_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA10", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA10_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA10", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA10_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA10", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA10_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA10", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA10_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA10", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA10_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA10", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA10_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA10", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA10_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA10", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA10_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA10", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa11ExposedCountersGfx8[] = {
    {15, "TA11_PERF_SEL_TA_BUSY", "TA11", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA11_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA11", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA11_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA11", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA11_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA11", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA11_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA11", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA11_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA11", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA11_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA11", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA11_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA11", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA11_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA11", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA11_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA11", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA11_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA11", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA11_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA11", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA11_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA11", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA11_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA11", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA11_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA11", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA11_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA11", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa12ExposedCountersGfx8[] = {
    {15, "TA12_PERF_SEL_TA_BUSY", "TA12", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA12_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA12", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA12_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA12", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA12_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA12", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA12_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA12", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA12_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA12", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA12_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA12", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA12_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA12", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA12_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA12", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA12_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA12", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA12_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA12", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA12_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA12", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA12_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA12", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA12_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA12", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA12_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA12", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA12_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA12", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa13ExposedCountersGfx8[] = {
    {15, "TA13_PERF_SEL_TA_BUSY", "TA13", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA13_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA13", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA13_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA13", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA13_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA13", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA13_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA13", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA13_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA13", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA13_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA13", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA13_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA13", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA13_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA13", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA13_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA13", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA13_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA13", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA13_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA13", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA13_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA13", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA13_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA13", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA13_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA13", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA13_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA13", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa14ExposedCountersGfx8[] = {
    {15, "TA14_PERF_SEL_TA_BUSY", "TA14", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA14_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA14", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA14_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA14", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA14_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA14", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA14_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA14", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA14_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA14", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA14_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA14", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA14_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA14", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA14_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA14", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA14_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA14", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA14_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA14", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA14_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA14", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA14_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA14", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA14_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA14", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA14_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA14", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA14_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA14", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa15ExposedCountersGfx8[] = {
    {15, "TA15_PERF_SEL_TA_BUSY", "TA15", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA15_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA15", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA15_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA15", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA15_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA15", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA15_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA15", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA15_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA15", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA15_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA15", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA15_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA15", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA15_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA15", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA15_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA15", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA15_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA15", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA15_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA15", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA15_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA15", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA15_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA15", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA15_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA15", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA15_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA15", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa16ExposedCountersGfx8[] = {
    {15, "TA16_PERF_SEL_TA_BUSY", "TA16", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA16_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA16", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA16_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA16", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA16_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA16", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA16_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA16", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA16_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA16", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA16_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA16", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA16_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA16", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA16_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA16", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA16_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA16", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA16_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA16", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA16_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA16", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA16_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA16", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA16_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA16", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA16_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA16", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA16_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA16", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa17ExposedCountersGfx8[] = {
    {15, "TA17_PERF_SEL_TA_BUSY", "TA17", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA17_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA17", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA17_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA17", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA17_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA17", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA17_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA17", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA17_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA17", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA17_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA17", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA17_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA17", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA17_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA17", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA17_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA17", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA17_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA17", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA17_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA17", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA17_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA17", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA17_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA17", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA17_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA17", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA17_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA17", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa18ExposedCountersGfx8[] = {
    {15, "TA18_PERF_SEL_TA_BUSY", "TA18", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA18_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA18", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA18_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA18", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA18_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA18", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA18_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA18", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA18_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA18", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA18_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA18", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA18_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA18", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA18_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA18", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA18_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA18", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA18_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA18", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA18_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA18", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA18_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA18", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA18_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA18", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA18_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA18", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA18_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA18", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa19ExposedCountersGfx8[] = {
    {15, "TA19_PERF_SEL_TA_BUSY", "TA19", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA19_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA19", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA19_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA19", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA19_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA19", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA19_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA19", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA19_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA19", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA19_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA19", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA19_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA19", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA19_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA19", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA19_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA19", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA19_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA19", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA19_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA19", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA19_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA19", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA19_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA19", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA19_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA19", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA19_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA19", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa20ExposedCountersGfx8[] = {
    {15, "TA20_PERF_SEL_TA_BUSY", "TA20", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA20_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA20", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA20_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA20", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA20_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA20", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA20_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA20", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA20_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA20", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA20_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA20", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA20_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA20", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA20_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA20", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA20_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA20", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA20_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA20", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA20_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA20", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA20_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA20", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA20_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA20", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA20_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA20", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA20_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA20", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa21ExposedCountersGfx8[] = {
    {15, "TA21_PERF_SEL_TA_BUSY", "TA21", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA21_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA21", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA21_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA21", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA21_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA21", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA21_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA21", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA21_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA21", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA21_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA21", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA21_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA21", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA21_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA21", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA21_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA21", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA21_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA21", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA21_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA21", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA21_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA21", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA21_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA21", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA21_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA21", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA21_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA21", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa22ExposedCountersGfx8[] = {
    {15, "TA22_PERF_SEL_TA_BUSY", "TA22", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA22_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA22", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA22_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA22", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA22_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA22", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA22_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA22", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA22_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA22", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA22_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA22", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA22_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA22", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA22_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA22", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA22_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA22", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA22_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA22", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA22_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA22", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA22_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA22", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA22_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA22", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA22_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA22", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA22_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA22", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa23ExposedCountersGfx8[] = {
    {15, "TA23_PERF_SEL_TA_BUSY", "TA23", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA23_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA23", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA23_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA23", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA23_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA23", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA23_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA23", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA23_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA23", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA23_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA23", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA23_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA23", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA23_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA23", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA23_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA23", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA23_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA23", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA23_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA23", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA23_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA23", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA23_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA23", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA23_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA23", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA23_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA23", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa24ExposedCountersGfx8[] = {
    {15, "TA24_PERF_SEL_TA_BUSY", "TA24", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA24_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA24", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA24_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA24", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA24_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA24", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA24_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA24", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA24_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA24", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA24_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA24", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA24_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA24", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA24_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA24", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA24_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA24", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA24_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA24", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA24_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA24", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA24_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA24", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA24_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA24", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA24_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA24", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA24_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA24", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa25ExposedCountersGfx8[] = {
    {15, "TA25_PERF_SEL_TA_BUSY", "TA25", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA25_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA25", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA25_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA25", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA25_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA25", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA25_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA25", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA25_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA25", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA25_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA25", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA25_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA25", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA25_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA25", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA25_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA25", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA25_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA25", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA25_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA25", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA25_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA25", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA25_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA25", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA25_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA25", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA25_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA25", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa26ExposedCountersGfx8[] = {
    {15, "TA26_PERF_SEL_TA_BUSY", "TA26", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA26_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA26", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA26_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA26", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA26_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA26", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA26_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA26", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA26_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA26", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA26_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA26", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA26_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA26", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA26_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA26", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA26_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA26", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA26_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA26", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA26_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA26", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA26_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA26", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA26_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA26", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA26_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA26", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA26_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA26", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa27ExposedCountersGfx8[] = {
    {15, "TA27_PERF_SEL_TA_BUSY", "TA27", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA27_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA27", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA27_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA27", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA27_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA27", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA27_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA27", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA27_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA27", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA27_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA27", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA27_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA27", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA27_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA27", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA27_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA27", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA27_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA27", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA27_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA27", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA27_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA27", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA27_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA27", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA27_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA27", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA27_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA27", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa28ExposedCountersGfx8[] = {
    {15, "TA28_PERF_SEL_TA_BUSY", "TA28", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA28_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA28", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA28_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA28", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA28_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA28", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA28_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA28", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA28_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA28", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA28_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA28", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA28_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA28", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA28_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA28", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA28_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA28", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA28_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA28", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA28_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA28", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA28_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA28", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA28_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA28", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA28_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA28", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA28_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA28", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa29ExposedCountersGfx8[] = {
    {15, "TA29_PERF_SEL_TA_BUSY", "TA29", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA29_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA29", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA29_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA29", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA29_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA29", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA29_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA29", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA29_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA29", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA29_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA29", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA29_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA29", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA29_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA29", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA29_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA29", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA29_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA29", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA29_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA29", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA29_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA29", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA29_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA29", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA29_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA29", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA29_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA29", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa30ExposedCountersGfx8[] = {
    {15, "TA30_PERF_SEL_TA_BUSY", "TA30", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA30_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA30", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA30_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA30", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA30_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA30", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA30_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA30", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA30_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA30", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA30_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA30", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA30_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA30", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA30_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA30", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA30_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA30", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA30_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA30", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA30_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA30", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA30_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA30", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA30_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA30", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA30_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA30", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA30_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA30", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa31ExposedCountersGfx8[] = {
    {15, "TA31_PERF_SEL_TA_BUSY", "TA31", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA31_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA31", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA31_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA31", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA31_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA31", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA31_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA31", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA31_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA31", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA31_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA31", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA31_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA31", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA31_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA31", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA31_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA31", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA31_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA31", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA31_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA31", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA31_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA31", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA31_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA31", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA31_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA31", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA31_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA31", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa32ExposedCountersGfx8[] = {
    {15, "TA32_PERF_SEL_TA_BUSY", "TA32", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA32_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA32", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA32_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA32", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA32_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA32", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA32_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA32", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA32_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA32", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA32_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA32", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA32_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA32", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA32_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA32", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA32_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA32", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA32_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA32", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA32_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA32", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA32_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA32", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA32_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA32", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA32_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA32", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA32_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA32", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa33ExposedCountersGfx8[] = {
    {15, "TA33_PERF_SEL_TA_BUSY", "TA33", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA33_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA33", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA33_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA33", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA33_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA33", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA33_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA33", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA33_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA33", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA33_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA33", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA33_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA33", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA33_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA33", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA33_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA33", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA33_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA33", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA33_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA33", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA33_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA33", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA33_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA33", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA33_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA33", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA33_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA33", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa34ExposedCountersGfx8[] = {
    {15, "TA34_PERF_SEL_TA_BUSY", "TA34", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA34_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA34", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA34_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA34", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA34_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA34", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA34_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA34", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA34_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA34", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA34_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA34", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA34_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA34", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA34_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA34", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA34_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA34", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA34_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA34", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA34_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA34", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA34_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA34", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA34_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA34", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA34_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA34", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA34_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA34", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa35ExposedCountersGfx8[] = {
    {15, "TA35_PERF_SEL_TA_BUSY", "TA35", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA35_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA35", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA35_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA35", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA35_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA35", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA35_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA35", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA35_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA35", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA35_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA35", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA35_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA35", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA35_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA35", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA35_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA35", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA35_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA35", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA35_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA35", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA35_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA35", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA35_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA35", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA35_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA35", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA35_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA35", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa36ExposedCountersGfx8[] = {
    {15, "TA36_PERF_SEL_TA_BUSY", "TA36", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA36_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA36", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA36_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA36", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA36_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA36", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA36_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA36", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA36_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA36", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA36_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA36", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA36_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA36", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA36_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA36", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA36_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA36", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA36_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA36", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA36_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA36", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA36_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA36", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA36_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA36", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA36_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA36", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA36_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA36", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa37ExposedCountersGfx8[] = {
    {15, "TA37_PERF_SEL_TA_BUSY", "TA37", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA37_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA37", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA37_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA37", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA37_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA37", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA37_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA37", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA37_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA37", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA37_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA37", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA37_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA37", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA37_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA37", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA37_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA37", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA37_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA37", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA37_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA37", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA37_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA37", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA37_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA37", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA37_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA37", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA37_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA37", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa38ExposedCountersGfx8[] = {
    {15, "TA38_PERF_SEL_TA_BUSY", "TA38", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA38_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA38", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA38_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA38", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA38_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA38", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA38_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA38", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA38_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA38", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA38_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA38", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA38_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA38", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA38_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA38", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA38_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA38", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA38_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA38", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA38_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA38", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA38_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA38", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA38_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA38", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA38_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA38", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA38_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA38", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa39ExposedCountersGfx8[] = {
    {15, "TA39_PERF_SEL_TA_BUSY", "TA39", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA39_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA39", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA39_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA39", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA39_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA39", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA39_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA39", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA39_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA39", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA39_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA39", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA39_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA39", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA39_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA39", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA39_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA39", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA39_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA39", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA39_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA39", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA39_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA39", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA39_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA39", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA39_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA39", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA39_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA39", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa40ExposedCountersGfx8[] = {
    {15, "TA40_PERF_SEL_TA_BUSY", "TA40", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA40_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA40", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA40_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA40", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA40_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA40", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA40_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA40", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA40_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA40", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA40_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA40", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA40_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA40", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA40_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA40", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA40_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA40", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA40_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA40", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA40_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA40", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA40_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA40", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA40_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA40", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA40_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA40", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA40_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA40", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa41ExposedCountersGfx8[] = {
    {15, "TA41_PERF_SEL_TA_BUSY", "TA41", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA41_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA41", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA41_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA41", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA41_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA41", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA41_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA41", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA41_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA41", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA41_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA41", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA41_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA41", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA41_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA41", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA41_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA41", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA41_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA41", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA41_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA41", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA41_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA41", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA41_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA41", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA41_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA41", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA41_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA41", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa42ExposedCountersGfx8[] = {
    {15, "TA42_PERF_SEL_TA_BUSY", "TA42", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA42_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA42", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA42_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA42", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA42_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA42", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA42_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA42", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA42_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA42", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA42_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA42", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA42_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA42", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA42_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA42", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA42_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA42", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA42_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA42", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA42_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA42", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA42_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA42", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA42_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA42", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA42_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA42", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA42_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA42", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa43ExposedCountersGfx8[] = {
    {15, "TA43_PERF_SEL_TA_BUSY", "TA43", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA43_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA43", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA43_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA43", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA43_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA43", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA43_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA43", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA43_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA43", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA43_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA43", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA43_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA43", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA43_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA43", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA43_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA43", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA43_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA43", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA43_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA43", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA43_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA43", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA43_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA43", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA43_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA43", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA43_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA43", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa44ExposedCountersGfx8[] = {
    {15, "TA44_PERF_SEL_TA_BUSY", "TA44", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA44_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA44", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA44_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA44", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA44_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA44", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA44_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA44", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA44_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA44", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA44_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA44", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA44_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA44", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA44_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA44", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA44_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA44", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA44_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA44", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA44_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA44", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA44_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA44", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA44_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA44", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA44_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA44", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA44_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA44", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa45ExposedCountersGfx8[] = {
    {15, "TA45_PERF_SEL_TA_BUSY", "TA45", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA45_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA45", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA45_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA45", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA45_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA45", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA45_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA45", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA45_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA45", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA45_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA45", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA45_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA45", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA45_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA45", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA45_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA45", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA45_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA45", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA45_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA45", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA45_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA45", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA45_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA45", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA45_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA45", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA45_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA45", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa46ExposedCountersGfx8[] = {
    {15, "TA46_PERF_SEL_TA_BUSY", "TA46", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA46_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA46", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA46_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA46", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA46_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA46", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA46_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA46", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA46_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA46", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA46_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA46", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA46_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA46", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA46_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA46", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA46_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA46", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA46_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA46", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA46_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA46", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA46_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA46", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA46_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA46", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA46_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA46", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA46_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA46", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa47ExposedCountersGfx8[] = {
    {15, "TA47_PERF_SEL_TA_BUSY", "TA47", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA47_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA47", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA47_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA47", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA47_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA47", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA47_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA47", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA47_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA47", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA47_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA47", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA47_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA47", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA47_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA47", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA47_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA47", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA47_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA47", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA47_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA47", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA47_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA47", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA47_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA47", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA47_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA47", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA47_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA47", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa48ExposedCountersGfx8[] = {
    {15, "TA48_PERF_SEL_TA_BUSY", "TA48", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA48_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA48", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA48_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA48", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA48_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA48", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA48_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA48", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA48_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA48", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA48_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA48", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA48_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA48", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA48_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA48", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA48_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA48", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA48_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA48", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA48_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA48", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA48_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA48", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA48_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA48", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA48_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA48", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA48_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA48", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa49ExposedCountersGfx8[] = {
    {15, "TA49_PERF_SEL_TA_BUSY", "TA49", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA49_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA49", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA49_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA49", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA49_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA49", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA49_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA49", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA49_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA49", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA49_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA49", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA49_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA49", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA49_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA49", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA49_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA49", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA49_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA49", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA49_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA49", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA49_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA49", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA49_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA49", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA49_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA49", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA49_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA49", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa50ExposedCountersGfx8[] = {
    {15, "TA50_PERF_SEL_TA_BUSY", "TA50", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA50_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA50", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA50_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA50", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA50_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA50", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA50_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA50", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA50_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA50", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA50_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA50", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA50_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA50", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA50_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA50", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA50_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA50", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA50_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA50", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA50_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA50", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA50_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA50", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA50_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA50", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA50_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA50", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA50_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA50", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa51ExposedCountersGfx8[] = {
    {15, "TA51_PERF_SEL_TA_BUSY", "TA51", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA51_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA51", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA51_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA51", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA51_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA51", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA51_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA51", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA51_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA51", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA51_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA51", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA51_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA51", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA51_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA51", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA51_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA51", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA51_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA51", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA51_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA51", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA51_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA51", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA51_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA51", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA51_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA51", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA51_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA51", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa52ExposedCountersGfx8[] = {
    {15, "TA52_PERF_SEL_TA_BUSY", "TA52", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA52_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA52", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA52_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA52", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA52_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA52", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA52_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA52", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA52_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA52", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA52_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA52", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA52_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA52", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA52_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA52", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA52_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA52", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA52_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA52", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA52_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA52", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA52_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA52", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA52_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA52", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA52_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA52", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA52_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA52", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa53ExposedCountersGfx8[] = {
    {15, "TA53_PERF_SEL_TA_BUSY", "TA53", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA53_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA53", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA53_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA53", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA53_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA53", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA53_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA53", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA53_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA53", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA53_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA53", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA53_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA53", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA53_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA53", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA53_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA53", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA53_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA53", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA53_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA53", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA53_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA53", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA53_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA53", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA53_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA53", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA53_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA53", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa54ExposedCountersGfx8[] = {
    {15, "TA54_PERF_SEL_TA_BUSY", "TA54", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA54_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA54", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA54_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA54", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA54_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA54", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA54_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA54", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA54_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA54", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA54_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA54", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA54_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA54", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA54_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA54", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA54_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA54", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA54_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA54", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA54_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA54", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA54_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA54", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA54_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA54", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA54_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA54", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA54_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA54", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa55ExposedCountersGfx8[] = {
    {15, "TA55_PERF_SEL_TA_BUSY", "TA55", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA55_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA55", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA55_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA55", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA55_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA55", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA55_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA55", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA55_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA55", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA55_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA55", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA55_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA55", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA55_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA55", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA55_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA55", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA55_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA55", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA55_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA55", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA55_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA55", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA55_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA55", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA55_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA55", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA55_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA55", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa56ExposedCountersGfx8[] = {
    {15, "TA56_PERF_SEL_TA_BUSY", "TA56", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA56_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA56", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA56_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA56", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA56_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA56", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA56_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA56", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA56_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA56", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA56_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA56", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA56_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA56", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA56_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA56", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA56_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA56", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA56_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA56", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA56_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA56", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA56_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA56", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA56_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA56", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA56_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA56", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA56_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA56", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa57ExposedCountersGfx8[] = {
    {15, "TA57_PERF_SEL_TA_BUSY", "TA57", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA57_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA57", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA57_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA57", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA57_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA57", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA57_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA57", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA57_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA57", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA57_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA57", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA57_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA57", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA57_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA57", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA57_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA57", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA57_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA57", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA57_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA57", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA57_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA57", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA57_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA57", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA57_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA57", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA57_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA57", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa58ExposedCountersGfx8[] = {
    {15, "TA58_PERF_SEL_TA_BUSY", "TA58", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA58_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA58", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA58_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA58", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA58_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA58", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA58_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA58", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA58_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA58", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA58_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA58", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA58_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA58", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA58_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA58", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA58_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA58", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA58_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA58", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA58_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA58", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA58_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA58", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA58_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA58", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA58_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA58", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA58_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA58", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa59ExposedCountersGfx8[] = {
    {15, "TA59_PERF_SEL_TA_BUSY", "TA59", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA59_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA59", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA59_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA59", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA59_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA59", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA59_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA59", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA59_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA59", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA59_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA59", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA59_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA59", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA59_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA59", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA59_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA59", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA59_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA59", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA59_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA59", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA59_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA59", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA59_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA59", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA59_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA59", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA59_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA59", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa60ExposedCountersGfx8[] = {
    {15, "TA60_PERF_SEL_TA_BUSY", "TA60", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA60_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA60", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA60_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA60", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA60_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA60", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA60_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA60", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA60_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA60", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA60_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA60", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA60_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA60", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA60_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA60", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA60_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA60", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA60_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA60", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA60_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA60", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA60_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA60", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA60_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA60", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA60_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA60", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA60_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA60", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa61ExposedCountersGfx8[] = {
    {15, "TA61_PERF_SEL_TA_BUSY", "TA61", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA61_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA61", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA61_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA61", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA61_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA61", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA61_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA61", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA61_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA61", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA61_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA61", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA61_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA61", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA61_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA61", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA61_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA61", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA61_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA61", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA61_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA61", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA61_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA61", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA61_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA61", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA61_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA61", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA61_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA61", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa62ExposedCountersGfx8[] = {
    {15, "TA62_PERF_SEL_TA_BUSY", "TA62", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA62_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA62", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA62_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA62", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA62_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA62", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA62_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA62", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA62_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA62", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA62_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA62", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA62_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA62", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA62_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA62", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA62_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA62", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA62_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA62", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA62_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA62", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA62_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA62", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA62_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA62", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA62_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA62", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA62_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA62", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTa63ExposedCountersGfx8[] = {
    {15, "TA63_PERF_SEL_TA_BUSY", "TA63", "TA block is busy. Perf_Windowing not supported for this counter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {68, "TA63_PERF_SEL_MIP_1_CYCLE_PIXELS", "TA63", "Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {69, "TA63_PERF_SEL_MIP_2_CYCLE_PIXELS", "TA63", "Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {70, "TA63_PERF_SEL_VOL_1_CYCLE_PIXELS", "TA63", "Number of pixels requiring sampler state machine to take 1 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {71, "TA63_PERF_SEL_VOL_2_CYCLE_PIXELS", "TA63", "Number of pixels requiring sampler state machine to take 2 cycle due to z filter.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {89, "TA63_PERF_SEL_ANISO_1_CYCLE_QUADS", "TA63", "Number of quads requiring 1 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {90, "TA63_PERF_SEL_ANISO_2_CYCLE_QUADS", "TA63", "Number of quads requiring 2 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {91, "TA63_PERF_SEL_ANISO_4_CYCLE_QUADS", "TA63", "Number of quads requiring 4 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {92, "TA63_PERF_SEL_ANISO_6_CYCLE_QUADS", "TA63", "Number of quads requiring 6 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {93, "TA63_PERF_SEL_ANISO_8_CYCLE_QUADS", "TA63", "Number of quads requiring 8 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {94, "TA63_PERF_SEL_ANISO_10_CYCLE_QUADS", "TA63", "Number of quads requiring 10 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {95, "TA63_PERF_SEL_ANISO_12_CYCLE_QUADS", "TA63", "Number of quads requiring 12 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "TA63_PERF_SEL_ANISO_14_CYCLE_QUADS", "TA63", "Number of quads requiring 14 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {97, "TA63_PERF_SEL_ANISO_16_CYCLE_QUADS", "TA63", "Number of quads requiring 16 aniso sample.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {101, "TA63_PERF_SEL_FLAT_READ_WAVEFRONTS", "TA63", "Number of flat opcode reads processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {102, "TA63_PERF_SEL_FLAT_WRITE_WAVEFRONTS", "TA63", "Number of flat opcode writes processed by the TA.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp0ExposedCountersGfx8[] = {
    {3, "TCP0_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP0", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp1ExposedCountersGfx8[] = {
    {3, "TCP1_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP1", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp2ExposedCountersGfx8[] = {
    {3, "TCP2_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP2", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp3ExposedCountersGfx8[] = {
    {3, "TCP3_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP3", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp4ExposedCountersGfx8[] = {
    {3, "TCP4_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP4", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp5ExposedCountersGfx8[] = {
    {3, "TCP5_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP5", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp6ExposedCountersGfx8[] = {
    {3, "TCP6_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP6", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp7ExposedCountersGfx8[] = {
    {3, "TCP7_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP7", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp8ExposedCountersGfx8[] = {
    {3, "TCP8_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP8", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp9ExposedCountersGfx8[] = {
    {3, "TCP9_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP9", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp10ExposedCountersGfx8[] = {
    {3, "TCP10_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP10", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp11ExposedCountersGfx8[] = {
    {3, "TCP11_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP11", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp12ExposedCountersGfx8[] = {
    {3, "TCP12_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP12", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp13ExposedCountersGfx8[] = {
    {3, "TCP13_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP13", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp14ExposedCountersGfx8[] = {
    {3, "TCP14_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP14", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp15ExposedCountersGfx8[] = {
    {3, "TCP15_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP15", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp16ExposedCountersGfx8[] = {
    {3, "TCP16_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP16", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp17ExposedCountersGfx8[] = {
    {3, "TCP17_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP17", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp18ExposedCountersGfx8[] = {
    {3, "TCP18_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP18", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp19ExposedCountersGfx8[] = {
    {3, "TCP19_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP19", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp20ExposedCountersGfx8[] = {
    {3, "TCP20_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP20", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp21ExposedCountersGfx8[] = {
    {3, "TCP21_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP21", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp22ExposedCountersGfx8[] = {
    {3, "TCP22_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP22", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp23ExposedCountersGfx8[] = {
    {3, "TCP23_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP23", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp24ExposedCountersGfx8[] = {
    {3, "TCP24_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP24", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp25ExposedCountersGfx8[] = {
    {3, "TCP25_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP25", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp26ExposedCountersGfx8[] = {
    {3, "TCP26_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP26", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp27ExposedCountersGfx8[] = {
    {3, "TCP27_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP27", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp28ExposedCountersGfx8[] = {
    {3, "TCP28_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP28", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp29ExposedCountersGfx8[] = {
    {3, "TCP29_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP29", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp30ExposedCountersGfx8[] = {
    {3, "TCP30_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP30", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp31ExposedCountersGfx8[] = {
    {3, "TCP31_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP31", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp32ExposedCountersGfx8[] = {
    {3, "TCP32_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP32", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp33ExposedCountersGfx8[] = {
    {3, "TCP33_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP33", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp34ExposedCountersGfx8[] = {
    {3, "TCP34_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP34", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp35ExposedCountersGfx8[] = {
    {3, "TCP35_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP35", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp36ExposedCountersGfx8[] = {
    {3, "TCP36_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP36", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp37ExposedCountersGfx8[] = {
    {3, "TCP37_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP37", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp38ExposedCountersGfx8[] = {
    {3, "TCP38_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP38", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp39ExposedCountersGfx8[] = {
    {3, "TCP39_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP39", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp40ExposedCountersGfx8[] = {
    {3, "TCP40_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP40", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp41ExposedCountersGfx8[] = {
    {3, "TCP41_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP41", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp42ExposedCountersGfx8[] = {
    {3, "TCP42_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP42", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp43ExposedCountersGfx8[] = {
    {3, "TCP43_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP43", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp44ExposedCountersGfx8[] = {
    {3, "TCP44_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP44", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp45ExposedCountersGfx8[] = {
    {3, "TCP45_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP45", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp46ExposedCountersGfx8[] = {
    {3, "TCP46_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP46", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp47ExposedCountersGfx8[] = {
    {3, "TCP47_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP47", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp48ExposedCountersGfx8[] = {
    {3, "TCP48_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP48", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp49ExposedCountersGfx8[] = {
    {3, "TCP49_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP49", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp50ExposedCountersGfx8[] = {
    {3, "TCP50_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP50", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp51ExposedCountersGfx8[] = {
    {3, "TCP51_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP51", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp52ExposedCountersGfx8[] = {
    {3, "TCP52_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP52", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp53ExposedCountersGfx8[] = {
    {3, "TCP53_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP53", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp54ExposedCountersGfx8[] = {
    {3, "TCP54_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP54", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp55ExposedCountersGfx8[] = {
    {3, "TCP55_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP55", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp56ExposedCountersGfx8[] = {
    {3, "TCP56_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP56", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp57ExposedCountersGfx8[] = {
    {3, "TCP57_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP57", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp58ExposedCountersGfx8[] = {
    {3, "TCP58_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP58", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp59ExposedCountersGfx8[] = {
    {3, "TCP59_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP59", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp60ExposedCountersGfx8[] = {
    {3, "TCP60_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP60", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp61ExposedCountersGfx8[] = {
    {3, "TCP61_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP61", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp62ExposedCountersGfx8[] = {
    {3, "TCP62_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP62", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcp63ExposedCountersGfx8[] = {
    {3, "TCP63_PERF_SEL_TCP_TA_DATA_STALL_CYCLES", "TCP63", "TCP stalls TA data interface. Now Windowed.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc0ExposedCountersGfx8[] = {
    {18, "TCC0_PERF_SEL_HIT", "TCC0", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC0_PERF_SEL_MISS", "TCC0", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC0_PERF_SEL_MC_WRREQ", "TCC0", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC0_PERF_SEL_MC_WRREQ_STALL", "TCC0", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC0_PERF_SEL_MC_RDREQ", "TCC0", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc1ExposedCountersGfx8[] = {
    {18, "TCC1_PERF_SEL_HIT", "TCC1", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC1_PERF_SEL_MISS", "TCC1", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC1_PERF_SEL_MC_WRREQ", "TCC1", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC1_PERF_SEL_MC_WRREQ_STALL", "TCC1", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC1_PERF_SEL_MC_RDREQ", "TCC1", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc2ExposedCountersGfx8[] = {
    {18, "TCC2_PERF_SEL_HIT", "TCC2", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC2_PERF_SEL_MISS", "TCC2", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC2_PERF_SEL_MC_WRREQ", "TCC2", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC2_PERF_SEL_MC_WRREQ_STALL", "TCC2", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC2_PERF_SEL_MC_RDREQ", "TCC2", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc3ExposedCountersGfx8[] = {
    {18, "TCC3_PERF_SEL_HIT", "TCC3", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC3_PERF_SEL_MISS", "TCC3", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC3_PERF_SEL_MC_WRREQ", "TCC3", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC3_PERF_SEL_MC_WRREQ_STALL", "TCC3", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC3_PERF_SEL_MC_RDREQ", "TCC3", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc4ExposedCountersGfx8[] = {
    {18, "TCC4_PERF_SEL_HIT", "TCC4", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC4_PERF_SEL_MISS", "TCC4", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC4_PERF_SEL_MC_WRREQ", "TCC4", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC4_PERF_SEL_MC_WRREQ_STALL", "TCC4", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC4_PERF_SEL_MC_RDREQ", "TCC4", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc5ExposedCountersGfx8[] = {
    {18, "TCC5_PERF_SEL_HIT", "TCC5", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC5_PERF_SEL_MISS", "TCC5", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC5_PERF_SEL_MC_WRREQ", "TCC5", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC5_PERF_SEL_MC_WRREQ_STALL", "TCC5", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC5_PERF_SEL_MC_RDREQ", "TCC5", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc6ExposedCountersGfx8[] = {
    {18, "TCC6_PERF_SEL_HIT", "TCC6", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC6_PERF_SEL_MISS", "TCC6", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC6_PERF_SEL_MC_WRREQ", "TCC6", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC6_PERF_SEL_MC_WRREQ_STALL", "TCC6", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC6_PERF_SEL_MC_RDREQ", "TCC6", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc7ExposedCountersGfx8[] = {
    {18, "TCC7_PERF_SEL_HIT", "TCC7", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC7_PERF_SEL_MISS", "TCC7", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC7_PERF_SEL_MC_WRREQ", "TCC7", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC7_PERF_SEL_MC_WRREQ_STALL", "TCC7", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC7_PERF_SEL_MC_RDREQ", "TCC7", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc8ExposedCountersGfx8[] = {
    {18, "TCC8_PERF_SEL_HIT", "TCC8", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC8_PERF_SEL_MISS", "TCC8", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC8_PERF_SEL_MC_WRREQ", "TCC8", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC8_PERF_SEL_MC_WRREQ_STALL", "TCC8", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC8_PERF_SEL_MC_RDREQ", "TCC8", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc9ExposedCountersGfx8[] = {
    {18, "TCC9_PERF_SEL_HIT", "TCC9", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC9_PERF_SEL_MISS", "TCC9", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC9_PERF_SEL_MC_WRREQ", "TCC9", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC9_PERF_SEL_MC_WRREQ_STALL", "TCC9", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC9_PERF_SEL_MC_RDREQ", "TCC9", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc10ExposedCountersGfx8[] = {
    {18, "TCC10_PERF_SEL_HIT", "TCC10", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC10_PERF_SEL_MISS", "TCC10", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC10_PERF_SEL_MC_WRREQ", "TCC10", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC10_PERF_SEL_MC_WRREQ_STALL", "TCC10", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC10_PERF_SEL_MC_RDREQ", "TCC10", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc11ExposedCountersGfx8[] = {
    {18, "TCC11_PERF_SEL_HIT", "TCC11", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC11_PERF_SEL_MISS", "TCC11", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC11_PERF_SEL_MC_WRREQ", "TCC11", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC11_PERF_SEL_MC_WRREQ_STALL", "TCC11", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC11_PERF_SEL_MC_RDREQ", "TCC11", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc12ExposedCountersGfx8[] = {
    {18, "TCC12_PERF_SEL_HIT", "TCC12", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC12_PERF_SEL_MISS", "TCC12", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC12_PERF_SEL_MC_WRREQ", "TCC12", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC12_PERF_SEL_MC_WRREQ_STALL", "TCC12", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC12_PERF_SEL_MC_RDREQ", "TCC12", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc13ExposedCountersGfx8[] = {
    {18, "TCC13_PERF_SEL_HIT", "TCC13", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC13_PERF_SEL_MISS", "TCC13", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC13_PERF_SEL_MC_WRREQ", "TCC13", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC13_PERF_SEL_MC_WRREQ_STALL", "TCC13", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC13_PERF_SEL_MC_RDREQ", "TCC13", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc14ExposedCountersGfx8[] = {
    {18, "TCC14_PERF_SEL_HIT", "TCC14", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC14_PERF_SEL_MISS", "TCC14", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC14_PERF_SEL_MC_WRREQ", "TCC14", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC14_PERF_SEL_MC_WRREQ_STALL", "TCC14", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC14_PERF_SEL_MC_RDREQ", "TCC14", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kTcc15ExposedCountersGfx8[] = {
    {18, "TCC15_PERF_SEL_HIT", "TCC15", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {19, "TCC15_PERF_SEL_MISS", "TCC15", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {26, "TCC15_PERF_SEL_MC_WRREQ", "TCC15", "Number of 32-byte transactions going over the TC_MC_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {28, "TCC15_PERF_SEL_MC_WRREQ_STALL", "TCC15", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {35, "TCC15_PERF_SEL_MC_RDREQ", "TCC15", "Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kVgt0ExposedCountersGfx8[] = {
    {1, "VGT0_PERF_VGT_SPI_ESVERT_VALID", "VGT0", "ES Vert is valid", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {9, "VGT0_PERF_VGT_SPI_GSPRIM_VALID", "VGT0", "ES GS Primitive send is active", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {20, "VGT0_PERF_VGT_SPI_VSVERT_SEND", "VGT0", "VS vert send", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "VGT0_PERF_VGT_SPI_LSVERT_VALID", "VGT0", "LS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {105, "VGT0_PERF_VGT_SPI_HSVERT_VALID", "VGT0", "HS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {124, "VGT0_PERF_VGT_TE11_BUSY", "VGT0", "Counts number of cycles the TE11 block is busy. (DX11 Tessellation Fixed Function Logic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kVgt1ExposedCountersGfx8[] = {
    {1, "VGT1_PERF_VGT_SPI_ESVERT_VALID", "VGT1", "ES Vert is valid", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {9, "VGT1_PERF_VGT_SPI_GSPRIM_VALID", "VGT1", "ES GS Primitive send is active", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {20, "VGT1_PERF_VGT_SPI_VSVERT_SEND", "VGT1", "VS vert send", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "VGT1_PERF_VGT_SPI_LSVERT_VALID", "VGT1", "LS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {105, "VGT1_PERF_VGT_SPI_HSVERT_VALID", "VGT1", "HS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {124, "VGT1_PERF_VGT_TE11_BUSY", "VGT1", "Counts number of cycles the TE11 block is busy. (DX11 Tessellation Fixed Function Logic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kVgt2ExposedCountersGfx8[] = {
    {1, "VGT2_PERF_VGT_SPI_ESVERT_VALID", "VGT2", "ES Vert is valid", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {9, "VGT2_PERF_VGT_SPI_GSPRIM_VALID", "VGT2", "ES GS Primitive send is active", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {20, "VGT2_PERF_VGT_SPI_VSVERT_SEND", "VGT2", "VS vert send", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "VGT2_PERF_VGT_SPI_LSVERT_VALID", "VGT2", "LS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {105, "VGT2_PERF_VGT_SPI_HSVERT_VALID", "VGT2", "HS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {124, "VGT2_PERF_VGT_TE11_BUSY", "VGT2", "Counts number of cycles the TE11 block is busy. (DX11 Tessellation Fixed Function Logic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kVgt3ExposedCountersGfx8[] = {
    {1, "VGT3_PERF_VGT_SPI_ESVERT_VALID", "VGT3", "ES Vert is valid", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {9, "VGT3_PERF_VGT_SPI_GSPRIM_VALID", "VGT3", "ES GS Primitive send is active", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {20, "VGT3_PERF_VGT_SPI_VSVERT_SEND", "VGT3", "VS vert send", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {96, "VGT3_PERF_VGT_SPI_LSVERT_VALID", "VGT3", "LS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {105, "VGT3_PERF_VGT_SPI_HSVERT_VALID", "VGT3", "HS Vert is valid. Sensitive to PERF_SEID_IGNORE_MASK", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {124, "VGT3_PERF_VGT_TE11_BUSY", "VGT3", "Counts number of cycles the TE11 block is busy. (DX11 Tessellation Fixed Function Logic)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};

    GpaHardwareCounterDesc kGputimeExposedCountersGfx8[] = {
    {0, "GPUTime_BOTTOM_TO_BOTTOM_DURATION", "GPUTime", "delta between the previous command reaching bottom of pipe and the current command reaching bottom of pipe, will not include latency of first data to travel through pipeline, best for large data sets.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {1, "GPUTime_BOTTOM_TO_BOTTOM_START", "GPUTime", "time of the previous command reaching bottom of pipe", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {2, "GPUTime_BOTTOM_TO_BOTTOM_END", "GPUTime", "time of the current command reaching bottom of pipe", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {3, "GPUTime_TOP_TO_BOTTOM_DURATION", "GPUTime", "execution duration of the current command from top of pipe to bottom of pipe, may include overhead of time in queue", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {4, "GPUTime_TOP_TO_BOTTOM_START", "GPUTime", "time that the current command reaches the top of pipe", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    {5, "GPUTime_TOP_TO_BOTTOM_END", "GPUTime", "time that the current command reaches the bottom of pipe", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
};
} // counter_gfx8
