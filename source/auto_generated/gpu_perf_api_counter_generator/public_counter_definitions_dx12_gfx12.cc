//==============================================================================
// Copyright (c) 2010-2025 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief Public Counter Definitions for DX12 GFX12.
//==============================================================================

#include <array>
#include "gpu_perf_api_common/gpa_array_view.hpp"
// clang-format off
#include "gpu_perf_api_counter_generator/gpa_counter.h"
#include "auto_generated/gpu_perf_api_counter_generator/public_counter_definitions_dx12_gfx12.h"

// *** Note, this is an auto-generated file. Do not edit. Execute PublicCounterCompiler to rebuild.

void AutoDefinePublicDerivedCountersDx12Gfx12(GpaDerivedCounters& c)
{
    { // Index:0
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                189754,
        };
        c.DefineDerivedCounter("GPUTime",
                               "Timing",
                               "Time this API command took to execute on the GPU in nanoseconds from the time the previous command reached the bottom of the pipeline (BOP) to the time this command reaches the bottom of the pipeline (BOP). Does not include time that draw calls are processed in parallel.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "0,TS_FREQ,/,(1000000000),*",
                               "cbd338f2-de6c-7b14-92ad-ba724ca2e501");
    }
    { // Index:1
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                189757,
        };
        c.DefineDerivedCounter("ExecutionDuration",
                               "Timing",
                               "GPU command execution duration in nanoseconds, from the time the command enters the top of the pipeline (TOP) to the time the command reaches the bottom of the pipeline (BOP). Does not include time that draw calls are processed in parallel.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "0,TS_FREQ,/,(1000000000),*",
                               "b2f08d0d-af13-cd66-d3b4-b290ad448e69");
    }
    { // Index:2
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                189758,
        };
        c.DefineDerivedCounter("ExecutionStart",
                               "Timing",
                               "GPU command execution start time in nanoseconds. This is the time the command enters the top of the pipeline (TOP).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "0,TS_FREQ,/,(1000000000),*",
                               "a368f79d-fcfe-2158-71c4-2f0c4eef5aa4");
    }
    { // Index:3
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                189759,
        };
        c.DefineDerivedCounter("ExecutionEnd",
                               "Timing",
                               "GPU command execution end time in nanoseconds. This is the time the command reaches the bottom of the pipeline (BOP).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "0,TS_FREQ,/,(1000000000),*",
                               "0bce206a-0976-06a2-bf20-03fb351035a8");
    }
    { // Index:4
        static constexpr std::array<GpaUInt32, 2> kHardwareCounters = {
                24,
                0,
        };
        c.DefineDerivedCounter("GPUBusy",
                               "Timing",
                               "The percentage of time the GPU command processor was busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,/,(100),*,(100),min",
                               "b1ba5363-1abc-fe66-2fdd-1fe6ee8989a0");
    }
    { // Index:5
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                24,
        };
        c.DefineDerivedCounter("GPUBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the GPU command processor was busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "0",
                               "451cb045-23af-ac44-4603-d5832fa041d9");
    }
    { // Index:6
        static constexpr std::array<GpaUInt32, 2> kHardwareCounters = {
                103358,
                24,
        };
        c.DefineDerivedCounter("TessellatorBusy",
                               "Timing",
                               "The percentage of time the tessellation engine is busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,/,(100),*",
                               "36af6c72-dcfb-8102-4fd4-ce8ddc573365");
    }
    { // Index:7
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                103358,
        };
        c.DefineDerivedCounter("TessellatorBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the tessellation engine is busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "0",
                               "60289dcb-7b33-46e7-26d1-8a2121605543");
    }
    { // Index:8
        static constexpr std::array<GpaUInt32, 9> kHardwareCounters = {
                29666,
                29985,
                30304,
                30623,
                29691,
                30010,
                30329,
                30648,
                24,
        };
        c.DefineDerivedCounter("VsGsBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has VS or GS work to do in a VS-[GS-]PS pipeline.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,max4,(0),4,5,6,7,sum4,ifnotzero,8,/,(100),*,(100),min",
                               "969c41c7-eb0b-9706-a7a1-98f27c3af56b");
    }
    { // Index:9
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29666,
                29985,
                30304,
                30623,
                29691,
                30010,
                30329,
                30648,
        };
        c.DefineDerivedCounter("VsGsBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has VS or GS work to do in a VS-[GS-]PS pipeline.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,max4,(0),4,5,6,7,sum4,ifnotzero",
                               "a8420bb7-6bd8-930a-9088-d73b9c039851");
    }
    { // Index:10
        static constexpr std::array<GpaUInt32, 10> kHardwareCounters = {
                189754,
                29666,
                29985,
                30304,
                30623,
                29691,
                30010,
                30329,
                30648,
                24,
        };
        c.DefineDerivedCounter("VsGsTime",
                               "Timing",
                               "Time VS or GS are busy in nanoseconds in a VS-[GS-]PS pipeline.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "1,2,3,4,max4,(0),5,6,7,8,sum4,ifnotzero,9,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "3ce33b11-210d-b3de-9b6c-b9f3cd04beff");
    }
    { // Index:11
        static constexpr std::array<GpaUInt32, 9> kHardwareCounters = {
                29686,
                30005,
                30324,
                30643,
                29691,
                30010,
                30329,
                30648,
                24,
        };
        c.DefineDerivedCounter("PreTessellationBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has VS and HS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "(0),0,1,2,3,max4,4,5,6,7,sum4,ifnotzero,8,/,(100),*,(100),min",
                               "346c7430-4666-7065-b5b7-1cb8cbb1c01c");
    }
    { // Index:12
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29686,
                30005,
                30324,
                30643,
                29691,
                30010,
                30329,
                30648,
        };
        c.DefineDerivedCounter("PreTessellationBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has VS and HS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "(0),0,1,2,3,max4,4,5,6,7,sum4,ifnotzero",
                               "dac68e38-0e3a-9364-2674-308e63bee2d2");
    }
    { // Index:13
        static constexpr std::array<GpaUInt32, 10> kHardwareCounters = {
                189754,
                29686,
                30005,
                30324,
                30643,
                29691,
                30010,
                30329,
                30648,
                24,
        };
        c.DefineDerivedCounter("PreTessellationTime",
                               "Timing",
                               "Time VS and HS are busy in nanoseconds in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),1,2,3,4,max4,5,6,7,8,sum4,ifnotzero,9,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "d5e6c54c-5ffb-b173-6118-bece61f0281c");
    }
    { // Index:14
        static constexpr std::array<GpaUInt32, 9> kHardwareCounters = {
                29666,
                29985,
                30304,
                30623,
                29691,
                30010,
                30329,
                30648,
                24,
        };
        c.DefineDerivedCounter("PostTessellationBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has DS or GS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "(0),0,1,2,3,max4,4,5,6,7,sum4,ifnotzero,8,/,(100),*,(100),min",
                               "1a275c68-9340-f358-71c6-a2648390381d");
    }
    { // Index:15
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29666,
                29985,
                30304,
                30623,
                29691,
                30010,
                30329,
                30648,
        };
        c.DefineDerivedCounter("PostTessellationBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has DS or GS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "(0),0,1,2,3,max4,4,5,6,7,sum4,ifnotzero",
                               "a5ed943b-13ef-942b-56fb-6d519eeb7337");
    }
    { // Index:16
        static constexpr std::array<GpaUInt32, 10> kHardwareCounters = {
                189754,
                29666,
                29985,
                30304,
                30623,
                29691,
                30010,
                30329,
                30648,
                24,
        };
        c.DefineDerivedCounter("PostTessellationTime",
                               "Timing",
                               "Time DS or GS are busy in nanoseconds in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),1,2,3,4,max4,5,6,7,8,sum4,ifnotzero,9,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "9f8dfa40-faee-2014-3467-2630a7d95c1e");
    }
    { // Index:17
        static constexpr std::array<GpaUInt32, 33> kHardwareCounters = {
                29721,
                30040,
                30359,
                30678,
                29737,
                30056,
                30375,
                30694,
                29722,
                30041,
                30360,
                30679,
                29738,
                30057,
                30376,
                30695,
                29723,
                30042,
                30361,
                30680,
                29739,
                30058,
                30377,
                30696,
                29724,
                30043,
                30362,
                30681,
                29740,
                30059,
                30378,
                30697,
                24,
        };
        c.DefineDerivedCounter("PSBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has pixel shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "(0),0,1,2,3,max4,4,5,6,7,sum4,ifnotzero,(0),8,9,10,11,max4,12,13,14,15,sum4,ifnotzero,(0),16,17,18,19,max4,20,21,22,23,sum4,ifnotzero,(0),24,25,26,27,max4,28,29,30,31,sum4,ifnotzero,max4,32,/,(100),*,(100),min",
                               "7e772beb-d82c-bd9a-aed0-fe504d416ce5");
    }
    { // Index:18
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                29721,
                30040,
                30359,
                30678,
                29737,
                30056,
                30375,
                30694,
                29722,
                30041,
                30360,
                30679,
                29738,
                30057,
                30376,
                30695,
                29723,
                30042,
                30361,
                30680,
                29739,
                30058,
                30377,
                30696,
                29724,
                30043,
                30362,
                30681,
                29740,
                30059,
                30378,
                30697,
        };
        c.DefineDerivedCounter("PSBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has pixel shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "(0),0,1,2,3,max4,4,5,6,7,sum4,ifnotzero,(0),8,9,10,11,max4,12,13,14,15,sum4,ifnotzero,(0),16,17,18,19,max4,20,21,22,23,sum4,ifnotzero,(0),24,25,26,27,max4,28,29,30,31,sum4,ifnotzero,max4",
                               "b58bea04-ce8e-2984-80f4-8aba7d4c817b");
    }
    { // Index:19
        static constexpr std::array<GpaUInt32, 34> kHardwareCounters = {
                189754,
                29721,
                30040,
                30359,
                30678,
                29737,
                30056,
                30375,
                30694,
                29722,
                30041,
                30360,
                30679,
                29738,
                30057,
                30376,
                30695,
                29723,
                30042,
                30361,
                30680,
                29739,
                30058,
                30377,
                30696,
                29724,
                30043,
                30362,
                30681,
                29740,
                30059,
                30378,
                30697,
                24,
        };
        c.DefineDerivedCounter("PSTime",
                               "Timing",
                               "Time pixel shaders are busy in nanoseconds.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),1,2,3,4,max4,5,6,7,8,sum4,ifnotzero,(0),9,10,11,12,max4,13,14,15,16,sum4,ifnotzero,(0),17,18,19,20,max4,21,22,23,24,sum4,ifnotzero,(0),25,26,27,28,max4,29,30,31,32,sum4,ifnotzero,max4,33,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "edca7694-7416-e8a6-0c5a-63a5ad5f3d74");
    }
    { // Index:20
        static constexpr std::array<GpaUInt32, 17> kHardwareCounters = {
                29702,
                30021,
                30340,
                30659,
                29706,
                30025,
                30344,
                30663,
                29710,
                30029,
                30348,
                30667,
                29714,
                30033,
                30352,
                30671,
                24,
        };
        c.DefineDerivedCounter("CSBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has compute shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,comparemax4,8,9,10,11,12,13,14,15,comparemax4,max,16,/,(100),*,(100),min",
                               "493fdd90-8d2b-a055-5e4e-2d29c3396b8c");
    }
    { // Index:21
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                29702,
                30021,
                30340,
                30659,
                29706,
                30025,
                30344,
                30663,
                29710,
                30029,
                30348,
                30667,
                29714,
                30033,
                30352,
                30671,
        };
        c.DefineDerivedCounter("CSBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has compute shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,comparemax4,8,9,10,11,12,13,14,15,comparemax4,max",
                               "39bcf1b8-f6b2-4c37-f9af-0a2bb59512f9");
    }
    { // Index:22
        static constexpr std::array<GpaUInt32, 18> kHardwareCounters = {
                189754,
                29702,
                30021,
                30340,
                30659,
                29706,
                30025,
                30344,
                30663,
                29710,
                30029,
                30348,
                30667,
                29714,
                30033,
                30352,
                30671,
                24,
        };
        c.DefineDerivedCounter("CSTime",
                               "Timing",
                               "Time compute shaders are busy in nanoseconds.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "1,2,3,4,5,6,7,8,comparemax4,9,10,11,12,13,14,15,16,comparemax4,max,17,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "dbc24916-ecb2-7eef-8d63-7afadaaab6bc");
    }
    { // Index:23
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                103519,
                103623,
                103727,
                103831,
                29691,
                30010,
                30329,
                30648,
        };
        c.DefineDerivedCounter("VsGsVerticesIn",
                               "VertexGeometry",
                               "The number of unique vertices processed by the VS and GS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,(0),4,5,6,7,sum4,ifnotzero",
                               "17d0c775-3ed5-affb-d5ac-5391a198a4aa");
    }
    { // Index:24
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                103524,
                103628,
                103732,
                103836,
                29691,
                30010,
                30329,
                30648,
        };
        c.DefineDerivedCounter("VsGsPrimsIn",
                               "VertexGeometry",
                               "The number of primitives passed into the GS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,(0),4,5,6,7,sum4,ifnotzero",
                               "d9fa5ce8-5329-f5d4-c378-8fbc7e80d9a6");
    }
    { // Index:25
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                103530,
                103634,
                103738,
                103842,
                29691,
                30010,
                30329,
                30648,
        };
        c.DefineDerivedCounter("PreTessVerticesIn",
                               "PreTessellation",
                               "The number of unique vertices processed by the VS and HS when using tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,ifnotzero",
                               "84145f0c-ff96-0dfb-ffb7-ccf4c9b3f4c4");
    }
    { // Index:26
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                103508,
                103612,
                103716,
                103820,
                29691,
                30010,
                30329,
                30648,
        };
        c.DefineDerivedCounter("PostTessPrimsOut",
                               "PostTessellation",
                               "The number of primitives output by the DS and GS when using tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,ifnotzero",
                               "d38dabe8-1f13-ea34-d3c1-eb5783b737f1");
    }
    { // Index:27
        static constexpr std::array<GpaUInt32, 25> kHardwareCounters = {
                149,
                978,
                1807,
                2636,
                153,
                982,
                1811,
                2640,
                105,
                934,
                1763,
                2592,
                117,
                946,
                1775,
                2604,
                618,
                1447,
                2276,
                3105,
                630,
                1459,
                2288,
                3117,
                24,
        };
        c.DefineDerivedCounter("PrimitiveAssemblyBusy",
                               "Timing",
                               "The percentage of GPUTime that primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,vecsub4,SU_CLOCKS_PRIM,8,9,10,11,12,13,14,15,vecsum4,16,17,18,19,vecsum4,(2),20,21,22,23,scalarmul4,vecsum4,scalarmul4,vecsub4,max4,(0),max,24,/,(100),*,(100),min",
                               "54ac5640-c4d7-95e2-20e0-6a9fdfc07333");
    }
    { // Index:28
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                149,
                978,
                1807,
                2636,
                153,
                982,
                1811,
                2640,
                105,
                934,
                1763,
                2592,
                117,
                946,
                1775,
                2604,
                618,
                1447,
                2276,
                3105,
                630,
                1459,
                2288,
                3117,
        };
        c.DefineDerivedCounter("PrimitiveAssemblyBusyCycles",
                               "Timing",
                               "Number of GPU cycles the primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,vecsub4,SU_CLOCKS_PRIM,8,9,10,11,12,13,14,15,vecsum4,16,17,18,19,vecsum4,(2),20,21,22,23,scalarmul4,vecsum4,scalarmul4,vecsub4,max4,(0),max",
                               "99777f2d-9626-c78a-a97c-c4505eba1e5f");
    }
    { // Index:29
        static constexpr std::array<GpaUInt32, 4> kHardwareCounters = {
                52,
                881,
                1710,
                2539,
        };
        c.DefineDerivedCounter("PrimitivesIn",
                               "PrimitiveAssembly",
                               "The number of primitives received by the hardware. This includes primitives generated by tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4",
                               "a515b80d-75c3-c7d2-0d2f-d7766b4759a6");
    }
    { // Index:30
        static constexpr std::array<GpaUInt32, 20> kHardwareCounters = {
                58,
                887,
                1716,
                2545,
                98,
                927,
                1756,
                2585,
                99,
                928,
                1757,
                2586,
                100,
                929,
                1758,
                2587,
                101,
                930,
                1759,
                2588,
        };
        c.DefineDerivedCounter("CulledPrims",
                               "PrimitiveAssembly",
                               "The number of culled primitives. Typical reasons include scissor, the primitive having zero area, and back or front face culling.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,sum4,+,8,9,10,11,sum4,+,12,13,14,15,sum4,+,16,17,18,19,sum4,+",
                               "589bdf55-9192-280a-41c3-584bc94f2562");
    }
    { // Index:31
        static constexpr std::array<GpaUInt32, 4> kHardwareCounters = {
                577,
                1406,
                2235,
                3064,
        };
        c.DefineDerivedCounter("ClippedPrims",
                               "PrimitiveAssembly",
                               "The number of primitives that required one or more clipping operations due to intersecting the view volume or user clip planes.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4",
                               "5ef6f9d5-155e-5baa-163f-8359d9ea9bbf");
    }
    { // Index:32
        static constexpr std::array<GpaUInt32, 5> kHardwareCounters = {
                153,
                982,
                1811,
                2640,
                24,
        };
        c.DefineDerivedCounter("PAStalledOnRasterizer",
                               "PrimitiveAssembly",
                               "Percentage of GPUTime that primitive assembly waits for rasterization to be ready to accept data. This roughly indicates for what percentage of time the pipeline is bottlenecked by pixel operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,max4,4,/,(100),*",
                               "6f9f416b-53c1-0457-f88c-7b6ba8973974");
    }
    { // Index:33
        static constexpr std::array<GpaUInt32, 4> kHardwareCounters = {
                665,
                1494,
                2323,
                3152,
        };
        c.DefineDerivedCounter("PAStalledOnRasterizerCycles",
                               "PrimitiveAssembly",
                               "Number of GPU cycles the primitive assembly waits for rasterization to be ready to accept data. Indicates the number of GPU cycles the pipeline is bottlenecked by pixel operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,max4",
                               "7a8c492a-c566-9328-6805-760dbff5c0f2");
    }
    { // Index:34
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                31872,
                31954,
                32036,
                32118,
                32200,
                32282,
                32364,
                32446,
                31877,
                31959,
                32041,
                32123,
                32205,
                32287,
                32369,
                32451,
                31882,
                31964,
                32046,
                32128,
                32210,
                32292,
                32374,
                32456,
                31887,
                31969,
                32051,
                32133,
                32215,
                32297,
                32379,
                32461,
        };
        c.DefineDerivedCounter("PSPixelsOut",
                               "PixelShader",
                               "Pixels exported from shader to color buffers. Does not include killed or alpha tested pixels; if there are multiple render targets, each render target receives one export, so this will be 2 for 1 pixel written to two RTs.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,sum8,8,9,10,11,12,13,14,15,sum8,16,17,18,19,20,21,22,23,sum8,24,25,26,27,28,29,30,31,sum8,sum4",
                               "24cba16c-baa6-6ecd-95ad-92ecb1338da1");
    }
    { // Index:35
        static constexpr std::array<GpaUInt32, 33> kHardwareCounters = {
                31874,
                31956,
                32038,
                32120,
                32202,
                32284,
                32366,
                32448,
                31879,
                31961,
                32043,
                32125,
                32207,
                32289,
                32371,
                32453,
                31884,
                31966,
                32048,
                32130,
                32212,
                32294,
                32376,
                32458,
                31889,
                31971,
                32053,
                32135,
                32217,
                32299,
                32381,
                32463,
                24,
        };
        c.DefineDerivedCounter("PSExportStalls",
                               "PixelShader",
                               "Pixel shader output stalls. Percentage of GPUBusy. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the color buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,max8,8,9,10,11,12,13,14,15,max8,16,17,18,19,20,21,22,23,max8,24,25,26,27,28,29,30,31,max8,max4,32,/,(100),*",
                               "9b4f466c-ff97-22bb-557d-84d3c4c51895");
    }
    { // Index:36
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                31874,
                31956,
                32038,
                32120,
                32202,
                32284,
                32366,
                32448,
                31879,
                31961,
                32043,
                32125,
                32207,
                32289,
                32371,
                32453,
                31884,
                31966,
                32048,
                32130,
                32212,
                32294,
                32376,
                32458,
                31889,
                31971,
                32053,
                32135,
                32217,
                32299,
                32381,
                32463,
        };
        c.DefineDerivedCounter("PSExportStallsCycles",
                               "PixelShader",
                               "Number of GPU cycles the pixel shader output stalls. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the color buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,max8,8,9,10,11,12,13,14,15,max8,16,17,18,19,20,21,22,23,max8,24,25,26,27,28,29,30,31,max8,max4",
                               "47c72aad-64e6-0864-d533-d8e0bc27c156");
    }
    { // Index:37
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29703,
                30022,
                30341,
                30660,
                29711,
                30030,
                30349,
                30668,
        };
        c.DefineDerivedCounter("CSThreadGroupsLaunched",
                               "ComputeShader",
                               "Total number of thread groups launched.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,sum4,+",
                               "e1e2f302-868a-1d2e-ca81-9901bbc8b58f");
    }
    { // Index:38
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29706,
                30025,
                30344,
                30663,
                29714,
                30033,
                30352,
                30671,
        };
        c.DefineDerivedCounter("CSWavefrontsLaunched",
                               "ComputeShader",
                               "The total number of wavefronts launched for the CS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,sum4,+",
                               "00c49129-6ae5-f6a0-1753-4738cbe17938");
    }
    { // Index:39
        static constexpr std::array<GpaUInt32, 4> kHardwareCounters = {
                31698,
                31744,
                31790,
                31836,
        };
        c.DefineDerivedCounter("CSThreadsLaunched",
                               "ComputeShader",
                               "The number of CS threads launched and processed by the hardware.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4",
                               "cbbbf1ba-d164-1c90-9df0-6120c1660fb1");
    }
    { // Index:40
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                31698,
                31744,
                31790,
                31836,
                29703,
                30022,
                30341,
                30660,
                29711,
                30030,
                30349,
                30668,
        };
        c.DefineDerivedCounter("CSThreadGroupSize",
                               "ComputeShader",
                               "The number of CS threads within each thread group.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,8,9,10,11,sum4,+,/,4,5,6,7,sum4,8,9,10,11,sum4,+,ifnotzero",
                               "8c65008a-9957-7ca6-4199-f6fe940420f6");
    }
    { // Index:41
        static constexpr std::array<GpaUInt32, 41> kHardwareCounters = {
                169748,
                170260,
                170772,
                171284,
                171796,
                172308,
                172820,
                173332,
                173844,
                174356,
                174868,
                175380,
                175892,
                176404,
                176916,
                177428,
                177940,
                178452,
                178964,
                179476,
                179988,
                180500,
                181012,
                181524,
                182036,
                182548,
                183060,
                183572,
                184084,
                184596,
                185108,
                185620,
                24,
                29703,
                30022,
                30341,
                30660,
                29711,
                30030,
                30349,
                30668,
        };
        c.DefineDerivedCounter("CSLDSBankConflict",
                               "ComputeShader",
                               "The percentage of GPUTime LDS is stalled by bank conflicts. Value range: 0% (optimal) to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,32,/,NUM_SIMDS,/,(100),*,33,34,35,36,sum4,37,38,39,40,sum4,+,ifnotzero",
                               "1065ee10-2e41-ea41-1eb3-b61b491752f4");
    }
    { // Index:42
        static constexpr std::array<GpaUInt32, 40> kHardwareCounters = {
                169748,
                170260,
                170772,
                171284,
                171796,
                172308,
                172820,
                173332,
                173844,
                174356,
                174868,
                175380,
                175892,
                176404,
                176916,
                177428,
                177940,
                178452,
                178964,
                179476,
                179988,
                180500,
                181012,
                181524,
                182036,
                182548,
                183060,
                183572,
                184084,
                184596,
                185108,
                185620,
                29703,
                30022,
                30341,
                30660,
                29711,
                30030,
                30349,
                30668,
        };
        c.DefineDerivedCounter("CSLDSBankConflictCycles",
                               "ComputeShader",
                               "Number of GPU cycles the LDS is stalled by bank conflicts. Value range: 0 (optimal) to GPUBusyCycles (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,NUM_SIMDS,/,32,33,34,35,sum4,36,37,38,39,sum4,+,ifnotzero",
                               "1fd1adf3-c51e-94fd-083e-c482a0a0809e");
    }
    { // Index:43
        static constexpr std::array<GpaUInt32, 65> kHardwareCounters = {
                32531,
                32786,
                33041,
                33296,
                33551,
                33806,
                34061,
                34316,
                34571,
                34826,
                35081,
                35336,
                35591,
                35846,
                36101,
                36356,
                36611,
                36866,
                37121,
                37376,
                37631,
                37886,
                38141,
                38396,
                38651,
                38906,
                39161,
                39416,
                39671,
                39926,
                40181,
                40436,
                40691,
                40946,
                41201,
                41456,
                41711,
                41966,
                42221,
                42476,
                42731,
                42986,
                43241,
                43496,
                43751,
                44006,
                44261,
                44516,
                44771,
                45026,
                45281,
                45536,
                45791,
                46046,
                46301,
                46556,
                46811,
                47066,
                47321,
                47576,
                47831,
                48086,
                48341,
                48596,
                24,
        };
        c.DefineDerivedCounter("TexUnitBusy",
                               "Timing",
                               "The percentage of GPUTime the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64,64,/,(100),*",
                               "36afb8d9-42fc-aafe-66c5-449542153b2c");
    }
    { // Index:44
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                32531,
                32786,
                33041,
                33296,
                33551,
                33806,
                34061,
                34316,
                34571,
                34826,
                35081,
                35336,
                35591,
                35846,
                36101,
                36356,
                36611,
                36866,
                37121,
                37376,
                37631,
                37886,
                38141,
                38396,
                38651,
                38906,
                39161,
                39416,
                39671,
                39926,
                40181,
                40436,
                40691,
                40946,
                41201,
                41456,
                41711,
                41966,
                42221,
                42476,
                42731,
                42986,
                43241,
                43496,
                43751,
                44006,
                44261,
                44516,
                44771,
                45026,
                45281,
                45536,
                45791,
                46046,
                46301,
                46556,
                46811,
                47066,
                47321,
                47576,
                47831,
                48086,
                48341,
                48596,
        };
        c.DefineDerivedCounter("TexUnitBusyCycles",
                               "Timing",
                               "Number of GPU cycles the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64",
                               "c68761f2-248c-4f39-6528-c308b1c0807c");
    }
    { // Index:45
        static constexpr std::array<GpaUInt32, 128> kHardwareCounters = {
                32585,
                32840,
                33095,
                33350,
                33605,
                33860,
                34115,
                34370,
                34625,
                34880,
                35135,
                35390,
                35645,
                35900,
                36155,
                36410,
                36665,
                36920,
                37175,
                37430,
                37685,
                37940,
                38195,
                38450,
                38705,
                38960,
                39215,
                39470,
                39725,
                39980,
                40235,
                40490,
                40745,
                41000,
                41255,
                41510,
                41765,
                42020,
                42275,
                42530,
                42785,
                43040,
                43295,
                43550,
                43805,
                44060,
                44315,
                44570,
                44825,
                45080,
                45335,
                45590,
                45845,
                46100,
                46355,
                46610,
                46865,
                47120,
                47375,
                47630,
                47885,
                48140,
                48395,
                48650,
                32584,
                32839,
                33094,
                33349,
                33604,
                33859,
                34114,
                34369,
                34624,
                34879,
                35134,
                35389,
                35644,
                35899,
                36154,
                36409,
                36664,
                36919,
                37174,
                37429,
                37684,
                37939,
                38194,
                38449,
                38704,
                38959,
                39214,
                39469,
                39724,
                39979,
                40234,
                40489,
                40744,
                40999,
                41254,
                41509,
                41764,
                42019,
                42274,
                42529,
                42784,
                43039,
                43294,
                43549,
                43804,
                44059,
                44314,
                44569,
                44824,
                45079,
                45334,
                45589,
                45844,
                46099,
                46354,
                46609,
                46864,
                47119,
                47374,
                47629,
                47884,
                48139,
                48394,
                48649,
        };
        c.DefineDerivedCounter("TexTriFilteringPct",
                               "TextureUnit",
                               "Percentage of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,+,/,(100),*",
                               "1affc3c8-b917-5c81-622b-7004527208ae");
    }
    { // Index:46
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                32585,
                32840,
                33095,
                33350,
                33605,
                33860,
                34115,
                34370,
                34625,
                34880,
                35135,
                35390,
                35645,
                35900,
                36155,
                36410,
                36665,
                36920,
                37175,
                37430,
                37685,
                37940,
                38195,
                38450,
                38705,
                38960,
                39215,
                39470,
                39725,
                39980,
                40235,
                40490,
                40745,
                41000,
                41255,
                41510,
                41765,
                42020,
                42275,
                42530,
                42785,
                43040,
                43295,
                43550,
                43805,
                44060,
                44315,
                44570,
                44825,
                45080,
                45335,
                45590,
                45845,
                46100,
                46355,
                46610,
                46865,
                47120,
                47375,
                47630,
                47885,
                48140,
                48395,
                48650,
        };
        c.DefineDerivedCounter("TexTriFilteringCount",
                               "TextureUnit",
                               "Count of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(4),*",
                               "5785b3a1-a513-18db-4b1c-bdeef75bb2b6");
    }
    { // Index:47
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                32584,
                32839,
                33094,
                33349,
                33604,
                33859,
                34114,
                34369,
                34624,
                34879,
                35134,
                35389,
                35644,
                35899,
                36154,
                36409,
                36664,
                36919,
                37174,
                37429,
                37684,
                37939,
                38194,
                38449,
                38704,
                38959,
                39214,
                39469,
                39724,
                39979,
                40234,
                40489,
                40744,
                40999,
                41254,
                41509,
                41764,
                42019,
                42274,
                42529,
                42784,
                43039,
                43294,
                43549,
                43804,
                44059,
                44314,
                44569,
                44824,
                45079,
                45334,
                45589,
                45844,
                46099,
                46354,
                46609,
                46864,
                47119,
                47374,
                47629,
                47884,
                48139,
                48394,
                48649,
        };
        c.DefineDerivedCounter("NoTexTriFilteringCount",
                               "TextureUnit",
                               "Count of pixels that did not receive trilinear filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(4),*",
                               "179da29a-81af-c06e-ce8c-a0a731ea030d");
    }
    { // Index:48
        static constexpr std::array<GpaUInt32, 128> kHardwareCounters = {
                32587,
                32842,
                33097,
                33352,
                33607,
                33862,
                34117,
                34372,
                34627,
                34882,
                35137,
                35392,
                35647,
                35902,
                36157,
                36412,
                36667,
                36922,
                37177,
                37432,
                37687,
                37942,
                38197,
                38452,
                38707,
                38962,
                39217,
                39472,
                39727,
                39982,
                40237,
                40492,
                40747,
                41002,
                41257,
                41512,
                41767,
                42022,
                42277,
                42532,
                42787,
                43042,
                43297,
                43552,
                43807,
                44062,
                44317,
                44572,
                44827,
                45082,
                45337,
                45592,
                45847,
                46102,
                46357,
                46612,
                46867,
                47122,
                47377,
                47632,
                47887,
                48142,
                48397,
                48652,
                32586,
                32841,
                33096,
                33351,
                33606,
                33861,
                34116,
                34371,
                34626,
                34881,
                35136,
                35391,
                35646,
                35901,
                36156,
                36411,
                36666,
                36921,
                37176,
                37431,
                37686,
                37941,
                38196,
                38451,
                38706,
                38961,
                39216,
                39471,
                39726,
                39981,
                40236,
                40491,
                40746,
                41001,
                41256,
                41511,
                41766,
                42021,
                42276,
                42531,
                42786,
                43041,
                43296,
                43551,
                43806,
                44061,
                44316,
                44571,
                44826,
                45081,
                45336,
                45591,
                45846,
                46101,
                46356,
                46611,
                46866,
                47121,
                47376,
                47631,
                47886,
                48141,
                48396,
                48651,
        };
        c.DefineDerivedCounter("TexVolFilteringPct",
                               "TextureUnit",
                               "Percentage of pixels that received volume filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,+,/,(100),*",
                               "b5ff6bed-3178-aee4-42dd-c74391c02a2d");
    }
    { // Index:49
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                32587,
                32842,
                33097,
                33352,
                33607,
                33862,
                34117,
                34372,
                34627,
                34882,
                35137,
                35392,
                35647,
                35902,
                36157,
                36412,
                36667,
                36922,
                37177,
                37432,
                37687,
                37942,
                38197,
                38452,
                38707,
                38962,
                39217,
                39472,
                39727,
                39982,
                40237,
                40492,
                40747,
                41002,
                41257,
                41512,
                41767,
                42022,
                42277,
                42532,
                42787,
                43042,
                43297,
                43552,
                43807,
                44062,
                44317,
                44572,
                44827,
                45082,
                45337,
                45592,
                45847,
                46102,
                46357,
                46612,
                46867,
                47122,
                47377,
                47632,
                47887,
                48142,
                48397,
                48652,
        };
        c.DefineDerivedCounter("TexVolFilteringCount",
                               "TextureUnit",
                               "Count of pixels that received volume filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(4),*",
                               "4bddc587-d589-8128-e18c-762eab2c871f");
    }
    { // Index:50
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                32586,
                32841,
                33096,
                33351,
                33606,
                33861,
                34116,
                34371,
                34626,
                34881,
                35136,
                35391,
                35646,
                35901,
                36156,
                36411,
                36666,
                36921,
                37176,
                37431,
                37686,
                37941,
                38196,
                38451,
                38706,
                38961,
                39216,
                39471,
                39726,
                39981,
                40236,
                40491,
                40746,
                41001,
                41256,
                41511,
                41766,
                42021,
                42276,
                42531,
                42786,
                43041,
                43296,
                43551,
                43806,
                44061,
                44316,
                44571,
                44826,
                45081,
                45336,
                45591,
                45846,
                46101,
                46356,
                46611,
                46866,
                47121,
                47376,
                47631,
                47886,
                48141,
                48396,
                48651,
        };
        c.DefineDerivedCounter("NoTexVolFilteringCount",
                               "TextureUnit",
                               "Count of pixels that did not receive volume filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(4),*",
                               "9fe1a854-17c6-9d26-b2b9-80610cd5827d");
    }
    { // Index:51
        static constexpr std::array<GpaUInt32, 576> kHardwareCounters = {
                32605,
                32860,
                33115,
                33370,
                33625,
                33880,
                34135,
                34390,
                34645,
                34900,
                35155,
                35410,
                35665,
                35920,
                36175,
                36430,
                36685,
                36940,
                37195,
                37450,
                37705,
                37960,
                38215,
                38470,
                38725,
                38980,
                39235,
                39490,
                39745,
                40000,
                40255,
                40510,
                40765,
                41020,
                41275,
                41530,
                41785,
                42040,
                42295,
                42550,
                42805,
                43060,
                43315,
                43570,
                43825,
                44080,
                44335,
                44590,
                44845,
                45100,
                45355,
                45610,
                45865,
                46120,
                46375,
                46630,
                46885,
                47140,
                47395,
                47650,
                47905,
                48160,
                48415,
                48670,
                32606,
                32861,
                33116,
                33371,
                33626,
                33881,
                34136,
                34391,
                34646,
                34901,
                35156,
                35411,
                35666,
                35921,
                36176,
                36431,
                36686,
                36941,
                37196,
                37451,
                37706,
                37961,
                38216,
                38471,
                38726,
                38981,
                39236,
                39491,
                39746,
                40001,
                40256,
                40511,
                40766,
                41021,
                41276,
                41531,
                41786,
                42041,
                42296,
                42551,
                42806,
                43061,
                43316,
                43571,
                43826,
                44081,
                44336,
                44591,
                44846,
                45101,
                45356,
                45611,
                45866,
                46121,
                46376,
                46631,
                46886,
                47141,
                47396,
                47651,
                47906,
                48161,
                48416,
                48671,
                32607,
                32862,
                33117,
                33372,
                33627,
                33882,
                34137,
                34392,
                34647,
                34902,
                35157,
                35412,
                35667,
                35922,
                36177,
                36432,
                36687,
                36942,
                37197,
                37452,
                37707,
                37962,
                38217,
                38472,
                38727,
                38982,
                39237,
                39492,
                39747,
                40002,
                40257,
                40512,
                40767,
                41022,
                41277,
                41532,
                41787,
                42042,
                42297,
                42552,
                42807,
                43062,
                43317,
                43572,
                43827,
                44082,
                44337,
                44592,
                44847,
                45102,
                45357,
                45612,
                45867,
                46122,
                46377,
                46632,
                46887,
                47142,
                47397,
                47652,
                47907,
                48162,
                48417,
                48672,
                32608,
                32863,
                33118,
                33373,
                33628,
                33883,
                34138,
                34393,
                34648,
                34903,
                35158,
                35413,
                35668,
                35923,
                36178,
                36433,
                36688,
                36943,
                37198,
                37453,
                37708,
                37963,
                38218,
                38473,
                38728,
                38983,
                39238,
                39493,
                39748,
                40003,
                40258,
                40513,
                40768,
                41023,
                41278,
                41533,
                41788,
                42043,
                42298,
                42553,
                42808,
                43063,
                43318,
                43573,
                43828,
                44083,
                44338,
                44593,
                44848,
                45103,
                45358,
                45613,
                45868,
                46123,
                46378,
                46633,
                46888,
                47143,
                47398,
                47653,
                47908,
                48163,
                48418,
                48673,
                32609,
                32864,
                33119,
                33374,
                33629,
                33884,
                34139,
                34394,
                34649,
                34904,
                35159,
                35414,
                35669,
                35924,
                36179,
                36434,
                36689,
                36944,
                37199,
                37454,
                37709,
                37964,
                38219,
                38474,
                38729,
                38984,
                39239,
                39494,
                39749,
                40004,
                40259,
                40514,
                40769,
                41024,
                41279,
                41534,
                41789,
                42044,
                42299,
                42554,
                42809,
                43064,
                43319,
                43574,
                43829,
                44084,
                44339,
                44594,
                44849,
                45104,
                45359,
                45614,
                45869,
                46124,
                46379,
                46634,
                46889,
                47144,
                47399,
                47654,
                47909,
                48164,
                48419,
                48674,
                32610,
                32865,
                33120,
                33375,
                33630,
                33885,
                34140,
                34395,
                34650,
                34905,
                35160,
                35415,
                35670,
                35925,
                36180,
                36435,
                36690,
                36945,
                37200,
                37455,
                37710,
                37965,
                38220,
                38475,
                38730,
                38985,
                39240,
                39495,
                39750,
                40005,
                40260,
                40515,
                40770,
                41025,
                41280,
                41535,
                41790,
                42045,
                42300,
                42555,
                42810,
                43065,
                43320,
                43575,
                43830,
                44085,
                44340,
                44595,
                44850,
                45105,
                45360,
                45615,
                45870,
                46125,
                46380,
                46635,
                46890,
                47145,
                47400,
                47655,
                47910,
                48165,
                48420,
                48675,
                32611,
                32866,
                33121,
                33376,
                33631,
                33886,
                34141,
                34396,
                34651,
                34906,
                35161,
                35416,
                35671,
                35926,
                36181,
                36436,
                36691,
                36946,
                37201,
                37456,
                37711,
                37966,
                38221,
                38476,
                38731,
                38986,
                39241,
                39496,
                39751,
                40006,
                40261,
                40516,
                40771,
                41026,
                41281,
                41536,
                41791,
                42046,
                42301,
                42556,
                42811,
                43066,
                43321,
                43576,
                43831,
                44086,
                44341,
                44596,
                44851,
                45106,
                45361,
                45616,
                45871,
                46126,
                46381,
                46636,
                46891,
                47146,
                47401,
                47656,
                47911,
                48166,
                48421,
                48676,
                32612,
                32867,
                33122,
                33377,
                33632,
                33887,
                34142,
                34397,
                34652,
                34907,
                35162,
                35417,
                35672,
                35927,
                36182,
                36437,
                36692,
                36947,
                37202,
                37457,
                37712,
                37967,
                38222,
                38477,
                38732,
                38987,
                39242,
                39497,
                39752,
                40007,
                40262,
                40517,
                40772,
                41027,
                41282,
                41537,
                41792,
                42047,
                42302,
                42557,
                42812,
                43067,
                43322,
                43577,
                43832,
                44087,
                44342,
                44597,
                44852,
                45107,
                45362,
                45617,
                45872,
                46127,
                46382,
                46637,
                46892,
                47147,
                47402,
                47657,
                47912,
                48167,
                48422,
                48677,
                32613,
                32868,
                33123,
                33378,
                33633,
                33888,
                34143,
                34398,
                34653,
                34908,
                35163,
                35418,
                35673,
                35928,
                36183,
                36438,
                36693,
                36948,
                37203,
                37458,
                37713,
                37968,
                38223,
                38478,
                38733,
                38988,
                39243,
                39498,
                39753,
                40008,
                40263,
                40518,
                40773,
                41028,
                41283,
                41538,
                41793,
                42048,
                42303,
                42558,
                42813,
                43068,
                43323,
                43578,
                43833,
                44088,
                44343,
                44598,
                44853,
                45108,
                45363,
                45618,
                45873,
                46128,
                46383,
                46638,
                46893,
                47148,
                47403,
                47658,
                47913,
                48168,
                48423,
                48678,
        };
        c.DefineDerivedCounter("TexAveAnisotropy",
                               "TextureUnit",
                               "The average degree of anisotropy applied. A number between 1 and 16. The anisotropic filtering algorithm only applies samples where they are required (e.g. there will be no extra anisotropic samples if the view vector is perpendicular to the surface) so this can be much lower than the requested anisotropy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(2),64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,*,+,(4),128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum64,*,+,(6),192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,sum64,*,+,(8),256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,sum64,*,+,(10),320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,sum64,*,+,(12),384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,sum64,*,+,(14),448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,sum64,*,+,(16),512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,sum64,*,+,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,+,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum64,+,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,sum64,+,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,sum64,+,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,sum64,+,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,sum64,+,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,sum64,+,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,sum64,+,/",
                               "7ca2a2b9-a4eb-ce23-d163-59147e672396");
    }
    { // Index:52
        static constexpr std::array<GpaUInt32, 17> kHardwareCounters = {
                72788,
                73230,
                73672,
                74114,
                74556,
                74998,
                75440,
                75882,
                76324,
                76766,
                77208,
                77650,
                78092,
                78534,
                78976,
                79418,
                24,
        };
        c.DefineDerivedCounter("DepthStencilTestBusy",
                               "Timing",
                               "Percentage of time GPU spent performing depth and stencil tests relative to GPUBusy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16,16,/,(100),*",
                               "6834fb52-42e8-bb50-fd48-ec2f2904e7e0");
    }
    { // Index:53
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                72788,
                73230,
                73672,
                74114,
                74556,
                74998,
                75440,
                75882,
                76324,
                76766,
                77208,
                77650,
                78092,
                78534,
                78976,
                79418,
        };
        c.DefineDerivedCounter("DepthStencilTestBusyCycles",
                               "Timing",
                               "Number of GPU cycles spent performing depth and stencil tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16",
                               "07ad48f0-49d8-87e7-1ef5-1e24ff2cef49");
    }
    { // Index:54
        static constexpr std::array<GpaUInt32, 160> kHardwareCounters = {
                3519,
                4341,
                5163,
                5985,
                6807,
                7629,
                8451,
                9273,
                10095,
                10917,
                11739,
                12561,
                13383,
                14205,
                15027,
                15849,
                16671,
                17493,
                18315,
                19137,
                19959,
                20781,
                21603,
                22425,
                23247,
                24069,
                24891,
                25713,
                26535,
                27357,
                28179,
                29001,
                3520,
                4342,
                5164,
                5986,
                6808,
                7630,
                8452,
                9274,
                10096,
                10918,
                11740,
                12562,
                13384,
                14206,
                15028,
                15850,
                16672,
                17494,
                18316,
                19138,
                19960,
                20782,
                21604,
                22426,
                23248,
                24070,
                24892,
                25714,
                26536,
                27358,
                28180,
                29002,
                3521,
                4343,
                5165,
                5987,
                6809,
                7631,
                8453,
                9275,
                10097,
                10919,
                11741,
                12563,
                13385,
                14207,
                15029,
                15851,
                16673,
                17495,
                18317,
                19139,
                19961,
                20783,
                21605,
                22427,
                23249,
                24071,
                24893,
                25715,
                26537,
                27359,
                28181,
                29003,
                3522,
                4344,
                5166,
                5988,
                6810,
                7632,
                8454,
                9276,
                10098,
                10920,
                11742,
                12564,
                13386,
                14208,
                15030,
                15852,
                16674,
                17496,
                18318,
                19140,
                19962,
                20784,
                21606,
                22428,
                23250,
                24072,
                24894,
                25716,
                26538,
                27360,
                28182,
                29004,
                3595,
                4417,
                5239,
                6061,
                6883,
                7705,
                8527,
                9349,
                10171,
                10993,
                11815,
                12637,
                13459,
                14281,
                15103,
                15925,
                16747,
                17569,
                18391,
                19213,
                20035,
                20857,
                21679,
                22501,
                23323,
                24145,
                24967,
                25789,
                26611,
                27433,
                28255,
                29077,
        };
        c.DefineDerivedCounter("HiZQuadsCulled",
                               "DepthAndStencil",
                               "Percentage of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum128,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,sum32,-,(0),max,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum128,/,(100),*",
                               "fa0e319b-5573-6d34-5bab-904769925036");
    }
    { // Index:55
        static constexpr std::array<GpaUInt32, 160> kHardwareCounters = {
                3519,
                4341,
                5163,
                5985,
                6807,
                7629,
                8451,
                9273,
                10095,
                10917,
                11739,
                12561,
                13383,
                14205,
                15027,
                15849,
                16671,
                17493,
                18315,
                19137,
                19959,
                20781,
                21603,
                22425,
                23247,
                24069,
                24891,
                25713,
                26535,
                27357,
                28179,
                29001,
                3520,
                4342,
                5164,
                5986,
                6808,
                7630,
                8452,
                9274,
                10096,
                10918,
                11740,
                12562,
                13384,
                14206,
                15028,
                15850,
                16672,
                17494,
                18316,
                19138,
                19960,
                20782,
                21604,
                22426,
                23248,
                24070,
                24892,
                25714,
                26536,
                27358,
                28180,
                29002,
                3521,
                4343,
                5165,
                5987,
                6809,
                7631,
                8453,
                9275,
                10097,
                10919,
                11741,
                12563,
                13385,
                14207,
                15029,
                15851,
                16673,
                17495,
                18317,
                19139,
                19961,
                20783,
                21605,
                22427,
                23249,
                24071,
                24893,
                25715,
                26537,
                27359,
                28181,
                29003,
                3522,
                4344,
                5166,
                5988,
                6810,
                7632,
                8454,
                9276,
                10098,
                10920,
                11742,
                12564,
                13386,
                14208,
                15030,
                15852,
                16674,
                17496,
                18318,
                19140,
                19962,
                20784,
                21606,
                22428,
                23250,
                24072,
                24894,
                25716,
                26538,
                27360,
                28182,
                29004,
                3595,
                4417,
                5239,
                6061,
                6883,
                7705,
                8527,
                9349,
                10171,
                10993,
                11815,
                12637,
                13459,
                14281,
                15103,
                15925,
                16747,
                17569,
                18391,
                19213,
                20035,
                20857,
                21679,
                22501,
                23323,
                24145,
                24967,
                25789,
                26611,
                27433,
                28255,
                29077,
        };
        c.DefineDerivedCounter("HiZQuadsCulledCount",
                               "DepthAndStencil",
                               "Count of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum128,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,sum32,-,(0),max",
                               "73b0b39d-6df2-3e24-0b5c-7cb0ac8b6f39");
    }
    { // Index:56
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                3595,
                4417,
                5239,
                6061,
                6883,
                7705,
                8527,
                9349,
                10171,
                10993,
                11815,
                12637,
                13459,
                14281,
                15103,
                15925,
                16747,
                17569,
                18391,
                19213,
                20035,
                20857,
                21679,
                22501,
                23323,
                24145,
                24967,
                25789,
                26611,
                27433,
                28255,
                29077,
        };
        c.DefineDerivedCounter("HiZQuadsAcceptedCount",
                               "DepthAndStencil",
                               "Count of quads that did continue on in the pipeline after HiZ.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32",
                               "59049ad9-42b5-c7cb-3616-6a8f6a8e4894");
    }
    { // Index:57
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                3595,
                4417,
                5239,
                6061,
                6883,
                7705,
                8527,
                9349,
                10171,
                10993,
                11815,
                12637,
                13459,
                14281,
                15103,
                15925,
                16747,
                17569,
                18391,
                19213,
                20035,
                20857,
                21679,
                22501,
                23323,
                24145,
                24967,
                25789,
                26611,
                27433,
                28255,
                29077,
                3619,
                4441,
                5263,
                6085,
                6907,
                7729,
                8551,
                9373,
                10195,
                11017,
                11839,
                12661,
                13483,
                14305,
                15127,
                15949,
                16771,
                17593,
                18415,
                19237,
                20059,
                20881,
                21703,
                22525,
                23347,
                24169,
                24991,
                25813,
                26635,
                27457,
                28279,
                29101,
                3519,
                4341,
                5163,
                5985,
                6807,
                7629,
                8451,
                9273,
                10095,
                10917,
                11739,
                12561,
                13383,
                14205,
                15027,
                15849,
                16671,
                17493,
                18315,
                19137,
                19959,
                20781,
                21603,
                22425,
                23247,
                24069,
                24891,
                25713,
                26535,
                27357,
                28179,
                29001,
                3520,
                4342,
                5164,
                5986,
                6808,
                7630,
                8452,
                9274,
                10096,
                10918,
                11740,
                12562,
                13384,
                14206,
                15028,
                15850,
                16672,
                17494,
                18316,
                19138,
                19960,
                20782,
                21604,
                22426,
                23248,
                24070,
                24892,
                25714,
                26536,
                27358,
                28180,
                29002,
                3521,
                4343,
                5165,
                5987,
                6809,
                7631,
                8453,
                9275,
                10097,
                10919,
                11741,
                12563,
                13385,
                14207,
                15029,
                15851,
                16673,
                17495,
                18317,
                19139,
                19961,
                20783,
                21605,
                22427,
                23249,
                24071,
                24893,
                25715,
                26537,
                27359,
                28181,
                29003,
                3522,
                4344,
                5166,
                5988,
                6810,
                7632,
                8454,
                9276,
                10098,
                10920,
                11742,
                12564,
                13386,
                14208,
                15030,
                15852,
                16674,
                17496,
                18318,
                19140,
                19962,
                20784,
                21606,
                22428,
                23250,
                24072,
                24894,
                25716,
                26538,
                27360,
                28182,
                29004,
        };
        c.DefineDerivedCounter("PreZQuadsCulled",
                               "DepthAndStencil",
                               "Percentage of quads rejected based on the detailZ and earlyZ tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum32,-,(0),max,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum128,/,(100),*",
                               "4e77547b-ec55-5663-f034-af59be66d77d");
    }
    { // Index:58
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                3595,
                4417,
                5239,
                6061,
                6883,
                7705,
                8527,
                9349,
                10171,
                10993,
                11815,
                12637,
                13459,
                14281,
                15103,
                15925,
                16747,
                17569,
                18391,
                19213,
                20035,
                20857,
                21679,
                22501,
                23323,
                24145,
                24967,
                25789,
                26611,
                27433,
                28255,
                29077,
                3619,
                4441,
                5263,
                6085,
                6907,
                7729,
                8551,
                9373,
                10195,
                11017,
                11839,
                12661,
                13483,
                14305,
                15127,
                15949,
                16771,
                17593,
                18415,
                19237,
                20059,
                20881,
                21703,
                22525,
                23347,
                24169,
                24991,
                25813,
                26635,
                27457,
                28279,
                29101,
        };
        c.DefineDerivedCounter("PreZQuadsCulledCount",
                               "DepthAndStencil",
                               "Count of quads rejected based on the detailZ and earlyZ tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum32,-,(0),max",
                               "1bf169e6-9304-834e-df5f-0c44d7890a08");
    }
    { // Index:59
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                3619,
                4441,
                5263,
                6085,
                6907,
                7729,
                8551,
                9373,
                10195,
                11017,
                11839,
                12661,
                13483,
                14305,
                15127,
                15949,
                16771,
                17593,
                18415,
                19237,
                20059,
                20881,
                21703,
                22525,
                23347,
                24169,
                24991,
                25813,
                26635,
                27457,
                28279,
                29101,
        };
        c.DefineDerivedCounter("PreZQuadsSurvivingCount",
                               "DepthAndStencil",
                               "Count of quads surviving detailZ and earlyZ tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32",
                               "50e25e51-3713-89cb-7f92-559cde5e5532");
    }
    { // Index:60
        static constexpr std::array<GpaUInt32, 160> kHardwareCounters = {
                3619,
                4441,
                5263,
                6085,
                6907,
                7729,
                8551,
                9373,
                10195,
                11017,
                11839,
                12661,
                13483,
                14305,
                15127,
                15949,
                16771,
                17593,
                18415,
                19237,
                20059,
                20881,
                21703,
                22525,
                23347,
                24169,
                24991,
                25813,
                26635,
                27457,
                28279,
                29101,
                3519,
                4341,
                5163,
                5985,
                6807,
                7629,
                8451,
                9273,
                10095,
                10917,
                11739,
                12561,
                13383,
                14205,
                15027,
                15849,
                16671,
                17493,
                18315,
                19137,
                19959,
                20781,
                21603,
                22425,
                23247,
                24069,
                24891,
                25713,
                26535,
                27357,
                28179,
                29001,
                3520,
                4342,
                5164,
                5986,
                6808,
                7630,
                8452,
                9274,
                10096,
                10918,
                11740,
                12562,
                13384,
                14206,
                15028,
                15850,
                16672,
                17494,
                18316,
                19138,
                19960,
                20782,
                21604,
                22426,
                23248,
                24070,
                24892,
                25714,
                26536,
                27358,
                28180,
                29002,
                3521,
                4343,
                5165,
                5987,
                6809,
                7631,
                8453,
                9275,
                10097,
                10919,
                11741,
                12563,
                13385,
                14207,
                15029,
                15851,
                16673,
                17495,
                18317,
                19139,
                19961,
                20783,
                21605,
                22427,
                23249,
                24071,
                24893,
                25715,
                26537,
                27359,
                28181,
                29003,
                3522,
                4344,
                5166,
                5988,
                6810,
                7632,
                8454,
                9276,
                10098,
                10920,
                11742,
                12564,
                13386,
                14208,
                15030,
                15852,
                16674,
                17496,
                18318,
                19140,
                19962,
                20784,
                21606,
                22428,
                23250,
                24072,
                24894,
                25716,
                26538,
                27360,
                28182,
                29004,
        };
        c.DefineDerivedCounter("PostZQuads",
                               "DepthAndStencil",
                               "Percentage of quads for which the pixel shader will run and may be postZ tested.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,sum128,/,(100),*",
                               "58f0d34b-eeb8-e8db-abce-cb72584144be");
    }
    { // Index:61
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                3619,
                4441,
                5263,
                6085,
                6907,
                7729,
                8551,
                9373,
                10195,
                11017,
                11839,
                12661,
                13483,
                14305,
                15127,
                15949,
                16771,
                17593,
                18415,
                19237,
                20059,
                20881,
                21703,
                22525,
                23347,
                24169,
                24991,
                25813,
                26635,
                27457,
                28279,
                29101,
        };
        c.DefineDerivedCounter("PostZQuadCount",
                               "DepthAndStencil",
                               "Count of quads for which the pixel shader will run and may be postZ tested.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32",
                               "08404526-ce35-939b-34c8-a7a35a0ff4d6");
    }
    { // Index:62
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                72821,
                73263,
                73705,
                74147,
                74589,
                75031,
                75473,
                75915,
                76357,
                76799,
                77241,
                77683,
                78125,
                78567,
                79009,
                79451,
        };
        c.DefineDerivedCounter("PreZSamplesPassing",
                               "DepthAndStencil",
                               "Number of samples tested for Z before shading and passed.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "3bfe6c4d-7422-ca03-7ea5-e67ff1a00136");
    }
    { // Index:63
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                72823,
                73265,
                73707,
                74149,
                74591,
                75033,
                75475,
                75917,
                76359,
                76801,
                77243,
                77685,
                78127,
                78569,
                79011,
                79453,
        };
        c.DefineDerivedCounter("PreZSamplesFailingS",
                               "DepthAndStencil",
                               "Number of samples tested for Z before shading and failed stencil test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "df7f705e-5162-d3b5-da8b-63466cf9c4e5");
    }
    { // Index:64
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                72822,
                73264,
                73706,
                74148,
                74590,
                75032,
                75474,
                75916,
                76358,
                76800,
                77242,
                77684,
                78126,
                78568,
                79010,
                79452,
        };
        c.DefineDerivedCounter("PreZSamplesFailingZ",
                               "DepthAndStencil",
                               "Number of samples tested for Z before shading and failed Z test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "4484e950-f7a4-3800-bc74-78dd297f017e");
    }
    { // Index:65
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                72818,
                73260,
                73702,
                74144,
                74586,
                75028,
                75470,
                75912,
                76354,
                76796,
                77238,
                77680,
                78122,
                78564,
                79006,
                79448,
        };
        c.DefineDerivedCounter("PostZSamplesPassing",
                               "DepthAndStencil",
                               "Number of samples tested for Z after shading and passed.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "4995d5d6-2330-b986-508b-fae24856f44c");
    }
    { // Index:66
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                72820,
                73262,
                73704,
                74146,
                74588,
                75030,
                75472,
                75914,
                76356,
                76798,
                77240,
                77682,
                78124,
                78566,
                79008,
                79450,
        };
        c.DefineDerivedCounter("PostZSamplesFailingS",
                               "DepthAndStencil",
                               "Number of samples tested for Z after shading and failed stencil test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "ae558af4-f4be-3dd4-7316-b2c4dcf0def8");
    }
    { // Index:67
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                72819,
                73261,
                73703,
                74145,
                74587,
                75029,
                75471,
                75913,
                76355,
                76797,
                77239,
                77681,
                78123,
                78565,
                79007,
                79449,
        };
        c.DefineDerivedCounter("PostZSamplesFailingZ",
                               "DepthAndStencil",
                               "Number of samples tested for Z after shading and failed Z test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "b3684c94-814a-c695-c85d-a5b6ab798b35");
    }
    { // Index:68
        static constexpr std::array<GpaUInt32, 17> kHardwareCounters = {
                72690,
                73132,
                73574,
                74016,
                74458,
                74900,
                75342,
                75784,
                76226,
                76668,
                77110,
                77552,
                77994,
                78436,
                78878,
                79320,
                24,
        };
        c.DefineDerivedCounter("ZUnitStalled",
                               "DepthAndStencil",
                               "The percentage of GPUTime the depth buffer spends waiting for the color buffer to be ready to accept data. High figures here indicate a bottleneck in color buffer operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16,16,/,(100),*",
                               "5e86c3ad-1726-3157-1d01-7ed188bf854d");
    }
    { // Index:69
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                72690,
                73132,
                73574,
                74016,
                74458,
                74900,
                75342,
                75784,
                76226,
                76668,
                77110,
                77552,
                77994,
                78436,
                78878,
                79320,
        };
        c.DefineDerivedCounter("ZUnitStalledCycles",
                               "DepthAndStencil",
                               "Number of GPU cycles the depth buffer spends waiting for the color buffer to be ready to accept data. Larger numbers indicate a bottleneck in color buffer operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16",
                               "4351fa7f-6737-2c3e-3ffb-b3addbdceedd");
    }
    { // Index:70
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                79756,
                80072,
                80388,
                80704,
                81020,
                81336,
                81652,
                81968,
                82284,
                82600,
                82916,
                83232,
                83548,
                83864,
                84180,
                84496,
        };
        c.DefineDerivedCounter("CBMemRead",
                               "ColorBuffer",
                               "Number of bytes read from the color buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(32),*",
                               "84b531d8-a1f8-7f49-7c27-7bc97801f1e6");
    }
    { // Index:71
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                79758,
                80074,
                80390,
                80706,
                81022,
                81338,
                81654,
                81970,
                82286,
                82602,
                82918,
                83234,
                83550,
                83866,
                84182,
                84498,
        };
        c.DefineDerivedCounter("CBMemWritten",
                               "ColorBuffer",
                               "Number of bytes written to the color buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(32),*",
                               "550f8ff8-60b6-a6bf-87d0-25ac9e87de70");
    }
    { // Index:72
        static constexpr std::array<GpaUInt32, 128> kHardwareCounters = {
                66253,
                66353,
                66453,
                66553,
                66653,
                66753,
                66853,
                66953,
                67053,
                67153,
                67253,
                67353,
                67453,
                67553,
                67653,
                67753,
                67853,
                67953,
                68053,
                68153,
                68253,
                68353,
                68453,
                68553,
                68653,
                68753,
                68853,
                68953,
                69053,
                69153,
                69253,
                69353,
                69453,
                69553,
                69653,
                69753,
                69853,
                69953,
                70053,
                70153,
                70253,
                70353,
                70453,
                70553,
                70653,
                70753,
                70853,
                70953,
                71053,
                71153,
                71253,
                71353,
                71453,
                71553,
                71653,
                71753,
                71853,
                71953,
                72053,
                72153,
                72253,
                72353,
                72453,
                72553,
                66261,
                66361,
                66461,
                66561,
                66661,
                66761,
                66861,
                66961,
                67061,
                67161,
                67261,
                67361,
                67461,
                67561,
                67661,
                67761,
                67861,
                67961,
                68061,
                68161,
                68261,
                68361,
                68461,
                68561,
                68661,
                68761,
                68861,
                68961,
                69061,
                69161,
                69261,
                69361,
                69461,
                69561,
                69661,
                69761,
                69861,
                69961,
                70061,
                70161,
                70261,
                70361,
                70461,
                70561,
                70661,
                70761,
                70861,
                70961,
                71061,
                71161,
                71261,
                71361,
                71461,
                71561,
                71661,
                71761,
                71861,
                71961,
                72061,
                72161,
                72261,
                72361,
                72461,
                72561,
        };
        c.DefineDerivedCounter("L0CacheHit",
                               "MemoryCache",
                               "The percentage of read requests that hit the data in the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "(0),(1),64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,/,-,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,ifnotzero",
                               "286c786e-9a42-3371-9dea-dd54e6e612e9");
    }
    { // Index:73
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                66253,
                66353,
                66453,
                66553,
                66653,
                66753,
                66853,
                66953,
                67053,
                67153,
                67253,
                67353,
                67453,
                67553,
                67653,
                67753,
                67853,
                67953,
                68053,
                68153,
                68253,
                68353,
                68453,
                68553,
                68653,
                68753,
                68853,
                68953,
                69053,
                69153,
                69253,
                69353,
                69453,
                69553,
                69653,
                69753,
                69853,
                69953,
                70053,
                70153,
                70253,
                70353,
                70453,
                70553,
                70653,
                70753,
                70853,
                70953,
                71053,
                71153,
                71253,
                71353,
                71453,
                71553,
                71653,
                71753,
                71853,
                71953,
                72053,
                72153,
                72253,
                72353,
                72453,
                72553,
        };
        c.DefineDerivedCounter("L0CacheRequestCount",
                               "MemoryCache",
                               "The number of read requests made to the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64",
                               "74983cae-ee57-2e1b-d990-5128fef84e1f");
    }
    { // Index:74
        static constexpr std::array<GpaUInt32, 128> kHardwareCounters = {
                66253,
                66353,
                66453,
                66553,
                66653,
                66753,
                66853,
                66953,
                67053,
                67153,
                67253,
                67353,
                67453,
                67553,
                67653,
                67753,
                67853,
                67953,
                68053,
                68153,
                68253,
                68353,
                68453,
                68553,
                68653,
                68753,
                68853,
                68953,
                69053,
                69153,
                69253,
                69353,
                69453,
                69553,
                69653,
                69753,
                69853,
                69953,
                70053,
                70153,
                70253,
                70353,
                70453,
                70553,
                70653,
                70753,
                70853,
                70953,
                71053,
                71153,
                71253,
                71353,
                71453,
                71553,
                71653,
                71753,
                71853,
                71953,
                72053,
                72153,
                72253,
                72353,
                72453,
                72553,
                66261,
                66361,
                66461,
                66561,
                66661,
                66761,
                66861,
                66961,
                67061,
                67161,
                67261,
                67361,
                67461,
                67561,
                67661,
                67761,
                67861,
                67961,
                68061,
                68161,
                68261,
                68361,
                68461,
                68561,
                68661,
                68761,
                68861,
                68961,
                69061,
                69161,
                69261,
                69361,
                69461,
                69561,
                69661,
                69761,
                69861,
                69961,
                70061,
                70161,
                70261,
                70361,
                70461,
                70561,
                70661,
                70761,
                70861,
                70961,
                71061,
                71161,
                71261,
                71361,
                71461,
                71561,
                71661,
                71761,
                71861,
                71961,
                72061,
                72161,
                72261,
                72361,
                72461,
                72561,
        };
        c.DefineDerivedCounter("L0CacheHitCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache hit from the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,-",
                               "c0de7338-069b-c5ba-ead3-c65e030cd2ac");
    }
    { // Index:75
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                66261,
                66361,
                66461,
                66561,
                66661,
                66761,
                66861,
                66961,
                67061,
                67161,
                67261,
                67361,
                67461,
                67561,
                67661,
                67761,
                67861,
                67961,
                68061,
                68161,
                68261,
                68361,
                68461,
                68561,
                68661,
                68761,
                68861,
                68961,
                69061,
                69161,
                69261,
                69361,
                69461,
                69561,
                69661,
                69761,
                69861,
                69961,
                70061,
                70161,
                70261,
                70361,
                70461,
                70561,
                70661,
                70761,
                70861,
                70961,
                71061,
                71161,
                71261,
                71361,
                71461,
                71561,
                71661,
                71761,
                71861,
                71961,
                72061,
                72161,
                72261,
                72361,
                72461,
                72561,
        };
        c.DefineDerivedCounter("L0CacheMissCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache miss from the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64",
                               "a2f08766-ea1b-6eae-6eaf-faa04125d3e6");
    }
    { // Index:76
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                104250,
                104762,
                105274,
                105786,
                106298,
                106810,
                107322,
                107834,
                108346,
                108858,
                109370,
                109882,
                110394,
                110906,
                111418,
                111930,
                112442,
                112954,
                113466,
                113978,
                114490,
                115002,
                115514,
                116026,
                116538,
                117050,
                117562,
                118074,
                118586,
                119098,
                119610,
                120122,
                104251,
                104763,
                105275,
                105787,
                106299,
                106811,
                107323,
                107835,
                108347,
                108859,
                109371,
                109883,
                110395,
                110907,
                111419,
                111931,
                112443,
                112955,
                113467,
                113979,
                114491,
                115003,
                115515,
                116027,
                116539,
                117051,
                117563,
                118075,
                118587,
                119099,
                119611,
                120123,
                104252,
                104764,
                105276,
                105788,
                106300,
                106812,
                107324,
                107836,
                108348,
                108860,
                109372,
                109884,
                110396,
                110908,
                111420,
                111932,
                112444,
                112956,
                113468,
                113980,
                114492,
                115004,
                115516,
                116028,
                116540,
                117052,
                117564,
                118076,
                118588,
                119100,
                119612,
                120124,
        };
        c.DefineDerivedCounter("ScalarCacheHit",
                               "MemoryCache",
                               "The percentage of read requests made from executing shader code that hit the data in the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum32,+,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum32,+,/,(100),*",
                               "3346d2cf-b7e4-45b6-c0a0-350ce18159c0");
    }
    { // Index:77
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                104250,
                104762,
                105274,
                105786,
                106298,
                106810,
                107322,
                107834,
                108346,
                108858,
                109370,
                109882,
                110394,
                110906,
                111418,
                111930,
                112442,
                112954,
                113466,
                113978,
                114490,
                115002,
                115514,
                116026,
                116538,
                117050,
                117562,
                118074,
                118586,
                119098,
                119610,
                120122,
                104251,
                104763,
                105275,
                105787,
                106299,
                106811,
                107323,
                107835,
                108347,
                108859,
                109371,
                109883,
                110395,
                110907,
                111419,
                111931,
                112443,
                112955,
                113467,
                113979,
                114491,
                115003,
                115515,
                116027,
                116539,
                117051,
                117563,
                118075,
                118587,
                119099,
                119611,
                120123,
                104252,
                104764,
                105276,
                105788,
                106300,
                106812,
                107324,
                107836,
                108348,
                108860,
                109372,
                109884,
                110396,
                110908,
                111420,
                111932,
                112444,
                112956,
                113468,
                113980,
                114492,
                115004,
                115516,
                116028,
                116540,
                117052,
                117564,
                118076,
                118588,
                119100,
                119612,
                120124,
        };
        c.DefineDerivedCounter("ScalarCacheRequestCount",
                               "MemoryCache",
                               "The number of read requests made from executing shader code to the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum32,+,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum32,+",
                               "b5ac4201-c4cd-caa5-6ca7-4bc9a3abee01");
    }
    { // Index:78
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                104250,
                104762,
                105274,
                105786,
                106298,
                106810,
                107322,
                107834,
                108346,
                108858,
                109370,
                109882,
                110394,
                110906,
                111418,
                111930,
                112442,
                112954,
                113466,
                113978,
                114490,
                115002,
                115514,
                116026,
                116538,
                117050,
                117562,
                118074,
                118586,
                119098,
                119610,
                120122,
        };
        c.DefineDerivedCounter("ScalarCacheHitCount",
                               "MemoryCache",
                               "The number of read requests made from executing shader code which result in a cache hit from the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32",
                               "beebef4f-8f6c-9363-eda9-bb385ffec363");
    }
    { // Index:79
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                104251,
                104763,
                105275,
                105787,
                106299,
                106811,
                107323,
                107835,
                108347,
                108859,
                109371,
                109883,
                110395,
                110907,
                111419,
                111931,
                112443,
                112955,
                113467,
                113979,
                114491,
                115003,
                115515,
                116027,
                116539,
                117051,
                117563,
                118075,
                118587,
                119099,
                119611,
                120123,
                104252,
                104764,
                105276,
                105788,
                106300,
                106812,
                107324,
                107836,
                108348,
                108860,
                109372,
                109884,
                110396,
                110908,
                111420,
                111932,
                112444,
                112956,
                113468,
                113980,
                114492,
                115004,
                115516,
                116028,
                116540,
                117052,
                117564,
                118076,
                118588,
                119100,
                119612,
                120124,
        };
        c.DefineDerivedCounter("ScalarCacheMissCount",
                               "MemoryCache",
                               "The number of read requests made from executing shader code which result in a cache miss from the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum32,+",
                               "07f5afb2-75b2-4fc3-1a6a-579958f77dd3");
    }
    { // Index:80
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                104226,
                104738,
                105250,
                105762,
                106274,
                106786,
                107298,
                107810,
                108322,
                108834,
                109346,
                109858,
                110370,
                110882,
                111394,
                111906,
                112418,
                112930,
                113442,
                113954,
                114466,
                114978,
                115490,
                116002,
                116514,
                117026,
                117538,
                118050,
                118562,
                119074,
                119586,
                120098,
                104227,
                104739,
                105251,
                105763,
                106275,
                106787,
                107299,
                107811,
                108323,
                108835,
                109347,
                109859,
                110371,
                110883,
                111395,
                111907,
                112419,
                112931,
                113443,
                113955,
                114467,
                114979,
                115491,
                116003,
                116515,
                117027,
                117539,
                118051,
                118563,
                119075,
                119587,
                120099,
                104228,
                104740,
                105252,
                105764,
                106276,
                106788,
                107300,
                107812,
                108324,
                108836,
                109348,
                109860,
                110372,
                110884,
                111396,
                111908,
                112420,
                112932,
                113444,
                113956,
                114468,
                114980,
                115492,
                116004,
                116516,
                117028,
                117540,
                118052,
                118564,
                119076,
                119588,
                120100,
        };
        c.DefineDerivedCounter("InstCacheHit",
                               "MemoryCache",
                               "The percentage of read requests made that hit the data in the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum32,+,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum32,+,/,(100),*",
                               "adf51399-597b-f017-8ec1-21817f92e91d");
    }
    { // Index:81
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                104226,
                104738,
                105250,
                105762,
                106274,
                106786,
                107298,
                107810,
                108322,
                108834,
                109346,
                109858,
                110370,
                110882,
                111394,
                111906,
                112418,
                112930,
                113442,
                113954,
                114466,
                114978,
                115490,
                116002,
                116514,
                117026,
                117538,
                118050,
                118562,
                119074,
                119586,
                120098,
                104227,
                104739,
                105251,
                105763,
                106275,
                106787,
                107299,
                107811,
                108323,
                108835,
                109347,
                109859,
                110371,
                110883,
                111395,
                111907,
                112419,
                112931,
                113443,
                113955,
                114467,
                114979,
                115491,
                116003,
                116515,
                117027,
                117539,
                118051,
                118563,
                119075,
                119587,
                120099,
                104228,
                104740,
                105252,
                105764,
                106276,
                106788,
                107300,
                107812,
                108324,
                108836,
                109348,
                109860,
                110372,
                110884,
                111396,
                111908,
                112420,
                112932,
                113444,
                113956,
                114468,
                114980,
                115492,
                116004,
                116516,
                117028,
                117540,
                118052,
                118564,
                119076,
                119588,
                120100,
        };
        c.DefineDerivedCounter("InstCacheRequestCount",
                               "MemoryCache",
                               "The number of read requests made to the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum32,+,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum32,+",
                               "8c92ca8c-7dcc-88a0-3037-9704aa4f64ac");
    }
    { // Index:82
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                104226,
                104738,
                105250,
                105762,
                106274,
                106786,
                107298,
                107810,
                108322,
                108834,
                109346,
                109858,
                110370,
                110882,
                111394,
                111906,
                112418,
                112930,
                113442,
                113954,
                114466,
                114978,
                115490,
                116002,
                116514,
                117026,
                117538,
                118050,
                118562,
                119074,
                119586,
                120098,
        };
        c.DefineDerivedCounter("InstCacheHitCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache hit from the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32",
                               "778be78f-cf83-9558-e967-868e997e6743");
    }
    { // Index:83
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                104227,
                104739,
                105251,
                105763,
                106275,
                106787,
                107299,
                107811,
                108323,
                108835,
                109347,
                109859,
                110371,
                110883,
                111395,
                111907,
                112419,
                112931,
                113443,
                113955,
                114467,
                114979,
                115491,
                116003,
                116515,
                117027,
                117539,
                118051,
                118563,
                119075,
                119587,
                120099,
                104228,
                104740,
                105252,
                105764,
                106276,
                106788,
                107300,
                107812,
                108324,
                108836,
                109348,
                109860,
                110372,
                110884,
                111396,
                111908,
                112420,
                112932,
                113444,
                113956,
                114468,
                114980,
                115492,
                116004,
                116516,
                117028,
                117540,
                118052,
                118564,
                119076,
                119588,
                120100,
        };
        c.DefineDerivedCounter("InstCacheMissCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache miss from the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum32,+",
                               "351650dc-d349-dca8-2b78-b14a1479cf26");
    }
    { // Index:84
        static constexpr std::array<GpaUInt32, 36> kHardwareCounters = {
                94188,
                94438,
                94688,
                94938,
                95188,
                95438,
                95688,
                95938,
                96188,
                96438,
                96688,
                96938,
                97188,
                97438,
                97688,
                97938,
                98188,
                98438,
                94227,
                94477,
                94727,
                94977,
                95227,
                95477,
                95727,
                95977,
                96227,
                96477,
                96727,
                96977,
                97227,
                97477,
                97727,
                97977,
                98227,
                98477,
        };
        c.DefineDerivedCounter("L2CacheHit",
                               "MemoryCache",
                               "The percentage of read or write requests that hit the data in the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "(0),(1),18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,sum18,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,sum18,/,-,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,sum18,ifnotzero",
                               "47694e4d-6ce6-f387-080d-b1f3d00b73ac");
    }
    { // Index:85
        static constexpr std::array<GpaUInt32, 36> kHardwareCounters = {
                94227,
                94477,
                94727,
                94977,
                95227,
                95477,
                95727,
                95977,
                96227,
                96477,
                96727,
                96977,
                97227,
                97477,
                97727,
                97977,
                98227,
                98477,
                94188,
                94438,
                94688,
                94938,
                95188,
                95438,
                95688,
                95938,
                96188,
                96438,
                96688,
                96938,
                97188,
                97438,
                97688,
                97938,
                98188,
                98438,
        };
        c.DefineDerivedCounter("L2CacheMiss",
                               "MemoryCache",
                               "The percentage of read or write requests that miss the data in the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size. Value range: 0% (optimal) to 100% (all miss).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,sum18,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,sum18,/,(100),*",
                               "8aee5458-a58e-11b6-5131-7f19ed070117");
    }
    { // Index:86
        static constexpr std::array<GpaUInt32, 18> kHardwareCounters = {
                94188,
                94438,
                94688,
                94938,
                95188,
                95438,
                95688,
                95938,
                96188,
                96438,
                96688,
                96938,
                97188,
                97438,
                97688,
                97938,
                98188,
                98438,
        };
        c.DefineDerivedCounter("L2CacheRequestCount",
                               "MemoryCache",
                               "The number of read or write requests made to the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,sum18",
                               "21e9219c-e725-0d96-06b1-b21698b736b2");
    }
    { // Index:87
        static constexpr std::array<GpaUInt32, 36> kHardwareCounters = {
                94188,
                94438,
                94688,
                94938,
                95188,
                95438,
                95688,
                95938,
                96188,
                96438,
                96688,
                96938,
                97188,
                97438,
                97688,
                97938,
                98188,
                98438,
                94227,
                94477,
                94727,
                94977,
                95227,
                95477,
                95727,
                95977,
                96227,
                96477,
                96727,
                96977,
                97227,
                97477,
                97727,
                97977,
                98227,
                98477,
        };
        c.DefineDerivedCounter("L2CacheHitCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache hit from the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,sum18,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,sum18,-",
                               "29ddcb92-d3dd-951b-1b23-efe52e4eeee4");
    }
    { // Index:88
        static constexpr std::array<GpaUInt32, 18> kHardwareCounters = {
                94227,
                94477,
                94727,
                94977,
                95227,
                95477,
                95727,
                95977,
                96227,
                96477,
                96727,
                96977,
                97227,
                97477,
                97727,
                97977,
                98227,
                98477,
        };
        c.DefineDerivedCounter("L2CacheMissCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache miss from the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,sum18",
                               "376eec7b-ab25-9012-06b5-63291a17fd47");
    }
    { // Index:89
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                66290,
                66390,
                66490,
                66590,
                66690,
                66790,
                66890,
                66990,
                67090,
                67190,
                67290,
                67390,
                67490,
                67590,
                67690,
                67790,
                67890,
                67990,
                68090,
                68190,
                68290,
                68390,
                68490,
                68590,
                68690,
                68790,
                68890,
                68990,
                69090,
                69190,
                69290,
                69390,
                69490,
                69590,
                69690,
                69790,
                69890,
                69990,
                70090,
                70190,
                70290,
                70390,
                70490,
                70590,
                70690,
                70790,
                70890,
                70990,
                71090,
                71190,
                71290,
                71390,
                71490,
                71590,
                71690,
                71790,
                71890,
                71990,
                72090,
                72190,
                72290,
                72390,
                72490,
                72590,
        };
        c.DefineDerivedCounter("L0TagConflictReadStalledCycles",
                               "MemoryCache",
                               "The number of cycles read operations from the L0 cache are stalled due to tag conflicts.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64",
                               "e2412737-e2bf-c791-5f2f-64abd4ba47cf");
    }
    { // Index:90
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                66291,
                66391,
                66491,
                66591,
                66691,
                66791,
                66891,
                66991,
                67091,
                67191,
                67291,
                67391,
                67491,
                67591,
                67691,
                67791,
                67891,
                67991,
                68091,
                68191,
                68291,
                68391,
                68491,
                68591,
                68691,
                68791,
                68891,
                68991,
                69091,
                69191,
                69291,
                69391,
                69491,
                69591,
                69691,
                69791,
                69891,
                69991,
                70091,
                70191,
                70291,
                70391,
                70491,
                70591,
                70691,
                70791,
                70891,
                70991,
                71091,
                71191,
                71291,
                71391,
                71491,
                71591,
                71691,
                71791,
                71891,
                71991,
                72091,
                72191,
                72291,
                72391,
                72491,
                72591,
        };
        c.DefineDerivedCounter("L0TagConflictWriteStalledCycles",
                               "MemoryCache",
                               "The number of cycles write operations to the L0 cache are stalled due to tag conflicts.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64",
                               "0c2571f3-f084-f351-99ba-0d9e23b47e8e");
    }
    { // Index:91
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                66292,
                66392,
                66492,
                66592,
                66692,
                66792,
                66892,
                66992,
                67092,
                67192,
                67292,
                67392,
                67492,
                67592,
                67692,
                67792,
                67892,
                67992,
                68092,
                68192,
                68292,
                68392,
                68492,
                68592,
                68692,
                68792,
                68892,
                68992,
                69092,
                69192,
                69292,
                69392,
                69492,
                69592,
                69692,
                69792,
                69892,
                69992,
                70092,
                70192,
                70292,
                70392,
                70492,
                70592,
                70692,
                70792,
                70892,
                70992,
                71092,
                71192,
                71292,
                71392,
                71492,
                71592,
                71692,
                71792,
                71892,
                71992,
                72092,
                72192,
                72292,
                72392,
                72492,
                72592,
        };
        c.DefineDerivedCounter("L0TagConflictAtomicStalledCycles",
                               "MemoryCache",
                               "The number of cycles atomic operations on the L0 cache are stalled due to tag conflicts.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64",
                               "f13f8563-4151-1533-f42f-0f9c08a20210");
    }
    { // Index:92
        static constexpr std::array<GpaUInt32, 72> kHardwareCounters = {
                94331,
                94581,
                94831,
                95081,
                95331,
                95581,
                95831,
                96081,
                96331,
                96581,
                96831,
                97081,
                97331,
                97581,
                97831,
                98081,
                98331,
                98581,
                94332,
                94582,
                94832,
                95082,
                95332,
                95582,
                95832,
                96082,
                96332,
                96582,
                96832,
                97082,
                97332,
                97582,
                97832,
                98082,
                98332,
                98582,
                94333,
                94583,
                94833,
                95083,
                95333,
                95583,
                95833,
                96083,
                96333,
                96583,
                96833,
                97083,
                97333,
                97583,
                97833,
                98083,
                98333,
                98583,
                94334,
                94584,
                94834,
                95084,
                95334,
                95584,
                95834,
                96084,
                96334,
                96584,
                96834,
                97084,
                97334,
                97584,
                97834,
                98084,
                98334,
                98584,
        };
        c.DefineDerivedCounter("FetchSize",
                               "GlobalMemory",
                               "The total bytes fetched from the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,sum18,(32),*,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,sum18,(64),*,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,sum18,(128),*,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,sum18,(256),*,sum4",
                               "664bb3ef-6eca-86b1-1e2d-30cb897b5fa9");
    }
    { // Index:93
        static constexpr std::array<GpaUInt32, 36> kHardwareCounters = {
                94293,
                94543,
                94793,
                95043,
                95293,
                95543,
                95793,
                96043,
                96293,
                96543,
                96793,
                97043,
                97293,
                97543,
                97793,
                98043,
                98293,
                98543,
                94299,
                94549,
                94799,
                95049,
                95299,
                95549,
                95799,
                96049,
                96299,
                96549,
                96799,
                97049,
                97299,
                97549,
                97799,
                98049,
                98299,
                98549,
        };
        c.DefineDerivedCounter("WriteSize",
                               "GlobalMemory",
                               "The total bytes written to the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,sum18,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,sum18,-,(32),*,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,sum18,(64),*,+",
                               "f96f2c16-b1b4-4ec4-229c-fc82e6f80a82");
    }
    { // Index:94
        static constexpr std::array<GpaUInt32, 65> kHardwareCounters = {
                32531,
                32786,
                33041,
                33296,
                33551,
                33806,
                34061,
                34316,
                34571,
                34826,
                35081,
                35336,
                35591,
                35846,
                36101,
                36356,
                36611,
                36866,
                37121,
                37376,
                37631,
                37886,
                38141,
                38396,
                38651,
                38906,
                39161,
                39416,
                39671,
                39926,
                40181,
                40436,
                40691,
                40946,
                41201,
                41456,
                41711,
                41966,
                42221,
                42476,
                42731,
                42986,
                43241,
                43496,
                43751,
                44006,
                44261,
                44516,
                44771,
                45026,
                45281,
                45536,
                45791,
                46046,
                46301,
                46556,
                46811,
                47066,
                47321,
                47576,
                47831,
                48086,
                48341,
                48596,
                24,
        };
        c.DefineDerivedCounter("MemUnitBusy",
                               "GlobalMemory",
                               "The percentage of GPUTime the memory unit is active. The result includes the stall time (MemUnitStalled). This is measured with all extra fetches and writes and any cache or memory effects taken into account. Value range: 0% to 100% (fetch-bound).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64,64,/,(100),*",
                               "a1efa380-4a72-e066-e06a-2ab71a488521");
    }
    { // Index:95
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                32531,
                32786,
                33041,
                33296,
                33551,
                33806,
                34061,
                34316,
                34571,
                34826,
                35081,
                35336,
                35591,
                35846,
                36101,
                36356,
                36611,
                36866,
                37121,
                37376,
                37631,
                37886,
                38141,
                38396,
                38651,
                38906,
                39161,
                39416,
                39671,
                39926,
                40181,
                40436,
                40691,
                40946,
                41201,
                41456,
                41711,
                41966,
                42221,
                42476,
                42731,
                42986,
                43241,
                43496,
                43751,
                44006,
                44261,
                44516,
                44771,
                45026,
                45281,
                45536,
                45791,
                46046,
                46301,
                46556,
                46811,
                47066,
                47321,
                47576,
                47831,
                48086,
                48341,
                48596,
        };
        c.DefineDerivedCounter("MemUnitBusyCycles",
                               "GlobalMemory",
                               "Number of GPU cycles the memory unit is active. The result includes the stall time (MemUnitStalledCycles). This is measured with all extra fetches and writes and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64",
                               "168f077c-4797-b2f5-717f-105c725266c8");
    }
    { // Index:96
        static constexpr std::array<GpaUInt32, 65> kHardwareCounters = {
                66283,
                66383,
                66483,
                66583,
                66683,
                66783,
                66883,
                66983,
                67083,
                67183,
                67283,
                67383,
                67483,
                67583,
                67683,
                67783,
                67883,
                67983,
                68083,
                68183,
                68283,
                68383,
                68483,
                68583,
                68683,
                68783,
                68883,
                68983,
                69083,
                69183,
                69283,
                69383,
                69483,
                69583,
                69683,
                69783,
                69883,
                69983,
                70083,
                70183,
                70283,
                70383,
                70483,
                70583,
                70683,
                70783,
                70883,
                70983,
                71083,
                71183,
                71283,
                71383,
                71483,
                71583,
                71683,
                71783,
                71883,
                71983,
                72083,
                72183,
                72283,
                72383,
                72483,
                72583,
                24,
        };
        c.DefineDerivedCounter("MemUnitStalled",
                               "GlobalMemory",
                               "The percentage of GPUTime the memory unit is stalled. Try reducing the number or size of fetches and writes if possible. Value range: 0% (optimal) to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64,64,/,(100),*",
                               "465ba54f-d250-1453-790a-731b10d230b1");
    }
    { // Index:97
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                66283,
                66383,
                66483,
                66583,
                66683,
                66783,
                66883,
                66983,
                67083,
                67183,
                67283,
                67383,
                67483,
                67583,
                67683,
                67783,
                67883,
                67983,
                68083,
                68183,
                68283,
                68383,
                68483,
                68583,
                68683,
                68783,
                68883,
                68983,
                69083,
                69183,
                69283,
                69383,
                69483,
                69583,
                69683,
                69783,
                69883,
                69983,
                70083,
                70183,
                70283,
                70383,
                70483,
                70583,
                70683,
                70783,
                70883,
                70983,
                71083,
                71183,
                71283,
                71383,
                71483,
                71583,
                71683,
                71783,
                71883,
                71983,
                72083,
                72183,
                72283,
                72383,
                72483,
                72583,
        };
        c.DefineDerivedCounter("MemUnitStalledCycles",
                               "GlobalMemory",
                               "Number of GPU cycles the memory unit is stalled.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64",
                               "2745659a-0e40-bace-3b9b-86a54f8e4623");
    }
    { // Index:98
        static constexpr std::array<GpaUInt32, 19> kHardwareCounters = {
                94307,
                94557,
                94807,
                95057,
                95307,
                95557,
                95807,
                96057,
                96307,
                96557,
                96807,
                97057,
                97307,
                97557,
                97807,
                98057,
                98307,
                98557,
                24,
        };
        c.DefineDerivedCounter("WriteUnitStalled",
                               "GlobalMemory",
                               "The percentage of GPUTime the Write unit is stalled. Value range: 0% to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,max18,18,/,(100),*",
                               "594ad3ce-d1ec-10fc-7d59-25738e397d72");
    }
    { // Index:99
        static constexpr std::array<GpaUInt32, 18> kHardwareCounters = {
                94307,
                94557,
                94807,
                95057,
                95307,
                95557,
                95807,
                96057,
                96307,
                96557,
                96807,
                97057,
                97307,
                97557,
                97807,
                98057,
                98307,
                98557,
        };
        c.DefineDerivedCounter("WriteUnitStalledCycles",
                               "GlobalMemory",
                               "Number of GPU cycles the Write unit is stalled.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,max18",
                               "ede3305e-abd4-d6bf-6b00-ffc57a29fce3");
    }
    { // Index:100
        static constexpr std::array<GpaUInt32, 2> kHardwareCounters = {
                188667,
                188668,
        };
        c.DefineDerivedCounter("LocalVidMemBytes",
                               "GlobalMemory",
                               "Number of bytes read from or written to the Infinity Cache (if available) or local video memory",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,+,(32),*",
                               "48207266-a1ef-290a-3c77-effd1260fa2c");
    }
    { // Index:101
        static constexpr std::array<GpaUInt32, 36> kHardwareCounters = {
                188698,
                188731,
                188764,
                188797,
                188830,
                188863,
                188896,
                188929,
                188962,
                188995,
                189028,
                189061,
                189094,
                189127,
                189160,
                189193,
                189226,
                189259,
                188699,
                188732,
                188765,
                188798,
                188831,
                188864,
                188897,
                188930,
                188963,
                188996,
                189029,
                189062,
                189095,
                189128,
                189161,
                189194,
                189227,
                189260,
        };
        c.DefineDerivedCounter("PcieBytes",
                               "GlobalMemory",
                               "Number of bytes sent and received over the PCIe bus",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,sum18,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,sum18,+,(32),*",
                               "4bbe92de-f79e-ed39-bfde-9e08390cdb21");
    }
    { // Index:102
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                48954,
                49226,
                49498,
                49770,
                50042,
                50314,
                50586,
                50858,
                51130,
                51402,
                51674,
                51946,
                52218,
                52490,
                52762,
                53034,
                53306,
                53578,
                53850,
                54122,
                54394,
                54666,
                54938,
                55210,
                55482,
                55754,
                56026,
                56298,
                56570,
                56842,
                57114,
                57386,
                57658,
                57930,
                58202,
                58474,
                58746,
                59018,
                59290,
                59562,
                59834,
                60106,
                60378,
                60650,
                60922,
                61194,
                61466,
                61738,
                62010,
                62282,
                62554,
                62826,
                63098,
                63370,
                63642,
                63914,
                64186,
                64458,
                64730,
                65002,
                65274,
                65546,
                65818,
                66090,
        };
        c.DefineDerivedCounter("RayTriTests",
                               "RayTracing",
                               "The number of ray triangle intersection tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64",
                               "20c646f5-fa99-51c2-b583-0a3d77d675a8");
    }
    { // Index:103
        static constexpr std::array<GpaUInt32, 128> kHardwareCounters = {
                48952,
                49224,
                49496,
                49768,
                50040,
                50312,
                50584,
                50856,
                51128,
                51400,
                51672,
                51944,
                52216,
                52488,
                52760,
                53032,
                53304,
                53576,
                53848,
                54120,
                54392,
                54664,
                54936,
                55208,
                55480,
                55752,
                56024,
                56296,
                56568,
                56840,
                57112,
                57384,
                57656,
                57928,
                58200,
                58472,
                58744,
                59016,
                59288,
                59560,
                59832,
                60104,
                60376,
                60648,
                60920,
                61192,
                61464,
                61736,
                62008,
                62280,
                62552,
                62824,
                63096,
                63368,
                63640,
                63912,
                64184,
                64456,
                64728,
                65000,
                65272,
                65544,
                65816,
                66088,
                48953,
                49225,
                49497,
                49769,
                50041,
                50313,
                50585,
                50857,
                51129,
                51401,
                51673,
                51945,
                52217,
                52489,
                52761,
                53033,
                53305,
                53577,
                53849,
                54121,
                54393,
                54665,
                54937,
                55209,
                55481,
                55753,
                56025,
                56297,
                56569,
                56841,
                57113,
                57385,
                57657,
                57929,
                58201,
                58473,
                58745,
                59017,
                59289,
                59561,
                59833,
                60105,
                60377,
                60649,
                60921,
                61193,
                61465,
                61737,
                62009,
                62281,
                62553,
                62825,
                63097,
                63369,
                63641,
                63913,
                64185,
                64457,
                64729,
                65001,
                65273,
                65545,
                65817,
                66089,
        };
        c.DefineDerivedCounter("RayBoxTests",
                               "RayTracing",
                               "The number of ray box intersection tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,sum2",
                               "7769ceee-824d-b84a-8779-bb3f8e449582");
    }
    { // Index:104
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                48954,
                49226,
                49498,
                49770,
                50042,
                50314,
                50586,
                50858,
                51130,
                51402,
                51674,
                51946,
                52218,
                52490,
                52762,
                53034,
                53306,
                53578,
                53850,
                54122,
                54394,
                54666,
                54938,
                55210,
                55482,
                55754,
                56026,
                56298,
                56570,
                56842,
                57114,
                57386,
                57658,
                57930,
                58202,
                58474,
                58746,
                59018,
                59290,
                59562,
                59834,
                60106,
                60378,
                60650,
                60922,
                61194,
                61466,
                61738,
                62010,
                62282,
                62554,
                62826,
                63098,
                63370,
                63642,
                63914,
                64186,
                64458,
                64730,
                65002,
                65274,
                65546,
                65818,
                66090,
                48952,
                49224,
                49496,
                49768,
                50040,
                50312,
                50584,
                50856,
                51128,
                51400,
                51672,
                51944,
                52216,
                52488,
                52760,
                53032,
                53304,
                53576,
                53848,
                54120,
                54392,
                54664,
                54936,
                55208,
                55480,
                55752,
                56024,
                56296,
                56568,
                56840,
                57112,
                57384,
                57656,
                57928,
                58200,
                58472,
                58744,
                59016,
                59288,
                59560,
                59832,
                60104,
                60376,
                60648,
                60920,
                61192,
                61464,
                61736,
                62008,
                62280,
                62552,
                62824,
                63096,
                63368,
                63640,
                63912,
                64184,
                64456,
                64728,
                65000,
                65272,
                65544,
                65816,
                66088,
                48953,
                49225,
                49497,
                49769,
                50041,
                50313,
                50585,
                50857,
                51129,
                51401,
                51673,
                51945,
                52217,
                52489,
                52761,
                53033,
                53305,
                53577,
                53849,
                54121,
                54393,
                54665,
                54937,
                55209,
                55481,
                55753,
                56025,
                56297,
                56569,
                56841,
                57113,
                57385,
                57657,
                57929,
                58201,
                58473,
                58745,
                59017,
                59289,
                59561,
                59833,
                60105,
                60377,
                60649,
                60921,
                61193,
                61465,
                61737,
                62009,
                62281,
                62553,
                62825,
                63097,
                63369,
                63641,
                63913,
                64185,
                64457,
                64729,
                65001,
                65273,
                65545,
                65817,
                66089,
        };
        c.DefineDerivedCounter("TotalRayTests",
                               "RayTracing",
                               "Total number of ray intersection tests, includes both box and triangle intersections.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,sum2,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum64,sum2",
                               "ce6e4c7f-cf9d-6f8f-4456-70f670354bbe");
    }
    { // Index:105
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                48918,
                49190,
                49462,
                49734,
                50006,
                50278,
                50550,
                50822,
                51094,
                51366,
                51638,
                51910,
                52182,
                52454,
                52726,
                52998,
                53270,
                53542,
                53814,
                54086,
                54358,
                54630,
                54902,
                55174,
                55446,
                55718,
                55990,
                56262,
                56534,
                56806,
                57078,
                57350,
                57622,
                57894,
                58166,
                58438,
                58710,
                58982,
                59254,
                59526,
                59798,
                60070,
                60342,
                60614,
                60886,
                61158,
                61430,
                61702,
                61974,
                62246,
                62518,
                62790,
                63062,
                63334,
                63606,
                63878,
                64150,
                64422,
                64694,
                64966,
                65238,
                65510,
                65782,
                66054,
        };
        c.DefineDerivedCounter("RayTestsPerWave",
                               "RayTracing",
                               "The number of ray intersection tests per wave.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,max64",
                               "45b0cd7f-3b43-6344-37d7-054062e50f60");
    }
    { // Index:106
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                103931,
                104443,
                104955,
                105467,
                105979,
                106491,
                107003,
                107515,
                108027,
                108539,
                109051,
                109563,
                110075,
                110587,
                111099,
                111611,
                112123,
                112635,
                113147,
                113659,
                114171,
                114683,
                115195,
                115707,
                116219,
                116731,
                117243,
                117755,
                118267,
                118779,
                119291,
                119803,
        };
        c.DefineDerivedCounter("WaveOccupancyPct",
                               "WaveDistribution",
                               "The percentage of the maximum wavefront occupancy that is currently being used.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,MAX_WAVES,/,(100),*",
                               "6ff3d7f2-d585-9834-d335-9edba99113c8");
    }
    { // Index:107
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29831,
                30150,
                30469,
                30788,
                29686,
                30005,
                30324,
                30643,
        };
        c.DefineDerivedCounter("HSLimitedByVgpr",
                               "WaveOccupancyLimiters",
                               "The percentage of HS wave scheduling requests that are limited by VGPR availability.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,max4,/,NUM_SIMDS,/,(100),*",
                               "50585d16-dd47-ed8a-ec13-5fd1f1b10196");
    }
    { // Index:108
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29835,
                30154,
                30473,
                30792,
                29686,
                30005,
                30324,
                30643,
        };
        c.DefineDerivedCounter("HSLimitedByLds",
                               "WaveOccupancyLimiters",
                               "The percentage of HS wave scheduling requests that are limited by LDS availability.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,max4,/,NUM_CUS,/,(100),*",
                               "fdd67cc9-259e-4c41-b41f-57e57ce8c5cb");
    }
    { // Index:109
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29821,
                30140,
                30459,
                30778,
                29686,
                30005,
                30324,
                30643,
        };
        c.DefineDerivedCounter("HSLimitedByScratch",
                               "WaveOccupancyLimiters",
                               "The percentage of HS wave scheduling requests that are limited by scratch space availability.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,max4,/,(100),*",
                               "b7fe9384-498b-8280-e330-c554e4cdc7a7");
    }
    { // Index:110
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29841,
                30160,
                30479,
                30798,
                29686,
                30005,
                30324,
                30643,
        };
        c.DefineDerivedCounter("HSLimitedByBarriers",
                               "WaveOccupancyLimiters",
                               "The percentage of HS wave scheduling requests that are limited by barriers.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,max4,/,NUM_CUS,/,(100),*",
                               "93c71348-8437-1765-8c26-b9c6be2457a0");
    }
    { // Index:111
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29830,
                30149,
                30468,
                30787,
                29666,
                29985,
                30304,
                30623,
        };
        c.DefineDerivedCounter("GSLimitedByVgpr",
                               "WaveOccupancyLimiters",
                               "The percentage of GS wave scheduling requests that are limited by VGPR availability.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,max4,/,NUM_SIMDS,/,(100),*",
                               "7da57982-3e1c-8515-1c92-d183721f4d15");
    }
    { // Index:112
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29836,
                30155,
                30474,
                30793,
                29666,
                29985,
                30304,
                30623,
        };
        c.DefineDerivedCounter("GSLimitedByLds",
                               "WaveOccupancyLimiters",
                               "The percentage of GS wave scheduling requests that are limited by LDS availability.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,max4,/,NUM_CUS,/,(100),*",
                               "6bfbfae4-7b7e-112d-f35a-0691a75432d9");
    }
    { // Index:113
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29820,
                30139,
                30458,
                30777,
                29666,
                29985,
                30304,
                30623,
        };
        c.DefineDerivedCounter("GSLimitedByScratch",
                               "WaveOccupancyLimiters",
                               "The percentage of GS wave scheduling requests that are limited by scratch space availability.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,max4,/,(100),*",
                               "7eea8eeb-6659-dbd5-c0c2-e404dbf7a97d");
    }
    { // Index:114
        static constexpr std::array<GpaUInt32, 20> kHardwareCounters = {
                29834,
                30153,
                30472,
                30791,
                29721,
                30040,
                30359,
                30678,
                29722,
                30041,
                30360,
                30679,
                29723,
                30042,
                30361,
                30680,
                29724,
                30043,
                30362,
                30681,
        };
        c.DefineDerivedCounter("PSLimitedByLds",
                               "WaveOccupancyLimiters",
                               "The percentage of PS wave scheduling requests that are limited by LDS availability.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,max16,/,NUM_CUS,/,(100),*",
                               "87e9d8b0-dae4-59e5-9797-b31084e4370c");
    }
    { // Index:115
        static constexpr std::array<GpaUInt32, 20> kHardwareCounters = {
                29829,
                30148,
                30467,
                30786,
                29721,
                30040,
                30359,
                30678,
                29722,
                30041,
                30360,
                30679,
                29723,
                30042,
                30361,
                30680,
                29724,
                30043,
                30362,
                30681,
        };
        c.DefineDerivedCounter("PSLimitedByVgpr",
                               "WaveOccupancyLimiters",
                               "The percentage of PS wave scheduling requests that are limited by VGPR availability.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,max16,/,NUM_SIMDS,/,(100),*",
                               "5327574d-a131-c833-44d2-ff4f10103502");
    }
    { // Index:116
        static constexpr std::array<GpaUInt32, 20> kHardwareCounters = {
                29819,
                30138,
                30457,
                30776,
                29721,
                30040,
                30359,
                30678,
                29722,
                30041,
                30360,
                30679,
                29723,
                30042,
                30361,
                30680,
                29724,
                30043,
                30362,
                30681,
        };
        c.DefineDerivedCounter("PSLimitedByScratch",
                               "WaveOccupancyLimiters",
                               "The percentage of PS wave scheduling requests that are limited by scratch space availability.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,max16,/,(100),*",
                               "399ee0f1-dce6-07fa-ccab-8bd96f2f50a4");
    }
    { // Index:117
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29837,
                30156,
                30475,
                30794,
                29702,
                30021,
                30340,
                30659,
        };
        c.DefineDerivedCounter("CSLimitedByLds",
                               "WaveOccupancyLimiters",
                               "The percentage of CS wave scheduling requests that are limited by LDS availability.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,max4,/,NUM_CUS,/,(100),*",
                               "03b6b0e1-67eb-688c-a733-e4e31ceb86ae");
    }
    { // Index:118
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29832,
                30151,
                30470,
                30789,
                29702,
                30021,
                30340,
                30659,
        };
        c.DefineDerivedCounter("CSLimitedByVgpr",
                               "WaveOccupancyLimiters",
                               "The percentage of CS wave scheduling requests that are limited by VGPR availability.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,max4,/,NUM_SIMDS,/,(100),*",
                               "7ad91320-c40d-6994-dc34-73101a7926f7");
    }
    { // Index:119
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29822,
                30141,
                30460,
                30779,
                29702,
                30021,
                30340,
                30659,
        };
        c.DefineDerivedCounter("CSLimitedByScratch",
                               "WaveOccupancyLimiters",
                               "The percentage of CS wave scheduling requests that are limited by scratch space availability.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,max4,/,(100),*",
                               "664e8676-aa15-9861-14d5-c3e4ee208fa1");
    }
    { // Index:120
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29842,
                30161,
                30480,
                30799,
                29702,
                30021,
                30340,
                30659,
        };
        c.DefineDerivedCounter("CSLimitedByBarriers",
                               "WaveOccupancyLimiters",
                               "The percentage of CS wave scheduling requests that are limited by barriers.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,max4,/,NUM_CUS,/,(100),*",
                               "ea835ad2-e28a-3d46-3e08-04d51e072a71");
    }
    { // Index:121
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                29846,
                30165,
                30484,
                30803,
                29702,
                30021,
                30340,
                30659,
        };
        c.DefineDerivedCounter("CSLimitedByThreadGroupLimit",
                               "WaveOccupancyLimiters",
                               "The percentage of CS wave scheduling requests that are limited by the thread group limit.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               false,
                               true,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,max4,/,NUM_CUS,/,(100),*",
                               "fe65b54f-7d31-3c33-942f-b6ebcec7b037");
    }
}

// clang-format on

