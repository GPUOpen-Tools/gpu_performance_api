//==============================================================================
// Copyright (c) 2010-2024 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief Hardware counter info for GFX9_GFX909.
//==============================================================================

// This file is autogenerated by the ConvertHWEnums project.

// clang-format off

#include <set>

#include "gpu_perf_api_counter_generator/gpa_counter.h"
#include "auto_generated/gpu_perf_api_counter_generator/gpa_hw_counter_gfx9_gfx909.h"
#include "gpu_performance_api/gpu_perf_api_types.h"

namespace counter_gfx9_gfx909
{
    std::vector<GpaHardwareCounterDesc> kCb0CountersGfx9_gfx909 = {
        {7, "CB0_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB0", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB0_PERF_SEL_CM_MC_WRITE_REQUEST", "CB0", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB0_PERF_SEL_FC_MC_WRITE_REQUEST", "CB0", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB0_PERF_SEL_CC_MC_WRITE_REQUEST", "CB0", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB0_PERF_SEL_CM_MC_READ_REQUEST", "CB0", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB0_PERF_SEL_FC_MC_READ_REQUEST", "CB0", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB0_PERF_SEL_CC_MC_READ_REQUEST", "CB0", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB0_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB0", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB0_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB0", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB0_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB0", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb1CountersGfx9_gfx909 = {
        {7, "CB1_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB1", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB1_PERF_SEL_CM_MC_WRITE_REQUEST", "CB1", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB1_PERF_SEL_FC_MC_WRITE_REQUEST", "CB1", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB1_PERF_SEL_CC_MC_WRITE_REQUEST", "CB1", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB1_PERF_SEL_CM_MC_READ_REQUEST", "CB1", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB1_PERF_SEL_FC_MC_READ_REQUEST", "CB1", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB1_PERF_SEL_CC_MC_READ_REQUEST", "CB1", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB1_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB1", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB1_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB1", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB1_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB1", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb2CountersGfx9_gfx909 = {
        {7, "CB2_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB2", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB2_PERF_SEL_CM_MC_WRITE_REQUEST", "CB2", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB2_PERF_SEL_FC_MC_WRITE_REQUEST", "CB2", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB2_PERF_SEL_CC_MC_WRITE_REQUEST", "CB2", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB2_PERF_SEL_CM_MC_READ_REQUEST", "CB2", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB2_PERF_SEL_FC_MC_READ_REQUEST", "CB2", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB2_PERF_SEL_CC_MC_READ_REQUEST", "CB2", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB2_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB2", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB2_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB2", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB2_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB2", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb3CountersGfx9_gfx909 = {
        {7, "CB3_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB3", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB3_PERF_SEL_CM_MC_WRITE_REQUEST", "CB3", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB3_PERF_SEL_FC_MC_WRITE_REQUEST", "CB3", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB3_PERF_SEL_CC_MC_WRITE_REQUEST", "CB3", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB3_PERF_SEL_CM_MC_READ_REQUEST", "CB3", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB3_PERF_SEL_FC_MC_READ_REQUEST", "CB3", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB3_PERF_SEL_CC_MC_READ_REQUEST", "CB3", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB3_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB3", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB3_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB3", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB3_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB3", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb4CountersGfx9_gfx909 = {
        {7, "CB4_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB4", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB4_PERF_SEL_CM_MC_WRITE_REQUEST", "CB4", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB4_PERF_SEL_FC_MC_WRITE_REQUEST", "CB4", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB4_PERF_SEL_CC_MC_WRITE_REQUEST", "CB4", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB4_PERF_SEL_CM_MC_READ_REQUEST", "CB4", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB4_PERF_SEL_FC_MC_READ_REQUEST", "CB4", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB4_PERF_SEL_CC_MC_READ_REQUEST", "CB4", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB4_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB4", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB4_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB4", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB4_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB4", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb5CountersGfx9_gfx909 = {
        {7, "CB5_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB5", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB5_PERF_SEL_CM_MC_WRITE_REQUEST", "CB5", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB5_PERF_SEL_FC_MC_WRITE_REQUEST", "CB5", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB5_PERF_SEL_CC_MC_WRITE_REQUEST", "CB5", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB5_PERF_SEL_CM_MC_READ_REQUEST", "CB5", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB5_PERF_SEL_FC_MC_READ_REQUEST", "CB5", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB5_PERF_SEL_CC_MC_READ_REQUEST", "CB5", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB5_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB5", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB5_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB5", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB5_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB5", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb6CountersGfx9_gfx909 = {
        {7, "CB6_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB6", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB6_PERF_SEL_CM_MC_WRITE_REQUEST", "CB6", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB6_PERF_SEL_FC_MC_WRITE_REQUEST", "CB6", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB6_PERF_SEL_CC_MC_WRITE_REQUEST", "CB6", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB6_PERF_SEL_CM_MC_READ_REQUEST", "CB6", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB6_PERF_SEL_FC_MC_READ_REQUEST", "CB6", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB6_PERF_SEL_CC_MC_READ_REQUEST", "CB6", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB6_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB6", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB6_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB6", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB6_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB6", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb7CountersGfx9_gfx909 = {
        {7, "CB7_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB7", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB7_PERF_SEL_CM_MC_WRITE_REQUEST", "CB7", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB7_PERF_SEL_FC_MC_WRITE_REQUEST", "CB7", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB7_PERF_SEL_CC_MC_WRITE_REQUEST", "CB7", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB7_PERF_SEL_CM_MC_READ_REQUEST", "CB7", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB7_PERF_SEL_FC_MC_READ_REQUEST", "CB7", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB7_PERF_SEL_CC_MC_READ_REQUEST", "CB7", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB7_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB7", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB7_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB7", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB7_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB7", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb8CountersGfx9_gfx909 = {
        {7, "CB8_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB8", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB8_PERF_SEL_CM_MC_WRITE_REQUEST", "CB8", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB8_PERF_SEL_FC_MC_WRITE_REQUEST", "CB8", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB8_PERF_SEL_CC_MC_WRITE_REQUEST", "CB8", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB8_PERF_SEL_CM_MC_READ_REQUEST", "CB8", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB8_PERF_SEL_FC_MC_READ_REQUEST", "CB8", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB8_PERF_SEL_CC_MC_READ_REQUEST", "CB8", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB8_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB8", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB8_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB8", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB8_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB8", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb9CountersGfx9_gfx909 = {
        {7, "CB9_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB9", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB9_PERF_SEL_CM_MC_WRITE_REQUEST", "CB9", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB9_PERF_SEL_FC_MC_WRITE_REQUEST", "CB9", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB9_PERF_SEL_CC_MC_WRITE_REQUEST", "CB9", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB9_PERF_SEL_CM_MC_READ_REQUEST", "CB9", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB9_PERF_SEL_FC_MC_READ_REQUEST", "CB9", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB9_PERF_SEL_CC_MC_READ_REQUEST", "CB9", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB9_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB9", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB9_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB9", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB9_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB9", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb10CountersGfx9_gfx909 = {
        {7, "CB10_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB10", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB10_PERF_SEL_CM_MC_WRITE_REQUEST", "CB10", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB10_PERF_SEL_FC_MC_WRITE_REQUEST", "CB10", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB10_PERF_SEL_CC_MC_WRITE_REQUEST", "CB10", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB10_PERF_SEL_CM_MC_READ_REQUEST", "CB10", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB10_PERF_SEL_FC_MC_READ_REQUEST", "CB10", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB10_PERF_SEL_CC_MC_READ_REQUEST", "CB10", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB10_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB10", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB10_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB10", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB10_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB10", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb11CountersGfx9_gfx909 = {
        {7, "CB11_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB11", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB11_PERF_SEL_CM_MC_WRITE_REQUEST", "CB11", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB11_PERF_SEL_FC_MC_WRITE_REQUEST", "CB11", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB11_PERF_SEL_CC_MC_WRITE_REQUEST", "CB11", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB11_PERF_SEL_CM_MC_READ_REQUEST", "CB11", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB11_PERF_SEL_FC_MC_READ_REQUEST", "CB11", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB11_PERF_SEL_CC_MC_READ_REQUEST", "CB11", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB11_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB11", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB11_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB11", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB11_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB11", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb12CountersGfx9_gfx909 = {
        {7, "CB12_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB12", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB12_PERF_SEL_CM_MC_WRITE_REQUEST", "CB12", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB12_PERF_SEL_FC_MC_WRITE_REQUEST", "CB12", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB12_PERF_SEL_CC_MC_WRITE_REQUEST", "CB12", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB12_PERF_SEL_CM_MC_READ_REQUEST", "CB12", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB12_PERF_SEL_FC_MC_READ_REQUEST", "CB12", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB12_PERF_SEL_CC_MC_READ_REQUEST", "CB12", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB12_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB12", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB12_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB12", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB12_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB12", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb13CountersGfx9_gfx909 = {
        {7, "CB13_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB13", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB13_PERF_SEL_CM_MC_WRITE_REQUEST", "CB13", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB13_PERF_SEL_FC_MC_WRITE_REQUEST", "CB13", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB13_PERF_SEL_CC_MC_WRITE_REQUEST", "CB13", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB13_PERF_SEL_CM_MC_READ_REQUEST", "CB13", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB13_PERF_SEL_FC_MC_READ_REQUEST", "CB13", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB13_PERF_SEL_CC_MC_READ_REQUEST", "CB13", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB13_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB13", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB13_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB13", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB13_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB13", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb14CountersGfx9_gfx909 = {
        {7, "CB14_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB14", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB14_PERF_SEL_CM_MC_WRITE_REQUEST", "CB14", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB14_PERF_SEL_FC_MC_WRITE_REQUEST", "CB14", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB14_PERF_SEL_CC_MC_WRITE_REQUEST", "CB14", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB14_PERF_SEL_CM_MC_READ_REQUEST", "CB14", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB14_PERF_SEL_FC_MC_READ_REQUEST", "CB14", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB14_PERF_SEL_CC_MC_READ_REQUEST", "CB14", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB14_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB14", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB14_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB14", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB14_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB14", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kCb15CountersGfx9_gfx909 = {
        {7, "CB15_PERF_SEL_DRAWN_QUAD_FRAGMENT", "CB15", "This is the number of drawn quad fragments. Use CB_PERF_SEL_DRAWN_BUSY as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {116, "CB15_PERF_SEL_CM_MC_WRITE_REQUEST", "CB15", "Number of 32-byte cmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {117, "CB15_PERF_SEL_FC_MC_WRITE_REQUEST", "CB15", "Number of 32-byte fmask mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {118, "CB15_PERF_SEL_CC_MC_WRITE_REQUEST", "CB15", "Number of 32-byte color mc write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {126, "CB15_PERF_SEL_CM_MC_READ_REQUEST", "CB15", "Number of 32-byte cmask mc read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {127, "CB15_PERF_SEL_FC_MC_READ_REQUEST", "CB15", "Number of 32-byte fmask mc read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {128, "CB15_PERF_SEL_CC_MC_READ_REQUEST", "CB15", "Number of 32-byte color mc read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "CB15_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT", "CB15", "Number of EXPORT_32_ABGR quad fragments. It takes two clocks to send the src color data for these.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {257, "CB15_PERF_SEL_FC_MC_DCC_WRITE_REQUEST", "CB15", "Number of 32-byte fmask mc DCC write requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "CB15_PERF_SEL_FC_MC_DCC_READ_REQUEST", "CB15", "Number of 32-byte fmask mc DCC read requests.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSu0CountersGfx9_gfx909 = {
        {8, "PA_SU0_PERF_PAPC_PA_INPUT_PRIM", "PA_SU0", "PERF_PAPC_PA_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU0_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU0", "PERF_PAPC_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU0_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU0", "PERF_PAPC_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU0_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU0", "PERF_PAPC_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU0_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU0", "PERF_PAPC_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU0_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU0", "PERF_PAPC_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU0_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU0", "PERF_PAPC_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU0_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU0", "PERF_PAPC_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU0_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU0", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU0_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU0", "PERF_PAPC_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU0_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU0", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU0_PERF_PAPC_CLIP_BUSY", "PA_SU0", "PERF_PAPC_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU0_PERF_PAPC_SU_STALLED_SC", "PA_SU0", "PERF_PAPC_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSu1CountersGfx9_gfx909 = {
        {8, "PA_SU1_PERF_PAPC_PA_INPUT_PRIM", "PA_SU1", "PERF_PAPC_PA_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU1_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU1", "PERF_PAPC_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU1_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU1", "PERF_PAPC_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU1_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU1", "PERF_PAPC_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU1_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU1", "PERF_PAPC_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU1_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU1", "PERF_PAPC_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU1_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU1", "PERF_PAPC_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU1_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU1", "PERF_PAPC_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU1_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU1", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU1_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU1", "PERF_PAPC_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU1_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU1", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU1_PERF_PAPC_CLIP_BUSY", "PA_SU1", "PERF_PAPC_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU1_PERF_PAPC_SU_STALLED_SC", "PA_SU1", "PERF_PAPC_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSu2CountersGfx9_gfx909 = {
        {8, "PA_SU2_PERF_PAPC_PA_INPUT_PRIM", "PA_SU2", "PERF_PAPC_PA_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU2_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU2", "PERF_PAPC_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU2_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU2", "PERF_PAPC_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU2_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU2", "PERF_PAPC_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU2_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU2", "PERF_PAPC_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU2_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU2", "PERF_PAPC_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU2_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU2", "PERF_PAPC_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU2_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU2", "PERF_PAPC_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU2_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU2", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU2_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU2", "PERF_PAPC_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU2_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU2", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU2_PERF_PAPC_CLIP_BUSY", "PA_SU2", "PERF_PAPC_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU2_PERF_PAPC_SU_STALLED_SC", "PA_SU2", "PERF_PAPC_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSu3CountersGfx9_gfx909 = {
        {8, "PA_SU3_PERF_PAPC_PA_INPUT_PRIM", "PA_SU3", "PERF_PAPC_PA_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU3_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU3", "PERF_PAPC_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU3_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU3", "PERF_PAPC_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU3_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU3", "PERF_PAPC_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU3_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU3", "PERF_PAPC_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU3_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU3", "PERF_PAPC_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU3_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU3", "PERF_PAPC_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU3_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU3", "PERF_PAPC_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU3_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU3", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU3_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU3", "PERF_PAPC_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU3_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU3", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU3_PERF_PAPC_CLIP_BUSY", "PA_SU3", "PERF_PAPC_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU3_PERF_PAPC_SU_STALLED_SC", "PA_SU3", "PERF_PAPC_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc0CountersGfx9_gfx909 = {
        {159, "PA_SC0_QZ0_QUAD_COUNT", "PA_SC0", "quad count; quad-z pipe 0;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0;increment rate-one to 16  per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "PA_SC0_QZ1_QUAD_COUNT", "PA_SC0", "quad count; quad-z pipe 1;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 1;increment rate-one to 16 per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "PA_SC0_QZ2_QUAD_COUNT", "PA_SC0", "quad count; quad-z pipe 2 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "PA_SC0_QZ3_QUAD_COUNT", "PA_SC0", "quad count; quad-z pipe 3 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC0_P0_HIZ_QUAD_COUNT", "PA_SC0", "total quads surviving hi-z; db pipe 0;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {236, "PA_SC0_P1_HIZ_QUAD_COUNT", "PA_SC0", "total quads surviving hi-z; db pipe 1;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {237, "PA_SC0_P2_HIZ_QUAD_COUNT", "PA_SC0", "total quads surviving hi-z; db pipe 2 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {238, "PA_SC0_P3_HIZ_QUAD_COUNT", "PA_SC0", "total quads surviving hi-z; db pipe 3 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC0_EARLYZ_QUAD_COUNT", "PA_SC0", "total quads surviving early-z;Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer;increment rate 1 to 2 quads per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc1CountersGfx9_gfx909 = {
        {159, "PA_SC1_QZ0_QUAD_COUNT", "PA_SC1", "quad count; quad-z pipe 0;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0;increment rate-one to 16  per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "PA_SC1_QZ1_QUAD_COUNT", "PA_SC1", "quad count; quad-z pipe 1;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 1;increment rate-one to 16 per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "PA_SC1_QZ2_QUAD_COUNT", "PA_SC1", "quad count; quad-z pipe 2 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "PA_SC1_QZ3_QUAD_COUNT", "PA_SC1", "quad count; quad-z pipe 3 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC1_P0_HIZ_QUAD_COUNT", "PA_SC1", "total quads surviving hi-z; db pipe 0;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {236, "PA_SC1_P1_HIZ_QUAD_COUNT", "PA_SC1", "total quads surviving hi-z; db pipe 1;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {237, "PA_SC1_P2_HIZ_QUAD_COUNT", "PA_SC1", "total quads surviving hi-z; db pipe 2 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {238, "PA_SC1_P3_HIZ_QUAD_COUNT", "PA_SC1", "total quads surviving hi-z; db pipe 3 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC1_EARLYZ_QUAD_COUNT", "PA_SC1", "total quads surviving early-z;Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer;increment rate 1 to 2 quads per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc2CountersGfx9_gfx909 = {
        {159, "PA_SC2_QZ0_QUAD_COUNT", "PA_SC2", "quad count; quad-z pipe 0;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0;increment rate-one to 16  per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "PA_SC2_QZ1_QUAD_COUNT", "PA_SC2", "quad count; quad-z pipe 1;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 1;increment rate-one to 16 per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "PA_SC2_QZ2_QUAD_COUNT", "PA_SC2", "quad count; quad-z pipe 2 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "PA_SC2_QZ3_QUAD_COUNT", "PA_SC2", "quad count; quad-z pipe 3 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC2_P0_HIZ_QUAD_COUNT", "PA_SC2", "total quads surviving hi-z; db pipe 0;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {236, "PA_SC2_P1_HIZ_QUAD_COUNT", "PA_SC2", "total quads surviving hi-z; db pipe 1;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {237, "PA_SC2_P2_HIZ_QUAD_COUNT", "PA_SC2", "total quads surviving hi-z; db pipe 2 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {238, "PA_SC2_P3_HIZ_QUAD_COUNT", "PA_SC2", "total quads surviving hi-z; db pipe 3 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC2_EARLYZ_QUAD_COUNT", "PA_SC2", "total quads surviving early-z;Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer;increment rate 1 to 2 quads per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc3CountersGfx9_gfx909 = {
        {159, "PA_SC3_QZ0_QUAD_COUNT", "PA_SC3", "quad count; quad-z pipe 0;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0;increment rate-one to 16  per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "PA_SC3_QZ1_QUAD_COUNT", "PA_SC3", "quad count; quad-z pipe 1;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 1;increment rate-one to 16 per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "PA_SC3_QZ2_QUAD_COUNT", "PA_SC3", "quad count; quad-z pipe 2 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "PA_SC3_QZ3_QUAD_COUNT", "PA_SC3", "quad count; quad-z pipe 3 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC3_P0_HIZ_QUAD_COUNT", "PA_SC3", "total quads surviving hi-z; db pipe 0;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {236, "PA_SC3_P1_HIZ_QUAD_COUNT", "PA_SC3", "total quads surviving hi-z; db pipe 1;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {237, "PA_SC3_P2_HIZ_QUAD_COUNT", "PA_SC3", "total quads surviving hi-z; db pipe 2 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {238, "PA_SC3_P3_HIZ_QUAD_COUNT", "PA_SC3", "total quads surviving hi-z; db pipe 3 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC3_EARLYZ_QUAD_COUNT", "PA_SC3", "total quads surviving early-z;Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer;increment rate 1 to 2 quads per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc0CountersGfx9_gfx909 = {
        {20, "TCC0_PERF_SEL_HIT", "TCC0", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC0_PERF_SEL_MISS", "TCC0", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC0_PERF_SEL_EA_WRREQ", "TCC0", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC0_PERF_SEL_EA_WRREQ_64B", "TCC0", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC0_PERF_SEL_EA_WRREQ_STALL", "TCC0", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC0_PERF_SEL_EA_RDREQ", "TCC0", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC0_PERF_SEL_EA_RDREQ_32B", "TCC0", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc1CountersGfx9_gfx909 = {
        {20, "TCC1_PERF_SEL_HIT", "TCC1", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC1_PERF_SEL_MISS", "TCC1", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC1_PERF_SEL_EA_WRREQ", "TCC1", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC1_PERF_SEL_EA_WRREQ_64B", "TCC1", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC1_PERF_SEL_EA_WRREQ_STALL", "TCC1", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC1_PERF_SEL_EA_RDREQ", "TCC1", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC1_PERF_SEL_EA_RDREQ_32B", "TCC1", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc2CountersGfx9_gfx909 = {
        {20, "TCC2_PERF_SEL_HIT", "TCC2", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC2_PERF_SEL_MISS", "TCC2", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC2_PERF_SEL_EA_WRREQ", "TCC2", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC2_PERF_SEL_EA_WRREQ_64B", "TCC2", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC2_PERF_SEL_EA_WRREQ_STALL", "TCC2", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC2_PERF_SEL_EA_RDREQ", "TCC2", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC2_PERF_SEL_EA_RDREQ_32B", "TCC2", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc3CountersGfx9_gfx909 = {
        {20, "TCC3_PERF_SEL_HIT", "TCC3", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC3_PERF_SEL_MISS", "TCC3", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC3_PERF_SEL_EA_WRREQ", "TCC3", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC3_PERF_SEL_EA_WRREQ_64B", "TCC3", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC3_PERF_SEL_EA_WRREQ_STALL", "TCC3", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC3_PERF_SEL_EA_RDREQ", "TCC3", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC3_PERF_SEL_EA_RDREQ_32B", "TCC3", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc4CountersGfx9_gfx909 = {
        {20, "TCC4_PERF_SEL_HIT", "TCC4", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC4_PERF_SEL_MISS", "TCC4", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC4_PERF_SEL_EA_WRREQ", "TCC4", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC4_PERF_SEL_EA_WRREQ_64B", "TCC4", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC4_PERF_SEL_EA_WRREQ_STALL", "TCC4", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC4_PERF_SEL_EA_RDREQ", "TCC4", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC4_PERF_SEL_EA_RDREQ_32B", "TCC4", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc5CountersGfx9_gfx909 = {
        {20, "TCC5_PERF_SEL_HIT", "TCC5", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC5_PERF_SEL_MISS", "TCC5", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC5_PERF_SEL_EA_WRREQ", "TCC5", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC5_PERF_SEL_EA_WRREQ_64B", "TCC5", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC5_PERF_SEL_EA_WRREQ_STALL", "TCC5", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC5_PERF_SEL_EA_RDREQ", "TCC5", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC5_PERF_SEL_EA_RDREQ_32B", "TCC5", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc6CountersGfx9_gfx909 = {
        {20, "TCC6_PERF_SEL_HIT", "TCC6", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC6_PERF_SEL_MISS", "TCC6", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC6_PERF_SEL_EA_WRREQ", "TCC6", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC6_PERF_SEL_EA_WRREQ_64B", "TCC6", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC6_PERF_SEL_EA_WRREQ_STALL", "TCC6", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC6_PERF_SEL_EA_RDREQ", "TCC6", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC6_PERF_SEL_EA_RDREQ_32B", "TCC6", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc7CountersGfx9_gfx909 = {
        {20, "TCC7_PERF_SEL_HIT", "TCC7", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC7_PERF_SEL_MISS", "TCC7", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC7_PERF_SEL_EA_WRREQ", "TCC7", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC7_PERF_SEL_EA_WRREQ_64B", "TCC7", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC7_PERF_SEL_EA_WRREQ_STALL", "TCC7", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC7_PERF_SEL_EA_RDREQ", "TCC7", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC7_PERF_SEL_EA_RDREQ_32B", "TCC7", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc8CountersGfx9_gfx909 = {
        {20, "TCC8_PERF_SEL_HIT", "TCC8", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC8_PERF_SEL_MISS", "TCC8", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC8_PERF_SEL_EA_WRREQ", "TCC8", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC8_PERF_SEL_EA_WRREQ_64B", "TCC8", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC8_PERF_SEL_EA_WRREQ_STALL", "TCC8", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC8_PERF_SEL_EA_RDREQ", "TCC8", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC8_PERF_SEL_EA_RDREQ_32B", "TCC8", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc9CountersGfx9_gfx909 = {
        {20, "TCC9_PERF_SEL_HIT", "TCC9", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC9_PERF_SEL_MISS", "TCC9", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC9_PERF_SEL_EA_WRREQ", "TCC9", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC9_PERF_SEL_EA_WRREQ_64B", "TCC9", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC9_PERF_SEL_EA_WRREQ_STALL", "TCC9", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC9_PERF_SEL_EA_RDREQ", "TCC9", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC9_PERF_SEL_EA_RDREQ_32B", "TCC9", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc10CountersGfx9_gfx909 = {
        {20, "TCC10_PERF_SEL_HIT", "TCC10", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC10_PERF_SEL_MISS", "TCC10", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC10_PERF_SEL_EA_WRREQ", "TCC10", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC10_PERF_SEL_EA_WRREQ_64B", "TCC10", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC10_PERF_SEL_EA_WRREQ_STALL", "TCC10", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC10_PERF_SEL_EA_RDREQ", "TCC10", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC10_PERF_SEL_EA_RDREQ_32B", "TCC10", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc11CountersGfx9_gfx909 = {
        {20, "TCC11_PERF_SEL_HIT", "TCC11", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC11_PERF_SEL_MISS", "TCC11", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC11_PERF_SEL_EA_WRREQ", "TCC11", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC11_PERF_SEL_EA_WRREQ_64B", "TCC11", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC11_PERF_SEL_EA_WRREQ_STALL", "TCC11", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC11_PERF_SEL_EA_RDREQ", "TCC11", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC11_PERF_SEL_EA_RDREQ_32B", "TCC11", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc12CountersGfx9_gfx909 = {
        {20, "TCC12_PERF_SEL_HIT", "TCC12", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC12_PERF_SEL_MISS", "TCC12", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC12_PERF_SEL_EA_WRREQ", "TCC12", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC12_PERF_SEL_EA_WRREQ_64B", "TCC12", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC12_PERF_SEL_EA_WRREQ_STALL", "TCC12", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC12_PERF_SEL_EA_RDREQ", "TCC12", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC12_PERF_SEL_EA_RDREQ_32B", "TCC12", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc13CountersGfx9_gfx909 = {
        {20, "TCC13_PERF_SEL_HIT", "TCC13", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC13_PERF_SEL_MISS", "TCC13", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC13_PERF_SEL_EA_WRREQ", "TCC13", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC13_PERF_SEL_EA_WRREQ_64B", "TCC13", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC13_PERF_SEL_EA_WRREQ_STALL", "TCC13", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC13_PERF_SEL_EA_RDREQ", "TCC13", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC13_PERF_SEL_EA_RDREQ_32B", "TCC13", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc14CountersGfx9_gfx909 = {
        {20, "TCC14_PERF_SEL_HIT", "TCC14", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC14_PERF_SEL_MISS", "TCC14", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC14_PERF_SEL_EA_WRREQ", "TCC14", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC14_PERF_SEL_EA_WRREQ_64B", "TCC14", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC14_PERF_SEL_EA_WRREQ_STALL", "TCC14", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC14_PERF_SEL_EA_RDREQ", "TCC14", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC14_PERF_SEL_EA_RDREQ_32B", "TCC14", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kTcc15CountersGfx9_gfx909 = {
        {20, "TCC15_PERF_SEL_HIT", "TCC15", "Number of cache hits.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {22, "TCC15_PERF_SEL_MISS", "TCC15", "Number of cache misses. UC reads count as misses.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {29, "TCC15_PERF_SEL_EA_WRREQ", "TCC15", "Number of transactions (either 32-byte or 64-byte) going over the TC_EA_wrreq interface. Atomics may travel over the same interface and are generally classified as write requests. This does not include probe commands.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {30, "TCC15_PERF_SEL_EA_WRREQ_64B", "TCC15", "Number of 64-byte transactions going (64-byte write or CMPSWAP) over the TC_EA_wrreq interface.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {33, "TCC15_PERF_SEL_EA_WRREQ_STALL", "TCC15", "Number of cycles a write request was stalled.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {41, "TCC15_PERF_SEL_EA_RDREQ", "TCC15", "Number of TCC/EA read requests (either 32-byte or 64-byte)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {42, "TCC15_PERF_SEL_EA_RDREQ_32B", "TCC15", "Number of 32-byte TCC/EA read requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea0CountersGfx9_gfx909 = {
        {55, "GCEA0_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA0", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA0_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA0", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea1CountersGfx9_gfx909 = {
        {55, "GCEA1_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA1", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA1_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA1", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea2CountersGfx9_gfx909 = {
        {55, "GCEA2_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA2", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA2_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA2", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea3CountersGfx9_gfx909 = {
        {55, "GCEA3_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA3", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA3_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA3", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea4CountersGfx9_gfx909 = {
        {55, "GCEA4_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA4", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA4_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA4", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea5CountersGfx9_gfx909 = {
        {55, "GCEA5_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA5", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA5_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA5", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea6CountersGfx9_gfx909 = {
        {55, "GCEA6_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA6", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA6_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA6", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea7CountersGfx9_gfx909 = {
        {55, "GCEA7_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA7", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA7_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA7", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea8CountersGfx9_gfx909 = {
        {55, "GCEA8_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA8", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA8_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA8", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea9CountersGfx9_gfx909 = {
        {55, "GCEA9_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA9", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA9_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA9", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea10CountersGfx9_gfx909 = {
        {55, "GCEA10_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA10", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA10_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA10", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea11CountersGfx9_gfx909 = {
        {55, "GCEA11_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA11", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA11_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA11", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea12CountersGfx9_gfx909 = {
        {55, "GCEA12_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA12", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA12_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA12", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea13CountersGfx9_gfx909 = {
        {55, "GCEA13_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA13", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA13_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA13", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea14CountersGfx9_gfx909 = {
        {55, "GCEA14_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA14", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA14_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA14", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea15CountersGfx9_gfx909 = {
        {55, "GCEA15_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA15", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA15_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA15", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea16CountersGfx9_gfx909 = {
        {55, "GCEA16_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA16", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA16_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA16", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea17CountersGfx9_gfx909 = {
        {55, "GCEA17_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA17", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA17_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA17", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea18CountersGfx9_gfx909 = {
        {55, "GCEA18_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA18", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA18_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA18", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea19CountersGfx9_gfx909 = {
        {55, "GCEA19_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA19", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA19_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA19", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea20CountersGfx9_gfx909 = {
        {55, "GCEA20_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA20", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA20_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA20", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea21CountersGfx9_gfx909 = {
        {55, "GCEA21_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA21", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA21_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA21", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea22CountersGfx9_gfx909 = {
        {55, "GCEA22_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA22", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA22_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA22", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea23CountersGfx9_gfx909 = {
        {55, "GCEA23_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA23", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA23_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA23", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea24CountersGfx9_gfx909 = {
        {55, "GCEA24_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA24", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA24_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA24", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea25CountersGfx9_gfx909 = {
        {55, "GCEA25_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA25", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA25_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA25", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea26CountersGfx9_gfx909 = {
        {55, "GCEA26_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA26", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA26_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA26", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea27CountersGfx9_gfx909 = {
        {55, "GCEA27_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA27", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA27_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA27", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea28CountersGfx9_gfx909 = {
        {55, "GCEA28_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA28", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA28_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA28", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea29CountersGfx9_gfx909 = {
        {55, "GCEA29_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA29", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA29_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA29", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea30CountersGfx9_gfx909 = {
        {55, "GCEA30_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA30", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA30_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA30", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea31CountersGfx9_gfx909 = {
        {55, "GCEA31_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA31", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA31_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA31", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
} // counter_gfx9_gfx909

// clang-format on
