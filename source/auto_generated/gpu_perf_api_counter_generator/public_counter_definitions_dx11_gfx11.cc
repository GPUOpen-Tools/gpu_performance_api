//==============================================================================
// Copyright (c) 2010-2025 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief Public Counter Definitions for DX11 GFX11.
//==============================================================================

#include <array>
#include "gpu_perf_api_common/gpa_array_view.hpp"
// clang-format off
#include "gpu_perf_api_counter_generator/gpa_counter.h"
#include "auto_generated/gpu_perf_api_counter_generator/public_counter_definitions_dx11_gfx11.h"

// *** Note, this is an auto-generated file. Do not edit. Execute PublicCounterCompiler to rebuild.

void AutoDefinePublicDerivedCountersDx11Gfx11(GpaDerivedCounters& c)
{
    { // Index:0
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                235949,
        };
        c.DefineDerivedCounter("GPUTime",
                               "Timing",
                               "Time this API command took to execute on the GPU in nanoseconds from the time the previous command reached the bottom of the pipeline (BOP) to the time this command reaches the bottom of the pipeline (BOP). Does not include time that draw calls are processed in parallel.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "0,TS_FREQ,/,(1000000000),*",
                               "cbd338f2-de6c-7b14-92ad-ba724ca2e501");
    }
    { // Index:1
        static constexpr std::array<GpaUInt32, 2> kHardwareCounters = {
                24,
                0,
        };
        c.DefineDerivedCounter("GPUBusy",
                               "Timing",
                               "The percentage of time the GPU command processor was busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,/,(100),*,(100),min",
                               "b1ba5363-1abc-fe66-2fdd-1fe6ee8989a0");
    }
    { // Index:2
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                24,
        };
        c.DefineDerivedCounter("GPUBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the GPU command processor was busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0",
                               "451cb045-23af-ac44-4603-d5832fa041d9");
    }
    { // Index:3
        static constexpr std::array<GpaUInt32, 2> kHardwareCounters = {
                112196,
                24,
        };
        c.DefineDerivedCounter("TessellatorBusy",
                               "Timing",
                               "The percentage of time the tessellation engine is busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,/,(100),*",
                               "36af6c72-dcfb-8102-4fd4-ce8ddc573365");
    }
    { // Index:4
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                112196,
        };
        c.DefineDerivedCounter("TessellatorBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the tessellation engine is busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0",
                               "60289dcb-7b33-46e7-26d1-8a2121605543");
    }
    { // Index:5
        static constexpr std::array<GpaUInt32, 13> kHardwareCounters = {
                36247,
                36531,
                36815,
                37099,
                37383,
                37667,
                36272,
                36556,
                36840,
                37124,
                37408,
                37692,
                24,
        };
        c.DefineDerivedCounter("VsGsBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has VS or GS work to do in a VS-[GS-]PS pipeline.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,max6,(0),6,7,8,9,10,11,sum6,ifnotzero,12,/,(100),*,(100),min",
                               "969c41c7-eb0b-9706-a7a1-98f27c3af56b");
    }
    { // Index:6
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                36247,
                36531,
                36815,
                37099,
                37383,
                37667,
                36272,
                36556,
                36840,
                37124,
                37408,
                37692,
        };
        c.DefineDerivedCounter("VsGsBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has VS or GS work to do in a VS-[GS-]PS pipeline.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,max6,(0),6,7,8,9,10,11,sum6,ifnotzero",
                               "a8420bb7-6bd8-930a-9088-d73b9c039851");
    }
    { // Index:7
        static constexpr std::array<GpaUInt32, 14> kHardwareCounters = {
                235949,
                36247,
                36531,
                36815,
                37099,
                37383,
                37667,
                36272,
                36556,
                36840,
                37124,
                37408,
                37692,
                24,
        };
        c.DefineDerivedCounter("VsGsTime",
                               "Timing",
                               "Time VS or GS are busy in nanoseconds in a VS-[GS-]PS pipeline.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "1,2,3,4,5,6,max6,(0),7,8,9,10,11,12,sum6,ifnotzero,13,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "3ce33b11-210d-b3de-9b6c-b9f3cd04beff");
    }
    { // Index:8
        static constexpr std::array<GpaUInt32, 13> kHardwareCounters = {
                36267,
                36551,
                36835,
                37119,
                37403,
                37687,
                36272,
                36556,
                36840,
                37124,
                37408,
                37692,
                24,
        };
        c.DefineDerivedCounter("PreTessellationBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has VS and HS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,max6,6,7,8,9,10,11,sum6,ifnotzero,12,/,(100),*,(100),min",
                               "346c7430-4666-7065-b5b7-1cb8cbb1c01c");
    }
    { // Index:9
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                36267,
                36551,
                36835,
                37119,
                37403,
                37687,
                36272,
                36556,
                36840,
                37124,
                37408,
                37692,
        };
        c.DefineDerivedCounter("PreTessellationBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has VS and HS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,max6,6,7,8,9,10,11,sum6,ifnotzero",
                               "dac68e38-0e3a-9364-2674-308e63bee2d2");
    }
    { // Index:10
        static constexpr std::array<GpaUInt32, 14> kHardwareCounters = {
                235949,
                36267,
                36551,
                36835,
                37119,
                37403,
                37687,
                36272,
                36556,
                36840,
                37124,
                37408,
                37692,
                24,
        };
        c.DefineDerivedCounter("PreTessellationTime",
                               "Timing",
                               "Time VS and HS are busy in nanoseconds in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),1,2,3,4,5,6,max6,7,8,9,10,11,12,sum6,ifnotzero,13,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "d5e6c54c-5ffb-b173-6118-bece61f0281c");
    }
    { // Index:11
        static constexpr std::array<GpaUInt32, 13> kHardwareCounters = {
                36247,
                36531,
                36815,
                37099,
                37383,
                37667,
                36272,
                36556,
                36840,
                37124,
                37408,
                37692,
                24,
        };
        c.DefineDerivedCounter("PostTessellationBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has DS or GS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,max6,6,7,8,9,10,11,sum6,ifnotzero,12,/,(100),*,(100),min",
                               "1a275c68-9340-f358-71c6-a2648390381d");
    }
    { // Index:12
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                36247,
                36531,
                36815,
                37099,
                37383,
                37667,
                36272,
                36556,
                36840,
                37124,
                37408,
                37692,
        };
        c.DefineDerivedCounter("PostTessellationBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has DS or GS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,max6,6,7,8,9,10,11,sum6,ifnotzero",
                               "a5ed943b-13ef-942b-56fb-6d519eeb7337");
    }
    { // Index:13
        static constexpr std::array<GpaUInt32, 14> kHardwareCounters = {
                235949,
                36247,
                36531,
                36815,
                37099,
                37383,
                37667,
                36272,
                36556,
                36840,
                37124,
                37408,
                37692,
                24,
        };
        c.DefineDerivedCounter("PostTessellationTime",
                               "Timing",
                               "Time DS or GS are busy in nanoseconds in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),1,2,3,4,5,6,max6,7,8,9,10,11,12,sum6,ifnotzero,13,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "9f8dfa40-faee-2014-3467-2630a7d95c1e");
    }
    { // Index:14
        static constexpr std::array<GpaUInt32, 49> kHardwareCounters = {
                36302,
                36586,
                36870,
                37154,
                37438,
                37722,
                36318,
                36602,
                36886,
                37170,
                37454,
                37738,
                36303,
                36587,
                36871,
                37155,
                37439,
                37723,
                36319,
                36603,
                36887,
                37171,
                37455,
                37739,
                36304,
                36588,
                36872,
                37156,
                37440,
                37724,
                36320,
                36604,
                36888,
                37172,
                37456,
                37740,
                36305,
                36589,
                36873,
                37157,
                37441,
                37725,
                36321,
                36605,
                36889,
                37173,
                37457,
                37741,
                24,
        };
        c.DefineDerivedCounter("PSBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has pixel shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,max6,6,7,8,9,10,11,sum6,ifnotzero,(0),12,13,14,15,16,17,max6,18,19,20,21,22,23,sum6,ifnotzero,(0),24,25,26,27,28,29,max6,30,31,32,33,34,35,sum6,ifnotzero,(0),36,37,38,39,40,41,max6,42,43,44,45,46,47,sum6,ifnotzero,max4,48,/,(100),*,(100),min",
                               "7e772beb-d82c-bd9a-aed0-fe504d416ce5");
    }
    { // Index:15
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                36302,
                36586,
                36870,
                37154,
                37438,
                37722,
                36318,
                36602,
                36886,
                37170,
                37454,
                37738,
                36303,
                36587,
                36871,
                37155,
                37439,
                37723,
                36319,
                36603,
                36887,
                37171,
                37455,
                37739,
                36304,
                36588,
                36872,
                37156,
                37440,
                37724,
                36320,
                36604,
                36888,
                37172,
                37456,
                37740,
                36305,
                36589,
                36873,
                37157,
                37441,
                37725,
                36321,
                36605,
                36889,
                37173,
                37457,
                37741,
        };
        c.DefineDerivedCounter("PSBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has pixel shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,max6,6,7,8,9,10,11,sum6,ifnotzero,(0),12,13,14,15,16,17,max6,18,19,20,21,22,23,sum6,ifnotzero,(0),24,25,26,27,28,29,max6,30,31,32,33,34,35,sum6,ifnotzero,(0),36,37,38,39,40,41,max6,42,43,44,45,46,47,sum6,ifnotzero,max4",
                               "b58bea04-ce8e-2984-80f4-8aba7d4c817b");
    }
    { // Index:16
        static constexpr std::array<GpaUInt32, 50> kHardwareCounters = {
                235949,
                36302,
                36586,
                36870,
                37154,
                37438,
                37722,
                36318,
                36602,
                36886,
                37170,
                37454,
                37738,
                36303,
                36587,
                36871,
                37155,
                37439,
                37723,
                36319,
                36603,
                36887,
                37171,
                37455,
                37739,
                36304,
                36588,
                36872,
                37156,
                37440,
                37724,
                36320,
                36604,
                36888,
                37172,
                37456,
                37740,
                36305,
                36589,
                36873,
                37157,
                37441,
                37725,
                36321,
                36605,
                36889,
                37173,
                37457,
                37741,
                24,
        };
        c.DefineDerivedCounter("PSTime",
                               "Timing",
                               "Time pixel shaders are busy in nanoseconds.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),1,2,3,4,5,6,max6,7,8,9,10,11,12,sum6,ifnotzero,(0),13,14,15,16,17,18,max6,19,20,21,22,23,24,sum6,ifnotzero,(0),25,26,27,28,29,30,max6,31,32,33,34,35,36,sum6,ifnotzero,(0),37,38,39,40,41,42,max6,43,44,45,46,47,48,sum6,ifnotzero,max4,49,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "edca7694-7416-e8a6-0c5a-63a5ad5f3d74");
    }
    { // Index:17
        static constexpr std::array<GpaUInt32, 25> kHardwareCounters = {
                36283,
                36567,
                36851,
                37135,
                37419,
                37703,
                36287,
                36571,
                36855,
                37139,
                37423,
                37707,
                36291,
                36575,
                36859,
                37143,
                37427,
                37711,
                36295,
                36579,
                36863,
                37147,
                37431,
                37715,
                24,
        };
        c.DefineDerivedCounter("CSBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has compute shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,comparemax6,12,13,14,15,16,17,18,19,20,21,22,23,comparemax6,max,24,/,(100),*,(100),min",
                               "493fdd90-8d2b-a055-5e4e-2d29c3396b8c");
    }
    { // Index:18
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                36283,
                36567,
                36851,
                37135,
                37419,
                37703,
                36287,
                36571,
                36855,
                37139,
                37423,
                37707,
                36291,
                36575,
                36859,
                37143,
                37427,
                37711,
                36295,
                36579,
                36863,
                37147,
                37431,
                37715,
        };
        c.DefineDerivedCounter("CSBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has compute shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,comparemax6,12,13,14,15,16,17,18,19,20,21,22,23,comparemax6,max",
                               "39bcf1b8-f6b2-4c37-f9af-0a2bb59512f9");
    }
    { // Index:19
        static constexpr std::array<GpaUInt32, 26> kHardwareCounters = {
                235949,
                36283,
                36567,
                36851,
                37135,
                37419,
                37703,
                36287,
                36571,
                36855,
                37139,
                37423,
                37707,
                36291,
                36575,
                36859,
                37143,
                37427,
                37711,
                36295,
                36579,
                36863,
                37147,
                37431,
                37715,
                24,
        };
        c.DefineDerivedCounter("CSTime",
                               "Timing",
                               "Time compute shaders are busy in nanoseconds.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "1,2,3,4,5,6,7,8,9,10,11,12,comparemax6,13,14,15,16,17,18,19,20,21,22,23,24,comparemax6,max,25,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "dbc24916-ecb2-7eef-8d63-7afadaaab6bc");
    }
    { // Index:20
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                112270,
                112358,
                112446,
                112534,
                112622,
                112710,
                36272,
                36556,
                36840,
                37124,
                37408,
                37692,
        };
        c.DefineDerivedCounter("VsGsVerticesIn",
                               "VertexGeometry",
                               "The number of unique vertices processed by the VS and GS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6,(0),6,7,8,9,10,11,sum6,ifnotzero",
                               "17d0c775-3ed5-affb-d5ac-5391a198a4aa");
    }
    { // Index:21
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                112275,
                112363,
                112451,
                112539,
                112627,
                112715,
                36272,
                36556,
                36840,
                37124,
                37408,
                37692,
        };
        c.DefineDerivedCounter("VsGsPrimsIn",
                               "VertexGeometry",
                               "The number of primitives passed into the GS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6,(0),6,7,8,9,10,11,sum6,ifnotzero",
                               "d9fa5ce8-5329-f5d4-c378-8fbc7e80d9a6");
    }
    { // Index:22
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                112281,
                112369,
                112457,
                112545,
                112633,
                112721,
                36272,
                36556,
                36840,
                37124,
                37408,
                37692,
        };
        c.DefineDerivedCounter("PreTessVerticesIn",
                               "PreTessellation",
                               "The number of unique vertices processed by the VS and HS when using tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,sum6,6,7,8,9,10,11,sum6,ifnotzero",
                               "84145f0c-ff96-0dfb-ffb7-ccf4c9b3f4c4");
    }
    { // Index:23
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                112258,
                112346,
                112434,
                112522,
                112610,
                112698,
                36272,
                36556,
                36840,
                37124,
                37408,
                37692,
        };
        c.DefineDerivedCounter("PostTessPrimsOut",
                               "PostTessellation",
                               "The number of primitives output by the DS and GS when using tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,sum6,6,7,8,9,10,11,sum6,ifnotzero",
                               "d38dabe8-1f13-ea34-d3c1-eb5783b737f1");
    }
    { // Index:24
        static constexpr std::array<GpaUInt32, 37> kHardwareCounters = {
                17300,
                17611,
                17922,
                18233,
                18544,
                18855,
                17304,
                17615,
                17926,
                18237,
                18548,
                18859,
                17256,
                17567,
                17878,
                18189,
                18500,
                18811,
                17268,
                17579,
                17890,
                18201,
                18512,
                18823,
                17257,
                17568,
                17879,
                18190,
                18501,
                18812,
                17269,
                17580,
                17891,
                18202,
                18513,
                18824,
                24,
        };
        c.DefineDerivedCounter("PrimitiveAssemblyBusy",
                               "Timing",
                               "The percentage of GPUTime that primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,vecsub6,SU_CLOCKS_PRIM,12,13,14,15,16,17,18,19,20,21,22,23,vecsum6,24,25,26,27,28,29,vecsum6,(2),30,31,32,33,34,35,scalarmul6,vecsum6,scalarmul6,vecsub6,max6,(0),max,36,/,(100),*,(100),min",
                               "54ac5640-c4d7-95e2-20e0-6a9fdfc07333");
    }
    { // Index:25
        static constexpr std::array<GpaUInt32, 36> kHardwareCounters = {
                17300,
                17611,
                17922,
                18233,
                18544,
                18855,
                17304,
                17615,
                17926,
                18237,
                18548,
                18859,
                17256,
                17567,
                17878,
                18189,
                18500,
                18811,
                17268,
                17579,
                17890,
                18201,
                18512,
                18823,
                17257,
                17568,
                17879,
                18190,
                18501,
                18812,
                17269,
                17580,
                17891,
                18202,
                18513,
                18824,
        };
        c.DefineDerivedCounter("PrimitiveAssemblyBusyCycles",
                               "Timing",
                               "Number of GPU cycles the primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,vecsub6,SU_CLOCKS_PRIM,12,13,14,15,16,17,18,19,20,21,22,23,vecsum6,24,25,26,27,28,29,vecsum6,(2),30,31,32,33,34,35,scalarmul6,vecsum6,scalarmul6,vecsub6,max6,(0),max",
                               "99777f2d-9626-c78a-a97c-c4505eba1e5f");
    }
    { // Index:26
        static constexpr std::array<GpaUInt32, 6> kHardwareCounters = {
                17203,
                17514,
                17825,
                18136,
                18447,
                18758,
        };
        c.DefineDerivedCounter("PrimitivesIn",
                               "PrimitiveAssembly",
                               "The number of primitives received by the hardware. This includes primitives generated by tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6",
                               "a515b80d-75c3-c7d2-0d2f-d7766b4759a6");
    }
    { // Index:27
        static constexpr std::array<GpaUInt32, 30> kHardwareCounters = {
                17209,
                17520,
                17831,
                18142,
                18453,
                18764,
                17249,
                17560,
                17871,
                18182,
                18493,
                18804,
                17250,
                17561,
                17872,
                18183,
                18494,
                18805,
                17251,
                17562,
                17873,
                18184,
                18495,
                18806,
                17252,
                17563,
                17874,
                18185,
                18496,
                18807,
        };
        c.DefineDerivedCounter("CulledPrims",
                               "PrimitiveAssembly",
                               "The number of culled primitives. Typical reasons include scissor, the primitive having zero area, and back or front face culling.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6,6,7,8,9,10,11,sum6,+,12,13,14,15,16,17,sum6,+,18,19,20,21,22,23,sum6,+,24,25,26,27,28,29,sum6,+",
                               "589bdf55-9192-280a-41c3-584bc94f2562");
    }
    { // Index:28
        static constexpr std::array<GpaUInt32, 6> kHardwareCounters = {
                17216,
                17527,
                17838,
                18149,
                18460,
                18771,
        };
        c.DefineDerivedCounter("ClippedPrims",
                               "PrimitiveAssembly",
                               "The number of primitives that required one or more clipping operations due to intersecting the view volume or user clip planes.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6",
                               "5ef6f9d5-155e-5baa-163f-8359d9ea9bbf");
    }
    { // Index:29
        static constexpr std::array<GpaUInt32, 7> kHardwareCounters = {
                17304,
                17615,
                17926,
                18237,
                18548,
                18859,
                24,
        };
        c.DefineDerivedCounter("PAStalledOnRasterizer",
                               "PrimitiveAssembly",
                               "Percentage of GPUTime that primitive assembly waits for rasterization to be ready to accept data. This roughly indicates for what percentage of time the pipeline is bottlenecked by pixel operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,max6,6,/,(100),*",
                               "6f9f416b-53c1-0457-f88c-7b6ba8973974");
    }
    { // Index:30
        static constexpr std::array<GpaUInt32, 6> kHardwareCounters = {
                17304,
                17615,
                17926,
                18237,
                18548,
                18859,
        };
        c.DefineDerivedCounter("PAStalledOnRasterizerCycles",
                               "PrimitiveAssembly",
                               "Number of GPU cycles the primitive assembly waits for rasterization to be ready to accept data. Indicates the number of GPU cycles the pipeline is bottlenecked by pixel operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,max6",
                               "7a8c492a-c566-9328-6805-760dbff5c0f2");
    }
    { // Index:31
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                35273,
                35355,
                35437,
                35519,
                35601,
                35683,
                35765,
                35847,
                35929,
                36011,
                36093,
                36175,
                35278,
                35360,
                35442,
                35524,
                35606,
                35688,
                35770,
                35852,
                35934,
                36016,
                36098,
                36180,
                35283,
                35365,
                35447,
                35529,
                35611,
                35693,
                35775,
                35857,
                35939,
                36021,
                36103,
                36185,
                35288,
                35370,
                35452,
                35534,
                35616,
                35698,
                35780,
                35862,
                35944,
                36026,
                36108,
                36190,
        };
        c.DefineDerivedCounter("PSPixelsOut",
                               "PixelShader",
                               "Pixels exported from shader to color buffers. Does not include killed or alpha tested pixels; if there are multiple render targets, each render target receives one export, so this will be 2 for 1 pixel written to two RTs.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,sum12,12,13,14,15,16,17,18,19,20,21,22,23,sum12,24,25,26,27,28,29,30,31,32,33,34,35,sum12,36,37,38,39,40,41,42,43,44,45,46,47,sum12,sum4",
                               "24cba16c-baa6-6ecd-95ad-92ecb1338da1");
    }
    { // Index:32
        static constexpr std::array<GpaUInt32, 49> kHardwareCounters = {
                35275,
                35357,
                35439,
                35521,
                35603,
                35685,
                35767,
                35849,
                35931,
                36013,
                36095,
                36177,
                35280,
                35362,
                35444,
                35526,
                35608,
                35690,
                35772,
                35854,
                35936,
                36018,
                36100,
                36182,
                35285,
                35367,
                35449,
                35531,
                35613,
                35695,
                35777,
                35859,
                35941,
                36023,
                36105,
                36187,
                35290,
                35372,
                35454,
                35536,
                35618,
                35700,
                35782,
                35864,
                35946,
                36028,
                36110,
                36192,
                24,
        };
        c.DefineDerivedCounter("PSExportStalls",
                               "PixelShader",
                               "Pixel shader output stalls. Percentage of GPUBusy. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the color buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,max12,12,13,14,15,16,17,18,19,20,21,22,23,max12,24,25,26,27,28,29,30,31,32,33,34,35,36,37,max12,38,39,40,41,42,43,44,45,46,47,max12,max4,48,/,(100),*",
                               "9b4f466c-ff97-22bb-557d-84d3c4c51895");
    }
    { // Index:33
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                35275,
                35357,
                35439,
                35521,
                35603,
                35685,
                35767,
                35849,
                35931,
                36013,
                36095,
                36177,
                35280,
                35362,
                35444,
                35526,
                35608,
                35690,
                35772,
                35854,
                35936,
                36018,
                36100,
                36182,
                35285,
                35367,
                35449,
                35531,
                35613,
                35695,
                35777,
                35859,
                35941,
                36023,
                36105,
                36187,
                35290,
                35372,
                35454,
                35536,
                35618,
                35700,
                35782,
                35864,
                35946,
                36028,
                36110,
                36192,
        };
        c.DefineDerivedCounter("PSExportStallsCycles",
                               "PixelShader",
                               "Number of GPU cycles the pixel shader output stalls. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the color buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,max12,12,13,14,15,16,17,18,19,20,21,22,23,max12,24,25,26,27,28,29,30,31,32,33,34,35,36,37,max12,38,39,40,41,42,43,44,45,46,47,max12,max4",
                               "47c72aad-64e6-0864-d533-d8e0bc27c156");
    }
    { // Index:34
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                36284,
                36568,
                36852,
                37136,
                37420,
                37704,
                36292,
                36576,
                36860,
                37144,
                37428,
                37712,
        };
        c.DefineDerivedCounter("CSThreadGroupsLaunched",
                               "ComputeShader",
                               "The total number of thread groups launched.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6,6,7,8,9,10,11,sum6,+",
                               "9813b379-9095-5a24-8e13-4521ebfe0880");
    }
    { // Index:35
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                36287,
                36571,
                36855,
                37139,
                37423,
                37707,
                36295,
                36579,
                36863,
                37147,
                37431,
                37715,
        };
        c.DefineDerivedCounter("CSWavefrontsLaunched",
                               "ComputeShader",
                               "The total number of wavefronts launched for the CS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6,6,7,8,9,10,11,sum6,+",
                               "00c49129-6ae5-f6a0-1753-4738cbe17938");
    }
    { // Index:36
        static constexpr std::array<GpaUInt32, 6> kHardwareCounters = {
                38861,
                38898,
                38935,
                38972,
                39009,
                39046,
        };
        c.DefineDerivedCounter("CSThreadsLaunched",
                               "ComputeShader",
                               "The number of CS threads launched and processed by the hardware.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6",
                               "cbbbf1ba-d164-1c90-9df0-6120c1660fb1");
    }
    { // Index:37
        static constexpr std::array<GpaUInt32, 18> kHardwareCounters = {
                38861,
                38898,
                38935,
                38972,
                39009,
                39046,
                36284,
                36568,
                36852,
                37136,
                37420,
                37704,
                36292,
                36576,
                36860,
                37144,
                37428,
                37712,
        };
        c.DefineDerivedCounter("CSThreadGroupSize",
                               "ComputeShader",
                               "The number of CS threads within each thread group.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,sum6,6,7,8,9,10,11,sum6,12,13,14,15,16,17,sum6,+,/,6,7,8,9,10,11,sum6,12,13,14,15,16,17,sum6,+,ifnotzero",
                               "8c65008a-9957-7ca6-4199-f6fe940420f6");
    }
    { // Index:38
        static constexpr std::array<GpaUInt32, 97> kHardwareCounters = {
                211119,
                211631,
                212143,
                212655,
                213167,
                213679,
                214191,
                214703,
                215215,
                215727,
                216239,
                216751,
                217263,
                217775,
                218287,
                218799,
                219311,
                219823,
                220335,
                220847,
                221359,
                221871,
                222383,
                222895,
                223407,
                223919,
                224431,
                224943,
                225455,
                225967,
                226479,
                226991,
                227503,
                228015,
                228527,
                229039,
                229551,
                230063,
                230575,
                231087,
                231599,
                232111,
                232623,
                233135,
                233647,
                234159,
                234671,
                235183,
                211094,
                211606,
                212118,
                212630,
                213142,
                213654,
                214166,
                214678,
                215190,
                215702,
                216214,
                216726,
                217238,
                217750,
                218262,
                218774,
                219286,
                219798,
                220310,
                220822,
                221334,
                221846,
                222358,
                222870,
                223382,
                223894,
                224406,
                224918,
                225430,
                225942,
                226454,
                226966,
                227478,
                227990,
                228502,
                229014,
                229526,
                230038,
                230550,
                231062,
                231574,
                232086,
                232598,
                233110,
                233622,
                234134,
                234646,
                235158,
                24,
        };
        c.DefineDerivedCounter("CSALUStalledByLDS",
                               "ComputeShader",
                               "The average percentage of GPUTime each wavefronts' ALU units are stalled by the LDS input queue being full or the output queue being not ready. If there are LDS bank conflicts, reduce them. Otherwise, try reducing the number of LDS accesses if possible. Value range: 0% (optimal) to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,/,96,/,(100),*",
                               "c31b924a-dbf3-ba89-155f-dbbdd4c51f32");
    }
    { // Index:39
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                211119,
                211631,
                212143,
                212655,
                213167,
                213679,
                214191,
                214703,
                215215,
                215727,
                216239,
                216751,
                217263,
                217775,
                218287,
                218799,
                219311,
                219823,
                220335,
                220847,
                221359,
                221871,
                222383,
                222895,
                223407,
                223919,
                224431,
                224943,
                225455,
                225967,
                226479,
                226991,
                227503,
                228015,
                228527,
                229039,
                229551,
                230063,
                230575,
                231087,
                231599,
                232111,
                232623,
                233135,
                233647,
                234159,
                234671,
                235183,
                211094,
                211606,
                212118,
                212630,
                213142,
                213654,
                214166,
                214678,
                215190,
                215702,
                216214,
                216726,
                217238,
                217750,
                218262,
                218774,
                219286,
                219798,
                220310,
                220822,
                221334,
                221846,
                222358,
                222870,
                223382,
                223894,
                224406,
                224918,
                225430,
                225942,
                226454,
                226966,
                227478,
                227990,
                228502,
                229014,
                229526,
                230038,
                230550,
                231062,
                231574,
                232086,
                232598,
                233110,
                233622,
                234134,
                234646,
                235158,
        };
        c.DefineDerivedCounter("CSALUStalledByLDSCycles",
                               "ComputeShader",
                               "The average number of GPU cycles each wavefronts' ALU units are stalled by the LDS input queue being full or the output queue being not ready. If there are LDS bank conflicts, reduce them. Otherwise, try reducing the number of LDS accesses if possible. Value range: 0% (optimal) to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,/",
                               "b03dc079-e12b-5402-257f-ba583d77cdeb");
    }
    { // Index:40
        static constexpr std::array<GpaUInt32, 49> kHardwareCounters = {
                211346,
                211858,
                212370,
                212882,
                213394,
                213906,
                214418,
                214930,
                215442,
                215954,
                216466,
                216978,
                217490,
                218002,
                218514,
                219026,
                219538,
                220050,
                220562,
                221074,
                221586,
                222098,
                222610,
                223122,
                223634,
                224146,
                224658,
                225170,
                225682,
                226194,
                226706,
                227218,
                227730,
                228242,
                228754,
                229266,
                229778,
                230290,
                230802,
                231314,
                231826,
                232338,
                232850,
                233362,
                233874,
                234386,
                234898,
                235410,
                24,
        };
        c.DefineDerivedCounter("CSLDSBankConflict",
                               "ComputeShader",
                               "The average percentage of GPUTime an LDS is stalled due to bank conflicts. Value range: 0% (optimal) to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,NUM_SIMDS,/,48,/,(100),*",
                               "5be87034-b768-ebaf-ba27-585790259ee8");
    }
    { // Index:41
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                211346,
                211858,
                212370,
                212882,
                213394,
                213906,
                214418,
                214930,
                215442,
                215954,
                216466,
                216978,
                217490,
                218002,
                218514,
                219026,
                219538,
                220050,
                220562,
                221074,
                221586,
                222098,
                222610,
                223122,
                223634,
                224146,
                224658,
                225170,
                225682,
                226194,
                226706,
                227218,
                227730,
                228242,
                228754,
                229266,
                229778,
                230290,
                230802,
                231314,
                231826,
                232338,
                232850,
                233362,
                233874,
                234386,
                234898,
                235410,
        };
        c.DefineDerivedCounter("CSLDSBankConflictCycles",
                               "ComputeShader",
                               "The average number of GPU cycles an LDS is stalled by bank conflicts. Value range: 0 (optimal) to GPUBusyCycles (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,NUM_SIMDS,/",
                               "63f2f701-1c1a-efb5-d3c1-06dfb033d608");
    }
    { // Index:42
        static constexpr std::array<GpaUInt32, 97> kHardwareCounters = {
                39074,
                39310,
                39546,
                39782,
                40018,
                40254,
                40490,
                40726,
                40962,
                41198,
                41434,
                41670,
                41906,
                42142,
                42378,
                42614,
                42850,
                43086,
                43322,
                43558,
                43794,
                44030,
                44266,
                44502,
                44738,
                44974,
                45210,
                45446,
                45682,
                45918,
                46154,
                46390,
                46626,
                46862,
                47098,
                47334,
                47570,
                47806,
                48042,
                48278,
                48514,
                48750,
                48986,
                49222,
                49458,
                49694,
                49930,
                50166,
                50402,
                50638,
                50874,
                51110,
                51346,
                51582,
                51818,
                52054,
                52290,
                52526,
                52762,
                52998,
                53234,
                53470,
                53706,
                53942,
                54178,
                54414,
                54650,
                54886,
                55122,
                55358,
                55594,
                55830,
                56066,
                56302,
                56538,
                56774,
                57010,
                57246,
                57482,
                57718,
                57954,
                58190,
                58426,
                58662,
                58898,
                59134,
                59370,
                59606,
                59842,
                60078,
                60314,
                60550,
                60786,
                61022,
                61258,
                61494,
                24,
        };
        c.DefineDerivedCounter("TexUnitBusy",
                               "Timing",
                               "The percentage of GPUTime the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96,96,/,(100),*",
                               "36afb8d9-42fc-aafe-66c5-449542153b2c");
    }
    { // Index:43
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                39074,
                39310,
                39546,
                39782,
                40018,
                40254,
                40490,
                40726,
                40962,
                41198,
                41434,
                41670,
                41906,
                42142,
                42378,
                42614,
                42850,
                43086,
                43322,
                43558,
                43794,
                44030,
                44266,
                44502,
                44738,
                44974,
                45210,
                45446,
                45682,
                45918,
                46154,
                46390,
                46626,
                46862,
                47098,
                47334,
                47570,
                47806,
                48042,
                48278,
                48514,
                48750,
                48986,
                49222,
                49458,
                49694,
                49930,
                50166,
                50402,
                50638,
                50874,
                51110,
                51346,
                51582,
                51818,
                52054,
                52290,
                52526,
                52762,
                52998,
                53234,
                53470,
                53706,
                53942,
                54178,
                54414,
                54650,
                54886,
                55122,
                55358,
                55594,
                55830,
                56066,
                56302,
                56538,
                56774,
                57010,
                57246,
                57482,
                57718,
                57954,
                58190,
                58426,
                58662,
                58898,
                59134,
                59370,
                59606,
                59842,
                60078,
                60314,
                60550,
                60786,
                61022,
                61258,
                61494,
        };
        c.DefineDerivedCounter("TexUnitBusyCycles",
                               "Timing",
                               "Number of GPU cycles the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96",
                               "c68761f2-248c-4f39-6528-c308b1c0807c");
    }
    { // Index:44
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                39128,
                39364,
                39600,
                39836,
                40072,
                40308,
                40544,
                40780,
                41016,
                41252,
                41488,
                41724,
                41960,
                42196,
                42432,
                42668,
                42904,
                43140,
                43376,
                43612,
                43848,
                44084,
                44320,
                44556,
                44792,
                45028,
                45264,
                45500,
                45736,
                45972,
                46208,
                46444,
                46680,
                46916,
                47152,
                47388,
                47624,
                47860,
                48096,
                48332,
                48568,
                48804,
                49040,
                49276,
                49512,
                49748,
                49984,
                50220,
                50456,
                50692,
                50928,
                51164,
                51400,
                51636,
                51872,
                52108,
                52344,
                52580,
                52816,
                53052,
                53288,
                53524,
                53760,
                53996,
                54232,
                54468,
                54704,
                54940,
                55176,
                55412,
                55648,
                55884,
                56120,
                56356,
                56592,
                56828,
                57064,
                57300,
                57536,
                57772,
                58008,
                58244,
                58480,
                58716,
                58952,
                59188,
                59424,
                59660,
                59896,
                60132,
                60368,
                60604,
                60840,
                61076,
                61312,
                61548,
                39127,
                39363,
                39599,
                39835,
                40071,
                40307,
                40543,
                40779,
                41015,
                41251,
                41487,
                41723,
                41959,
                42195,
                42431,
                42667,
                42903,
                43139,
                43375,
                43611,
                43847,
                44083,
                44319,
                44555,
                44791,
                45027,
                45263,
                45499,
                45735,
                45971,
                46207,
                46443,
                46679,
                46915,
                47151,
                47387,
                47623,
                47859,
                48095,
                48331,
                48567,
                48803,
                49039,
                49275,
                49511,
                49747,
                49983,
                50219,
                50455,
                50691,
                50927,
                51163,
                51399,
                51635,
                51871,
                52107,
                52343,
                52579,
                52815,
                53051,
                53287,
                53523,
                53759,
                53995,
                54231,
                54467,
                54703,
                54939,
                55175,
                55411,
                55647,
                55883,
                56119,
                56355,
                56591,
                56827,
                57063,
                57299,
                57535,
                57771,
                58007,
                58243,
                58479,
                58715,
                58951,
                59187,
                59423,
                59659,
                59895,
                60131,
                60367,
                60603,
                60839,
                61075,
                61311,
                61547,
        };
        c.DefineDerivedCounter("TexTriFilteringPct",
                               "TextureUnit",
                               "Percentage of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,+,/,(100),*",
                               "1affc3c8-b917-5c81-622b-7004527208ae");
    }
    { // Index:45
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                39128,
                39364,
                39600,
                39836,
                40072,
                40308,
                40544,
                40780,
                41016,
                41252,
                41488,
                41724,
                41960,
                42196,
                42432,
                42668,
                42904,
                43140,
                43376,
                43612,
                43848,
                44084,
                44320,
                44556,
                44792,
                45028,
                45264,
                45500,
                45736,
                45972,
                46208,
                46444,
                46680,
                46916,
                47152,
                47388,
                47624,
                47860,
                48096,
                48332,
                48568,
                48804,
                49040,
                49276,
                49512,
                49748,
                49984,
                50220,
                50456,
                50692,
                50928,
                51164,
                51400,
                51636,
                51872,
                52108,
                52344,
                52580,
                52816,
                53052,
                53288,
                53524,
                53760,
                53996,
                54232,
                54468,
                54704,
                54940,
                55176,
                55412,
                55648,
                55884,
                56120,
                56356,
                56592,
                56828,
                57064,
                57300,
                57536,
                57772,
                58008,
                58244,
                58480,
                58716,
                58952,
                59188,
                59424,
                59660,
                59896,
                60132,
                60368,
                60604,
                60840,
                61076,
                61312,
                61548,
        };
        c.DefineDerivedCounter("TexTriFilteringCount",
                               "TextureUnit",
                               "Count of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,(4),*",
                               "5785b3a1-a513-18db-4b1c-bdeef75bb2b6");
    }
    { // Index:46
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                39127,
                39363,
                39599,
                39835,
                40071,
                40307,
                40543,
                40779,
                41015,
                41251,
                41487,
                41723,
                41959,
                42195,
                42431,
                42667,
                42903,
                43139,
                43375,
                43611,
                43847,
                44083,
                44319,
                44555,
                44791,
                45027,
                45263,
                45499,
                45735,
                45971,
                46207,
                46443,
                46679,
                46915,
                47151,
                47387,
                47623,
                47859,
                48095,
                48331,
                48567,
                48803,
                49039,
                49275,
                49511,
                49747,
                49983,
                50219,
                50455,
                50691,
                50927,
                51163,
                51399,
                51635,
                51871,
                52107,
                52343,
                52579,
                52815,
                53051,
                53287,
                53523,
                53759,
                53995,
                54231,
                54467,
                54703,
                54939,
                55175,
                55411,
                55647,
                55883,
                56119,
                56355,
                56591,
                56827,
                57063,
                57299,
                57535,
                57771,
                58007,
                58243,
                58479,
                58715,
                58951,
                59187,
                59423,
                59659,
                59895,
                60131,
                60367,
                60603,
                60839,
                61075,
                61311,
                61547,
        };
        c.DefineDerivedCounter("NoTexTriFilteringCount",
                               "TextureUnit",
                               "Count of pixels that did not receive trilinear filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,(4),*",
                               "179da29a-81af-c06e-ce8c-a0a731ea030d");
    }
    { // Index:47
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                39130,
                39366,
                39602,
                39838,
                40074,
                40310,
                40546,
                40782,
                41018,
                41254,
                41490,
                41726,
                41962,
                42198,
                42434,
                42670,
                42906,
                43142,
                43378,
                43614,
                43850,
                44086,
                44322,
                44558,
                44794,
                45030,
                45266,
                45502,
                45738,
                45974,
                46210,
                46446,
                46682,
                46918,
                47154,
                47390,
                47626,
                47862,
                48098,
                48334,
                48570,
                48806,
                49042,
                49278,
                49514,
                49750,
                49986,
                50222,
                50458,
                50694,
                50930,
                51166,
                51402,
                51638,
                51874,
                52110,
                52346,
                52582,
                52818,
                53054,
                53290,
                53526,
                53762,
                53998,
                54234,
                54470,
                54706,
                54942,
                55178,
                55414,
                55650,
                55886,
                56122,
                56358,
                56594,
                56830,
                57066,
                57302,
                57538,
                57774,
                58010,
                58246,
                58482,
                58718,
                58954,
                59190,
                59426,
                59662,
                59898,
                60134,
                60370,
                60606,
                60842,
                61078,
                61314,
                61550,
                39129,
                39365,
                39601,
                39837,
                40073,
                40309,
                40545,
                40781,
                41017,
                41253,
                41489,
                41725,
                41961,
                42197,
                42433,
                42669,
                42905,
                43141,
                43377,
                43613,
                43849,
                44085,
                44321,
                44557,
                44793,
                45029,
                45265,
                45501,
                45737,
                45973,
                46209,
                46445,
                46681,
                46917,
                47153,
                47389,
                47625,
                47861,
                48097,
                48333,
                48569,
                48805,
                49041,
                49277,
                49513,
                49749,
                49985,
                50221,
                50457,
                50693,
                50929,
                51165,
                51401,
                51637,
                51873,
                52109,
                52345,
                52581,
                52817,
                53053,
                53289,
                53525,
                53761,
                53997,
                54233,
                54469,
                54705,
                54941,
                55177,
                55413,
                55649,
                55885,
                56121,
                56357,
                56593,
                56829,
                57065,
                57301,
                57537,
                57773,
                58009,
                58245,
                58481,
                58717,
                58953,
                59189,
                59425,
                59661,
                59897,
                60133,
                60369,
                60605,
                60841,
                61077,
                61313,
                61549,
        };
        c.DefineDerivedCounter("TexVolFilteringPct",
                               "TextureUnit",
                               "Percentage of pixels that received volume filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,+,/,(100),*",
                               "b5ff6bed-3178-aee4-42dd-c74391c02a2d");
    }
    { // Index:48
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                39130,
                39366,
                39602,
                39838,
                40074,
                40310,
                40546,
                40782,
                41018,
                41254,
                41490,
                41726,
                41962,
                42198,
                42434,
                42670,
                42906,
                43142,
                43378,
                43614,
                43850,
                44086,
                44322,
                44558,
                44794,
                45030,
                45266,
                45502,
                45738,
                45974,
                46210,
                46446,
                46682,
                46918,
                47154,
                47390,
                47626,
                47862,
                48098,
                48334,
                48570,
                48806,
                49042,
                49278,
                49514,
                49750,
                49986,
                50222,
                50458,
                50694,
                50930,
                51166,
                51402,
                51638,
                51874,
                52110,
                52346,
                52582,
                52818,
                53054,
                53290,
                53526,
                53762,
                53998,
                54234,
                54470,
                54706,
                54942,
                55178,
                55414,
                55650,
                55886,
                56122,
                56358,
                56594,
                56830,
                57066,
                57302,
                57538,
                57774,
                58010,
                58246,
                58482,
                58718,
                58954,
                59190,
                59426,
                59662,
                59898,
                60134,
                60370,
                60606,
                60842,
                61078,
                61314,
                61550,
        };
        c.DefineDerivedCounter("TexVolFilteringCount",
                               "TextureUnit",
                               "Count of pixels that received volume filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,(4),*",
                               "4bddc587-d589-8128-e18c-762eab2c871f");
    }
    { // Index:49
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                39129,
                39365,
                39601,
                39837,
                40073,
                40309,
                40545,
                40781,
                41017,
                41253,
                41489,
                41725,
                41961,
                42197,
                42433,
                42669,
                42905,
                43141,
                43377,
                43613,
                43849,
                44085,
                44321,
                44557,
                44793,
                45029,
                45265,
                45501,
                45737,
                45973,
                46209,
                46445,
                46681,
                46917,
                47153,
                47389,
                47625,
                47861,
                48097,
                48333,
                48569,
                48805,
                49041,
                49277,
                49513,
                49749,
                49985,
                50221,
                50457,
                50693,
                50929,
                51165,
                51401,
                51637,
                51873,
                52109,
                52345,
                52581,
                52817,
                53053,
                53289,
                53525,
                53761,
                53997,
                54233,
                54469,
                54705,
                54941,
                55177,
                55413,
                55649,
                55885,
                56121,
                56357,
                56593,
                56829,
                57065,
                57301,
                57537,
                57773,
                58009,
                58245,
                58481,
                58717,
                58953,
                59189,
                59425,
                59661,
                59897,
                60133,
                60369,
                60605,
                60841,
                61077,
                61313,
                61549,
        };
        c.DefineDerivedCounter("NoTexVolFilteringCount",
                               "TextureUnit",
                               "Count of pixels that did not receive volume filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,(4),*",
                               "9fe1a854-17c6-9d26-b2b9-80610cd5827d");
    }
    { // Index:50
        static constexpr std::array<GpaUInt32, 864> kHardwareCounters = {
                39148,
                39384,
                39620,
                39856,
                40092,
                40328,
                40564,
                40800,
                41036,
                41272,
                41508,
                41744,
                41980,
                42216,
                42452,
                42688,
                42924,
                43160,
                43396,
                43632,
                43868,
                44104,
                44340,
                44576,
                44812,
                45048,
                45284,
                45520,
                45756,
                45992,
                46228,
                46464,
                46700,
                46936,
                47172,
                47408,
                47644,
                47880,
                48116,
                48352,
                48588,
                48824,
                49060,
                49296,
                49532,
                49768,
                50004,
                50240,
                50476,
                50712,
                50948,
                51184,
                51420,
                51656,
                51892,
                52128,
                52364,
                52600,
                52836,
                53072,
                53308,
                53544,
                53780,
                54016,
                54252,
                54488,
                54724,
                54960,
                55196,
                55432,
                55668,
                55904,
                56140,
                56376,
                56612,
                56848,
                57084,
                57320,
                57556,
                57792,
                58028,
                58264,
                58500,
                58736,
                58972,
                59208,
                59444,
                59680,
                59916,
                60152,
                60388,
                60624,
                60860,
                61096,
                61332,
                61568,
                39149,
                39385,
                39621,
                39857,
                40093,
                40329,
                40565,
                40801,
                41037,
                41273,
                41509,
                41745,
                41981,
                42217,
                42453,
                42689,
                42925,
                43161,
                43397,
                43633,
                43869,
                44105,
                44341,
                44577,
                44813,
                45049,
                45285,
                45521,
                45757,
                45993,
                46229,
                46465,
                46701,
                46937,
                47173,
                47409,
                47645,
                47881,
                48117,
                48353,
                48589,
                48825,
                49061,
                49297,
                49533,
                49769,
                50005,
                50241,
                50477,
                50713,
                50949,
                51185,
                51421,
                51657,
                51893,
                52129,
                52365,
                52601,
                52837,
                53073,
                53309,
                53545,
                53781,
                54017,
                54253,
                54489,
                54725,
                54961,
                55197,
                55433,
                55669,
                55905,
                56141,
                56377,
                56613,
                56849,
                57085,
                57321,
                57557,
                57793,
                58029,
                58265,
                58501,
                58737,
                58973,
                59209,
                59445,
                59681,
                59917,
                60153,
                60389,
                60625,
                60861,
                61097,
                61333,
                61569,
                39150,
                39386,
                39622,
                39858,
                40094,
                40330,
                40566,
                40802,
                41038,
                41274,
                41510,
                41746,
                41982,
                42218,
                42454,
                42690,
                42926,
                43162,
                43398,
                43634,
                43870,
                44106,
                44342,
                44578,
                44814,
                45050,
                45286,
                45522,
                45758,
                45994,
                46230,
                46466,
                46702,
                46938,
                47174,
                47410,
                47646,
                47882,
                48118,
                48354,
                48590,
                48826,
                49062,
                49298,
                49534,
                49770,
                50006,
                50242,
                50478,
                50714,
                50950,
                51186,
                51422,
                51658,
                51894,
                52130,
                52366,
                52602,
                52838,
                53074,
                53310,
                53546,
                53782,
                54018,
                54254,
                54490,
                54726,
                54962,
                55198,
                55434,
                55670,
                55906,
                56142,
                56378,
                56614,
                56850,
                57086,
                57322,
                57558,
                57794,
                58030,
                58266,
                58502,
                58738,
                58974,
                59210,
                59446,
                59682,
                59918,
                60154,
                60390,
                60626,
                60862,
                61098,
                61334,
                61570,
                39151,
                39387,
                39623,
                39859,
                40095,
                40331,
                40567,
                40803,
                41039,
                41275,
                41511,
                41747,
                41983,
                42219,
                42455,
                42691,
                42927,
                43163,
                43399,
                43635,
                43871,
                44107,
                44343,
                44579,
                44815,
                45051,
                45287,
                45523,
                45759,
                45995,
                46231,
                46467,
                46703,
                46939,
                47175,
                47411,
                47647,
                47883,
                48119,
                48355,
                48591,
                48827,
                49063,
                49299,
                49535,
                49771,
                50007,
                50243,
                50479,
                50715,
                50951,
                51187,
                51423,
                51659,
                51895,
                52131,
                52367,
                52603,
                52839,
                53075,
                53311,
                53547,
                53783,
                54019,
                54255,
                54491,
                54727,
                54963,
                55199,
                55435,
                55671,
                55907,
                56143,
                56379,
                56615,
                56851,
                57087,
                57323,
                57559,
                57795,
                58031,
                58267,
                58503,
                58739,
                58975,
                59211,
                59447,
                59683,
                59919,
                60155,
                60391,
                60627,
                60863,
                61099,
                61335,
                61571,
                39152,
                39388,
                39624,
                39860,
                40096,
                40332,
                40568,
                40804,
                41040,
                41276,
                41512,
                41748,
                41984,
                42220,
                42456,
                42692,
                42928,
                43164,
                43400,
                43636,
                43872,
                44108,
                44344,
                44580,
                44816,
                45052,
                45288,
                45524,
                45760,
                45996,
                46232,
                46468,
                46704,
                46940,
                47176,
                47412,
                47648,
                47884,
                48120,
                48356,
                48592,
                48828,
                49064,
                49300,
                49536,
                49772,
                50008,
                50244,
                50480,
                50716,
                50952,
                51188,
                51424,
                51660,
                51896,
                52132,
                52368,
                52604,
                52840,
                53076,
                53312,
                53548,
                53784,
                54020,
                54256,
                54492,
                54728,
                54964,
                55200,
                55436,
                55672,
                55908,
                56144,
                56380,
                56616,
                56852,
                57088,
                57324,
                57560,
                57796,
                58032,
                58268,
                58504,
                58740,
                58976,
                59212,
                59448,
                59684,
                59920,
                60156,
                60392,
                60628,
                60864,
                61100,
                61336,
                61572,
                39153,
                39389,
                39625,
                39861,
                40097,
                40333,
                40569,
                40805,
                41041,
                41277,
                41513,
                41749,
                41985,
                42221,
                42457,
                42693,
                42929,
                43165,
                43401,
                43637,
                43873,
                44109,
                44345,
                44581,
                44817,
                45053,
                45289,
                45525,
                45761,
                45997,
                46233,
                46469,
                46705,
                46941,
                47177,
                47413,
                47649,
                47885,
                48121,
                48357,
                48593,
                48829,
                49065,
                49301,
                49537,
                49773,
                50009,
                50245,
                50481,
                50717,
                50953,
                51189,
                51425,
                51661,
                51897,
                52133,
                52369,
                52605,
                52841,
                53077,
                53313,
                53549,
                53785,
                54021,
                54257,
                54493,
                54729,
                54965,
                55201,
                55437,
                55673,
                55909,
                56145,
                56381,
                56617,
                56853,
                57089,
                57325,
                57561,
                57797,
                58033,
                58269,
                58505,
                58741,
                58977,
                59213,
                59449,
                59685,
                59921,
                60157,
                60393,
                60629,
                60865,
                61101,
                61337,
                61573,
                39154,
                39390,
                39626,
                39862,
                40098,
                40334,
                40570,
                40806,
                41042,
                41278,
                41514,
                41750,
                41986,
                42222,
                42458,
                42694,
                42930,
                43166,
                43402,
                43638,
                43874,
                44110,
                44346,
                44582,
                44818,
                45054,
                45290,
                45526,
                45762,
                45998,
                46234,
                46470,
                46706,
                46942,
                47178,
                47414,
                47650,
                47886,
                48122,
                48358,
                48594,
                48830,
                49066,
                49302,
                49538,
                49774,
                50010,
                50246,
                50482,
                50718,
                50954,
                51190,
                51426,
                51662,
                51898,
                52134,
                52370,
                52606,
                52842,
                53078,
                53314,
                53550,
                53786,
                54022,
                54258,
                54494,
                54730,
                54966,
                55202,
                55438,
                55674,
                55910,
                56146,
                56382,
                56618,
                56854,
                57090,
                57326,
                57562,
                57798,
                58034,
                58270,
                58506,
                58742,
                58978,
                59214,
                59450,
                59686,
                59922,
                60158,
                60394,
                60630,
                60866,
                61102,
                61338,
                61574,
                39155,
                39391,
                39627,
                39863,
                40099,
                40335,
                40571,
                40807,
                41043,
                41279,
                41515,
                41751,
                41987,
                42223,
                42459,
                42695,
                42931,
                43167,
                43403,
                43639,
                43875,
                44111,
                44347,
                44583,
                44819,
                45055,
                45291,
                45527,
                45763,
                45999,
                46235,
                46471,
                46707,
                46943,
                47179,
                47415,
                47651,
                47887,
                48123,
                48359,
                48595,
                48831,
                49067,
                49303,
                49539,
                49775,
                50011,
                50247,
                50483,
                50719,
                50955,
                51191,
                51427,
                51663,
                51899,
                52135,
                52371,
                52607,
                52843,
                53079,
                53315,
                53551,
                53787,
                54023,
                54259,
                54495,
                54731,
                54967,
                55203,
                55439,
                55675,
                55911,
                56147,
                56383,
                56619,
                56855,
                57091,
                57327,
                57563,
                57799,
                58035,
                58271,
                58507,
                58743,
                58979,
                59215,
                59451,
                59687,
                59923,
                60159,
                60395,
                60631,
                60867,
                61103,
                61339,
                61575,
                39156,
                39392,
                39628,
                39864,
                40100,
                40336,
                40572,
                40808,
                41044,
                41280,
                41516,
                41752,
                41988,
                42224,
                42460,
                42696,
                42932,
                43168,
                43404,
                43640,
                43876,
                44112,
                44348,
                44584,
                44820,
                45056,
                45292,
                45528,
                45764,
                46000,
                46236,
                46472,
                46708,
                46944,
                47180,
                47416,
                47652,
                47888,
                48124,
                48360,
                48596,
                48832,
                49068,
                49304,
                49540,
                49776,
                50012,
                50248,
                50484,
                50720,
                50956,
                51192,
                51428,
                51664,
                51900,
                52136,
                52372,
                52608,
                52844,
                53080,
                53316,
                53552,
                53788,
                54024,
                54260,
                54496,
                54732,
                54968,
                55204,
                55440,
                55676,
                55912,
                56148,
                56384,
                56620,
                56856,
                57092,
                57328,
                57564,
                57800,
                58036,
                58272,
                58508,
                58744,
                58980,
                59216,
                59452,
                59688,
                59924,
                60160,
                60396,
                60632,
                60868,
                61104,
                61340,
                61576,
        };
        c.DefineDerivedCounter("TexAveAnisotropy",
                               "TextureUnit",
                               "The average degree of anisotropy applied. A number between 1 and 16. The anisotropic filtering algorithm only applies samples where they are required (e.g. there will be no extra anisotropic samples if the view vector is perpendicular to the surface) so this can be much lower than the requested anisotropy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,(2),96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,*,+,(4),192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,sum96,*,+,(6),288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,sum96,*,+,(8),384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,sum96,*,+,(10),480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,sum96,*,+,(12),576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,sum96,*,+,(14),672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,sum96,*,+,(16),768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,sum96,*,+,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,+,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,sum96,+,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,sum96,+,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,sum96,+,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,sum96,+,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,sum96,+,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,sum96,+,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,sum96,+,/",
                               "7ca2a2b9-a4eb-ce23-d163-59147e672396");
    }
    { // Index:51
        static constexpr std::array<GpaUInt32, 25> kHardwareCounters = {
                7724,
                8117,
                8510,
                8903,
                9296,
                9689,
                10082,
                10475,
                10868,
                11261,
                11654,
                12047,
                12440,
                12833,
                13226,
                13619,
                14012,
                14405,
                14798,
                15191,
                15584,
                15977,
                16370,
                16763,
                24,
        };
        c.DefineDerivedCounter("DepthStencilTestBusy",
                               "Timing",
                               "Percentage of time GPU spent performing depth and stencil tests relative to GPUBusy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24,24,/,(100),*",
                               "6834fb52-42e8-bb50-fd48-ec2f2904e7e0");
    }
    { // Index:52
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                7724,
                8117,
                8510,
                8903,
                9296,
                9689,
                10082,
                10475,
                10868,
                11261,
                11654,
                12047,
                12440,
                12833,
                13226,
                13619,
                14012,
                14405,
                14798,
                15191,
                15584,
                15977,
                16370,
                16763,
        };
        c.DefineDerivedCounter("DepthStencilTestBusyCycles",
                               "Timing",
                               "Number of GPU cycles spent performing depth and stencil tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24",
                               "07ad48f0-49d8-87e7-1ef5-1e24ff2cef49");
    }
    { // Index:53
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                7595,
                7988,
                8381,
                8774,
                9167,
                9560,
                9953,
                10346,
                10739,
                11132,
                11525,
                11918,
                12311,
                12704,
                13097,
                13490,
                13883,
                14276,
                14669,
                15062,
                15455,
                15848,
                16241,
                16634,
                7584,
                7977,
                8370,
                8763,
                9156,
                9549,
                9942,
                10335,
                10728,
                11121,
                11514,
                11907,
                12300,
                12693,
                13086,
                13479,
                13872,
                14265,
                14658,
                15051,
                15444,
                15837,
                16230,
                16623,
        };
        c.DefineDerivedCounter("HiZTilesAccepted",
                               "DepthAndStencil",
                               "Percentage of tiles accepted by HiZ and will be rendered to the depth or color buffers.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,-,(0),max,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,/,(100),*",
                               "56176f45-d7ff-813d-4f05-3b2f046067e7");
    }
    { // Index:54
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                7584,
                7977,
                8370,
                8763,
                9156,
                9549,
                9942,
                10335,
                10728,
                11121,
                11514,
                11907,
                12300,
                12693,
                13086,
                13479,
                13872,
                14265,
                14658,
                15051,
                15444,
                15837,
                16230,
                16623,
                7595,
                7988,
                8381,
                8774,
                9167,
                9560,
                9953,
                10346,
                10739,
                11132,
                11525,
                11918,
                12311,
                12704,
                13097,
                13490,
                13883,
                14276,
                14669,
                15062,
                15455,
                15848,
                16241,
                16634,
        };
        c.DefineDerivedCounter("HiZTilesAcceptedCount",
                               "DepthAndStencil",
                               "Count of tiles accepted by HiZ and will be rendered to the depth or color buffers.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max",
                               "95d4e3f6-b2f0-f26e-8423-aacdfaf79ea3");
    }
    { // Index:55
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                7595,
                7988,
                8381,
                8774,
                9167,
                9560,
                9953,
                10346,
                10739,
                11132,
                11525,
                11918,
                12311,
                12704,
                13097,
                13490,
                13883,
                14276,
                14669,
                15062,
                15455,
                15848,
                16241,
                16634,
        };
        c.DefineDerivedCounter("HiZTilesRejectedCount",
                               "DepthAndStencil",
                               "Count of tiles not accepted by HiZ.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "156ba142-7eeb-aa6e-a00a-f8aea4e41e0b");
    }
    { // Index:56
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                7584,
                7977,
                8370,
                8763,
                9156,
                9549,
                9942,
                10335,
                10728,
                11121,
                11514,
                11907,
                12300,
                12693,
                13086,
                13479,
                13872,
                14265,
                14658,
                15051,
                15444,
                15837,
                16230,
                16623,
                7608,
                8001,
                8394,
                8787,
                9180,
                9573,
                9966,
                10359,
                10752,
                11145,
                11538,
                11931,
                12324,
                12717,
                13110,
                13503,
                13896,
                14289,
                14682,
                15075,
                15468,
                15861,
                16254,
                16647,
        };
        c.DefineDerivedCounter("PreZTilesDetailCulled",
                               "DepthAndStencil",
                               "Percentage of tiles rejected because the associated prim had no contributing area.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,/,(100),*",
                               "cad7f54d-a044-7574-c472-6f2065cbeeac");
    }
    { // Index:57
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                7608,
                8001,
                8394,
                8787,
                9180,
                9573,
                9966,
                10359,
                10752,
                11145,
                11538,
                11931,
                12324,
                12717,
                13110,
                13503,
                13896,
                14289,
                14682,
                15075,
                15468,
                15861,
                16254,
                16647,
        };
        c.DefineDerivedCounter("PreZTilesDetailCulledCount",
                               "DepthAndStencil",
                               "Count of tiles rejected because the associated primitive had no contributing area.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "49262c8a-b1e6-90dd-f096-0fc4921715e9");
    }
    { // Index:58
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                7584,
                7977,
                8370,
                8763,
                9156,
                9549,
                9942,
                10335,
                10728,
                11121,
                11514,
                11907,
                12300,
                12693,
                13086,
                13479,
                13872,
                14265,
                14658,
                15051,
                15444,
                15837,
                16230,
                16623,
        };
        c.DefineDerivedCounter("PreZTilesDetailSurvivingCount",
                               "DepthAndStencil",
                               "Count of tiles surviving because the associated primitive had contributing area.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "f803eaa4-bbed-bd39-775f-a64df92e2c08");
    }
    { // Index:59
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                19220,
                19895,
                20570,
                21245,
                21920,
                22595,
                23270,
                23945,
                24620,
                25295,
                25970,
                26645,
                27320,
                27995,
                28670,
                29345,
                30020,
                30695,
                31370,
                32045,
                32720,
                33395,
                34070,
                34745,
                19296,
                19971,
                20646,
                21321,
                21996,
                22671,
                23346,
                24021,
                24696,
                25371,
                26046,
                26721,
                27396,
                28071,
                28746,
                29421,
                30096,
                30771,
                31446,
                32121,
                32796,
                33471,
                34146,
                34821,
        };
        c.DefineDerivedCounter("HiZQuadsCulled",
                               "DepthAndStencil",
                               "Percentage of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,/,(100),*",
                               "fa0e319b-5573-6d34-5bab-904769925036");
    }
    { // Index:60
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                19220,
                19895,
                20570,
                21245,
                21920,
                22595,
                23270,
                23945,
                24620,
                25295,
                25970,
                26645,
                27320,
                27995,
                28670,
                29345,
                30020,
                30695,
                31370,
                32045,
                32720,
                33395,
                34070,
                34745,
                19296,
                19971,
                20646,
                21321,
                21996,
                22671,
                23346,
                24021,
                24696,
                25371,
                26046,
                26721,
                27396,
                28071,
                28746,
                29421,
                30096,
                30771,
                31446,
                32121,
                32796,
                33471,
                34146,
                34821,
        };
        c.DefineDerivedCounter("HiZQuadsCulledCount",
                               "DepthAndStencil",
                               "Count of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max",
                               "73b0b39d-6df2-3e24-0b5c-7cb0ac8b6f39");
    }
    { // Index:61
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                19296,
                19971,
                20646,
                21321,
                21996,
                22671,
                23346,
                24021,
                24696,
                25371,
                26046,
                26721,
                27396,
                28071,
                28746,
                29421,
                30096,
                30771,
                31446,
                32121,
                32796,
                33471,
                34146,
                34821,
        };
        c.DefineDerivedCounter("HiZQuadsAcceptedCount",
                               "DepthAndStencil",
                               "Count of quads that did continue on in the pipeline after HiZ.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "59049ad9-42b5-c7cb-3616-6a8f6a8e4894");
    }
    { // Index:62
        static constexpr std::array<GpaUInt32, 72> kHardwareCounters = {
                19296,
                19971,
                20646,
                21321,
                21996,
                22671,
                23346,
                24021,
                24696,
                25371,
                26046,
                26721,
                27396,
                28071,
                28746,
                29421,
                30096,
                30771,
                31446,
                32121,
                32796,
                33471,
                34146,
                34821,
                19320,
                19995,
                20670,
                21345,
                22020,
                22695,
                23370,
                24045,
                24720,
                25395,
                26070,
                26745,
                27420,
                28095,
                28770,
                29445,
                30120,
                30795,
                31470,
                32145,
                32820,
                33495,
                34170,
                34845,
                19220,
                19895,
                20570,
                21245,
                21920,
                22595,
                23270,
                23945,
                24620,
                25295,
                25970,
                26645,
                27320,
                27995,
                28670,
                29345,
                30020,
                30695,
                31370,
                32045,
                32720,
                33395,
                34070,
                34745,
        };
        c.DefineDerivedCounter("PreZQuadsCulled",
                               "DepthAndStencil",
                               "Percentage of quads rejected based on the detailZ and earlyZ tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,sum24,/,(100),*",
                               "4e77547b-ec55-5663-f034-af59be66d77d");
    }
    { // Index:63
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                19296,
                19971,
                20646,
                21321,
                21996,
                22671,
                23346,
                24021,
                24696,
                25371,
                26046,
                26721,
                27396,
                28071,
                28746,
                29421,
                30096,
                30771,
                31446,
                32121,
                32796,
                33471,
                34146,
                34821,
                19320,
                19995,
                20670,
                21345,
                22020,
                22695,
                23370,
                24045,
                24720,
                25395,
                26070,
                26745,
                27420,
                28095,
                28770,
                29445,
                30120,
                30795,
                31470,
                32145,
                32820,
                33495,
                34170,
                34845,
        };
        c.DefineDerivedCounter("PreZQuadsCulledCount",
                               "DepthAndStencil",
                               "Count of quads rejected based on the detailZ and earlyZ tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max",
                               "1bf169e6-9304-834e-df5f-0c44d7890a08");
    }
    { // Index:64
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                19320,
                19995,
                20670,
                21345,
                22020,
                22695,
                23370,
                24045,
                24720,
                25395,
                26070,
                26745,
                27420,
                28095,
                28770,
                29445,
                30120,
                30795,
                31470,
                32145,
                32820,
                33495,
                34170,
                34845,
        };
        c.DefineDerivedCounter("PreZQuadsSurvivingCount",
                               "DepthAndStencil",
                               "Count of quads surviving detailZ and earlyZ tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "50e25e51-3713-89cb-7f92-559cde5e5532");
    }
    { // Index:65
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                19320,
                19995,
                20670,
                21345,
                22020,
                22695,
                23370,
                24045,
                24720,
                25395,
                26070,
                26745,
                27420,
                28095,
                28770,
                29445,
                30120,
                30795,
                31470,
                32145,
                32820,
                33495,
                34170,
                34845,
                19220,
                19895,
                20570,
                21245,
                21920,
                22595,
                23270,
                23945,
                24620,
                25295,
                25970,
                26645,
                27320,
                27995,
                28670,
                29345,
                30020,
                30695,
                31370,
                32045,
                32720,
                33395,
                34070,
                34745,
        };
        c.DefineDerivedCounter("PostZQuads",
                               "DepthAndStencil",
                               "Percentage of quads for which the pixel shader will run and may be postZ tested.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,/,(100),*",
                               "58f0d34b-eeb8-e8db-abce-cb72584144be");
    }
    { // Index:66
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                19320,
                19995,
                20670,
                21345,
                22020,
                22695,
                23370,
                24045,
                24720,
                25395,
                26070,
                26745,
                27420,
                28095,
                28770,
                29445,
                30120,
                30795,
                31470,
                32145,
                32820,
                33495,
                34170,
                34845,
        };
        c.DefineDerivedCounter("PostZQuadCount",
                               "DepthAndStencil",
                               "Count of quads for which the pixel shader will run and may be postZ tested.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "08404526-ce35-939b-34c8-a7a35a0ff4d6");
    }
    { // Index:67
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                7757,
                8150,
                8543,
                8936,
                9329,
                9722,
                10115,
                10508,
                10901,
                11294,
                11687,
                12080,
                12473,
                12866,
                13259,
                13652,
                14045,
                14438,
                14831,
                15224,
                15617,
                16010,
                16403,
                16796,
        };
        c.DefineDerivedCounter("PreZSamplesPassing",
                               "DepthAndStencil",
                               "Number of samples tested for Z before shading and passed.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "3bfe6c4d-7422-ca03-7ea5-e67ff1a00136");
    }
    { // Index:68
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                7759,
                8152,
                8545,
                8938,
                9331,
                9724,
                10117,
                10510,
                10903,
                11296,
                11689,
                12082,
                12475,
                12868,
                13261,
                13654,
                14047,
                14440,
                14833,
                15226,
                15619,
                16012,
                16405,
                16798,
        };
        c.DefineDerivedCounter("PreZSamplesFailingS",
                               "DepthAndStencil",
                               "Number of samples tested for Z before shading and failed stencil test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "df7f705e-5162-d3b5-da8b-63466cf9c4e5");
    }
    { // Index:69
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                7758,
                8151,
                8544,
                8937,
                9330,
                9723,
                10116,
                10509,
                10902,
                11295,
                11688,
                12081,
                12474,
                12867,
                13260,
                13653,
                14046,
                14439,
                14832,
                15225,
                15618,
                16011,
                16404,
                16797,
        };
        c.DefineDerivedCounter("PreZSamplesFailingZ",
                               "DepthAndStencil",
                               "Number of samples tested for Z before shading and failed Z test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "4484e950-f7a4-3800-bc74-78dd297f017e");
    }
    { // Index:70
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                7754,
                8147,
                8540,
                8933,
                9326,
                9719,
                10112,
                10505,
                10898,
                11291,
                11684,
                12077,
                12470,
                12863,
                13256,
                13649,
                14042,
                14435,
                14828,
                15221,
                15614,
                16007,
                16400,
                16793,
        };
        c.DefineDerivedCounter("PostZSamplesPassing",
                               "DepthAndStencil",
                               "Number of samples tested for Z after shading and passed.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "4995d5d6-2330-b986-508b-fae24856f44c");
    }
    { // Index:71
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                7756,
                8149,
                8542,
                8935,
                9328,
                9721,
                10114,
                10507,
                10900,
                11293,
                11686,
                12079,
                12472,
                12865,
                13258,
                13651,
                14044,
                14437,
                14830,
                15223,
                15616,
                16009,
                16402,
                16795,
        };
        c.DefineDerivedCounter("PostZSamplesFailingS",
                               "DepthAndStencil",
                               "Number of samples tested for Z after shading and failed stencil test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "ae558af4-f4be-3dd4-7316-b2c4dcf0def8");
    }
    { // Index:72
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                7755,
                8148,
                8541,
                8934,
                9327,
                9720,
                10113,
                10506,
                10899,
                11292,
                11685,
                12078,
                12471,
                12864,
                13257,
                13650,
                14043,
                14436,
                14829,
                15222,
                15615,
                16008,
                16401,
                16794,
        };
        c.DefineDerivedCounter("PostZSamplesFailingZ",
                               "DepthAndStencil",
                               "Number of samples tested for Z after shading and failed Z test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "b3684c94-814a-c695-c85d-a5b6ab798b35");
    }
    { // Index:73
        static constexpr std::array<GpaUInt32, 25> kHardwareCounters = {
                7626,
                8019,
                8412,
                8805,
                9198,
                9591,
                9984,
                10377,
                10770,
                11163,
                11556,
                11949,
                12342,
                12735,
                13128,
                13521,
                13914,
                14307,
                14700,
                15093,
                15486,
                15879,
                16272,
                16665,
                24,
        };
        c.DefineDerivedCounter("ZUnitStalled",
                               "DepthAndStencil",
                               "The percentage of GPUTime the depth buffer spends waiting for the color buffer to be ready to accept data. High figures here indicate a bottleneck in color buffer operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24,24,/,(100),*",
                               "5e86c3ad-1726-3157-1d01-7ed188bf854d");
    }
    { // Index:74
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                7626,
                8019,
                8412,
                8805,
                9198,
                9591,
                9984,
                10377,
                10770,
                11163,
                11556,
                11949,
                12342,
                12735,
                13128,
                13521,
                13914,
                14307,
                14700,
                15093,
                15486,
                15879,
                16272,
                16665,
        };
        c.DefineDerivedCounter("ZUnitStalledCycles",
                               "DepthAndStencil",
                               "Number of GPU cycles the depth buffer spends waiting for the color buffer to be ready to accept data. Larger numbers indicate a bottleneck in color buffer operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24",
                               "4351fa7f-6737-2c3e-3ffb-b3addbdceedd");
    }
    { // Index:75
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                7628,
                8021,
                8414,
                8807,
                9200,
                9593,
                9986,
                10379,
                10772,
                11165,
                11558,
                11951,
                12344,
                12737,
                13130,
                13523,
                13916,
                14309,
                14702,
                15095,
                15488,
                15881,
                16274,
                16667,
                7635,
                8028,
                8421,
                8814,
                9207,
                9600,
                9993,
                10386,
                10779,
                11172,
                11565,
                11958,
                12351,
                12744,
                13137,
                13530,
                13923,
                14316,
                14709,
                15102,
                15495,
                15888,
                16281,
                16674,
        };
        c.DefineDerivedCounter("DBMemRead",
                               "DepthAndStencil",
                               "Number of bytes read from the depth buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,(256),*,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,(32),*,+",
                               "dcdb4ee7-bd50-00f7-c028-9e5f4ce888c0");
    }
    { // Index:76
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                7640,
                8033,
                8426,
                8819,
                9212,
                9605,
                9998,
                10391,
                10784,
                11177,
                11570,
                11963,
                12356,
                12749,
                13142,
                13535,
                13928,
                14321,
                14714,
                15107,
                15500,
                15893,
                16286,
                16679,
                7643,
                8036,
                8429,
                8822,
                9215,
                9608,
                10001,
                10394,
                10787,
                11180,
                11573,
                11966,
                12359,
                12752,
                13145,
                13538,
                13931,
                14324,
                14717,
                15110,
                15503,
                15896,
                16289,
                16682,
        };
        c.DefineDerivedCounter("DBMemWritten",
                               "DepthAndStencil",
                               "Number of bytes written to the depth buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,(32),*,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,(32),*,+",
                               "de5717f8-8a49-ee44-4645-10de51b37dcf");
    }
    { // Index:77
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                81692,
                81771,
                81850,
                81929,
                82008,
                82087,
                82166,
                82245,
                82324,
                82403,
                82482,
                82561,
                82640,
                82719,
                82798,
                82877,
                82956,
                83035,
                83114,
                83193,
                83272,
                83351,
                83430,
                83509,
                83588,
                83667,
                83746,
                83825,
                83904,
                83983,
                84062,
                84141,
                84220,
                84299,
                84378,
                84457,
                84536,
                84615,
                84694,
                84773,
                84852,
                84931,
                85010,
                85089,
                85168,
                85247,
                85326,
                85405,
                85484,
                85563,
                85642,
                85721,
                85800,
                85879,
                85958,
                86037,
                86116,
                86195,
                86274,
                86353,
                86432,
                86511,
                86590,
                86669,
                86748,
                86827,
                86906,
                86985,
                87064,
                87143,
                87222,
                87301,
                87380,
                87459,
                87538,
                87617,
                87696,
                87775,
                87854,
                87933,
                88012,
                88091,
                88170,
                88249,
                88328,
                88407,
                88486,
                88565,
                88644,
                88723,
                88802,
                88881,
                88960,
                89039,
                89118,
                89197,
                81700,
                81779,
                81858,
                81937,
                82016,
                82095,
                82174,
                82253,
                82332,
                82411,
                82490,
                82569,
                82648,
                82727,
                82806,
                82885,
                82964,
                83043,
                83122,
                83201,
                83280,
                83359,
                83438,
                83517,
                83596,
                83675,
                83754,
                83833,
                83912,
                83991,
                84070,
                84149,
                84228,
                84307,
                84386,
                84465,
                84544,
                84623,
                84702,
                84781,
                84860,
                84939,
                85018,
                85097,
                85176,
                85255,
                85334,
                85413,
                85492,
                85571,
                85650,
                85729,
                85808,
                85887,
                85966,
                86045,
                86124,
                86203,
                86282,
                86361,
                86440,
                86519,
                86598,
                86677,
                86756,
                86835,
                86914,
                86993,
                87072,
                87151,
                87230,
                87309,
                87388,
                87467,
                87546,
                87625,
                87704,
                87783,
                87862,
                87941,
                88020,
                88099,
                88178,
                88257,
                88336,
                88415,
                88494,
                88573,
                88652,
                88731,
                88810,
                88889,
                88968,
                89047,
                89126,
                89205,
        };
        c.DefineDerivedCounter("L0CacheHit",
                               "MemoryCache",
                               "The percentage of read requests that hit the data in the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),(1),96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,/,-,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,ifnotzero",
                               "286c786e-9a42-3371-9dea-dd54e6e612e9");
    }
    { // Index:78
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                81692,
                81771,
                81850,
                81929,
                82008,
                82087,
                82166,
                82245,
                82324,
                82403,
                82482,
                82561,
                82640,
                82719,
                82798,
                82877,
                82956,
                83035,
                83114,
                83193,
                83272,
                83351,
                83430,
                83509,
                83588,
                83667,
                83746,
                83825,
                83904,
                83983,
                84062,
                84141,
                84220,
                84299,
                84378,
                84457,
                84536,
                84615,
                84694,
                84773,
                84852,
                84931,
                85010,
                85089,
                85168,
                85247,
                85326,
                85405,
                85484,
                85563,
                85642,
                85721,
                85800,
                85879,
                85958,
                86037,
                86116,
                86195,
                86274,
                86353,
                86432,
                86511,
                86590,
                86669,
                86748,
                86827,
                86906,
                86985,
                87064,
                87143,
                87222,
                87301,
                87380,
                87459,
                87538,
                87617,
                87696,
                87775,
                87854,
                87933,
                88012,
                88091,
                88170,
                88249,
                88328,
                88407,
                88486,
                88565,
                88644,
                88723,
                88802,
                88881,
                88960,
                89039,
                89118,
                89197,
        };
        c.DefineDerivedCounter("L0CacheRequestCount",
                               "MemoryCache",
                               "The number of read requests made to the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96",
                               "74983cae-ee57-2e1b-d990-5128fef84e1f");
    }
    { // Index:79
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                81692,
                81771,
                81850,
                81929,
                82008,
                82087,
                82166,
                82245,
                82324,
                82403,
                82482,
                82561,
                82640,
                82719,
                82798,
                82877,
                82956,
                83035,
                83114,
                83193,
                83272,
                83351,
                83430,
                83509,
                83588,
                83667,
                83746,
                83825,
                83904,
                83983,
                84062,
                84141,
                84220,
                84299,
                84378,
                84457,
                84536,
                84615,
                84694,
                84773,
                84852,
                84931,
                85010,
                85089,
                85168,
                85247,
                85326,
                85405,
                85484,
                85563,
                85642,
                85721,
                85800,
                85879,
                85958,
                86037,
                86116,
                86195,
                86274,
                86353,
                86432,
                86511,
                86590,
                86669,
                86748,
                86827,
                86906,
                86985,
                87064,
                87143,
                87222,
                87301,
                87380,
                87459,
                87538,
                87617,
                87696,
                87775,
                87854,
                87933,
                88012,
                88091,
                88170,
                88249,
                88328,
                88407,
                88486,
                88565,
                88644,
                88723,
                88802,
                88881,
                88960,
                89039,
                89118,
                89197,
                81700,
                81779,
                81858,
                81937,
                82016,
                82095,
                82174,
                82253,
                82332,
                82411,
                82490,
                82569,
                82648,
                82727,
                82806,
                82885,
                82964,
                83043,
                83122,
                83201,
                83280,
                83359,
                83438,
                83517,
                83596,
                83675,
                83754,
                83833,
                83912,
                83991,
                84070,
                84149,
                84228,
                84307,
                84386,
                84465,
                84544,
                84623,
                84702,
                84781,
                84860,
                84939,
                85018,
                85097,
                85176,
                85255,
                85334,
                85413,
                85492,
                85571,
                85650,
                85729,
                85808,
                85887,
                85966,
                86045,
                86124,
                86203,
                86282,
                86361,
                86440,
                86519,
                86598,
                86677,
                86756,
                86835,
                86914,
                86993,
                87072,
                87151,
                87230,
                87309,
                87388,
                87467,
                87546,
                87625,
                87704,
                87783,
                87862,
                87941,
                88020,
                88099,
                88178,
                88257,
                88336,
                88415,
                88494,
                88573,
                88652,
                88731,
                88810,
                88889,
                88968,
                89047,
                89126,
                89205,
        };
        c.DefineDerivedCounter("L0CacheHitCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache hit from the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,-",
                               "c0de7338-069b-c5ba-ead3-c65e030cd2ac");
    }
    { // Index:80
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                81700,
                81779,
                81858,
                81937,
                82016,
                82095,
                82174,
                82253,
                82332,
                82411,
                82490,
                82569,
                82648,
                82727,
                82806,
                82885,
                82964,
                83043,
                83122,
                83201,
                83280,
                83359,
                83438,
                83517,
                83596,
                83675,
                83754,
                83833,
                83912,
                83991,
                84070,
                84149,
                84228,
                84307,
                84386,
                84465,
                84544,
                84623,
                84702,
                84781,
                84860,
                84939,
                85018,
                85097,
                85176,
                85255,
                85334,
                85413,
                85492,
                85571,
                85650,
                85729,
                85808,
                85887,
                85966,
                86045,
                86124,
                86203,
                86282,
                86361,
                86440,
                86519,
                86598,
                86677,
                86756,
                86835,
                86914,
                86993,
                87072,
                87151,
                87230,
                87309,
                87388,
                87467,
                87546,
                87625,
                87704,
                87783,
                87862,
                87941,
                88020,
                88099,
                88178,
                88257,
                88336,
                88415,
                88494,
                88573,
                88652,
                88731,
                88810,
                88889,
                88968,
                89047,
                89126,
                89205,
        };
        c.DefineDerivedCounter("L0CacheMissCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache miss from the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96",
                               "a2f08766-ea1b-6eae-6eaf-faa04125d3e6");
    }
    { // Index:81
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                99499,
                99583,
                99667,
                99751,
                99835,
                99919,
                100003,
                100087,
                100171,
                100255,
                100339,
                100423,
                100507,
                100591,
                100675,
                100759,
                100843,
                100927,
                101011,
                101095,
                101179,
                101263,
                101347,
                101431,
                101515,
                101599,
                101683,
                101767,
                101851,
                101935,
                102019,
                102103,
                102187,
                102271,
                102355,
                102439,
                102523,
                102607,
                102691,
                102775,
                102859,
                102943,
                103027,
                103111,
                103195,
                103279,
                103363,
                103447,
                99503,
                99587,
                99671,
                99755,
                99839,
                99923,
                100007,
                100091,
                100175,
                100259,
                100343,
                100427,
                100511,
                100595,
                100679,
                100763,
                100847,
                100931,
                101015,
                101099,
                101183,
                101267,
                101351,
                101435,
                101519,
                101603,
                101687,
                101771,
                101855,
                101939,
                102023,
                102107,
                102191,
                102275,
                102359,
                102443,
                102527,
                102611,
                102695,
                102779,
                102863,
                102947,
                103031,
                103115,
                103199,
                103283,
                103367,
                103451,
        };
        c.DefineDerivedCounter("L1CacheHit",
                               "MemoryCache",
                               "The percentage of read or write requests that hit the data in the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(1),48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,/,-,(100),*",
                               "5a34915a-24b8-8baf-2bf8-5878e7894ae3");
    }
    { // Index:82
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                99499,
                99583,
                99667,
                99751,
                99835,
                99919,
                100003,
                100087,
                100171,
                100255,
                100339,
                100423,
                100507,
                100591,
                100675,
                100759,
                100843,
                100927,
                101011,
                101095,
                101179,
                101263,
                101347,
                101431,
                101515,
                101599,
                101683,
                101767,
                101851,
                101935,
                102019,
                102103,
                102187,
                102271,
                102355,
                102439,
                102523,
                102607,
                102691,
                102775,
                102859,
                102943,
                103027,
                103111,
                103195,
                103279,
                103363,
                103447,
        };
        c.DefineDerivedCounter("L1CacheRequestCount",
                               "MemoryCache",
                               "The number of read or write requests made to the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48",
                               "29c76c67-4611-205d-0b88-d08668df03c5");
    }
    { // Index:83
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                99499,
                99583,
                99667,
                99751,
                99835,
                99919,
                100003,
                100087,
                100171,
                100255,
                100339,
                100423,
                100507,
                100591,
                100675,
                100759,
                100843,
                100927,
                101011,
                101095,
                101179,
                101263,
                101347,
                101431,
                101515,
                101599,
                101683,
                101767,
                101851,
                101935,
                102019,
                102103,
                102187,
                102271,
                102355,
                102439,
                102523,
                102607,
                102691,
                102775,
                102859,
                102943,
                103027,
                103111,
                103195,
                103279,
                103363,
                103447,
                99503,
                99587,
                99671,
                99755,
                99839,
                99923,
                100007,
                100091,
                100175,
                100259,
                100343,
                100427,
                100511,
                100595,
                100679,
                100763,
                100847,
                100931,
                101015,
                101099,
                101183,
                101267,
                101351,
                101435,
                101519,
                101603,
                101687,
                101771,
                101855,
                101939,
                102023,
                102107,
                102191,
                102275,
                102359,
                102443,
                102527,
                102611,
                102695,
                102779,
                102863,
                102947,
                103031,
                103115,
                103199,
                103283,
                103367,
                103451,
        };
        c.DefineDerivedCounter("L1CacheHitCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache hit from the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,-",
                               "1ae150c3-f2d0-82c6-a51b-a77fd8d5fc33");
    }
    { // Index:84
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                99503,
                99587,
                99671,
                99755,
                99839,
                99923,
                100007,
                100091,
                100175,
                100259,
                100343,
                100427,
                100511,
                100595,
                100679,
                100763,
                100847,
                100931,
                101015,
                101099,
                101183,
                101267,
                101351,
                101435,
                101519,
                101603,
                101687,
                101771,
                101855,
                101939,
                102023,
                102107,
                102191,
                102275,
                102359,
                102443,
                102527,
                102611,
                102695,
                102779,
                102863,
                102947,
                103031,
                103115,
                103199,
                103283,
                103367,
                103451,
        };
        c.DefineDerivedCounter("L1CacheMissCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache miss from the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48",
                               "71bfec6d-257b-849d-e212-cdf5c1b1de65");
    }
    { // Index:85
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                103952,
                104211,
                104470,
                104729,
                104988,
                105247,
                105506,
                105765,
                106024,
                106283,
                106542,
                106801,
                107060,
                107319,
                107578,
                107837,
                108096,
                108355,
                108614,
                108873,
                109132,
                109391,
                109650,
                109909,
                103992,
                104251,
                104510,
                104769,
                105028,
                105287,
                105546,
                105805,
                106064,
                106323,
                106582,
                106841,
                107100,
                107359,
                107618,
                107877,
                108136,
                108395,
                108654,
                108913,
                109172,
                109431,
                109690,
                109949,
        };
        c.DefineDerivedCounter("L2CacheHit",
                               "MemoryCache",
                               "The percentage of read or write requests that hit the data in the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),(1),24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,/,-,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,ifnotzero",
                               "47694e4d-6ce6-f387-080d-b1f3d00b73ac");
    }
    { // Index:86
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                103992,
                104251,
                104510,
                104769,
                105028,
                105287,
                105546,
                105805,
                106064,
                106323,
                106582,
                106841,
                107100,
                107359,
                107618,
                107877,
                108136,
                108395,
                108654,
                108913,
                109172,
                109431,
                109690,
                109949,
                103952,
                104211,
                104470,
                104729,
                104988,
                105247,
                105506,
                105765,
                106024,
                106283,
                106542,
                106801,
                107060,
                107319,
                107578,
                107837,
                108096,
                108355,
                108614,
                108873,
                109132,
                109391,
                109650,
                109909,
        };
        c.DefineDerivedCounter("L2CacheMiss",
                               "MemoryCache",
                               "The percentage of read or write requests that miss the data in the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size. Value range: 0% (optimal) to 100% (all miss).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,/,(100),*",
                               "8aee5458-a58e-11b6-5131-7f19ed070117");
    }
    { // Index:87
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                103952,
                104211,
                104470,
                104729,
                104988,
                105247,
                105506,
                105765,
                106024,
                106283,
                106542,
                106801,
                107060,
                107319,
                107578,
                107837,
                108096,
                108355,
                108614,
                108873,
                109132,
                109391,
                109650,
                109909,
        };
        c.DefineDerivedCounter("L2CacheRequestCount",
                               "MemoryCache",
                               "The number of read or write requests made to the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "21e9219c-e725-0d96-06b1-b21698b736b2");
    }
    { // Index:88
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                103952,
                104211,
                104470,
                104729,
                104988,
                105247,
                105506,
                105765,
                106024,
                106283,
                106542,
                106801,
                107060,
                107319,
                107578,
                107837,
                108096,
                108355,
                108614,
                108873,
                109132,
                109391,
                109650,
                109909,
                103992,
                104251,
                104510,
                104769,
                105028,
                105287,
                105546,
                105805,
                106064,
                106323,
                106582,
                106841,
                107100,
                107359,
                107618,
                107877,
                108136,
                108395,
                108654,
                108913,
                109172,
                109431,
                109690,
                109949,
        };
        c.DefineDerivedCounter("L2CacheHitCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache hit from the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-",
                               "29ddcb92-d3dd-951b-1b23-efe52e4eeee4");
    }
    { // Index:89
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                103992,
                104251,
                104510,
                104769,
                105028,
                105287,
                105546,
                105805,
                106064,
                106323,
                106582,
                106841,
                107100,
                107359,
                107618,
                107877,
                108136,
                108395,
                108654,
                108913,
                109172,
                109431,
                109690,
                109949,
        };
        c.DefineDerivedCounter("L2CacheMissCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache miss from the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "376eec7b-ab25-9012-06b5-63291a17fd47");
    }
    { // Index:90
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                81729,
                81808,
                81887,
                81966,
                82045,
                82124,
                82203,
                82282,
                82361,
                82440,
                82519,
                82598,
                82677,
                82756,
                82835,
                82914,
                82993,
                83072,
                83151,
                83230,
                83309,
                83388,
                83467,
                83546,
                83625,
                83704,
                83783,
                83862,
                83941,
                84020,
                84099,
                84178,
                84257,
                84336,
                84415,
                84494,
                84573,
                84652,
                84731,
                84810,
                84889,
                84968,
                85047,
                85126,
                85205,
                85284,
                85363,
                85442,
                85521,
                85600,
                85679,
                85758,
                85837,
                85916,
                85995,
                86074,
                86153,
                86232,
                86311,
                86390,
                86469,
                86548,
                86627,
                86706,
                86785,
                86864,
                86943,
                87022,
                87101,
                87180,
                87259,
                87338,
                87417,
                87496,
                87575,
                87654,
                87733,
                87812,
                87891,
                87970,
                88049,
                88128,
                88207,
                88286,
                88365,
                88444,
                88523,
                88602,
                88681,
                88760,
                88839,
                88918,
                88997,
                89076,
                89155,
                89234,
        };
        c.DefineDerivedCounter("L0TagConflictReadStalledCycles",
                               "MemoryCache",
                               "The number of cycles read operations from the L0 cache are stalled due to tag conflicts.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96",
                               "e2412737-e2bf-c791-5f2f-64abd4ba47cf");
    }
    { // Index:91
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                81730,
                81809,
                81888,
                81967,
                82046,
                82125,
                82204,
                82283,
                82362,
                82441,
                82520,
                82599,
                82678,
                82757,
                82836,
                82915,
                82994,
                83073,
                83152,
                83231,
                83310,
                83389,
                83468,
                83547,
                83626,
                83705,
                83784,
                83863,
                83942,
                84021,
                84100,
                84179,
                84258,
                84337,
                84416,
                84495,
                84574,
                84653,
                84732,
                84811,
                84890,
                84969,
                85048,
                85127,
                85206,
                85285,
                85364,
                85443,
                85522,
                85601,
                85680,
                85759,
                85838,
                85917,
                85996,
                86075,
                86154,
                86233,
                86312,
                86391,
                86470,
                86549,
                86628,
                86707,
                86786,
                86865,
                86944,
                87023,
                87102,
                87181,
                87260,
                87339,
                87418,
                87497,
                87576,
                87655,
                87734,
                87813,
                87892,
                87971,
                88050,
                88129,
                88208,
                88287,
                88366,
                88445,
                88524,
                88603,
                88682,
                88761,
                88840,
                88919,
                88998,
                89077,
                89156,
                89235,
        };
        c.DefineDerivedCounter("L0TagConflictWriteStalledCycles",
                               "MemoryCache",
                               "The number of cycles write operations to the L0 cache are stalled due to tag conflicts.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96",
                               "0c2571f3-f084-f351-99ba-0d9e23b47e8e");
    }
    { // Index:92
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                81731,
                81810,
                81889,
                81968,
                82047,
                82126,
                82205,
                82284,
                82363,
                82442,
                82521,
                82600,
                82679,
                82758,
                82837,
                82916,
                82995,
                83074,
                83153,
                83232,
                83311,
                83390,
                83469,
                83548,
                83627,
                83706,
                83785,
                83864,
                83943,
                84022,
                84101,
                84180,
                84259,
                84338,
                84417,
                84496,
                84575,
                84654,
                84733,
                84812,
                84891,
                84970,
                85049,
                85128,
                85207,
                85286,
                85365,
                85444,
                85523,
                85602,
                85681,
                85760,
                85839,
                85918,
                85997,
                86076,
                86155,
                86234,
                86313,
                86392,
                86471,
                86550,
                86629,
                86708,
                86787,
                86866,
                86945,
                87024,
                87103,
                87182,
                87261,
                87340,
                87419,
                87498,
                87577,
                87656,
                87735,
                87814,
                87893,
                87972,
                88051,
                88130,
                88209,
                88288,
                88367,
                88446,
                88525,
                88604,
                88683,
                88762,
                88841,
                88920,
                88999,
                89078,
                89157,
                89236,
        };
        c.DefineDerivedCounter("L0TagConflictAtomicStalledCycles",
                               "MemoryCache",
                               "The number of cycles atomic operations on the L0 cache are stalled due to tag conflicts.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96",
                               "f13f8563-4151-1533-f42f-0f9c08a20210");
    }
    { // Index:93
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                104048,
                104307,
                104566,
                104825,
                105084,
                105343,
                105602,
                105861,
                106120,
                106379,
                106638,
                106897,
                107156,
                107415,
                107674,
                107933,
                108192,
                108451,
                108710,
                108969,
                109228,
                109487,
                109746,
                110005,
                104049,
                104308,
                104567,
                104826,
                105085,
                105344,
                105603,
                105862,
                106121,
                106380,
                106639,
                106898,
                107157,
                107416,
                107675,
                107934,
                108193,
                108452,
                108711,
                108970,
                109229,
                109488,
                109747,
                110006,
                104050,
                104309,
                104568,
                104827,
                105086,
                105345,
                105604,
                105863,
                106122,
                106381,
                106640,
                106899,
                107158,
                107417,
                107676,
                107935,
                108194,
                108453,
                108712,
                108971,
                109230,
                109489,
                109748,
                110007,
                104051,
                104310,
                104569,
                104828,
                105087,
                105346,
                105605,
                105864,
                106123,
                106382,
                106641,
                106900,
                107159,
                107418,
                107677,
                107936,
                108195,
                108454,
                108713,
                108972,
                109231,
                109490,
                109749,
                110008,
        };
        c.DefineDerivedCounter("FetchSize",
                               "GlobalMemory",
                               "The total bytes fetched from the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,(32),*,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,(64),*,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,sum24,(96),*,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum24,(128),*,sum4",
                               "664bb3ef-6eca-86b1-1e2d-30cb897b5fa9");
    }
    { // Index:94
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                104032,
                104291,
                104550,
                104809,
                105068,
                105327,
                105586,
                105845,
                106104,
                106363,
                106622,
                106881,
                107140,
                107399,
                107658,
                107917,
                108176,
                108435,
                108694,
                108953,
                109212,
                109471,
                109730,
                109989,
                104034,
                104293,
                104552,
                104811,
                105070,
                105329,
                105588,
                105847,
                106106,
                106365,
                106624,
                106883,
                107142,
                107401,
                107660,
                107919,
                108178,
                108437,
                108696,
                108955,
                109214,
                109473,
                109732,
                109991,
        };
        c.DefineDerivedCounter("WriteSize",
                               "GlobalMemory",
                               "The total bytes written to the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(32),*,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,(64),*,+",
                               "f96f2c16-b1b4-4ec4-229c-fc82e6f80a82");
    }
    { // Index:95
        static constexpr std::array<GpaUInt32, 97> kHardwareCounters = {
                39074,
                39310,
                39546,
                39782,
                40018,
                40254,
                40490,
                40726,
                40962,
                41198,
                41434,
                41670,
                41906,
                42142,
                42378,
                42614,
                42850,
                43086,
                43322,
                43558,
                43794,
                44030,
                44266,
                44502,
                44738,
                44974,
                45210,
                45446,
                45682,
                45918,
                46154,
                46390,
                46626,
                46862,
                47098,
                47334,
                47570,
                47806,
                48042,
                48278,
                48514,
                48750,
                48986,
                49222,
                49458,
                49694,
                49930,
                50166,
                50402,
                50638,
                50874,
                51110,
                51346,
                51582,
                51818,
                52054,
                52290,
                52526,
                52762,
                52998,
                53234,
                53470,
                53706,
                53942,
                54178,
                54414,
                54650,
                54886,
                55122,
                55358,
                55594,
                55830,
                56066,
                56302,
                56538,
                56774,
                57010,
                57246,
                57482,
                57718,
                57954,
                58190,
                58426,
                58662,
                58898,
                59134,
                59370,
                59606,
                59842,
                60078,
                60314,
                60550,
                60786,
                61022,
                61258,
                61494,
                24,
        };
        c.DefineDerivedCounter("MemUnitBusy",
                               "GlobalMemory",
                               "The percentage of GPUTime the memory unit is active. The result includes the stall time (MemUnitStalled). This is measured with all extra fetches and writes and any cache or memory effects taken into account. Value range: 0% to 100% (fetch-bound).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96,96,/,(100),*",
                               "a1efa380-4a72-e066-e06a-2ab71a488521");
    }
    { // Index:96
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                39074,
                39310,
                39546,
                39782,
                40018,
                40254,
                40490,
                40726,
                40962,
                41198,
                41434,
                41670,
                41906,
                42142,
                42378,
                42614,
                42850,
                43086,
                43322,
                43558,
                43794,
                44030,
                44266,
                44502,
                44738,
                44974,
                45210,
                45446,
                45682,
                45918,
                46154,
                46390,
                46626,
                46862,
                47098,
                47334,
                47570,
                47806,
                48042,
                48278,
                48514,
                48750,
                48986,
                49222,
                49458,
                49694,
                49930,
                50166,
                50402,
                50638,
                50874,
                51110,
                51346,
                51582,
                51818,
                52054,
                52290,
                52526,
                52762,
                52998,
                53234,
                53470,
                53706,
                53942,
                54178,
                54414,
                54650,
                54886,
                55122,
                55358,
                55594,
                55830,
                56066,
                56302,
                56538,
                56774,
                57010,
                57246,
                57482,
                57718,
                57954,
                58190,
                58426,
                58662,
                58898,
                59134,
                59370,
                59606,
                59842,
                60078,
                60314,
                60550,
                60786,
                61022,
                61258,
                61494,
        };
        c.DefineDerivedCounter("MemUnitBusyCycles",
                               "GlobalMemory",
                               "Number of GPU cycles the memory unit is active. The result includes the stall time (MemUnitStalledCycles). This is measured with all extra fetches and writes and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96",
                               "168f077c-4797-b2f5-717f-105c725266c8");
    }
    { // Index:97
        static constexpr std::array<GpaUInt32, 97> kHardwareCounters = {
                81722,
                81801,
                81880,
                81959,
                82038,
                82117,
                82196,
                82275,
                82354,
                82433,
                82512,
                82591,
                82670,
                82749,
                82828,
                82907,
                82986,
                83065,
                83144,
                83223,
                83302,
                83381,
                83460,
                83539,
                83618,
                83697,
                83776,
                83855,
                83934,
                84013,
                84092,
                84171,
                84250,
                84329,
                84408,
                84487,
                84566,
                84645,
                84724,
                84803,
                84882,
                84961,
                85040,
                85119,
                85198,
                85277,
                85356,
                85435,
                85514,
                85593,
                85672,
                85751,
                85830,
                85909,
                85988,
                86067,
                86146,
                86225,
                86304,
                86383,
                86462,
                86541,
                86620,
                86699,
                86778,
                86857,
                86936,
                87015,
                87094,
                87173,
                87252,
                87331,
                87410,
                87489,
                87568,
                87647,
                87726,
                87805,
                87884,
                87963,
                88042,
                88121,
                88200,
                88279,
                88358,
                88437,
                88516,
                88595,
                88674,
                88753,
                88832,
                88911,
                88990,
                89069,
                89148,
                89227,
                24,
        };
        c.DefineDerivedCounter("MemUnitStalled",
                               "GlobalMemory",
                               "The percentage of GPUTime the memory unit is stalled. Try reducing the number or size of fetches and writes if possible. Value range: 0% (optimal) to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96,96,/,(100),*",
                               "465ba54f-d250-1453-790a-731b10d230b1");
    }
    { // Index:98
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                81722,
                81801,
                81880,
                81959,
                82038,
                82117,
                82196,
                82275,
                82354,
                82433,
                82512,
                82591,
                82670,
                82749,
                82828,
                82907,
                82986,
                83065,
                83144,
                83223,
                83302,
                83381,
                83460,
                83539,
                83618,
                83697,
                83776,
                83855,
                83934,
                84013,
                84092,
                84171,
                84250,
                84329,
                84408,
                84487,
                84566,
                84645,
                84724,
                84803,
                84882,
                84961,
                85040,
                85119,
                85198,
                85277,
                85356,
                85435,
                85514,
                85593,
                85672,
                85751,
                85830,
                85909,
                85988,
                86067,
                86146,
                86225,
                86304,
                86383,
                86462,
                86541,
                86620,
                86699,
                86778,
                86857,
                86936,
                87015,
                87094,
                87173,
                87252,
                87331,
                87410,
                87489,
                87568,
                87647,
                87726,
                87805,
                87884,
                87963,
                88042,
                88121,
                88200,
                88279,
                88358,
                88437,
                88516,
                88595,
                88674,
                88753,
                88832,
                88911,
                88990,
                89069,
                89148,
                89227,
        };
        c.DefineDerivedCounter("MemUnitStalledCycles",
                               "GlobalMemory",
                               "Number of GPU cycles the memory unit is stalled.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96",
                               "2745659a-0e40-bace-3b9b-86a54f8e4623");
    }
    { // Index:99
        static constexpr std::array<GpaUInt32, 25> kHardwareCounters = {
                104037,
                104296,
                104555,
                104814,
                105073,
                105332,
                105591,
                105850,
                106109,
                106368,
                106627,
                106886,
                107145,
                107404,
                107663,
                107922,
                108181,
                108440,
                108699,
                108958,
                109217,
                109476,
                109735,
                109994,
                24,
        };
        c.DefineDerivedCounter("WriteUnitStalled",
                               "GlobalMemory",
                               "The percentage of GPUTime the Write unit is stalled. Value range: 0% to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24,24,/,(100),*",
                               "594ad3ce-d1ec-10fc-7d59-25738e397d72");
    }
    { // Index:100
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                104037,
                104296,
                104555,
                104814,
                105073,
                105332,
                105591,
                105850,
                106109,
                106368,
                106627,
                106886,
                107145,
                107404,
                107663,
                107922,
                108181,
                108440,
                108699,
                108958,
                109217,
                109476,
                109735,
                109994,
        };
        c.DefineDerivedCounter("WriteUnitStalledCycles",
                               "GlobalMemory",
                               "Number of GPU cycles the Write unit is stalled.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24",
                               "ede3305e-abd4-d6bf-6b00-ffc57a29fce3");
    }
}

// clang-format on

