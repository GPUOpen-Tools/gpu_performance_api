//==============================================================================
// Copyright (c) 2010-2024 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief Hardware counter info for GFX9_GFX904.
//==============================================================================

// This file is autogenerated by the ConvertHWEnums project.

// clang-format off

#include <set>

#include "gpu_perf_api_counter_generator/gpa_counter.h"
#include "auto_generated/gpu_perf_api_counter_generator/gpa_hw_counter_gfx9_gfx904.h"
#include "gpu_performance_api/gpu_perf_api_types.h"

namespace counter_gfx9_gfx904
{
    std::vector<GpaHardwareCounterDesc> kPaSu0CountersGfx9_gfx904 = {
        {8, "PA_SU0_PERF_PAPC_PA_INPUT_PRIM", "PA_SU0", "PERF_PAPC_PA_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU0_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU0", "PERF_PAPC_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU0_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU0", "PERF_PAPC_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU0_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU0", "PERF_PAPC_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU0_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU0", "PERF_PAPC_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU0_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU0", "PERF_PAPC_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU0_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU0", "PERF_PAPC_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU0_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU0", "PERF_PAPC_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU0_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU0", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU0_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU0", "PERF_PAPC_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU0_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU0", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU0_PERF_PAPC_CLIP_BUSY", "PA_SU0", "PERF_PAPC_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU0_PERF_PAPC_SU_STALLED_SC", "PA_SU0", "PERF_PAPC_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSu1CountersGfx9_gfx904 = {
        {8, "PA_SU1_PERF_PAPC_PA_INPUT_PRIM", "PA_SU1", "PERF_PAPC_PA_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU1_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU1", "PERF_PAPC_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU1_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU1", "PERF_PAPC_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU1_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU1", "PERF_PAPC_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU1_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU1", "PERF_PAPC_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU1_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU1", "PERF_PAPC_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU1_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU1", "PERF_PAPC_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU1_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU1", "PERF_PAPC_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU1_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU1", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU1_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU1", "PERF_PAPC_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU1_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU1", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU1_PERF_PAPC_CLIP_BUSY", "PA_SU1", "PERF_PAPC_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU1_PERF_PAPC_SU_STALLED_SC", "PA_SU1", "PERF_PAPC_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSu2CountersGfx9_gfx904 = {
        {8, "PA_SU2_PERF_PAPC_PA_INPUT_PRIM", "PA_SU2", "PERF_PAPC_PA_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU2_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU2", "PERF_PAPC_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU2_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU2", "PERF_PAPC_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU2_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU2", "PERF_PAPC_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU2_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU2", "PERF_PAPC_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU2_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU2", "PERF_PAPC_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU2_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU2", "PERF_PAPC_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU2_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU2", "PERF_PAPC_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU2_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU2", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU2_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU2", "PERF_PAPC_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU2_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU2", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU2_PERF_PAPC_CLIP_BUSY", "PA_SU2", "PERF_PAPC_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU2_PERF_PAPC_SU_STALLED_SC", "PA_SU2", "PERF_PAPC_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSu3CountersGfx9_gfx904 = {
        {8, "PA_SU3_PERF_PAPC_PA_INPUT_PRIM", "PA_SU3", "PERF_PAPC_PA_INPUT_PRIM Number of Primitives input to PA; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {14, "PA_SU3_PERF_PAPC_CLPR_CULL_PRIM", "PA_SU3", "PERF_PAPC_CLPR_CULL_PRIM Number of Prims Culled by Clipper for VV, UCP, VTX_KILL, VTX_NAN; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; combined with _CLPR_VVUCP_CULL_PRIM , _CLPR_VV_CULL_PRIM, _VV_CULL_PRIM ,_UCP_CULL_PRIM, _VTX_KILL_CULL_PRIM, _VTX_NAN_CULL_PRIM", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {21, "PA_SU3_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM", "PA_SU3", "PERF_PAPC_CLPR_VVUCP_CLIP_PRIM Number of Prims Clipped by Clipper for VV and/or UCP; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {54, "PA_SU3_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM", "PA_SU3", "PERF_PAPC_SU_ZERO_AREA_CULL_PRIM Number of primitives culled due to zero area; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {55, "PA_SU3_PERF_PAPC_SU_BACK_FACE_CULL_PRIM", "PA_SU3", "PERF_PAPC_SU_BACK_FACE_CULL_PRIM Number of back-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {56, "PA_SU3_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM", "PA_SU3", "PERF_PAPC_SU_FRONT_FACE_CULL_PRIM Number of front-face primitives culled due to facedness; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "PA_SU3_PERF_PAPC_SU_POLYMODE_FACE_CULL", "PA_SU3", "PERF_PAPC_SU_POLYMODE_FACE_CULL Number of polymode cull-determination primitives culled; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {61, "PA_SU3_PERF_PAPC_SU_OUTPUT_PRIM", "PA_SU3", "PERF_PAPC_SU_OUTPUT_PRIM Number of primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {62, "PA_SU3_PERF_PAPC_SU_OUTPUT_CLIP_PRIM", "PA_SU3", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM Number of clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {73, "PA_SU3_PERF_PAPC_SU_OUTPUT_PRIM_DUAL", "PA_SU3", "PERF_PAPC_SU_OUTPUT_PRIM_DUAL Number of dual gradient primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {74, "PA_SU3_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL", "PA_SU3", "PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock ; range-1/clk;it does not indicate bad performance; no bottleneck detection;all instances report the same result; no combinations", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {105, "PA_SU3_PERF_PAPC_CLIP_BUSY", "PA_SU3", "PERF_PAPC_CLIP_BUSY Number of clocks Clip is Busy; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result; can be used to detect bottlenecks in combination with other signals", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {109, "PA_SU3_PERF_PAPC_SU_STALLED_SC", "PA_SU3", "PERF_PAPC_SU_STALLED_SC Number of clocks Setup is stalled by SC; range-1/clk;it can potentially be used to detect bad performance;all instances report the same result", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc0CountersGfx9_gfx904 = {
        {159, "PA_SC0_QZ0_QUAD_COUNT", "PA_SC0", "quad count; quad-z pipe 0;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0;increment rate-one to 16  per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "PA_SC0_QZ1_QUAD_COUNT", "PA_SC0", "quad count; quad-z pipe 1;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 1;increment rate-one to 16 per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "PA_SC0_QZ2_QUAD_COUNT", "PA_SC0", "quad count; quad-z pipe 2 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "PA_SC0_QZ3_QUAD_COUNT", "PA_SC0", "quad count; quad-z pipe 3 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC0_P0_HIZ_QUAD_COUNT", "PA_SC0", "total quads surviving hi-z; db pipe 0;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {236, "PA_SC0_P1_HIZ_QUAD_COUNT", "PA_SC0", "total quads surviving hi-z; db pipe 1;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {237, "PA_SC0_P2_HIZ_QUAD_COUNT", "PA_SC0", "total quads surviving hi-z; db pipe 2 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {238, "PA_SC0_P3_HIZ_QUAD_COUNT", "PA_SC0", "total quads surviving hi-z; db pipe 3 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC0_EARLYZ_QUAD_COUNT", "PA_SC0", "total quads surviving early-z;Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer;increment rate 1 to 2 quads per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc1CountersGfx9_gfx904 = {
        {159, "PA_SC1_QZ0_QUAD_COUNT", "PA_SC1", "quad count; quad-z pipe 0;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0;increment rate-one to 16  per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "PA_SC1_QZ1_QUAD_COUNT", "PA_SC1", "quad count; quad-z pipe 1;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 1;increment rate-one to 16 per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "PA_SC1_QZ2_QUAD_COUNT", "PA_SC1", "quad count; quad-z pipe 2 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "PA_SC1_QZ3_QUAD_COUNT", "PA_SC1", "quad count; quad-z pipe 3 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC1_P0_HIZ_QUAD_COUNT", "PA_SC1", "total quads surviving hi-z; db pipe 0;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {236, "PA_SC1_P1_HIZ_QUAD_COUNT", "PA_SC1", "total quads surviving hi-z; db pipe 1;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {237, "PA_SC1_P2_HIZ_QUAD_COUNT", "PA_SC1", "total quads surviving hi-z; db pipe 2 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {238, "PA_SC1_P3_HIZ_QUAD_COUNT", "PA_SC1", "total quads surviving hi-z; db pipe 3 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC1_EARLYZ_QUAD_COUNT", "PA_SC1", "total quads surviving early-z;Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer;increment rate 1 to 2 quads per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc2CountersGfx9_gfx904 = {
        {159, "PA_SC2_QZ0_QUAD_COUNT", "PA_SC2", "quad count; quad-z pipe 0;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0;increment rate-one to 16  per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "PA_SC2_QZ1_QUAD_COUNT", "PA_SC2", "quad count; quad-z pipe 1;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 1;increment rate-one to 16 per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "PA_SC2_QZ2_QUAD_COUNT", "PA_SC2", "quad count; quad-z pipe 2 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "PA_SC2_QZ3_QUAD_COUNT", "PA_SC2", "quad count; quad-z pipe 3 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC2_P0_HIZ_QUAD_COUNT", "PA_SC2", "total quads surviving hi-z; db pipe 0;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {236, "PA_SC2_P1_HIZ_QUAD_COUNT", "PA_SC2", "total quads surviving hi-z; db pipe 1;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {237, "PA_SC2_P2_HIZ_QUAD_COUNT", "PA_SC2", "total quads surviving hi-z; db pipe 2 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {238, "PA_SC2_P3_HIZ_QUAD_COUNT", "PA_SC2", "total quads surviving hi-z; db pipe 3 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC2_EARLYZ_QUAD_COUNT", "PA_SC2", "total quads surviving early-z;Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer;increment rate 1 to 2 quads per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kPaSc3CountersGfx9_gfx904 = {
        {159, "PA_SC3_QZ0_QUAD_COUNT", "PA_SC3", "quad count; quad-z pipe 0;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 0;increment rate-one to 16  per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {160, "PA_SC3_QZ1_QUAD_COUNT", "PA_SC3", "quad count; quad-z pipe 1;Where measured: sc sc_qdmsk_z output to sc_z_interp in db pipe 1;increment rate-one to 16 per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {161, "PA_SC3_QZ2_QUAD_COUNT", "PA_SC3", "quad count; quad-z pipe 2 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {162, "PA_SC3_QZ3_QUAD_COUNT", "PA_SC3", "quad count; quad-z pipe 3 DEPRECATED (NUM_DB_PER_PACKER=4 variants only)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {235, "PA_SC3_P0_HIZ_QUAD_COUNT", "PA_SC3", "total quads surviving hi-z; db pipe 0;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1;", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {236, "PA_SC3_P1_HIZ_QUAD_COUNT", "PA_SC3", "total quads surviving hi-z; db pipe 1;Where measured: sc sc_quad_proc usc_tile_mask_return_fifo in db pipe 1;increment rate-one per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1. Valid only if NUM_DB_PER_PACKER=2", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {237, "PA_SC3_P2_HIZ_QUAD_COUNT", "PA_SC3", "total quads surviving hi-z; db pipe 2 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {238, "PA_SC3_P3_HIZ_QUAD_COUNT", "PA_SC3", "total quads surviving hi-z; db pipe 3 (DEPRECATED only valid for NUM_DB_PER_PACKER=4)", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {259, "PA_SC3_EARLYZ_QUAD_COUNT", "PA_SC3", "total quads surviving early-z;Where measured: sc_tileaccum (sc_quadaccum if 1db per packer) inputs to packer;increment rate 1 to 2 quads per clock;range-1/clk;CONTEXT_STATE_SENSITIVE=YES;Results reported per SE, INSTANCE_INDEX=0 to num_packer_per_sc-1.", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea0CountersGfx9_gfx904 = {
        {55, "GCEA0_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA0", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA0_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA0", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea1CountersGfx9_gfx904 = {
        {55, "GCEA1_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA1", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA1_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA1", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea2CountersGfx9_gfx904 = {
        {55, "GCEA2_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA2", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA2_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA2", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea3CountersGfx9_gfx904 = {
        {55, "GCEA3_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA3", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA3_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA3", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea4CountersGfx9_gfx904 = {
        {55, "GCEA4_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA4", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA4_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA4", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea5CountersGfx9_gfx904 = {
        {55, "GCEA5_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA5", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA5_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA5", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea6CountersGfx9_gfx904 = {
        {55, "GCEA6_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA6", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA6_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA6", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea7CountersGfx9_gfx904 = {
        {55, "GCEA7_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA7", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA7_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA7", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea8CountersGfx9_gfx904 = {
        {55, "GCEA8_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA8", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA8_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA8", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea9CountersGfx9_gfx904 = {
        {55, "GCEA9_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA9", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA9_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA9", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea10CountersGfx9_gfx904 = {
        {55, "GCEA10_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA10", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA10_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA10", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea11CountersGfx9_gfx904 = {
        {55, "GCEA11_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA11", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA11_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA11", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea12CountersGfx9_gfx904 = {
        {55, "GCEA12_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA12", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA12_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA12", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea13CountersGfx9_gfx904 = {
        {55, "GCEA13_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA13", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA13_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA13", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea14CountersGfx9_gfx904 = {
        {55, "GCEA14_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA14", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA14_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA14", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea15CountersGfx9_gfx904 = {
        {55, "GCEA15_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA15", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA15_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA15", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea16CountersGfx9_gfx904 = {
        {55, "GCEA16_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA16", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA16_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA16", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea17CountersGfx9_gfx904 = {
        {55, "GCEA17_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA17", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA17_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA17", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea18CountersGfx9_gfx904 = {
        {55, "GCEA18_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA18", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA18_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA18", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea19CountersGfx9_gfx904 = {
        {55, "GCEA19_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA19", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA19_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA19", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea20CountersGfx9_gfx904 = {
        {55, "GCEA20_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA20", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA20_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA20", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea21CountersGfx9_gfx904 = {
        {55, "GCEA21_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA21", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA21_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA21", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea22CountersGfx9_gfx904 = {
        {55, "GCEA22_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA22", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA22_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA22", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea23CountersGfx9_gfx904 = {
        {55, "GCEA23_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA23", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA23_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA23", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea24CountersGfx9_gfx904 = {
        {55, "GCEA24_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA24", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA24_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA24", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea25CountersGfx9_gfx904 = {
        {55, "GCEA25_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA25", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA25_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA25", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea26CountersGfx9_gfx904 = {
        {55, "GCEA26_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA26", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA26_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA26", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea27CountersGfx9_gfx904 = {
        {55, "GCEA27_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA27", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA27_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA27", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea28CountersGfx9_gfx904 = {
        {55, "GCEA28_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA28", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA28_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA28", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea29CountersGfx9_gfx904 = {
        {55, "GCEA29_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA29", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA29_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA29", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea30CountersGfx9_gfx904 = {
        {55, "GCEA30_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA30", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA30_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA30", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
    std::vector<GpaHardwareCounterDesc> kGcea31CountersGfx9_gfx904 = {
        {55, "GCEA31_PERF_SEL_SARB_DRAM_SIZED_REQUESTS", "GCEA31", "DRAM sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
        {57, "GCEA31_PERF_SEL_SARB_IO_SIZED_REQUESTS", "GCEA31", "I/O sized (in 32 byte increments) requests", kGpaDataTypeUint64, 0, GPA_UINT64_MAX},
    };
} // counter_gfx9_gfx904

// clang-format on
