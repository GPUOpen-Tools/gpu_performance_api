//==============================================================================
// Copyright (c) 2010-2021 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief DX11 counter definitions for GFX10.
//==============================================================================

// This file is autogenerated by the ConvertHWEnums project.

#ifndef GPA_AUTO_GENERATED_GPU_PERF_API_COUNTER_GENERATOR_GPA_HW_COUNTER_DX11_GFX10_H_
#define GPA_AUTO_GENERATED_GPU_PERF_API_COUNTER_GENERATOR_GPA_HW_COUNTER_DX11_GFX10_H_

// clang-format off

#include <windows.h>
#include <AmdDxExtPerfProfile.h>

#include <set>

struct GpaHardwareCounterDesc;
struct GpaCounterGroupDesc;
struct GpaSqCounterGroupDesc;

namespace counter_dx11_gfx10
{
    extern GpaHardwareCounterDesc*           kDx11CounterGroupArrayGfx10[]; ///< Array of hardware counter groups for Dx11 for Gfx10 family
    extern GpaHardwareCounterDesc*           kDx11ExposedCountersGroupArrayGfx10[]; ///< Array of hardware exposed counter groups for Dx11 for Gfx10 family
    extern GpaCounterGroupDesc               kHwDx11GroupsGfx10[]; ///< Array of counter groups for Dx11 for Gfx10 family
    extern GpaCounterGroupExposedCounterDesc kHwDx11ExposedCountersByGroupGfx10[]; ///< Array of exposed counter groups for Dx11 for Gfx10 family
    extern GpaPaddedCounterDesc              kDx11PaddedCounterByGroupGfx10[]; ///< Array of reserved counter for Dx11 for Gfx10 family
    extern GpaSqCounterGroupDesc             kHwDx11SqGroupsGfx10[]; ///< Array of SQ groups for Dx11 for Gfx10 family
    extern unsigned int                       kHwDx11SqIsolatedGroupsGfx10[]; ///< Array of counter groups isolated from SQ counter groups for Dx11 for Gfx10 family
    extern PE_BLOCK_ID kHwDx11DriverEnumGfx10[]; ///< Array of driver enum values per group for Dx11 for Gfx10 family
    extern const unsigned int                 kHwDx11GpuTimeBottomToBottomDurationIndexGfx10; ///< Index of delta between the previous command reaching bottom of pipe and the current command reaching bottom of pipe, will not include latency of first data to travel through pipeline, best for large data sets. for Dx11 for Gfx10 family
    extern const unsigned int                 kHwDx11GpuTimeBottomToBottomStartIndexGfx10; ///< Index of time of the previous command reaching bottom of pipe for Dx11 for Gfx10 family
    extern const unsigned int                 kHwDx11GpuTimeBottomToBottomEndIndexGfx10; ///< Index of time of the current command reaching bottom of pipe for Dx11 for Gfx10 family
    extern const unsigned int                 kHwDx11GpuTimeTopToBottomDurationIndexGfx10; ///< Index of execution duration of the current command from top of pipe to bottom of pipe, may include overhead of time in queue for Dx11 for Gfx10 family
    extern const unsigned int                 kHwDx11GpuTimeTopToBottomStartIndexGfx10; ///< Index of time that the current command reaches the top of pipe for Dx11 for Gfx10 family
    extern const unsigned int                 kHwDx11GpuTimeTopToBottomEndIndexGfx10; ///< Index of time that the current command reaches the bottom of pipe for Dx11 for Gfx10 family
    extern const std::set<unsigned int>       kHwDx11TimestampBlockIdsGfx10; ///< Timestamp block id's for Dx11 for Gfx10 family
    extern const std::set<unsigned int>       kHwDx11TimeCounterIndicesGfx10; ///< Timestamp counter indices for Dx11 for Gfx10 family
    extern const unsigned int                 kHwDx11GroupCountGfx10; ///< Hardware Group Count for Dx11 for Gfx10 family
    extern const unsigned int                 kHwDx11ExposedCountersGroupCountGfx10; ///< Whitelist hardware counter Group Count for Dx11 for Gfx10 family
    extern const unsigned int                 kDx11PaddedCounterGroupCountGfx10; ///< reserved counter group count for Dx11 for Gfx10 family
    extern const unsigned int                 kHwDx11SqGroupCountGfx10; ///< Hardware SQ Group Count for Dx11 for Gfx10 family
    extern const unsigned int                 kHwDx11SqIsolatedGroupCountGfx10; ///< Hardware Isolated Group Count for Dx11 for Gfx10 family

/// @brief If the requested ASIC type is supported, then the global GPU generation block instance counters are updated.
///
/// @param [in] asic_type The ASIC type that is currently in use.
///
/// @return True if the ASIC is matched by this file and block instances are updated, otherwise false.
inline bool OverrideMaxBlockEvents(GDT_HW_ASIC_TYPE asic_type)
{
    UNREFERENCED_PARAMETER(asic_type);


    return true;
}
} //  namespace counter_dx11_gfx10

// clang-format on

#endif  // GPA_AUTO_GENERATED_GPU_PERF_API_COUNTER_GENERATOR_GPA_HW_COUNTER_DX11_GFX10_H_
