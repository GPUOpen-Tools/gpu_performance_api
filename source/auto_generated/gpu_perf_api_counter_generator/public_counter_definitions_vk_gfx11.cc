//==============================================================================
// Copyright (c) 2010-2025 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief Public Counter Definitions for VK GFX11.
//==============================================================================

#include <array>
#include "gpu_perf_api_common/gpa_array_view.hpp"
// clang-format off
#include "gpu_perf_api_counter_generator/gpa_counter.h"
#include "auto_generated/gpu_perf_api_counter_generator/public_counter_definitions_vk_gfx11.h"

// *** Note, this is an auto-generated file. Do not edit. Execute PublicCounterCompiler to rebuild.

void AutoDefinePublicDerivedCountersVkGfx11(GpaDerivedCounters& c)
{
    { // Index:0
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                237514,
        };
        c.DefineDerivedCounter("GPUTime",
                               "Timing",
                               "Time this API command took to execute on the GPU in nanoseconds from the time the previous command reached the bottom of the pipeline (BOP) to the time this command reaches the bottom of the pipeline (BOP). Does not include time that draw calls are processed in parallel.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "0,TS_FREQ,/,(1000000000),*",
                               "cbd338f2-de6c-7b14-92ad-ba724ca2e501");
    }
    { // Index:1
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                237517,
        };
        c.DefineDerivedCounter("ExecutionDuration",
                               "Timing",
                               "GPU command execution duration in nanoseconds, from the time the command enters the top of the pipeline (TOP) to the time the command reaches the bottom of the pipeline (BOP). Does not include time that draw calls are processed in parallel.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "0,TS_FREQ,/,(1000000000),*",
                               "b2f08d0d-af13-cd66-d3b4-b290ad448e69");
    }
    { // Index:2
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                237518,
        };
        c.DefineDerivedCounter("ExecutionStart",
                               "Timing",
                               "GPU command execution start time in nanoseconds. This is the time the command enters the top of the pipeline (TOP).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "0,TS_FREQ,/,(1000000000),*",
                               "a368f79d-fcfe-2158-71c4-2f0c4eef5aa4");
    }
    { // Index:3
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                237519,
        };
        c.DefineDerivedCounter("ExecutionEnd",
                               "Timing",
                               "GPU command execution end time in nanoseconds. This is the time the command reaches the bottom of the pipeline (BOP).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "0,TS_FREQ,/,(1000000000),*",
                               "0bce206a-0976-06a2-bf20-03fb351035a8");
    }
    { // Index:4
        static constexpr std::array<GpaUInt32, 2> kHardwareCounters = {
                24,
                0,
        };
        c.DefineDerivedCounter("GPUBusy",
                               "Timing",
                               "The percentage of time the GPU command processor was busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,/,(100),*,(100),min",
                               "b1ba5363-1abc-fe66-2fdd-1fe6ee8989a0");
    }
    { // Index:5
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                24,
        };
        c.DefineDerivedCounter("GPUBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the GPU command processor was busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0",
                               "451cb045-23af-ac44-4603-d5832fa041d9");
    }
    { // Index:6
        static constexpr std::array<GpaUInt32, 2> kHardwareCounters = {
                113762,
                24,
        };
        c.DefineDerivedCounter("TessellatorBusy",
                               "Timing",
                               "The percentage of time the tessellation engine is busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,/,(100),*",
                               "36af6c72-dcfb-8102-4fd4-ce8ddc573365");
    }
    { // Index:7
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                113762,
        };
        c.DefineDerivedCounter("TessellatorBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the tessellation engine is busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0",
                               "60289dcb-7b33-46e7-26d1-8a2121605543");
    }
    { // Index:8
        static constexpr std::array<GpaUInt32, 13> kHardwareCounters = {
                18112,
                18396,
                18680,
                18964,
                19248,
                19532,
                18137,
                18421,
                18705,
                18989,
                19273,
                19557,
                24,
        };
        c.DefineDerivedCounter("VsGsBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has VS or GS work to do in a VS-[GS-]PS pipeline.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,max6,(0),6,7,8,9,10,11,sum6,ifnotzero,12,/,(100),*,(100),min",
                               "969c41c7-eb0b-9706-a7a1-98f27c3af56b");
    }
    { // Index:9
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                18112,
                18396,
                18680,
                18964,
                19248,
                19532,
                18137,
                18421,
                18705,
                18989,
                19273,
                19557,
        };
        c.DefineDerivedCounter("VsGsBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has VS or GS work to do in a VS-[GS-]PS pipeline.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,max6,(0),6,7,8,9,10,11,sum6,ifnotzero",
                               "a8420bb7-6bd8-930a-9088-d73b9c039851");
    }
    { // Index:10
        static constexpr std::array<GpaUInt32, 14> kHardwareCounters = {
                237514,
                18112,
                18396,
                18680,
                18964,
                19248,
                19532,
                18137,
                18421,
                18705,
                18989,
                19273,
                19557,
                24,
        };
        c.DefineDerivedCounter("VsGsTime",
                               "Timing",
                               "Time VS or GS are busy in nanoseconds in a VS-[GS-]PS pipeline.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "1,2,3,4,5,6,max6,(0),7,8,9,10,11,12,sum6,ifnotzero,13,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "3ce33b11-210d-b3de-9b6c-b9f3cd04beff");
    }
    { // Index:11
        static constexpr std::array<GpaUInt32, 13> kHardwareCounters = {
                18132,
                18416,
                18700,
                18984,
                19268,
                19552,
                18137,
                18421,
                18705,
                18989,
                19273,
                19557,
                24,
        };
        c.DefineDerivedCounter("PreTessellationBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has VS and HS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,max6,6,7,8,9,10,11,sum6,ifnotzero,12,/,(100),*,(100),min",
                               "346c7430-4666-7065-b5b7-1cb8cbb1c01c");
    }
    { // Index:12
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                18132,
                18416,
                18700,
                18984,
                19268,
                19552,
                18137,
                18421,
                18705,
                18989,
                19273,
                19557,
        };
        c.DefineDerivedCounter("PreTessellationBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has VS and HS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,max6,6,7,8,9,10,11,sum6,ifnotzero",
                               "dac68e38-0e3a-9364-2674-308e63bee2d2");
    }
    { // Index:13
        static constexpr std::array<GpaUInt32, 14> kHardwareCounters = {
                237514,
                18132,
                18416,
                18700,
                18984,
                19268,
                19552,
                18137,
                18421,
                18705,
                18989,
                19273,
                19557,
                24,
        };
        c.DefineDerivedCounter("PreTessellationTime",
                               "Timing",
                               "Time VS and HS are busy in nanoseconds in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),1,2,3,4,5,6,max6,7,8,9,10,11,12,sum6,ifnotzero,13,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "d5e6c54c-5ffb-b173-6118-bece61f0281c");
    }
    { // Index:14
        static constexpr std::array<GpaUInt32, 13> kHardwareCounters = {
                18112,
                18396,
                18680,
                18964,
                19248,
                19532,
                18137,
                18421,
                18705,
                18989,
                19273,
                19557,
                24,
        };
        c.DefineDerivedCounter("PostTessellationBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has DS or GS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,max6,6,7,8,9,10,11,sum6,ifnotzero,12,/,(100),*,(100),min",
                               "1a275c68-9340-f358-71c6-a2648390381d");
    }
    { // Index:15
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                18112,
                18396,
                18680,
                18964,
                19248,
                19532,
                18137,
                18421,
                18705,
                18989,
                19273,
                19557,
        };
        c.DefineDerivedCounter("PostTessellationBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has DS or GS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,max6,6,7,8,9,10,11,sum6,ifnotzero",
                               "a5ed943b-13ef-942b-56fb-6d519eeb7337");
    }
    { // Index:16
        static constexpr std::array<GpaUInt32, 14> kHardwareCounters = {
                237514,
                18112,
                18396,
                18680,
                18964,
                19248,
                19532,
                18137,
                18421,
                18705,
                18989,
                19273,
                19557,
                24,
        };
        c.DefineDerivedCounter("PostTessellationTime",
                               "Timing",
                               "Time DS or GS are busy in nanoseconds in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),1,2,3,4,5,6,max6,7,8,9,10,11,12,sum6,ifnotzero,13,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "9f8dfa40-faee-2014-3467-2630a7d95c1e");
    }
    { // Index:17
        static constexpr std::array<GpaUInt32, 49> kHardwareCounters = {
                18167,
                18451,
                18735,
                19019,
                19303,
                19587,
                18183,
                18467,
                18751,
                19035,
                19319,
                19603,
                18168,
                18452,
                18736,
                19020,
                19304,
                19588,
                18184,
                18468,
                18752,
                19036,
                19320,
                19604,
                18169,
                18453,
                18737,
                19021,
                19305,
                19589,
                18185,
                18469,
                18753,
                19037,
                19321,
                19605,
                18170,
                18454,
                18738,
                19022,
                19306,
                19590,
                18186,
                18470,
                18754,
                19038,
                19322,
                19606,
                24,
        };
        c.DefineDerivedCounter("PSBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has pixel shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,max6,6,7,8,9,10,11,sum6,ifnotzero,(0),12,13,14,15,16,17,max6,18,19,20,21,22,23,sum6,ifnotzero,(0),24,25,26,27,28,29,max6,30,31,32,33,34,35,sum6,ifnotzero,(0),36,37,38,39,40,41,max6,42,43,44,45,46,47,sum6,ifnotzero,max4,48,/,(100),*,(100),min",
                               "7e772beb-d82c-bd9a-aed0-fe504d416ce5");
    }
    { // Index:18
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                18167,
                18451,
                18735,
                19019,
                19303,
                19587,
                18183,
                18467,
                18751,
                19035,
                19319,
                19603,
                18168,
                18452,
                18736,
                19020,
                19304,
                19588,
                18184,
                18468,
                18752,
                19036,
                19320,
                19604,
                18169,
                18453,
                18737,
                19021,
                19305,
                19589,
                18185,
                18469,
                18753,
                19037,
                19321,
                19605,
                18170,
                18454,
                18738,
                19022,
                19306,
                19590,
                18186,
                18470,
                18754,
                19038,
                19322,
                19606,
        };
        c.DefineDerivedCounter("PSBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has pixel shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,max6,6,7,8,9,10,11,sum6,ifnotzero,(0),12,13,14,15,16,17,max6,18,19,20,21,22,23,sum6,ifnotzero,(0),24,25,26,27,28,29,max6,30,31,32,33,34,35,sum6,ifnotzero,(0),36,37,38,39,40,41,max6,42,43,44,45,46,47,sum6,ifnotzero,max4",
                               "b58bea04-ce8e-2984-80f4-8aba7d4c817b");
    }
    { // Index:19
        static constexpr std::array<GpaUInt32, 50> kHardwareCounters = {
                237514,
                18167,
                18451,
                18735,
                19019,
                19303,
                19587,
                18183,
                18467,
                18751,
                19035,
                19319,
                19603,
                18168,
                18452,
                18736,
                19020,
                19304,
                19588,
                18184,
                18468,
                18752,
                19036,
                19320,
                19604,
                18169,
                18453,
                18737,
                19021,
                19305,
                19589,
                18185,
                18469,
                18753,
                19037,
                19321,
                19605,
                18170,
                18454,
                18738,
                19022,
                19306,
                19590,
                18186,
                18470,
                18754,
                19038,
                19322,
                19606,
                24,
        };
        c.DefineDerivedCounter("PSTime",
                               "Timing",
                               "Time pixel shaders are busy in nanoseconds.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),1,2,3,4,5,6,max6,7,8,9,10,11,12,sum6,ifnotzero,(0),13,14,15,16,17,18,max6,19,20,21,22,23,24,sum6,ifnotzero,(0),25,26,27,28,29,30,max6,31,32,33,34,35,36,sum6,ifnotzero,(0),37,38,39,40,41,42,max6,43,44,45,46,47,48,sum6,ifnotzero,max4,49,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "edca7694-7416-e8a6-0c5a-63a5ad5f3d74");
    }
    { // Index:20
        static constexpr std::array<GpaUInt32, 25> kHardwareCounters = {
                18148,
                18432,
                18716,
                19000,
                19284,
                19568,
                18152,
                18436,
                18720,
                19004,
                19288,
                19572,
                18156,
                18440,
                18724,
                19008,
                19292,
                19576,
                18160,
                18444,
                18728,
                19012,
                19296,
                19580,
                24,
        };
        c.DefineDerivedCounter("CSBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has compute shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,comparemax6,12,13,14,15,16,17,18,19,20,21,22,23,comparemax6,max,24,/,(100),*,(100),min",
                               "493fdd90-8d2b-a055-5e4e-2d29c3396b8c");
    }
    { // Index:21
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                18148,
                18432,
                18716,
                19000,
                19284,
                19568,
                18152,
                18436,
                18720,
                19004,
                19288,
                19572,
                18156,
                18440,
                18724,
                19008,
                19292,
                19576,
                18160,
                18444,
                18728,
                19012,
                19296,
                19580,
        };
        c.DefineDerivedCounter("CSBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has compute shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,comparemax6,12,13,14,15,16,17,18,19,20,21,22,23,comparemax6,max",
                               "39bcf1b8-f6b2-4c37-f9af-0a2bb59512f9");
    }
    { // Index:22
        static constexpr std::array<GpaUInt32, 26> kHardwareCounters = {
                237514,
                18148,
                18432,
                18716,
                19000,
                19284,
                19568,
                18152,
                18436,
                18720,
                19004,
                19288,
                19572,
                18156,
                18440,
                18724,
                19008,
                19292,
                19576,
                18160,
                18444,
                18728,
                19012,
                19296,
                19580,
                24,
        };
        c.DefineDerivedCounter("CSTime",
                               "Timing",
                               "Time compute shaders are busy in nanoseconds.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "1,2,3,4,5,6,7,8,9,10,11,12,comparemax6,13,14,15,16,17,18,19,20,21,22,23,24,comparemax6,max,25,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "dbc24916-ecb2-7eef-8d63-7afadaaab6bc");
    }
    { // Index:23
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                113836,
                113924,
                114012,
                114100,
                114188,
                114276,
                18137,
                18421,
                18705,
                18989,
                19273,
                19557,
        };
        c.DefineDerivedCounter("VsGsVerticesIn",
                               "VertexGeometry",
                               "The number of unique vertices processed by the VS and GS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6,(0),6,7,8,9,10,11,sum6,ifnotzero",
                               "17d0c775-3ed5-affb-d5ac-5391a198a4aa");
    }
    { // Index:24
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                113841,
                113929,
                114017,
                114105,
                114193,
                114281,
                18137,
                18421,
                18705,
                18989,
                19273,
                19557,
        };
        c.DefineDerivedCounter("VsGsPrimsIn",
                               "VertexGeometry",
                               "The number of primitives passed into the GS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6,(0),6,7,8,9,10,11,sum6,ifnotzero",
                               "d9fa5ce8-5329-f5d4-c378-8fbc7e80d9a6");
    }
    { // Index:25
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                113847,
                113935,
                114023,
                114111,
                114199,
                114287,
                18137,
                18421,
                18705,
                18989,
                19273,
                19557,
        };
        c.DefineDerivedCounter("PreTessVerticesIn",
                               "PreTessellation",
                               "The number of unique vertices processed by the VS and HS when using tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,sum6,6,7,8,9,10,11,sum6,ifnotzero",
                               "84145f0c-ff96-0dfb-ffb7-ccf4c9b3f4c4");
    }
    { // Index:26
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                113824,
                113912,
                114000,
                114088,
                114176,
                114264,
                18137,
                18421,
                18705,
                18989,
                19273,
                19557,
        };
        c.DefineDerivedCounter("PostTessPrimsOut",
                               "PostTessellation",
                               "The number of primitives output by the DS and GS when using tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,sum6,6,7,8,9,10,11,sum6,ifnotzero",
                               "d38dabe8-1f13-ea34-d3c1-eb5783b737f1");
    }
    { // Index:27
        static constexpr std::array<GpaUInt32, 37> kHardwareCounters = {
                149,
                460,
                771,
                1082,
                1393,
                1704,
                153,
                464,
                775,
                1086,
                1397,
                1708,
                105,
                416,
                727,
                1038,
                1349,
                1660,
                117,
                428,
                739,
                1050,
                1361,
                1672,
                106,
                417,
                728,
                1039,
                1350,
                1661,
                118,
                429,
                740,
                1051,
                1362,
                1673,
                24,
        };
        c.DefineDerivedCounter("PrimitiveAssemblyBusy",
                               "Timing",
                               "The percentage of GPUTime that primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,vecsub6,SU_CLOCKS_PRIM,12,13,14,15,16,17,18,19,20,21,22,23,vecsum6,24,25,26,27,28,29,vecsum6,(2),30,31,32,33,34,35,scalarmul6,vecsum6,scalarmul6,vecsub6,max6,(0),max,36,/,(100),*,(100),min",
                               "54ac5640-c4d7-95e2-20e0-6a9fdfc07333");
    }
    { // Index:28
        static constexpr std::array<GpaUInt32, 36> kHardwareCounters = {
                149,
                460,
                771,
                1082,
                1393,
                1704,
                153,
                464,
                775,
                1086,
                1397,
                1708,
                105,
                416,
                727,
                1038,
                1349,
                1660,
                117,
                428,
                739,
                1050,
                1361,
                1672,
                106,
                417,
                728,
                1039,
                1350,
                1661,
                118,
                429,
                740,
                1051,
                1362,
                1673,
        };
        c.DefineDerivedCounter("PrimitiveAssemblyBusyCycles",
                               "Timing",
                               "Number of GPU cycles the primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,vecsub6,SU_CLOCKS_PRIM,12,13,14,15,16,17,18,19,20,21,22,23,vecsum6,24,25,26,27,28,29,vecsum6,(2),30,31,32,33,34,35,scalarmul6,vecsum6,scalarmul6,vecsub6,max6,(0),max",
                               "99777f2d-9626-c78a-a97c-c4505eba1e5f");
    }
    { // Index:29
        static constexpr std::array<GpaUInt32, 6> kHardwareCounters = {
                52,
                363,
                674,
                985,
                1296,
                1607,
        };
        c.DefineDerivedCounter("PrimitivesIn",
                               "PrimitiveAssembly",
                               "The number of primitives received by the hardware. This includes primitives generated by tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6",
                               "a515b80d-75c3-c7d2-0d2f-d7766b4759a6");
    }
    { // Index:30
        static constexpr std::array<GpaUInt32, 30> kHardwareCounters = {
                58,
                369,
                680,
                991,
                1302,
                1613,
                98,
                409,
                720,
                1031,
                1342,
                1653,
                99,
                410,
                721,
                1032,
                1343,
                1654,
                100,
                411,
                722,
                1033,
                1344,
                1655,
                101,
                412,
                723,
                1034,
                1345,
                1656,
        };
        c.DefineDerivedCounter("CulledPrims",
                               "PrimitiveAssembly",
                               "The number of culled primitives. Typical reasons include scissor, the primitive having zero area, and back or front face culling.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6,6,7,8,9,10,11,sum6,+,12,13,14,15,16,17,sum6,+,18,19,20,21,22,23,sum6,+,24,25,26,27,28,29,sum6,+",
                               "589bdf55-9192-280a-41c3-584bc94f2562");
    }
    { // Index:31
        static constexpr std::array<GpaUInt32, 6> kHardwareCounters = {
                65,
                376,
                687,
                998,
                1309,
                1620,
        };
        c.DefineDerivedCounter("ClippedPrims",
                               "PrimitiveAssembly",
                               "The number of primitives that required one or more clipping operations due to intersecting the view volume or user clip planes.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6",
                               "5ef6f9d5-155e-5baa-163f-8359d9ea9bbf");
    }
    { // Index:32
        static constexpr std::array<GpaUInt32, 7> kHardwareCounters = {
                153,
                464,
                775,
                1086,
                1397,
                1708,
                24,
        };
        c.DefineDerivedCounter("PAStalledOnRasterizer",
                               "PrimitiveAssembly",
                               "Percentage of GPUTime that primitive assembly waits for rasterization to be ready to accept data. This roughly indicates for what percentage of time the pipeline is bottlenecked by pixel operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,max6,6,/,(100),*",
                               "6f9f416b-53c1-0457-f88c-7b6ba8973974");
    }
    { // Index:33
        static constexpr std::array<GpaUInt32, 6> kHardwareCounters = {
                153,
                464,
                775,
                1086,
                1397,
                1708,
        };
        c.DefineDerivedCounter("PAStalledOnRasterizerCycles",
                               "PrimitiveAssembly",
                               "Number of GPU cycles the primitive assembly waits for rasterization to be ready to accept data. Indicates the number of GPU cycles the pipeline is bottlenecked by pixel operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,max6",
                               "7a8c492a-c566-9328-6805-760dbff5c0f2");
    }
    { // Index:34
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                20936,
                21018,
                21100,
                21182,
                21264,
                21346,
                21428,
                21510,
                21592,
                21674,
                21756,
                21838,
                20941,
                21023,
                21105,
                21187,
                21269,
                21351,
                21433,
                21515,
                21597,
                21679,
                21761,
                21843,
                20946,
                21028,
                21110,
                21192,
                21274,
                21356,
                21438,
                21520,
                21602,
                21684,
                21766,
                21848,
                20951,
                21033,
                21115,
                21197,
                21279,
                21361,
                21443,
                21525,
                21607,
                21689,
                21771,
                21853,
        };
        c.DefineDerivedCounter("PSPixelsOut",
                               "PixelShader",
                               "Pixels exported from shader to color buffers. Does not include killed or alpha tested pixels; if there are multiple render targets, each render target receives one export, so this will be 2 for 1 pixel written to two RTs.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,sum12,12,13,14,15,16,17,18,19,20,21,22,23,sum12,24,25,26,27,28,29,30,31,32,33,34,35,sum12,36,37,38,39,40,41,42,43,44,45,46,47,sum12,sum4",
                               "24cba16c-baa6-6ecd-95ad-92ecb1338da1");
    }
    { // Index:35
        static constexpr std::array<GpaUInt32, 49> kHardwareCounters = {
                20938,
                21020,
                21102,
                21184,
                21266,
                21348,
                21430,
                21512,
                21594,
                21676,
                21758,
                21840,
                20943,
                21025,
                21107,
                21189,
                21271,
                21353,
                21435,
                21517,
                21599,
                21681,
                21763,
                21845,
                20948,
                21030,
                21112,
                21194,
                21276,
                21358,
                21440,
                21522,
                21604,
                21686,
                21768,
                21850,
                20953,
                21035,
                21117,
                21199,
                21281,
                21363,
                21445,
                21527,
                21609,
                21691,
                21773,
                21855,
                24,
        };
        c.DefineDerivedCounter("PSExportStalls",
                               "PixelShader",
                               "Pixel shader output stalls. Percentage of GPUBusy. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the color buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,max12,12,13,14,15,16,17,18,19,20,21,22,23,max12,24,25,26,27,28,29,30,31,32,33,34,35,36,37,max12,38,39,40,41,42,43,44,45,46,47,max12,max4,48,/,(100),*",
                               "9b4f466c-ff97-22bb-557d-84d3c4c51895");
    }
    { // Index:36
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                20938,
                21020,
                21102,
                21184,
                21266,
                21348,
                21430,
                21512,
                21594,
                21676,
                21758,
                21840,
                20943,
                21025,
                21107,
                21189,
                21271,
                21353,
                21435,
                21517,
                21599,
                21681,
                21763,
                21845,
                20948,
                21030,
                21112,
                21194,
                21276,
                21358,
                21440,
                21522,
                21604,
                21686,
                21768,
                21850,
                20953,
                21035,
                21117,
                21199,
                21281,
                21363,
                21445,
                21527,
                21609,
                21691,
                21773,
                21855,
        };
        c.DefineDerivedCounter("PSExportStallsCycles",
                               "PixelShader",
                               "Number of GPU cycles the pixel shader output stalls. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the color buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,max12,12,13,14,15,16,17,18,19,20,21,22,23,max12,24,25,26,27,28,29,30,31,32,33,34,35,36,37,max12,38,39,40,41,42,43,44,45,46,47,max12,max4",
                               "47c72aad-64e6-0864-d533-d8e0bc27c156");
    }
    { // Index:37
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                18149,
                18433,
                18717,
                19001,
                19285,
                19569,
                18157,
                18441,
                18725,
                19009,
                19293,
                19577,
        };
        c.DefineDerivedCounter("CSThreadGroupsLaunched",
                               "ComputeShader",
                               "The total number of thread groups launched.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6,6,7,8,9,10,11,sum6,+",
                               "9813b379-9095-5a24-8e13-4521ebfe0880");
    }
    { // Index:38
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                18152,
                18436,
                18720,
                19004,
                19288,
                19572,
                18160,
                18444,
                18728,
                19012,
                19296,
                19580,
        };
        c.DefineDerivedCounter("CSWavefrontsLaunched",
                               "ComputeShader",
                               "The total number of wavefronts launched for the CS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6,6,7,8,9,10,11,sum6,+",
                               "00c49129-6ae5-f6a0-1753-4738cbe17938");
    }
    { // Index:39
        static constexpr std::array<GpaUInt32, 6> kHardwareCounters = {
                20726,
                20763,
                20800,
                20837,
                20874,
                20911,
        };
        c.DefineDerivedCounter("CSThreadsLaunched",
                               "ComputeShader",
                               "The number of CS threads launched and processed by the hardware.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,sum6",
                               "cbbbf1ba-d164-1c90-9df0-6120c1660fb1");
    }
    { // Index:40
        static constexpr std::array<GpaUInt32, 18> kHardwareCounters = {
                20726,
                20763,
                20800,
                20837,
                20874,
                20911,
                18149,
                18433,
                18717,
                19001,
                19285,
                19569,
                18157,
                18441,
                18725,
                19009,
                19293,
                19577,
        };
        c.DefineDerivedCounter("CSThreadGroupSize",
                               "ComputeShader",
                               "The number of CS threads within each thread group.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,sum6,6,7,8,9,10,11,sum6,12,13,14,15,16,17,sum6,+,/,6,7,8,9,10,11,sum6,12,13,14,15,16,17,sum6,+,ifnotzero",
                               "8c65008a-9957-7ca6-4199-f6fe940420f6");
    }
    { // Index:41
        static constexpr std::array<GpaUInt32, 97> kHardwareCounters = {
                212685,
                213197,
                213709,
                214221,
                214733,
                215245,
                215757,
                216269,
                216781,
                217293,
                217805,
                218317,
                218829,
                219341,
                219853,
                220365,
                220877,
                221389,
                221901,
                222413,
                222925,
                223437,
                223949,
                224461,
                224973,
                225485,
                225997,
                226509,
                227021,
                227533,
                228045,
                228557,
                229069,
                229581,
                230093,
                230605,
                231117,
                231629,
                232141,
                232653,
                233165,
                233677,
                234189,
                234701,
                235213,
                235725,
                236237,
                236749,
                212660,
                213172,
                213684,
                214196,
                214708,
                215220,
                215732,
                216244,
                216756,
                217268,
                217780,
                218292,
                218804,
                219316,
                219828,
                220340,
                220852,
                221364,
                221876,
                222388,
                222900,
                223412,
                223924,
                224436,
                224948,
                225460,
                225972,
                226484,
                226996,
                227508,
                228020,
                228532,
                229044,
                229556,
                230068,
                230580,
                231092,
                231604,
                232116,
                232628,
                233140,
                233652,
                234164,
                234676,
                235188,
                235700,
                236212,
                236724,
                24,
        };
        c.DefineDerivedCounter("CSALUStalledByLDS",
                               "ComputeShader",
                               "The average percentage of GPUTime each wavefronts' ALU units are stalled by the LDS input queue being full or the output queue being not ready. If there are LDS bank conflicts, reduce them. Otherwise, try reducing the number of LDS accesses if possible. Value range: 0% (optimal) to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,/,96,/,(100),*",
                               "c31b924a-dbf3-ba89-155f-dbbdd4c51f32");
    }
    { // Index:42
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                212685,
                213197,
                213709,
                214221,
                214733,
                215245,
                215757,
                216269,
                216781,
                217293,
                217805,
                218317,
                218829,
                219341,
                219853,
                220365,
                220877,
                221389,
                221901,
                222413,
                222925,
                223437,
                223949,
                224461,
                224973,
                225485,
                225997,
                226509,
                227021,
                227533,
                228045,
                228557,
                229069,
                229581,
                230093,
                230605,
                231117,
                231629,
                232141,
                232653,
                233165,
                233677,
                234189,
                234701,
                235213,
                235725,
                236237,
                236749,
                212660,
                213172,
                213684,
                214196,
                214708,
                215220,
                215732,
                216244,
                216756,
                217268,
                217780,
                218292,
                218804,
                219316,
                219828,
                220340,
                220852,
                221364,
                221876,
                222388,
                222900,
                223412,
                223924,
                224436,
                224948,
                225460,
                225972,
                226484,
                226996,
                227508,
                228020,
                228532,
                229044,
                229556,
                230068,
                230580,
                231092,
                231604,
                232116,
                232628,
                233140,
                233652,
                234164,
                234676,
                235188,
                235700,
                236212,
                236724,
        };
        c.DefineDerivedCounter("CSALUStalledByLDSCycles",
                               "ComputeShader",
                               "The average number of GPU cycles each wavefronts' ALU units are stalled by the LDS input queue being full or the output queue being not ready. If there are LDS bank conflicts, reduce them. Otherwise, try reducing the number of LDS accesses if possible. Value range: 0% (optimal) to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,/",
                               "b03dc079-e12b-5402-257f-ba583d77cdeb");
    }
    { // Index:43
        static constexpr std::array<GpaUInt32, 49> kHardwareCounters = {
                212912,
                213424,
                213936,
                214448,
                214960,
                215472,
                215984,
                216496,
                217008,
                217520,
                218032,
                218544,
                219056,
                219568,
                220080,
                220592,
                221104,
                221616,
                222128,
                222640,
                223152,
                223664,
                224176,
                224688,
                225200,
                225712,
                226224,
                226736,
                227248,
                227760,
                228272,
                228784,
                229296,
                229808,
                230320,
                230832,
                231344,
                231856,
                232368,
                232880,
                233392,
                233904,
                234416,
                234928,
                235440,
                235952,
                236464,
                236976,
                24,
        };
        c.DefineDerivedCounter("CSLDSBankConflict",
                               "ComputeShader",
                               "The average percentage of GPUTime an LDS is stalled due to bank conflicts. Value range: 0% (optimal) to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,NUM_SIMDS,/,48,/,(100),*",
                               "5be87034-b768-ebaf-ba27-585790259ee8");
    }
    { // Index:44
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                212912,
                213424,
                213936,
                214448,
                214960,
                215472,
                215984,
                216496,
                217008,
                217520,
                218032,
                218544,
                219056,
                219568,
                220080,
                220592,
                221104,
                221616,
                222128,
                222640,
                223152,
                223664,
                224176,
                224688,
                225200,
                225712,
                226224,
                226736,
                227248,
                227760,
                228272,
                228784,
                229296,
                229808,
                230320,
                230832,
                231344,
                231856,
                232368,
                232880,
                233392,
                233904,
                234416,
                234928,
                235440,
                235952,
                236464,
                236976,
        };
        c.DefineDerivedCounter("CSLDSBankConflictCycles",
                               "ComputeShader",
                               "The average number of GPU cycles an LDS is stalled by bank conflicts. Value range: 0 (optimal) to GPUBusyCycles (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,NUM_SIMDS,/",
                               "63f2f701-1c1a-efb5-d3c1-06dfb033d608");
    }
    { // Index:45
        static constexpr std::array<GpaUInt32, 97> kHardwareCounters = {
                21923,
                22159,
                22395,
                22631,
                22867,
                23103,
                23339,
                23575,
                23811,
                24047,
                24283,
                24519,
                24755,
                24991,
                25227,
                25463,
                25699,
                25935,
                26171,
                26407,
                26643,
                26879,
                27115,
                27351,
                27587,
                27823,
                28059,
                28295,
                28531,
                28767,
                29003,
                29239,
                29475,
                29711,
                29947,
                30183,
                30419,
                30655,
                30891,
                31127,
                31363,
                31599,
                31835,
                32071,
                32307,
                32543,
                32779,
                33015,
                33251,
                33487,
                33723,
                33959,
                34195,
                34431,
                34667,
                34903,
                35139,
                35375,
                35611,
                35847,
                36083,
                36319,
                36555,
                36791,
                37027,
                37263,
                37499,
                37735,
                37971,
                38207,
                38443,
                38679,
                38915,
                39151,
                39387,
                39623,
                39859,
                40095,
                40331,
                40567,
                40803,
                41039,
                41275,
                41511,
                41747,
                41983,
                42219,
                42455,
                42691,
                42927,
                43163,
                43399,
                43635,
                43871,
                44107,
                44343,
                24,
        };
        c.DefineDerivedCounter("TexUnitBusy",
                               "Timing",
                               "The percentage of GPUTime the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96,96,/,(100),*",
                               "36afb8d9-42fc-aafe-66c5-449542153b2c");
    }
    { // Index:46
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                21923,
                22159,
                22395,
                22631,
                22867,
                23103,
                23339,
                23575,
                23811,
                24047,
                24283,
                24519,
                24755,
                24991,
                25227,
                25463,
                25699,
                25935,
                26171,
                26407,
                26643,
                26879,
                27115,
                27351,
                27587,
                27823,
                28059,
                28295,
                28531,
                28767,
                29003,
                29239,
                29475,
                29711,
                29947,
                30183,
                30419,
                30655,
                30891,
                31127,
                31363,
                31599,
                31835,
                32071,
                32307,
                32543,
                32779,
                33015,
                33251,
                33487,
                33723,
                33959,
                34195,
                34431,
                34667,
                34903,
                35139,
                35375,
                35611,
                35847,
                36083,
                36319,
                36555,
                36791,
                37027,
                37263,
                37499,
                37735,
                37971,
                38207,
                38443,
                38679,
                38915,
                39151,
                39387,
                39623,
                39859,
                40095,
                40331,
                40567,
                40803,
                41039,
                41275,
                41511,
                41747,
                41983,
                42219,
                42455,
                42691,
                42927,
                43163,
                43399,
                43635,
                43871,
                44107,
                44343,
        };
        c.DefineDerivedCounter("TexUnitBusyCycles",
                               "Timing",
                               "Number of GPU cycles the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96",
                               "c68761f2-248c-4f39-6528-c308b1c0807c");
    }
    { // Index:47
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                21977,
                22213,
                22449,
                22685,
                22921,
                23157,
                23393,
                23629,
                23865,
                24101,
                24337,
                24573,
                24809,
                25045,
                25281,
                25517,
                25753,
                25989,
                26225,
                26461,
                26697,
                26933,
                27169,
                27405,
                27641,
                27877,
                28113,
                28349,
                28585,
                28821,
                29057,
                29293,
                29529,
                29765,
                30001,
                30237,
                30473,
                30709,
                30945,
                31181,
                31417,
                31653,
                31889,
                32125,
                32361,
                32597,
                32833,
                33069,
                33305,
                33541,
                33777,
                34013,
                34249,
                34485,
                34721,
                34957,
                35193,
                35429,
                35665,
                35901,
                36137,
                36373,
                36609,
                36845,
                37081,
                37317,
                37553,
                37789,
                38025,
                38261,
                38497,
                38733,
                38969,
                39205,
                39441,
                39677,
                39913,
                40149,
                40385,
                40621,
                40857,
                41093,
                41329,
                41565,
                41801,
                42037,
                42273,
                42509,
                42745,
                42981,
                43217,
                43453,
                43689,
                43925,
                44161,
                44397,
                21976,
                22212,
                22448,
                22684,
                22920,
                23156,
                23392,
                23628,
                23864,
                24100,
                24336,
                24572,
                24808,
                25044,
                25280,
                25516,
                25752,
                25988,
                26224,
                26460,
                26696,
                26932,
                27168,
                27404,
                27640,
                27876,
                28112,
                28348,
                28584,
                28820,
                29056,
                29292,
                29528,
                29764,
                30000,
                30236,
                30472,
                30708,
                30944,
                31180,
                31416,
                31652,
                31888,
                32124,
                32360,
                32596,
                32832,
                33068,
                33304,
                33540,
                33776,
                34012,
                34248,
                34484,
                34720,
                34956,
                35192,
                35428,
                35664,
                35900,
                36136,
                36372,
                36608,
                36844,
                37080,
                37316,
                37552,
                37788,
                38024,
                38260,
                38496,
                38732,
                38968,
                39204,
                39440,
                39676,
                39912,
                40148,
                40384,
                40620,
                40856,
                41092,
                41328,
                41564,
                41800,
                42036,
                42272,
                42508,
                42744,
                42980,
                43216,
                43452,
                43688,
                43924,
                44160,
                44396,
        };
        c.DefineDerivedCounter("TexTriFilteringPct",
                               "TextureUnit",
                               "Percentage of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,+,/,(100),*",
                               "1affc3c8-b917-5c81-622b-7004527208ae");
    }
    { // Index:48
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                21977,
                22213,
                22449,
                22685,
                22921,
                23157,
                23393,
                23629,
                23865,
                24101,
                24337,
                24573,
                24809,
                25045,
                25281,
                25517,
                25753,
                25989,
                26225,
                26461,
                26697,
                26933,
                27169,
                27405,
                27641,
                27877,
                28113,
                28349,
                28585,
                28821,
                29057,
                29293,
                29529,
                29765,
                30001,
                30237,
                30473,
                30709,
                30945,
                31181,
                31417,
                31653,
                31889,
                32125,
                32361,
                32597,
                32833,
                33069,
                33305,
                33541,
                33777,
                34013,
                34249,
                34485,
                34721,
                34957,
                35193,
                35429,
                35665,
                35901,
                36137,
                36373,
                36609,
                36845,
                37081,
                37317,
                37553,
                37789,
                38025,
                38261,
                38497,
                38733,
                38969,
                39205,
                39441,
                39677,
                39913,
                40149,
                40385,
                40621,
                40857,
                41093,
                41329,
                41565,
                41801,
                42037,
                42273,
                42509,
                42745,
                42981,
                43217,
                43453,
                43689,
                43925,
                44161,
                44397,
        };
        c.DefineDerivedCounter("TexTriFilteringCount",
                               "TextureUnit",
                               "Count of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,(4),*",
                               "5785b3a1-a513-18db-4b1c-bdeef75bb2b6");
    }
    { // Index:49
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                21976,
                22212,
                22448,
                22684,
                22920,
                23156,
                23392,
                23628,
                23864,
                24100,
                24336,
                24572,
                24808,
                25044,
                25280,
                25516,
                25752,
                25988,
                26224,
                26460,
                26696,
                26932,
                27168,
                27404,
                27640,
                27876,
                28112,
                28348,
                28584,
                28820,
                29056,
                29292,
                29528,
                29764,
                30000,
                30236,
                30472,
                30708,
                30944,
                31180,
                31416,
                31652,
                31888,
                32124,
                32360,
                32596,
                32832,
                33068,
                33304,
                33540,
                33776,
                34012,
                34248,
                34484,
                34720,
                34956,
                35192,
                35428,
                35664,
                35900,
                36136,
                36372,
                36608,
                36844,
                37080,
                37316,
                37552,
                37788,
                38024,
                38260,
                38496,
                38732,
                38968,
                39204,
                39440,
                39676,
                39912,
                40148,
                40384,
                40620,
                40856,
                41092,
                41328,
                41564,
                41800,
                42036,
                42272,
                42508,
                42744,
                42980,
                43216,
                43452,
                43688,
                43924,
                44160,
                44396,
        };
        c.DefineDerivedCounter("NoTexTriFilteringCount",
                               "TextureUnit",
                               "Count of pixels that did not receive trilinear filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,(4),*",
                               "179da29a-81af-c06e-ce8c-a0a731ea030d");
    }
    { // Index:50
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                21979,
                22215,
                22451,
                22687,
                22923,
                23159,
                23395,
                23631,
                23867,
                24103,
                24339,
                24575,
                24811,
                25047,
                25283,
                25519,
                25755,
                25991,
                26227,
                26463,
                26699,
                26935,
                27171,
                27407,
                27643,
                27879,
                28115,
                28351,
                28587,
                28823,
                29059,
                29295,
                29531,
                29767,
                30003,
                30239,
                30475,
                30711,
                30947,
                31183,
                31419,
                31655,
                31891,
                32127,
                32363,
                32599,
                32835,
                33071,
                33307,
                33543,
                33779,
                34015,
                34251,
                34487,
                34723,
                34959,
                35195,
                35431,
                35667,
                35903,
                36139,
                36375,
                36611,
                36847,
                37083,
                37319,
                37555,
                37791,
                38027,
                38263,
                38499,
                38735,
                38971,
                39207,
                39443,
                39679,
                39915,
                40151,
                40387,
                40623,
                40859,
                41095,
                41331,
                41567,
                41803,
                42039,
                42275,
                42511,
                42747,
                42983,
                43219,
                43455,
                43691,
                43927,
                44163,
                44399,
                21978,
                22214,
                22450,
                22686,
                22922,
                23158,
                23394,
                23630,
                23866,
                24102,
                24338,
                24574,
                24810,
                25046,
                25282,
                25518,
                25754,
                25990,
                26226,
                26462,
                26698,
                26934,
                27170,
                27406,
                27642,
                27878,
                28114,
                28350,
                28586,
                28822,
                29058,
                29294,
                29530,
                29766,
                30002,
                30238,
                30474,
                30710,
                30946,
                31182,
                31418,
                31654,
                31890,
                32126,
                32362,
                32598,
                32834,
                33070,
                33306,
                33542,
                33778,
                34014,
                34250,
                34486,
                34722,
                34958,
                35194,
                35430,
                35666,
                35902,
                36138,
                36374,
                36610,
                36846,
                37082,
                37318,
                37554,
                37790,
                38026,
                38262,
                38498,
                38734,
                38970,
                39206,
                39442,
                39678,
                39914,
                40150,
                40386,
                40622,
                40858,
                41094,
                41330,
                41566,
                41802,
                42038,
                42274,
                42510,
                42746,
                42982,
                43218,
                43454,
                43690,
                43926,
                44162,
                44398,
        };
        c.DefineDerivedCounter("TexVolFilteringPct",
                               "TextureUnit",
                               "Percentage of pixels that received volume filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,+,/,(100),*",
                               "b5ff6bed-3178-aee4-42dd-c74391c02a2d");
    }
    { // Index:51
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                21979,
                22215,
                22451,
                22687,
                22923,
                23159,
                23395,
                23631,
                23867,
                24103,
                24339,
                24575,
                24811,
                25047,
                25283,
                25519,
                25755,
                25991,
                26227,
                26463,
                26699,
                26935,
                27171,
                27407,
                27643,
                27879,
                28115,
                28351,
                28587,
                28823,
                29059,
                29295,
                29531,
                29767,
                30003,
                30239,
                30475,
                30711,
                30947,
                31183,
                31419,
                31655,
                31891,
                32127,
                32363,
                32599,
                32835,
                33071,
                33307,
                33543,
                33779,
                34015,
                34251,
                34487,
                34723,
                34959,
                35195,
                35431,
                35667,
                35903,
                36139,
                36375,
                36611,
                36847,
                37083,
                37319,
                37555,
                37791,
                38027,
                38263,
                38499,
                38735,
                38971,
                39207,
                39443,
                39679,
                39915,
                40151,
                40387,
                40623,
                40859,
                41095,
                41331,
                41567,
                41803,
                42039,
                42275,
                42511,
                42747,
                42983,
                43219,
                43455,
                43691,
                43927,
                44163,
                44399,
        };
        c.DefineDerivedCounter("TexVolFilteringCount",
                               "TextureUnit",
                               "Count of pixels that received volume filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,(4),*",
                               "4bddc587-d589-8128-e18c-762eab2c871f");
    }
    { // Index:52
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                21978,
                22214,
                22450,
                22686,
                22922,
                23158,
                23394,
                23630,
                23866,
                24102,
                24338,
                24574,
                24810,
                25046,
                25282,
                25518,
                25754,
                25990,
                26226,
                26462,
                26698,
                26934,
                27170,
                27406,
                27642,
                27878,
                28114,
                28350,
                28586,
                28822,
                29058,
                29294,
                29530,
                29766,
                30002,
                30238,
                30474,
                30710,
                30946,
                31182,
                31418,
                31654,
                31890,
                32126,
                32362,
                32598,
                32834,
                33070,
                33306,
                33542,
                33778,
                34014,
                34250,
                34486,
                34722,
                34958,
                35194,
                35430,
                35666,
                35902,
                36138,
                36374,
                36610,
                36846,
                37082,
                37318,
                37554,
                37790,
                38026,
                38262,
                38498,
                38734,
                38970,
                39206,
                39442,
                39678,
                39914,
                40150,
                40386,
                40622,
                40858,
                41094,
                41330,
                41566,
                41802,
                42038,
                42274,
                42510,
                42746,
                42982,
                43218,
                43454,
                43690,
                43926,
                44162,
                44398,
        };
        c.DefineDerivedCounter("NoTexVolFilteringCount",
                               "TextureUnit",
                               "Count of pixels that did not receive volume filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,(4),*",
                               "9fe1a854-17c6-9d26-b2b9-80610cd5827d");
    }
    { // Index:53
        static constexpr std::array<GpaUInt32, 864> kHardwareCounters = {
                21997,
                22233,
                22469,
                22705,
                22941,
                23177,
                23413,
                23649,
                23885,
                24121,
                24357,
                24593,
                24829,
                25065,
                25301,
                25537,
                25773,
                26009,
                26245,
                26481,
                26717,
                26953,
                27189,
                27425,
                27661,
                27897,
                28133,
                28369,
                28605,
                28841,
                29077,
                29313,
                29549,
                29785,
                30021,
                30257,
                30493,
                30729,
                30965,
                31201,
                31437,
                31673,
                31909,
                32145,
                32381,
                32617,
                32853,
                33089,
                33325,
                33561,
                33797,
                34033,
                34269,
                34505,
                34741,
                34977,
                35213,
                35449,
                35685,
                35921,
                36157,
                36393,
                36629,
                36865,
                37101,
                37337,
                37573,
                37809,
                38045,
                38281,
                38517,
                38753,
                38989,
                39225,
                39461,
                39697,
                39933,
                40169,
                40405,
                40641,
                40877,
                41113,
                41349,
                41585,
                41821,
                42057,
                42293,
                42529,
                42765,
                43001,
                43237,
                43473,
                43709,
                43945,
                44181,
                44417,
                21998,
                22234,
                22470,
                22706,
                22942,
                23178,
                23414,
                23650,
                23886,
                24122,
                24358,
                24594,
                24830,
                25066,
                25302,
                25538,
                25774,
                26010,
                26246,
                26482,
                26718,
                26954,
                27190,
                27426,
                27662,
                27898,
                28134,
                28370,
                28606,
                28842,
                29078,
                29314,
                29550,
                29786,
                30022,
                30258,
                30494,
                30730,
                30966,
                31202,
                31438,
                31674,
                31910,
                32146,
                32382,
                32618,
                32854,
                33090,
                33326,
                33562,
                33798,
                34034,
                34270,
                34506,
                34742,
                34978,
                35214,
                35450,
                35686,
                35922,
                36158,
                36394,
                36630,
                36866,
                37102,
                37338,
                37574,
                37810,
                38046,
                38282,
                38518,
                38754,
                38990,
                39226,
                39462,
                39698,
                39934,
                40170,
                40406,
                40642,
                40878,
                41114,
                41350,
                41586,
                41822,
                42058,
                42294,
                42530,
                42766,
                43002,
                43238,
                43474,
                43710,
                43946,
                44182,
                44418,
                21999,
                22235,
                22471,
                22707,
                22943,
                23179,
                23415,
                23651,
                23887,
                24123,
                24359,
                24595,
                24831,
                25067,
                25303,
                25539,
                25775,
                26011,
                26247,
                26483,
                26719,
                26955,
                27191,
                27427,
                27663,
                27899,
                28135,
                28371,
                28607,
                28843,
                29079,
                29315,
                29551,
                29787,
                30023,
                30259,
                30495,
                30731,
                30967,
                31203,
                31439,
                31675,
                31911,
                32147,
                32383,
                32619,
                32855,
                33091,
                33327,
                33563,
                33799,
                34035,
                34271,
                34507,
                34743,
                34979,
                35215,
                35451,
                35687,
                35923,
                36159,
                36395,
                36631,
                36867,
                37103,
                37339,
                37575,
                37811,
                38047,
                38283,
                38519,
                38755,
                38991,
                39227,
                39463,
                39699,
                39935,
                40171,
                40407,
                40643,
                40879,
                41115,
                41351,
                41587,
                41823,
                42059,
                42295,
                42531,
                42767,
                43003,
                43239,
                43475,
                43711,
                43947,
                44183,
                44419,
                22000,
                22236,
                22472,
                22708,
                22944,
                23180,
                23416,
                23652,
                23888,
                24124,
                24360,
                24596,
                24832,
                25068,
                25304,
                25540,
                25776,
                26012,
                26248,
                26484,
                26720,
                26956,
                27192,
                27428,
                27664,
                27900,
                28136,
                28372,
                28608,
                28844,
                29080,
                29316,
                29552,
                29788,
                30024,
                30260,
                30496,
                30732,
                30968,
                31204,
                31440,
                31676,
                31912,
                32148,
                32384,
                32620,
                32856,
                33092,
                33328,
                33564,
                33800,
                34036,
                34272,
                34508,
                34744,
                34980,
                35216,
                35452,
                35688,
                35924,
                36160,
                36396,
                36632,
                36868,
                37104,
                37340,
                37576,
                37812,
                38048,
                38284,
                38520,
                38756,
                38992,
                39228,
                39464,
                39700,
                39936,
                40172,
                40408,
                40644,
                40880,
                41116,
                41352,
                41588,
                41824,
                42060,
                42296,
                42532,
                42768,
                43004,
                43240,
                43476,
                43712,
                43948,
                44184,
                44420,
                22001,
                22237,
                22473,
                22709,
                22945,
                23181,
                23417,
                23653,
                23889,
                24125,
                24361,
                24597,
                24833,
                25069,
                25305,
                25541,
                25777,
                26013,
                26249,
                26485,
                26721,
                26957,
                27193,
                27429,
                27665,
                27901,
                28137,
                28373,
                28609,
                28845,
                29081,
                29317,
                29553,
                29789,
                30025,
                30261,
                30497,
                30733,
                30969,
                31205,
                31441,
                31677,
                31913,
                32149,
                32385,
                32621,
                32857,
                33093,
                33329,
                33565,
                33801,
                34037,
                34273,
                34509,
                34745,
                34981,
                35217,
                35453,
                35689,
                35925,
                36161,
                36397,
                36633,
                36869,
                37105,
                37341,
                37577,
                37813,
                38049,
                38285,
                38521,
                38757,
                38993,
                39229,
                39465,
                39701,
                39937,
                40173,
                40409,
                40645,
                40881,
                41117,
                41353,
                41589,
                41825,
                42061,
                42297,
                42533,
                42769,
                43005,
                43241,
                43477,
                43713,
                43949,
                44185,
                44421,
                22002,
                22238,
                22474,
                22710,
                22946,
                23182,
                23418,
                23654,
                23890,
                24126,
                24362,
                24598,
                24834,
                25070,
                25306,
                25542,
                25778,
                26014,
                26250,
                26486,
                26722,
                26958,
                27194,
                27430,
                27666,
                27902,
                28138,
                28374,
                28610,
                28846,
                29082,
                29318,
                29554,
                29790,
                30026,
                30262,
                30498,
                30734,
                30970,
                31206,
                31442,
                31678,
                31914,
                32150,
                32386,
                32622,
                32858,
                33094,
                33330,
                33566,
                33802,
                34038,
                34274,
                34510,
                34746,
                34982,
                35218,
                35454,
                35690,
                35926,
                36162,
                36398,
                36634,
                36870,
                37106,
                37342,
                37578,
                37814,
                38050,
                38286,
                38522,
                38758,
                38994,
                39230,
                39466,
                39702,
                39938,
                40174,
                40410,
                40646,
                40882,
                41118,
                41354,
                41590,
                41826,
                42062,
                42298,
                42534,
                42770,
                43006,
                43242,
                43478,
                43714,
                43950,
                44186,
                44422,
                22003,
                22239,
                22475,
                22711,
                22947,
                23183,
                23419,
                23655,
                23891,
                24127,
                24363,
                24599,
                24835,
                25071,
                25307,
                25543,
                25779,
                26015,
                26251,
                26487,
                26723,
                26959,
                27195,
                27431,
                27667,
                27903,
                28139,
                28375,
                28611,
                28847,
                29083,
                29319,
                29555,
                29791,
                30027,
                30263,
                30499,
                30735,
                30971,
                31207,
                31443,
                31679,
                31915,
                32151,
                32387,
                32623,
                32859,
                33095,
                33331,
                33567,
                33803,
                34039,
                34275,
                34511,
                34747,
                34983,
                35219,
                35455,
                35691,
                35927,
                36163,
                36399,
                36635,
                36871,
                37107,
                37343,
                37579,
                37815,
                38051,
                38287,
                38523,
                38759,
                38995,
                39231,
                39467,
                39703,
                39939,
                40175,
                40411,
                40647,
                40883,
                41119,
                41355,
                41591,
                41827,
                42063,
                42299,
                42535,
                42771,
                43007,
                43243,
                43479,
                43715,
                43951,
                44187,
                44423,
                22004,
                22240,
                22476,
                22712,
                22948,
                23184,
                23420,
                23656,
                23892,
                24128,
                24364,
                24600,
                24836,
                25072,
                25308,
                25544,
                25780,
                26016,
                26252,
                26488,
                26724,
                26960,
                27196,
                27432,
                27668,
                27904,
                28140,
                28376,
                28612,
                28848,
                29084,
                29320,
                29556,
                29792,
                30028,
                30264,
                30500,
                30736,
                30972,
                31208,
                31444,
                31680,
                31916,
                32152,
                32388,
                32624,
                32860,
                33096,
                33332,
                33568,
                33804,
                34040,
                34276,
                34512,
                34748,
                34984,
                35220,
                35456,
                35692,
                35928,
                36164,
                36400,
                36636,
                36872,
                37108,
                37344,
                37580,
                37816,
                38052,
                38288,
                38524,
                38760,
                38996,
                39232,
                39468,
                39704,
                39940,
                40176,
                40412,
                40648,
                40884,
                41120,
                41356,
                41592,
                41828,
                42064,
                42300,
                42536,
                42772,
                43008,
                43244,
                43480,
                43716,
                43952,
                44188,
                44424,
                22005,
                22241,
                22477,
                22713,
                22949,
                23185,
                23421,
                23657,
                23893,
                24129,
                24365,
                24601,
                24837,
                25073,
                25309,
                25545,
                25781,
                26017,
                26253,
                26489,
                26725,
                26961,
                27197,
                27433,
                27669,
                27905,
                28141,
                28377,
                28613,
                28849,
                29085,
                29321,
                29557,
                29793,
                30029,
                30265,
                30501,
                30737,
                30973,
                31209,
                31445,
                31681,
                31917,
                32153,
                32389,
                32625,
                32861,
                33097,
                33333,
                33569,
                33805,
                34041,
                34277,
                34513,
                34749,
                34985,
                35221,
                35457,
                35693,
                35929,
                36165,
                36401,
                36637,
                36873,
                37109,
                37345,
                37581,
                37817,
                38053,
                38289,
                38525,
                38761,
                38997,
                39233,
                39469,
                39705,
                39941,
                40177,
                40413,
                40649,
                40885,
                41121,
                41357,
                41593,
                41829,
                42065,
                42301,
                42537,
                42773,
                43009,
                43245,
                43481,
                43717,
                43953,
                44189,
                44425,
        };
        c.DefineDerivedCounter("TexAveAnisotropy",
                               "TextureUnit",
                               "The average degree of anisotropy applied. A number between 1 and 16. The anisotropic filtering algorithm only applies samples where they are required (e.g. there will be no extra anisotropic samples if the view vector is perpendicular to the surface) so this can be much lower than the requested anisotropy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,(2),96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,*,+,(4),192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,sum96,*,+,(6),288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,sum96,*,+,(8),384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,sum96,*,+,(10),480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,sum96,*,+,(12),576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,sum96,*,+,(14),672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,sum96,*,+,(16),768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,sum96,*,+,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,+,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,sum96,+,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,sum96,+,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,sum96,+,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,sum96,+,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,sum96,+,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,sum96,+,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,sum96,+,/",
                               "7ca2a2b9-a4eb-ce23-d163-59147e672396");
    }
    { // Index:54
        static constexpr std::array<GpaUInt32, 25> kHardwareCounters = {
                72260,
                72653,
                73046,
                73439,
                73832,
                74225,
                74618,
                75011,
                75404,
                75797,
                76190,
                76583,
                76976,
                77369,
                77762,
                78155,
                78548,
                78941,
                79334,
                79727,
                80120,
                80513,
                80906,
                81299,
                24,
        };
        c.DefineDerivedCounter("DepthStencilTestBusy",
                               "Timing",
                               "Percentage of time GPU spent performing depth and stencil tests relative to GPUBusy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24,24,/,(100),*",
                               "6834fb52-42e8-bb50-fd48-ec2f2904e7e0");
    }
    { // Index:55
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72260,
                72653,
                73046,
                73439,
                73832,
                74225,
                74618,
                75011,
                75404,
                75797,
                76190,
                76583,
                76976,
                77369,
                77762,
                78155,
                78548,
                78941,
                79334,
                79727,
                80120,
                80513,
                80906,
                81299,
        };
        c.DefineDerivedCounter("DepthStencilTestBusyCycles",
                               "Timing",
                               "Number of GPU cycles spent performing depth and stencil tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24",
                               "07ad48f0-49d8-87e7-1ef5-1e24ff2cef49");
    }
    { // Index:56
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                72131,
                72524,
                72917,
                73310,
                73703,
                74096,
                74489,
                74882,
                75275,
                75668,
                76061,
                76454,
                76847,
                77240,
                77633,
                78026,
                78419,
                78812,
                79205,
                79598,
                79991,
                80384,
                80777,
                81170,
                72120,
                72513,
                72906,
                73299,
                73692,
                74085,
                74478,
                74871,
                75264,
                75657,
                76050,
                76443,
                76836,
                77229,
                77622,
                78015,
                78408,
                78801,
                79194,
                79587,
                79980,
                80373,
                80766,
                81159,
        };
        c.DefineDerivedCounter("HiZTilesAccepted",
                               "DepthAndStencil",
                               "Percentage of tiles accepted by HiZ and will be rendered to the depth or color buffers.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,-,(0),max,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,/,(100),*",
                               "56176f45-d7ff-813d-4f05-3b2f046067e7");
    }
    { // Index:57
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                72120,
                72513,
                72906,
                73299,
                73692,
                74085,
                74478,
                74871,
                75264,
                75657,
                76050,
                76443,
                76836,
                77229,
                77622,
                78015,
                78408,
                78801,
                79194,
                79587,
                79980,
                80373,
                80766,
                81159,
                72131,
                72524,
                72917,
                73310,
                73703,
                74096,
                74489,
                74882,
                75275,
                75668,
                76061,
                76454,
                76847,
                77240,
                77633,
                78026,
                78419,
                78812,
                79205,
                79598,
                79991,
                80384,
                80777,
                81170,
        };
        c.DefineDerivedCounter("HiZTilesAcceptedCount",
                               "DepthAndStencil",
                               "Count of tiles accepted by HiZ and will be rendered to the depth or color buffers.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max",
                               "95d4e3f6-b2f0-f26e-8423-aacdfaf79ea3");
    }
    { // Index:58
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72131,
                72524,
                72917,
                73310,
                73703,
                74096,
                74489,
                74882,
                75275,
                75668,
                76061,
                76454,
                76847,
                77240,
                77633,
                78026,
                78419,
                78812,
                79205,
                79598,
                79991,
                80384,
                80777,
                81170,
        };
        c.DefineDerivedCounter("HiZTilesRejectedCount",
                               "DepthAndStencil",
                               "Count of tiles not accepted by HiZ.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "156ba142-7eeb-aa6e-a00a-f8aea4e41e0b");
    }
    { // Index:59
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                72120,
                72513,
                72906,
                73299,
                73692,
                74085,
                74478,
                74871,
                75264,
                75657,
                76050,
                76443,
                76836,
                77229,
                77622,
                78015,
                78408,
                78801,
                79194,
                79587,
                79980,
                80373,
                80766,
                81159,
                72144,
                72537,
                72930,
                73323,
                73716,
                74109,
                74502,
                74895,
                75288,
                75681,
                76074,
                76467,
                76860,
                77253,
                77646,
                78039,
                78432,
                78825,
                79218,
                79611,
                80004,
                80397,
                80790,
                81183,
        };
        c.DefineDerivedCounter("PreZTilesDetailCulled",
                               "DepthAndStencil",
                               "Percentage of tiles rejected because the associated prim had no contributing area.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,/,(100),*",
                               "cad7f54d-a044-7574-c472-6f2065cbeeac");
    }
    { // Index:60
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72144,
                72537,
                72930,
                73323,
                73716,
                74109,
                74502,
                74895,
                75288,
                75681,
                76074,
                76467,
                76860,
                77253,
                77646,
                78039,
                78432,
                78825,
                79218,
                79611,
                80004,
                80397,
                80790,
                81183,
        };
        c.DefineDerivedCounter("PreZTilesDetailCulledCount",
                               "DepthAndStencil",
                               "Count of tiles rejected because the associated primitive had no contributing area.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "49262c8a-b1e6-90dd-f096-0fc4921715e9");
    }
    { // Index:61
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72120,
                72513,
                72906,
                73299,
                73692,
                74085,
                74478,
                74871,
                75264,
                75657,
                76050,
                76443,
                76836,
                77229,
                77622,
                78015,
                78408,
                78801,
                79194,
                79587,
                79980,
                80373,
                80766,
                81159,
        };
        c.DefineDerivedCounter("PreZTilesDetailSurvivingCount",
                               "DepthAndStencil",
                               "Count of tiles surviving because the associated primitive had contributing area.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "f803eaa4-bbed-bd39-775f-a64df92e2c08");
    }
    { // Index:62
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                2069,
                2744,
                3419,
                4094,
                4769,
                5444,
                6119,
                6794,
                7469,
                8144,
                8819,
                9494,
                10169,
                10844,
                11519,
                12194,
                12869,
                13544,
                14219,
                14894,
                15569,
                16244,
                16919,
                17594,
                2145,
                2820,
                3495,
                4170,
                4845,
                5520,
                6195,
                6870,
                7545,
                8220,
                8895,
                9570,
                10245,
                10920,
                11595,
                12270,
                12945,
                13620,
                14295,
                14970,
                15645,
                16320,
                16995,
                17670,
        };
        c.DefineDerivedCounter("HiZQuadsCulled",
                               "DepthAndStencil",
                               "Percentage of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,/,(100),*",
                               "fa0e319b-5573-6d34-5bab-904769925036");
    }
    { // Index:63
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                2069,
                2744,
                3419,
                4094,
                4769,
                5444,
                6119,
                6794,
                7469,
                8144,
                8819,
                9494,
                10169,
                10844,
                11519,
                12194,
                12869,
                13544,
                14219,
                14894,
                15569,
                16244,
                16919,
                17594,
                2145,
                2820,
                3495,
                4170,
                4845,
                5520,
                6195,
                6870,
                7545,
                8220,
                8895,
                9570,
                10245,
                10920,
                11595,
                12270,
                12945,
                13620,
                14295,
                14970,
                15645,
                16320,
                16995,
                17670,
        };
        c.DefineDerivedCounter("HiZQuadsCulledCount",
                               "DepthAndStencil",
                               "Count of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max",
                               "73b0b39d-6df2-3e24-0b5c-7cb0ac8b6f39");
    }
    { // Index:64
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                2145,
                2820,
                3495,
                4170,
                4845,
                5520,
                6195,
                6870,
                7545,
                8220,
                8895,
                9570,
                10245,
                10920,
                11595,
                12270,
                12945,
                13620,
                14295,
                14970,
                15645,
                16320,
                16995,
                17670,
        };
        c.DefineDerivedCounter("HiZQuadsAcceptedCount",
                               "DepthAndStencil",
                               "Count of quads that did continue on in the pipeline after HiZ.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "59049ad9-42b5-c7cb-3616-6a8f6a8e4894");
    }
    { // Index:65
        static constexpr std::array<GpaUInt32, 72> kHardwareCounters = {
                2145,
                2820,
                3495,
                4170,
                4845,
                5520,
                6195,
                6870,
                7545,
                8220,
                8895,
                9570,
                10245,
                10920,
                11595,
                12270,
                12945,
                13620,
                14295,
                14970,
                15645,
                16320,
                16995,
                17670,
                2169,
                2844,
                3519,
                4194,
                4869,
                5544,
                6219,
                6894,
                7569,
                8244,
                8919,
                9594,
                10269,
                10944,
                11619,
                12294,
                12969,
                13644,
                14319,
                14994,
                15669,
                16344,
                17019,
                17694,
                2069,
                2744,
                3419,
                4094,
                4769,
                5444,
                6119,
                6794,
                7469,
                8144,
                8819,
                9494,
                10169,
                10844,
                11519,
                12194,
                12869,
                13544,
                14219,
                14894,
                15569,
                16244,
                16919,
                17594,
        };
        c.DefineDerivedCounter("PreZQuadsCulled",
                               "DepthAndStencil",
                               "Percentage of quads rejected based on the detailZ and earlyZ tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,sum24,/,(100),*",
                               "4e77547b-ec55-5663-f034-af59be66d77d");
    }
    { // Index:66
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                2145,
                2820,
                3495,
                4170,
                4845,
                5520,
                6195,
                6870,
                7545,
                8220,
                8895,
                9570,
                10245,
                10920,
                11595,
                12270,
                12945,
                13620,
                14295,
                14970,
                15645,
                16320,
                16995,
                17670,
                2169,
                2844,
                3519,
                4194,
                4869,
                5544,
                6219,
                6894,
                7569,
                8244,
                8919,
                9594,
                10269,
                10944,
                11619,
                12294,
                12969,
                13644,
                14319,
                14994,
                15669,
                16344,
                17019,
                17694,
        };
        c.DefineDerivedCounter("PreZQuadsCulledCount",
                               "DepthAndStencil",
                               "Count of quads rejected based on the detailZ and earlyZ tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(0),max",
                               "1bf169e6-9304-834e-df5f-0c44d7890a08");
    }
    { // Index:67
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                2169,
                2844,
                3519,
                4194,
                4869,
                5544,
                6219,
                6894,
                7569,
                8244,
                8919,
                9594,
                10269,
                10944,
                11619,
                12294,
                12969,
                13644,
                14319,
                14994,
                15669,
                16344,
                17019,
                17694,
        };
        c.DefineDerivedCounter("PreZQuadsSurvivingCount",
                               "DepthAndStencil",
                               "Count of quads surviving detailZ and earlyZ tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "50e25e51-3713-89cb-7f92-559cde5e5532");
    }
    { // Index:68
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                2169,
                2844,
                3519,
                4194,
                4869,
                5544,
                6219,
                6894,
                7569,
                8244,
                8919,
                9594,
                10269,
                10944,
                11619,
                12294,
                12969,
                13644,
                14319,
                14994,
                15669,
                16344,
                17019,
                17694,
                2069,
                2744,
                3419,
                4094,
                4769,
                5444,
                6119,
                6794,
                7469,
                8144,
                8819,
                9494,
                10169,
                10844,
                11519,
                12194,
                12869,
                13544,
                14219,
                14894,
                15569,
                16244,
                16919,
                17594,
        };
        c.DefineDerivedCounter("PostZQuads",
                               "DepthAndStencil",
                               "Percentage of quads for which the pixel shader will run and may be postZ tested.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,/,(100),*",
                               "58f0d34b-eeb8-e8db-abce-cb72584144be");
    }
    { // Index:69
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                2169,
                2844,
                3519,
                4194,
                4869,
                5544,
                6219,
                6894,
                7569,
                8244,
                8919,
                9594,
                10269,
                10944,
                11619,
                12294,
                12969,
                13644,
                14319,
                14994,
                15669,
                16344,
                17019,
                17694,
        };
        c.DefineDerivedCounter("PostZQuadCount",
                               "DepthAndStencil",
                               "Count of quads for which the pixel shader will run and may be postZ tested.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "08404526-ce35-939b-34c8-a7a35a0ff4d6");
    }
    { // Index:70
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72293,
                72686,
                73079,
                73472,
                73865,
                74258,
                74651,
                75044,
                75437,
                75830,
                76223,
                76616,
                77009,
                77402,
                77795,
                78188,
                78581,
                78974,
                79367,
                79760,
                80153,
                80546,
                80939,
                81332,
        };
        c.DefineDerivedCounter("PreZSamplesPassing",
                               "DepthAndStencil",
                               "Number of samples tested for Z before shading and passed.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "3bfe6c4d-7422-ca03-7ea5-e67ff1a00136");
    }
    { // Index:71
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72295,
                72688,
                73081,
                73474,
                73867,
                74260,
                74653,
                75046,
                75439,
                75832,
                76225,
                76618,
                77011,
                77404,
                77797,
                78190,
                78583,
                78976,
                79369,
                79762,
                80155,
                80548,
                80941,
                81334,
        };
        c.DefineDerivedCounter("PreZSamplesFailingS",
                               "DepthAndStencil",
                               "Number of samples tested for Z before shading and failed stencil test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "df7f705e-5162-d3b5-da8b-63466cf9c4e5");
    }
    { // Index:72
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72294,
                72687,
                73080,
                73473,
                73866,
                74259,
                74652,
                75045,
                75438,
                75831,
                76224,
                76617,
                77010,
                77403,
                77796,
                78189,
                78582,
                78975,
                79368,
                79761,
                80154,
                80547,
                80940,
                81333,
        };
        c.DefineDerivedCounter("PreZSamplesFailingZ",
                               "DepthAndStencil",
                               "Number of samples tested for Z before shading and failed Z test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "4484e950-f7a4-3800-bc74-78dd297f017e");
    }
    { // Index:73
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72290,
                72683,
                73076,
                73469,
                73862,
                74255,
                74648,
                75041,
                75434,
                75827,
                76220,
                76613,
                77006,
                77399,
                77792,
                78185,
                78578,
                78971,
                79364,
                79757,
                80150,
                80543,
                80936,
                81329,
        };
        c.DefineDerivedCounter("PostZSamplesPassing",
                               "DepthAndStencil",
                               "Number of samples tested for Z after shading and passed.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "4995d5d6-2330-b986-508b-fae24856f44c");
    }
    { // Index:74
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72292,
                72685,
                73078,
                73471,
                73864,
                74257,
                74650,
                75043,
                75436,
                75829,
                76222,
                76615,
                77008,
                77401,
                77794,
                78187,
                78580,
                78973,
                79366,
                79759,
                80152,
                80545,
                80938,
                81331,
        };
        c.DefineDerivedCounter("PostZSamplesFailingS",
                               "DepthAndStencil",
                               "Number of samples tested for Z after shading and failed stencil test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "ae558af4-f4be-3dd4-7316-b2c4dcf0def8");
    }
    { // Index:75
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72291,
                72684,
                73077,
                73470,
                73863,
                74256,
                74649,
                75042,
                75435,
                75828,
                76221,
                76614,
                77007,
                77400,
                77793,
                78186,
                78579,
                78972,
                79365,
                79758,
                80151,
                80544,
                80937,
                81330,
        };
        c.DefineDerivedCounter("PostZSamplesFailingZ",
                               "DepthAndStencil",
                               "Number of samples tested for Z after shading and failed Z test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "b3684c94-814a-c695-c85d-a5b6ab798b35");
    }
    { // Index:76
        static constexpr std::array<GpaUInt32, 25> kHardwareCounters = {
                72162,
                72555,
                72948,
                73341,
                73734,
                74127,
                74520,
                74913,
                75306,
                75699,
                76092,
                76485,
                76878,
                77271,
                77664,
                78057,
                78450,
                78843,
                79236,
                79629,
                80022,
                80415,
                80808,
                81201,
                24,
        };
        c.DefineDerivedCounter("ZUnitStalled",
                               "DepthAndStencil",
                               "The percentage of GPUTime the depth buffer spends waiting for the color buffer to be ready to accept data. High figures here indicate a bottleneck in color buffer operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24,24,/,(100),*",
                               "5e86c3ad-1726-3157-1d01-7ed188bf854d");
    }
    { // Index:77
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                72162,
                72555,
                72948,
                73341,
                73734,
                74127,
                74520,
                74913,
                75306,
                75699,
                76092,
                76485,
                76878,
                77271,
                77664,
                78057,
                78450,
                78843,
                79236,
                79629,
                80022,
                80415,
                80808,
                81201,
        };
        c.DefineDerivedCounter("ZUnitStalledCycles",
                               "DepthAndStencil",
                               "Number of GPU cycles the depth buffer spends waiting for the color buffer to be ready to accept data. Larger numbers indicate a bottleneck in color buffer operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24",
                               "4351fa7f-6737-2c3e-3ffb-b3addbdceedd");
    }
    { // Index:78
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                72164,
                72557,
                72950,
                73343,
                73736,
                74129,
                74522,
                74915,
                75308,
                75701,
                76094,
                76487,
                76880,
                77273,
                77666,
                78059,
                78452,
                78845,
                79238,
                79631,
                80024,
                80417,
                80810,
                81203,
                72171,
                72564,
                72957,
                73350,
                73743,
                74136,
                74529,
                74922,
                75315,
                75708,
                76101,
                76494,
                76887,
                77280,
                77673,
                78066,
                78459,
                78852,
                79245,
                79638,
                80031,
                80424,
                80817,
                81210,
        };
        c.DefineDerivedCounter("DBMemRead",
                               "DepthAndStencil",
                               "Number of bytes read from the depth buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,(256),*,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,(32),*,+",
                               "dcdb4ee7-bd50-00f7-c028-9e5f4ce888c0");
    }
    { // Index:79
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                72176,
                72569,
                72962,
                73355,
                73748,
                74141,
                74534,
                74927,
                75320,
                75713,
                76106,
                76499,
                76892,
                77285,
                77678,
                78071,
                78464,
                78857,
                79250,
                79643,
                80036,
                80429,
                80822,
                81215,
                72179,
                72572,
                72965,
                73358,
                73751,
                74144,
                74537,
                74930,
                75323,
                75716,
                76109,
                76502,
                76895,
                77288,
                77681,
                78074,
                78467,
                78860,
                79253,
                79646,
                80039,
                80432,
                80825,
                81218,
        };
        c.DefineDerivedCounter("DBMemWritten",
                               "DepthAndStencil",
                               "Number of bytes written to the depth buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,(32),*,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,(32),*,+",
                               "de5717f8-8a49-ee44-4645-10de51b37dcf");
    }
    { // Index:80
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                64541,
                64620,
                64699,
                64778,
                64857,
                64936,
                65015,
                65094,
                65173,
                65252,
                65331,
                65410,
                65489,
                65568,
                65647,
                65726,
                65805,
                65884,
                65963,
                66042,
                66121,
                66200,
                66279,
                66358,
                66437,
                66516,
                66595,
                66674,
                66753,
                66832,
                66911,
                66990,
                67069,
                67148,
                67227,
                67306,
                67385,
                67464,
                67543,
                67622,
                67701,
                67780,
                67859,
                67938,
                68017,
                68096,
                68175,
                68254,
                68333,
                68412,
                68491,
                68570,
                68649,
                68728,
                68807,
                68886,
                68965,
                69044,
                69123,
                69202,
                69281,
                69360,
                69439,
                69518,
                69597,
                69676,
                69755,
                69834,
                69913,
                69992,
                70071,
                70150,
                70229,
                70308,
                70387,
                70466,
                70545,
                70624,
                70703,
                70782,
                70861,
                70940,
                71019,
                71098,
                71177,
                71256,
                71335,
                71414,
                71493,
                71572,
                71651,
                71730,
                71809,
                71888,
                71967,
                72046,
                64549,
                64628,
                64707,
                64786,
                64865,
                64944,
                65023,
                65102,
                65181,
                65260,
                65339,
                65418,
                65497,
                65576,
                65655,
                65734,
                65813,
                65892,
                65971,
                66050,
                66129,
                66208,
                66287,
                66366,
                66445,
                66524,
                66603,
                66682,
                66761,
                66840,
                66919,
                66998,
                67077,
                67156,
                67235,
                67314,
                67393,
                67472,
                67551,
                67630,
                67709,
                67788,
                67867,
                67946,
                68025,
                68104,
                68183,
                68262,
                68341,
                68420,
                68499,
                68578,
                68657,
                68736,
                68815,
                68894,
                68973,
                69052,
                69131,
                69210,
                69289,
                69368,
                69447,
                69526,
                69605,
                69684,
                69763,
                69842,
                69921,
                70000,
                70079,
                70158,
                70237,
                70316,
                70395,
                70474,
                70553,
                70632,
                70711,
                70790,
                70869,
                70948,
                71027,
                71106,
                71185,
                71264,
                71343,
                71422,
                71501,
                71580,
                71659,
                71738,
                71817,
                71896,
                71975,
                72054,
        };
        c.DefineDerivedCounter("L0CacheHit",
                               "MemoryCache",
                               "The percentage of read requests that hit the data in the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),(1),96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,/,-,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,ifnotzero",
                               "286c786e-9a42-3371-9dea-dd54e6e612e9");
    }
    { // Index:81
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                64541,
                64620,
                64699,
                64778,
                64857,
                64936,
                65015,
                65094,
                65173,
                65252,
                65331,
                65410,
                65489,
                65568,
                65647,
                65726,
                65805,
                65884,
                65963,
                66042,
                66121,
                66200,
                66279,
                66358,
                66437,
                66516,
                66595,
                66674,
                66753,
                66832,
                66911,
                66990,
                67069,
                67148,
                67227,
                67306,
                67385,
                67464,
                67543,
                67622,
                67701,
                67780,
                67859,
                67938,
                68017,
                68096,
                68175,
                68254,
                68333,
                68412,
                68491,
                68570,
                68649,
                68728,
                68807,
                68886,
                68965,
                69044,
                69123,
                69202,
                69281,
                69360,
                69439,
                69518,
                69597,
                69676,
                69755,
                69834,
                69913,
                69992,
                70071,
                70150,
                70229,
                70308,
                70387,
                70466,
                70545,
                70624,
                70703,
                70782,
                70861,
                70940,
                71019,
                71098,
                71177,
                71256,
                71335,
                71414,
                71493,
                71572,
                71651,
                71730,
                71809,
                71888,
                71967,
                72046,
        };
        c.DefineDerivedCounter("L0CacheRequestCount",
                               "MemoryCache",
                               "The number of read requests made to the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96",
                               "74983cae-ee57-2e1b-d990-5128fef84e1f");
    }
    { // Index:82
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                64541,
                64620,
                64699,
                64778,
                64857,
                64936,
                65015,
                65094,
                65173,
                65252,
                65331,
                65410,
                65489,
                65568,
                65647,
                65726,
                65805,
                65884,
                65963,
                66042,
                66121,
                66200,
                66279,
                66358,
                66437,
                66516,
                66595,
                66674,
                66753,
                66832,
                66911,
                66990,
                67069,
                67148,
                67227,
                67306,
                67385,
                67464,
                67543,
                67622,
                67701,
                67780,
                67859,
                67938,
                68017,
                68096,
                68175,
                68254,
                68333,
                68412,
                68491,
                68570,
                68649,
                68728,
                68807,
                68886,
                68965,
                69044,
                69123,
                69202,
                69281,
                69360,
                69439,
                69518,
                69597,
                69676,
                69755,
                69834,
                69913,
                69992,
                70071,
                70150,
                70229,
                70308,
                70387,
                70466,
                70545,
                70624,
                70703,
                70782,
                70861,
                70940,
                71019,
                71098,
                71177,
                71256,
                71335,
                71414,
                71493,
                71572,
                71651,
                71730,
                71809,
                71888,
                71967,
                72046,
                64549,
                64628,
                64707,
                64786,
                64865,
                64944,
                65023,
                65102,
                65181,
                65260,
                65339,
                65418,
                65497,
                65576,
                65655,
                65734,
                65813,
                65892,
                65971,
                66050,
                66129,
                66208,
                66287,
                66366,
                66445,
                66524,
                66603,
                66682,
                66761,
                66840,
                66919,
                66998,
                67077,
                67156,
                67235,
                67314,
                67393,
                67472,
                67551,
                67630,
                67709,
                67788,
                67867,
                67946,
                68025,
                68104,
                68183,
                68262,
                68341,
                68420,
                68499,
                68578,
                68657,
                68736,
                68815,
                68894,
                68973,
                69052,
                69131,
                69210,
                69289,
                69368,
                69447,
                69526,
                69605,
                69684,
                69763,
                69842,
                69921,
                70000,
                70079,
                70158,
                70237,
                70316,
                70395,
                70474,
                70553,
                70632,
                70711,
                70790,
                70869,
                70948,
                71027,
                71106,
                71185,
                71264,
                71343,
                71422,
                71501,
                71580,
                71659,
                71738,
                71817,
                71896,
                71975,
                72054,
        };
        c.DefineDerivedCounter("L0CacheHitCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache hit from the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,-",
                               "c0de7338-069b-c5ba-ead3-c65e030cd2ac");
    }
    { // Index:83
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                64549,
                64628,
                64707,
                64786,
                64865,
                64944,
                65023,
                65102,
                65181,
                65260,
                65339,
                65418,
                65497,
                65576,
                65655,
                65734,
                65813,
                65892,
                65971,
                66050,
                66129,
                66208,
                66287,
                66366,
                66445,
                66524,
                66603,
                66682,
                66761,
                66840,
                66919,
                66998,
                67077,
                67156,
                67235,
                67314,
                67393,
                67472,
                67551,
                67630,
                67709,
                67788,
                67867,
                67946,
                68025,
                68104,
                68183,
                68262,
                68341,
                68420,
                68499,
                68578,
                68657,
                68736,
                68815,
                68894,
                68973,
                69052,
                69131,
                69210,
                69289,
                69368,
                69447,
                69526,
                69605,
                69684,
                69763,
                69842,
                69921,
                70000,
                70079,
                70158,
                70237,
                70316,
                70395,
                70474,
                70553,
                70632,
                70711,
                70790,
                70869,
                70948,
                71027,
                71106,
                71185,
                71264,
                71343,
                71422,
                71501,
                71580,
                71659,
                71738,
                71817,
                71896,
                71975,
                72054,
        };
        c.DefineDerivedCounter("L0CacheMissCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache miss from the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96",
                               "a2f08766-ea1b-6eae-6eaf-faa04125d3e6");
    }
    { // Index:84
        static constexpr std::array<GpaUInt32, 144> kHardwareCounters = {
                114646,
                115158,
                115670,
                116182,
                116694,
                117206,
                117718,
                118230,
                118742,
                119254,
                119766,
                120278,
                120790,
                121302,
                121814,
                122326,
                122838,
                123350,
                123862,
                124374,
                124886,
                125398,
                125910,
                126422,
                126934,
                127446,
                127958,
                128470,
                128982,
                129494,
                130006,
                130518,
                131030,
                131542,
                132054,
                132566,
                133078,
                133590,
                134102,
                134614,
                135126,
                135638,
                136150,
                136662,
                137174,
                137686,
                138198,
                138710,
                114647,
                115159,
                115671,
                116183,
                116695,
                117207,
                117719,
                118231,
                118743,
                119255,
                119767,
                120279,
                120791,
                121303,
                121815,
                122327,
                122839,
                123351,
                123863,
                124375,
                124887,
                125399,
                125911,
                126423,
                126935,
                127447,
                127959,
                128471,
                128983,
                129495,
                130007,
                130519,
                131031,
                131543,
                132055,
                132567,
                133079,
                133591,
                134103,
                134615,
                135127,
                135639,
                136151,
                136663,
                137175,
                137687,
                138199,
                138711,
                114648,
                115160,
                115672,
                116184,
                116696,
                117208,
                117720,
                118232,
                118744,
                119256,
                119768,
                120280,
                120792,
                121304,
                121816,
                122328,
                122840,
                123352,
                123864,
                124376,
                124888,
                125400,
                125912,
                126424,
                126936,
                127448,
                127960,
                128472,
                128984,
                129496,
                130008,
                130520,
                131032,
                131544,
                132056,
                132568,
                133080,
                133592,
                134104,
                134616,
                135128,
                135640,
                136152,
                136664,
                137176,
                137688,
                138200,
                138712,
        };
        c.DefineDerivedCounter("ScalarCacheHit",
                               "MemoryCache",
                               "The percentage of read requests made from executing shader code that hit the data in the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,+,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,sum48,+,/,(100),*",
                               "3346d2cf-b7e4-45b6-c0a0-350ce18159c0");
    }
    { // Index:85
        static constexpr std::array<GpaUInt32, 144> kHardwareCounters = {
                114646,
                115158,
                115670,
                116182,
                116694,
                117206,
                117718,
                118230,
                118742,
                119254,
                119766,
                120278,
                120790,
                121302,
                121814,
                122326,
                122838,
                123350,
                123862,
                124374,
                124886,
                125398,
                125910,
                126422,
                126934,
                127446,
                127958,
                128470,
                128982,
                129494,
                130006,
                130518,
                131030,
                131542,
                132054,
                132566,
                133078,
                133590,
                134102,
                134614,
                135126,
                135638,
                136150,
                136662,
                137174,
                137686,
                138198,
                138710,
                114647,
                115159,
                115671,
                116183,
                116695,
                117207,
                117719,
                118231,
                118743,
                119255,
                119767,
                120279,
                120791,
                121303,
                121815,
                122327,
                122839,
                123351,
                123863,
                124375,
                124887,
                125399,
                125911,
                126423,
                126935,
                127447,
                127959,
                128471,
                128983,
                129495,
                130007,
                130519,
                131031,
                131543,
                132055,
                132567,
                133079,
                133591,
                134103,
                134615,
                135127,
                135639,
                136151,
                136663,
                137175,
                137687,
                138199,
                138711,
                114648,
                115160,
                115672,
                116184,
                116696,
                117208,
                117720,
                118232,
                118744,
                119256,
                119768,
                120280,
                120792,
                121304,
                121816,
                122328,
                122840,
                123352,
                123864,
                124376,
                124888,
                125400,
                125912,
                126424,
                126936,
                127448,
                127960,
                128472,
                128984,
                129496,
                130008,
                130520,
                131032,
                131544,
                132056,
                132568,
                133080,
                133592,
                134104,
                134616,
                135128,
                135640,
                136152,
                136664,
                137176,
                137688,
                138200,
                138712,
        };
        c.DefineDerivedCounter("ScalarCacheRequestCount",
                               "MemoryCache",
                               "The number of read requests made from executing shader code to the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,+,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,sum48,+",
                               "b5ac4201-c4cd-caa5-6ca7-4bc9a3abee01");
    }
    { // Index:86
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                114646,
                115158,
                115670,
                116182,
                116694,
                117206,
                117718,
                118230,
                118742,
                119254,
                119766,
                120278,
                120790,
                121302,
                121814,
                122326,
                122838,
                123350,
                123862,
                124374,
                124886,
                125398,
                125910,
                126422,
                126934,
                127446,
                127958,
                128470,
                128982,
                129494,
                130006,
                130518,
                131030,
                131542,
                132054,
                132566,
                133078,
                133590,
                134102,
                134614,
                135126,
                135638,
                136150,
                136662,
                137174,
                137686,
                138198,
                138710,
        };
        c.DefineDerivedCounter("ScalarCacheHitCount",
                               "MemoryCache",
                               "The number of read requests made from executing shader code which result in a cache hit from the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48",
                               "beebef4f-8f6c-9363-eda9-bb385ffec363");
    }
    { // Index:87
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                114647,
                115159,
                115671,
                116183,
                116695,
                117207,
                117719,
                118231,
                118743,
                119255,
                119767,
                120279,
                120791,
                121303,
                121815,
                122327,
                122839,
                123351,
                123863,
                124375,
                124887,
                125399,
                125911,
                126423,
                126935,
                127447,
                127959,
                128471,
                128983,
                129495,
                130007,
                130519,
                131031,
                131543,
                132055,
                132567,
                133079,
                133591,
                134103,
                134615,
                135127,
                135639,
                136151,
                136663,
                137175,
                137687,
                138199,
                138711,
                114648,
                115160,
                115672,
                116184,
                116696,
                117208,
                117720,
                118232,
                118744,
                119256,
                119768,
                120280,
                120792,
                121304,
                121816,
                122328,
                122840,
                123352,
                123864,
                124376,
                124888,
                125400,
                125912,
                126424,
                126936,
                127448,
                127960,
                128472,
                128984,
                129496,
                130008,
                130520,
                131032,
                131544,
                132056,
                132568,
                133080,
                133592,
                134104,
                134616,
                135128,
                135640,
                136152,
                136664,
                137176,
                137688,
                138200,
                138712,
        };
        c.DefineDerivedCounter("ScalarCacheMissCount",
                               "MemoryCache",
                               "The number of read requests made from executing shader code which result in a cache miss from the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,+",
                               "07f5afb2-75b2-4fc3-1a6a-579958f77dd3");
    }
    { // Index:88
        static constexpr std::array<GpaUInt32, 144> kHardwareCounters = {
                114622,
                115134,
                115646,
                116158,
                116670,
                117182,
                117694,
                118206,
                118718,
                119230,
                119742,
                120254,
                120766,
                121278,
                121790,
                122302,
                122814,
                123326,
                123838,
                124350,
                124862,
                125374,
                125886,
                126398,
                126910,
                127422,
                127934,
                128446,
                128958,
                129470,
                129982,
                130494,
                131006,
                131518,
                132030,
                132542,
                133054,
                133566,
                134078,
                134590,
                135102,
                135614,
                136126,
                136638,
                137150,
                137662,
                138174,
                138686,
                114623,
                115135,
                115647,
                116159,
                116671,
                117183,
                117695,
                118207,
                118719,
                119231,
                119743,
                120255,
                120767,
                121279,
                121791,
                122303,
                122815,
                123327,
                123839,
                124351,
                124863,
                125375,
                125887,
                126399,
                126911,
                127423,
                127935,
                128447,
                128959,
                129471,
                129983,
                130495,
                131007,
                131519,
                132031,
                132543,
                133055,
                133567,
                134079,
                134591,
                135103,
                135615,
                136127,
                136639,
                137151,
                137663,
                138175,
                138687,
                114624,
                115136,
                115648,
                116160,
                116672,
                117184,
                117696,
                118208,
                118720,
                119232,
                119744,
                120256,
                120768,
                121280,
                121792,
                122304,
                122816,
                123328,
                123840,
                124352,
                124864,
                125376,
                125888,
                126400,
                126912,
                127424,
                127936,
                128448,
                128960,
                129472,
                129984,
                130496,
                131008,
                131520,
                132032,
                132544,
                133056,
                133568,
                134080,
                134592,
                135104,
                135616,
                136128,
                136640,
                137152,
                137664,
                138176,
                138688,
        };
        c.DefineDerivedCounter("InstCacheHit",
                               "MemoryCache",
                               "The percentage of read requests made that hit the data in the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,+,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,sum48,+,/,(100),*",
                               "adf51399-597b-f017-8ec1-21817f92e91d");
    }
    { // Index:89
        static constexpr std::array<GpaUInt32, 144> kHardwareCounters = {
                114622,
                115134,
                115646,
                116158,
                116670,
                117182,
                117694,
                118206,
                118718,
                119230,
                119742,
                120254,
                120766,
                121278,
                121790,
                122302,
                122814,
                123326,
                123838,
                124350,
                124862,
                125374,
                125886,
                126398,
                126910,
                127422,
                127934,
                128446,
                128958,
                129470,
                129982,
                130494,
                131006,
                131518,
                132030,
                132542,
                133054,
                133566,
                134078,
                134590,
                135102,
                135614,
                136126,
                136638,
                137150,
                137662,
                138174,
                138686,
                114623,
                115135,
                115647,
                116159,
                116671,
                117183,
                117695,
                118207,
                118719,
                119231,
                119743,
                120255,
                120767,
                121279,
                121791,
                122303,
                122815,
                123327,
                123839,
                124351,
                124863,
                125375,
                125887,
                126399,
                126911,
                127423,
                127935,
                128447,
                128959,
                129471,
                129983,
                130495,
                131007,
                131519,
                132031,
                132543,
                133055,
                133567,
                134079,
                134591,
                135103,
                135615,
                136127,
                136639,
                137151,
                137663,
                138175,
                138687,
                114624,
                115136,
                115648,
                116160,
                116672,
                117184,
                117696,
                118208,
                118720,
                119232,
                119744,
                120256,
                120768,
                121280,
                121792,
                122304,
                122816,
                123328,
                123840,
                124352,
                124864,
                125376,
                125888,
                126400,
                126912,
                127424,
                127936,
                128448,
                128960,
                129472,
                129984,
                130496,
                131008,
                131520,
                132032,
                132544,
                133056,
                133568,
                134080,
                134592,
                135104,
                135616,
                136128,
                136640,
                137152,
                137664,
                138176,
                138688,
        };
        c.DefineDerivedCounter("InstCacheRequestCount",
                               "MemoryCache",
                               "The number of read requests made to the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,+,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,sum48,+",
                               "8c92ca8c-7dcc-88a0-3037-9704aa4f64ac");
    }
    { // Index:90
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                114622,
                115134,
                115646,
                116158,
                116670,
                117182,
                117694,
                118206,
                118718,
                119230,
                119742,
                120254,
                120766,
                121278,
                121790,
                122302,
                122814,
                123326,
                123838,
                124350,
                124862,
                125374,
                125886,
                126398,
                126910,
                127422,
                127934,
                128446,
                128958,
                129470,
                129982,
                130494,
                131006,
                131518,
                132030,
                132542,
                133054,
                133566,
                134078,
                134590,
                135102,
                135614,
                136126,
                136638,
                137150,
                137662,
                138174,
                138686,
        };
        c.DefineDerivedCounter("InstCacheHitCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache hit from the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48",
                               "778be78f-cf83-9558-e967-868e997e6743");
    }
    { // Index:91
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                114623,
                115135,
                115647,
                116159,
                116671,
                117183,
                117695,
                118207,
                118719,
                119231,
                119743,
                120255,
                120767,
                121279,
                121791,
                122303,
                122815,
                123327,
                123839,
                124351,
                124863,
                125375,
                125887,
                126399,
                126911,
                127423,
                127935,
                128447,
                128959,
                129471,
                129983,
                130495,
                131007,
                131519,
                132031,
                132543,
                133055,
                133567,
                134079,
                134591,
                135103,
                135615,
                136127,
                136639,
                137151,
                137663,
                138175,
                138687,
                114624,
                115136,
                115648,
                116160,
                116672,
                117184,
                117696,
                118208,
                118720,
                119232,
                119744,
                120256,
                120768,
                121280,
                121792,
                122304,
                122816,
                123328,
                123840,
                124352,
                124864,
                125376,
                125888,
                126400,
                126912,
                127424,
                127936,
                128448,
                128960,
                129472,
                129984,
                130496,
                131008,
                131520,
                132032,
                132544,
                133056,
                133568,
                134080,
                134592,
                135104,
                135616,
                136128,
                136640,
                137152,
                137664,
                138176,
                138688,
        };
        c.DefineDerivedCounter("InstCacheMissCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache miss from the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,+",
                               "351650dc-d349-dca8-2b78-b14a1479cf26");
    }
    { // Index:92
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                100650,
                100734,
                100818,
                100902,
                100986,
                101070,
                101154,
                101238,
                101322,
                101406,
                101490,
                101574,
                101658,
                101742,
                101826,
                101910,
                101994,
                102078,
                102162,
                102246,
                102330,
                102414,
                102498,
                102582,
                102666,
                102750,
                102834,
                102918,
                103002,
                103086,
                103170,
                103254,
                103338,
                103422,
                103506,
                103590,
                103674,
                103758,
                103842,
                103926,
                104010,
                104094,
                104178,
                104262,
                104346,
                104430,
                104514,
                104598,
                100654,
                100738,
                100822,
                100906,
                100990,
                101074,
                101158,
                101242,
                101326,
                101410,
                101494,
                101578,
                101662,
                101746,
                101830,
                101914,
                101998,
                102082,
                102166,
                102250,
                102334,
                102418,
                102502,
                102586,
                102670,
                102754,
                102838,
                102922,
                103006,
                103090,
                103174,
                103258,
                103342,
                103426,
                103510,
                103594,
                103678,
                103762,
                103846,
                103930,
                104014,
                104098,
                104182,
                104266,
                104350,
                104434,
                104518,
                104602,
        };
        c.DefineDerivedCounter("L1CacheHit",
                               "MemoryCache",
                               "The percentage of read or write requests that hit the data in the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(1),48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,/,-,(100),*",
                               "5a34915a-24b8-8baf-2bf8-5878e7894ae3");
    }
    { // Index:93
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                100650,
                100734,
                100818,
                100902,
                100986,
                101070,
                101154,
                101238,
                101322,
                101406,
                101490,
                101574,
                101658,
                101742,
                101826,
                101910,
                101994,
                102078,
                102162,
                102246,
                102330,
                102414,
                102498,
                102582,
                102666,
                102750,
                102834,
                102918,
                103002,
                103086,
                103170,
                103254,
                103338,
                103422,
                103506,
                103590,
                103674,
                103758,
                103842,
                103926,
                104010,
                104094,
                104178,
                104262,
                104346,
                104430,
                104514,
                104598,
        };
        c.DefineDerivedCounter("L1CacheRequestCount",
                               "MemoryCache",
                               "The number of read or write requests made to the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48",
                               "29c76c67-4611-205d-0b88-d08668df03c5");
    }
    { // Index:94
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                100650,
                100734,
                100818,
                100902,
                100986,
                101070,
                101154,
                101238,
                101322,
                101406,
                101490,
                101574,
                101658,
                101742,
                101826,
                101910,
                101994,
                102078,
                102162,
                102246,
                102330,
                102414,
                102498,
                102582,
                102666,
                102750,
                102834,
                102918,
                103002,
                103086,
                103170,
                103254,
                103338,
                103422,
                103506,
                103590,
                103674,
                103758,
                103842,
                103926,
                104010,
                104094,
                104178,
                104262,
                104346,
                104430,
                104514,
                104598,
                100654,
                100738,
                100822,
                100906,
                100990,
                101074,
                101158,
                101242,
                101326,
                101410,
                101494,
                101578,
                101662,
                101746,
                101830,
                101914,
                101998,
                102082,
                102166,
                102250,
                102334,
                102418,
                102502,
                102586,
                102670,
                102754,
                102838,
                102922,
                103006,
                103090,
                103174,
                103258,
                103342,
                103426,
                103510,
                103594,
                103678,
                103762,
                103846,
                103930,
                104014,
                104098,
                104182,
                104266,
                104350,
                104434,
                104518,
                104602,
        };
        c.DefineDerivedCounter("L1CacheHitCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache hit from the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum48,-",
                               "1ae150c3-f2d0-82c6-a51b-a77fd8d5fc33");
    }
    { // Index:95
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                100654,
                100738,
                100822,
                100906,
                100990,
                101074,
                101158,
                101242,
                101326,
                101410,
                101494,
                101578,
                101662,
                101746,
                101830,
                101914,
                101998,
                102082,
                102166,
                102250,
                102334,
                102418,
                102502,
                102586,
                102670,
                102754,
                102838,
                102922,
                103006,
                103090,
                103174,
                103258,
                103342,
                103426,
                103510,
                103594,
                103678,
                103762,
                103846,
                103930,
                104014,
                104098,
                104182,
                104266,
                104350,
                104434,
                104518,
                104602,
        };
        c.DefineDerivedCounter("L1CacheMissCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache miss from the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum48",
                               "71bfec6d-257b-849d-e212-cdf5c1b1de65");
    }
    { // Index:96
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                105103,
                105362,
                105621,
                105880,
                106139,
                106398,
                106657,
                106916,
                107175,
                107434,
                107693,
                107952,
                108211,
                108470,
                108729,
                108988,
                109247,
                109506,
                109765,
                110024,
                110283,
                110542,
                110801,
                111060,
                105143,
                105402,
                105661,
                105920,
                106179,
                106438,
                106697,
                106956,
                107215,
                107474,
                107733,
                107992,
                108251,
                108510,
                108769,
                109028,
                109287,
                109546,
                109805,
                110064,
                110323,
                110582,
                110841,
                111100,
        };
        c.DefineDerivedCounter("L2CacheHit",
                               "MemoryCache",
                               "The percentage of read or write requests that hit the data in the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),(1),24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,/,-,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,ifnotzero",
                               "47694e4d-6ce6-f387-080d-b1f3d00b73ac");
    }
    { // Index:97
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                105143,
                105402,
                105661,
                105920,
                106179,
                106438,
                106697,
                106956,
                107215,
                107474,
                107733,
                107992,
                108251,
                108510,
                108769,
                109028,
                109287,
                109546,
                109805,
                110064,
                110323,
                110582,
                110841,
                111100,
                105103,
                105362,
                105621,
                105880,
                106139,
                106398,
                106657,
                106916,
                107175,
                107434,
                107693,
                107952,
                108211,
                108470,
                108729,
                108988,
                109247,
                109506,
                109765,
                110024,
                110283,
                110542,
                110801,
                111060,
        };
        c.DefineDerivedCounter("L2CacheMiss",
                               "MemoryCache",
                               "The percentage of read or write requests that miss the data in the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size. Value range: 0% (optimal) to 100% (all miss).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,/,(100),*",
                               "8aee5458-a58e-11b6-5131-7f19ed070117");
    }
    { // Index:98
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                105103,
                105362,
                105621,
                105880,
                106139,
                106398,
                106657,
                106916,
                107175,
                107434,
                107693,
                107952,
                108211,
                108470,
                108729,
                108988,
                109247,
                109506,
                109765,
                110024,
                110283,
                110542,
                110801,
                111060,
        };
        c.DefineDerivedCounter("L2CacheRequestCount",
                               "MemoryCache",
                               "The number of read or write requests made to the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "21e9219c-e725-0d96-06b1-b21698b736b2");
    }
    { // Index:99
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                105103,
                105362,
                105621,
                105880,
                106139,
                106398,
                106657,
                106916,
                107175,
                107434,
                107693,
                107952,
                108211,
                108470,
                108729,
                108988,
                109247,
                109506,
                109765,
                110024,
                110283,
                110542,
                110801,
                111060,
                105143,
                105402,
                105661,
                105920,
                106179,
                106438,
                106697,
                106956,
                107215,
                107474,
                107733,
                107992,
                108251,
                108510,
                108769,
                109028,
                109287,
                109546,
                109805,
                110064,
                110323,
                110582,
                110841,
                111100,
        };
        c.DefineDerivedCounter("L2CacheHitCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache hit from the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-",
                               "29ddcb92-d3dd-951b-1b23-efe52e4eeee4");
    }
    { // Index:100
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                105143,
                105402,
                105661,
                105920,
                106179,
                106438,
                106697,
                106956,
                107215,
                107474,
                107733,
                107992,
                108251,
                108510,
                108769,
                109028,
                109287,
                109546,
                109805,
                110064,
                110323,
                110582,
                110841,
                111100,
        };
        c.DefineDerivedCounter("L2CacheMissCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache miss from the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24",
                               "376eec7b-ab25-9012-06b5-63291a17fd47");
    }
    { // Index:101
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                64578,
                64657,
                64736,
                64815,
                64894,
                64973,
                65052,
                65131,
                65210,
                65289,
                65368,
                65447,
                65526,
                65605,
                65684,
                65763,
                65842,
                65921,
                66000,
                66079,
                66158,
                66237,
                66316,
                66395,
                66474,
                66553,
                66632,
                66711,
                66790,
                66869,
                66948,
                67027,
                67106,
                67185,
                67264,
                67343,
                67422,
                67501,
                67580,
                67659,
                67738,
                67817,
                67896,
                67975,
                68054,
                68133,
                68212,
                68291,
                68370,
                68449,
                68528,
                68607,
                68686,
                68765,
                68844,
                68923,
                69002,
                69081,
                69160,
                69239,
                69318,
                69397,
                69476,
                69555,
                69634,
                69713,
                69792,
                69871,
                69950,
                70029,
                70108,
                70187,
                70266,
                70345,
                70424,
                70503,
                70582,
                70661,
                70740,
                70819,
                70898,
                70977,
                71056,
                71135,
                71214,
                71293,
                71372,
                71451,
                71530,
                71609,
                71688,
                71767,
                71846,
                71925,
                72004,
                72083,
        };
        c.DefineDerivedCounter("L0TagConflictReadStalledCycles",
                               "MemoryCache",
                               "The number of cycles read operations from the L0 cache are stalled due to tag conflicts.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96",
                               "e2412737-e2bf-c791-5f2f-64abd4ba47cf");
    }
    { // Index:102
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                64579,
                64658,
                64737,
                64816,
                64895,
                64974,
                65053,
                65132,
                65211,
                65290,
                65369,
                65448,
                65527,
                65606,
                65685,
                65764,
                65843,
                65922,
                66001,
                66080,
                66159,
                66238,
                66317,
                66396,
                66475,
                66554,
                66633,
                66712,
                66791,
                66870,
                66949,
                67028,
                67107,
                67186,
                67265,
                67344,
                67423,
                67502,
                67581,
                67660,
                67739,
                67818,
                67897,
                67976,
                68055,
                68134,
                68213,
                68292,
                68371,
                68450,
                68529,
                68608,
                68687,
                68766,
                68845,
                68924,
                69003,
                69082,
                69161,
                69240,
                69319,
                69398,
                69477,
                69556,
                69635,
                69714,
                69793,
                69872,
                69951,
                70030,
                70109,
                70188,
                70267,
                70346,
                70425,
                70504,
                70583,
                70662,
                70741,
                70820,
                70899,
                70978,
                71057,
                71136,
                71215,
                71294,
                71373,
                71452,
                71531,
                71610,
                71689,
                71768,
                71847,
                71926,
                72005,
                72084,
        };
        c.DefineDerivedCounter("L0TagConflictWriteStalledCycles",
                               "MemoryCache",
                               "The number of cycles write operations to the L0 cache are stalled due to tag conflicts.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96",
                               "0c2571f3-f084-f351-99ba-0d9e23b47e8e");
    }
    { // Index:103
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                64580,
                64659,
                64738,
                64817,
                64896,
                64975,
                65054,
                65133,
                65212,
                65291,
                65370,
                65449,
                65528,
                65607,
                65686,
                65765,
                65844,
                65923,
                66002,
                66081,
                66160,
                66239,
                66318,
                66397,
                66476,
                66555,
                66634,
                66713,
                66792,
                66871,
                66950,
                67029,
                67108,
                67187,
                67266,
                67345,
                67424,
                67503,
                67582,
                67661,
                67740,
                67819,
                67898,
                67977,
                68056,
                68135,
                68214,
                68293,
                68372,
                68451,
                68530,
                68609,
                68688,
                68767,
                68846,
                68925,
                69004,
                69083,
                69162,
                69241,
                69320,
                69399,
                69478,
                69557,
                69636,
                69715,
                69794,
                69873,
                69952,
                70031,
                70110,
                70189,
                70268,
                70347,
                70426,
                70505,
                70584,
                70663,
                70742,
                70821,
                70900,
                70979,
                71058,
                71137,
                71216,
                71295,
                71374,
                71453,
                71532,
                71611,
                71690,
                71769,
                71848,
                71927,
                72006,
                72085,
        };
        c.DefineDerivedCounter("L0TagConflictAtomicStalledCycles",
                               "MemoryCache",
                               "The number of cycles atomic operations on the L0 cache are stalled due to tag conflicts.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96",
                               "f13f8563-4151-1533-f42f-0f9c08a20210");
    }
    { // Index:104
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                105199,
                105458,
                105717,
                105976,
                106235,
                106494,
                106753,
                107012,
                107271,
                107530,
                107789,
                108048,
                108307,
                108566,
                108825,
                109084,
                109343,
                109602,
                109861,
                110120,
                110379,
                110638,
                110897,
                111156,
                105200,
                105459,
                105718,
                105977,
                106236,
                106495,
                106754,
                107013,
                107272,
                107531,
                107790,
                108049,
                108308,
                108567,
                108826,
                109085,
                109344,
                109603,
                109862,
                110121,
                110380,
                110639,
                110898,
                111157,
                105201,
                105460,
                105719,
                105978,
                106237,
                106496,
                106755,
                107014,
                107273,
                107532,
                107791,
                108050,
                108309,
                108568,
                108827,
                109086,
                109345,
                109604,
                109863,
                110122,
                110381,
                110640,
                110899,
                111158,
                105202,
                105461,
                105720,
                105979,
                106238,
                106497,
                106756,
                107015,
                107274,
                107533,
                107792,
                108051,
                108310,
                108569,
                108828,
                109087,
                109346,
                109605,
                109864,
                110123,
                110382,
                110641,
                110900,
                111159,
        };
        c.DefineDerivedCounter("FetchSize",
                               "GlobalMemory",
                               "The total bytes fetched from the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,(32),*,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,(64),*,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,sum24,(96),*,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum24,(128),*,sum4",
                               "664bb3ef-6eca-86b1-1e2d-30cb897b5fa9");
    }
    { // Index:105
        static constexpr std::array<GpaUInt32, 48> kHardwareCounters = {
                105183,
                105442,
                105701,
                105960,
                106219,
                106478,
                106737,
                106996,
                107255,
                107514,
                107773,
                108032,
                108291,
                108550,
                108809,
                109068,
                109327,
                109586,
                109845,
                110104,
                110363,
                110622,
                110881,
                111140,
                105185,
                105444,
                105703,
                105962,
                106221,
                106480,
                106739,
                106998,
                107257,
                107516,
                107775,
                108034,
                108293,
                108552,
                108811,
                109070,
                109329,
                109588,
                109847,
                110106,
                110365,
                110624,
                110883,
                111142,
        };
        c.DefineDerivedCounter("WriteSize",
                               "GlobalMemory",
                               "The total bytes written to the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,-,(32),*,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum24,(64),*,+",
                               "f96f2c16-b1b4-4ec4-229c-fc82e6f80a82");
    }
    { // Index:106
        static constexpr std::array<GpaUInt32, 97> kHardwareCounters = {
                21923,
                22159,
                22395,
                22631,
                22867,
                23103,
                23339,
                23575,
                23811,
                24047,
                24283,
                24519,
                24755,
                24991,
                25227,
                25463,
                25699,
                25935,
                26171,
                26407,
                26643,
                26879,
                27115,
                27351,
                27587,
                27823,
                28059,
                28295,
                28531,
                28767,
                29003,
                29239,
                29475,
                29711,
                29947,
                30183,
                30419,
                30655,
                30891,
                31127,
                31363,
                31599,
                31835,
                32071,
                32307,
                32543,
                32779,
                33015,
                33251,
                33487,
                33723,
                33959,
                34195,
                34431,
                34667,
                34903,
                35139,
                35375,
                35611,
                35847,
                36083,
                36319,
                36555,
                36791,
                37027,
                37263,
                37499,
                37735,
                37971,
                38207,
                38443,
                38679,
                38915,
                39151,
                39387,
                39623,
                39859,
                40095,
                40331,
                40567,
                40803,
                41039,
                41275,
                41511,
                41747,
                41983,
                42219,
                42455,
                42691,
                42927,
                43163,
                43399,
                43635,
                43871,
                44107,
                44343,
                24,
        };
        c.DefineDerivedCounter("MemUnitBusy",
                               "GlobalMemory",
                               "The percentage of GPUTime the memory unit is active. The result includes the stall time (MemUnitStalled). This is measured with all extra fetches and writes and any cache or memory effects taken into account. Value range: 0% to 100% (fetch-bound).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96,96,/,(100),*",
                               "a1efa380-4a72-e066-e06a-2ab71a488521");
    }
    { // Index:107
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                21923,
                22159,
                22395,
                22631,
                22867,
                23103,
                23339,
                23575,
                23811,
                24047,
                24283,
                24519,
                24755,
                24991,
                25227,
                25463,
                25699,
                25935,
                26171,
                26407,
                26643,
                26879,
                27115,
                27351,
                27587,
                27823,
                28059,
                28295,
                28531,
                28767,
                29003,
                29239,
                29475,
                29711,
                29947,
                30183,
                30419,
                30655,
                30891,
                31127,
                31363,
                31599,
                31835,
                32071,
                32307,
                32543,
                32779,
                33015,
                33251,
                33487,
                33723,
                33959,
                34195,
                34431,
                34667,
                34903,
                35139,
                35375,
                35611,
                35847,
                36083,
                36319,
                36555,
                36791,
                37027,
                37263,
                37499,
                37735,
                37971,
                38207,
                38443,
                38679,
                38915,
                39151,
                39387,
                39623,
                39859,
                40095,
                40331,
                40567,
                40803,
                41039,
                41275,
                41511,
                41747,
                41983,
                42219,
                42455,
                42691,
                42927,
                43163,
                43399,
                43635,
                43871,
                44107,
                44343,
        };
        c.DefineDerivedCounter("MemUnitBusyCycles",
                               "GlobalMemory",
                               "Number of GPU cycles the memory unit is active. The result includes the stall time (MemUnitStalledCycles). This is measured with all extra fetches and writes and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96",
                               "168f077c-4797-b2f5-717f-105c725266c8");
    }
    { // Index:108
        static constexpr std::array<GpaUInt32, 97> kHardwareCounters = {
                64571,
                64650,
                64729,
                64808,
                64887,
                64966,
                65045,
                65124,
                65203,
                65282,
                65361,
                65440,
                65519,
                65598,
                65677,
                65756,
                65835,
                65914,
                65993,
                66072,
                66151,
                66230,
                66309,
                66388,
                66467,
                66546,
                66625,
                66704,
                66783,
                66862,
                66941,
                67020,
                67099,
                67178,
                67257,
                67336,
                67415,
                67494,
                67573,
                67652,
                67731,
                67810,
                67889,
                67968,
                68047,
                68126,
                68205,
                68284,
                68363,
                68442,
                68521,
                68600,
                68679,
                68758,
                68837,
                68916,
                68995,
                69074,
                69153,
                69232,
                69311,
                69390,
                69469,
                69548,
                69627,
                69706,
                69785,
                69864,
                69943,
                70022,
                70101,
                70180,
                70259,
                70338,
                70417,
                70496,
                70575,
                70654,
                70733,
                70812,
                70891,
                70970,
                71049,
                71128,
                71207,
                71286,
                71365,
                71444,
                71523,
                71602,
                71681,
                71760,
                71839,
                71918,
                71997,
                72076,
                24,
        };
        c.DefineDerivedCounter("MemUnitStalled",
                               "GlobalMemory",
                               "The percentage of GPUTime the memory unit is stalled. Try reducing the number or size of fetches and writes if possible. Value range: 0% (optimal) to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96,96,/,(100),*",
                               "465ba54f-d250-1453-790a-731b10d230b1");
    }
    { // Index:109
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                64571,
                64650,
                64729,
                64808,
                64887,
                64966,
                65045,
                65124,
                65203,
                65282,
                65361,
                65440,
                65519,
                65598,
                65677,
                65756,
                65835,
                65914,
                65993,
                66072,
                66151,
                66230,
                66309,
                66388,
                66467,
                66546,
                66625,
                66704,
                66783,
                66862,
                66941,
                67020,
                67099,
                67178,
                67257,
                67336,
                67415,
                67494,
                67573,
                67652,
                67731,
                67810,
                67889,
                67968,
                68047,
                68126,
                68205,
                68284,
                68363,
                68442,
                68521,
                68600,
                68679,
                68758,
                68837,
                68916,
                68995,
                69074,
                69153,
                69232,
                69311,
                69390,
                69469,
                69548,
                69627,
                69706,
                69785,
                69864,
                69943,
                70022,
                70101,
                70180,
                70259,
                70338,
                70417,
                70496,
                70575,
                70654,
                70733,
                70812,
                70891,
                70970,
                71049,
                71128,
                71207,
                71286,
                71365,
                71444,
                71523,
                71602,
                71681,
                71760,
                71839,
                71918,
                71997,
                72076,
        };
        c.DefineDerivedCounter("MemUnitStalledCycles",
                               "GlobalMemory",
                               "Number of GPU cycles the memory unit is stalled.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,max96",
                               "2745659a-0e40-bace-3b9b-86a54f8e4623");
    }
    { // Index:110
        static constexpr std::array<GpaUInt32, 25> kHardwareCounters = {
                105188,
                105447,
                105706,
                105965,
                106224,
                106483,
                106742,
                107001,
                107260,
                107519,
                107778,
                108037,
                108296,
                108555,
                108814,
                109073,
                109332,
                109591,
                109850,
                110109,
                110368,
                110627,
                110886,
                111145,
                24,
        };
        c.DefineDerivedCounter("WriteUnitStalled",
                               "GlobalMemory",
                               "The percentage of GPUTime the Write unit is stalled. Value range: 0% to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24,24,/,(100),*",
                               "594ad3ce-d1ec-10fc-7d59-25738e397d72");
    }
    { // Index:111
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                105188,
                105447,
                105706,
                105965,
                106224,
                106483,
                106742,
                107001,
                107260,
                107519,
                107778,
                108037,
                108296,
                108555,
                108814,
                109073,
                109332,
                109591,
                109850,
                110109,
                110368,
                110627,
                110886,
                111145,
        };
        c.DefineDerivedCounter("WriteUnitStalledCycles",
                               "GlobalMemory",
                               "Number of GPU cycles the Write unit is stalled.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,max24",
                               "ede3305e-abd4-d6bf-6b00-ffc57a29fce3");
    }
    { // Index:112
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                90315,
                90413,
                90511,
                90609,
                90707,
                90805,
                90903,
                91001,
                91099,
                91197,
                91295,
                91393,
                91491,
                91589,
                91687,
                91785,
                91883,
                91981,
                92079,
                92177,
                92275,
                92373,
                92471,
                92569,
        };
        c.DefineDerivedCounter("LocalVidMemBytes",
                               "GlobalMemory",
                               "Number of bytes read from or written to the Infinity Cache (if available) or local video memory",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,(32),*",
                               "48207266-a1ef-290a-3c77-effd1260fa2c");
    }
    { // Index:113
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                90317,
                90415,
                90513,
                90611,
                90709,
                90807,
                90905,
                91003,
                91101,
                91199,
                91297,
                91395,
                91493,
                91591,
                91689,
                91787,
                91885,
                91983,
                92081,
                92179,
                92277,
                92375,
                92473,
                92571,
        };
        c.DefineDerivedCounter("PcieBytes",
                               "GlobalMemory",
                               "Number of bytes sent and received over the PCIe bus",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,sum24,(32),*",
                               "4bbe92de-f79e-ed39-bfde-9e08390cdb21");
    }
    { // Index:114
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                44682,
                44890,
                45098,
                45306,
                45514,
                45722,
                45930,
                46138,
                46346,
                46554,
                46762,
                46970,
                47178,
                47386,
                47594,
                47802,
                48010,
                48218,
                48426,
                48634,
                48842,
                49050,
                49258,
                49466,
                49674,
                49882,
                50090,
                50298,
                50506,
                50714,
                50922,
                51130,
                51338,
                51546,
                51754,
                51962,
                52170,
                52378,
                52586,
                52794,
                53002,
                53210,
                53418,
                53626,
                53834,
                54042,
                54250,
                54458,
                54666,
                54874,
                55082,
                55290,
                55498,
                55706,
                55914,
                56122,
                56330,
                56538,
                56746,
                56954,
                57162,
                57370,
                57578,
                57786,
                57994,
                58202,
                58410,
                58618,
                58826,
                59034,
                59242,
                59450,
                59658,
                59866,
                60074,
                60282,
                60490,
                60698,
                60906,
                61114,
                61322,
                61530,
                61738,
                61946,
                62154,
                62362,
                62570,
                62778,
                62986,
                63194,
                63402,
                63610,
                63818,
                64026,
                64234,
                64442,
        };
        c.DefineDerivedCounter("RayTriTests",
                               "RayTracing",
                               "The number of ray triangle intersection tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96",
                               "20c646f5-fa99-51c2-b583-0a3d77d675a8");
    }
    { // Index:115
        static constexpr std::array<GpaUInt32, 192> kHardwareCounters = {
                44680,
                44888,
                45096,
                45304,
                45512,
                45720,
                45928,
                46136,
                46344,
                46552,
                46760,
                46968,
                47176,
                47384,
                47592,
                47800,
                48008,
                48216,
                48424,
                48632,
                48840,
                49048,
                49256,
                49464,
                49672,
                49880,
                50088,
                50296,
                50504,
                50712,
                50920,
                51128,
                51336,
                51544,
                51752,
                51960,
                52168,
                52376,
                52584,
                52792,
                53000,
                53208,
                53416,
                53624,
                53832,
                54040,
                54248,
                54456,
                54664,
                54872,
                55080,
                55288,
                55496,
                55704,
                55912,
                56120,
                56328,
                56536,
                56744,
                56952,
                57160,
                57368,
                57576,
                57784,
                57992,
                58200,
                58408,
                58616,
                58824,
                59032,
                59240,
                59448,
                59656,
                59864,
                60072,
                60280,
                60488,
                60696,
                60904,
                61112,
                61320,
                61528,
                61736,
                61944,
                62152,
                62360,
                62568,
                62776,
                62984,
                63192,
                63400,
                63608,
                63816,
                64024,
                64232,
                64440,
                44681,
                44889,
                45097,
                45305,
                45513,
                45721,
                45929,
                46137,
                46345,
                46553,
                46761,
                46969,
                47177,
                47385,
                47593,
                47801,
                48009,
                48217,
                48425,
                48633,
                48841,
                49049,
                49257,
                49465,
                49673,
                49881,
                50089,
                50297,
                50505,
                50713,
                50921,
                51129,
                51337,
                51545,
                51753,
                51961,
                52169,
                52377,
                52585,
                52793,
                53001,
                53209,
                53417,
                53625,
                53833,
                54041,
                54249,
                54457,
                54665,
                54873,
                55081,
                55289,
                55497,
                55705,
                55913,
                56121,
                56329,
                56537,
                56745,
                56953,
                57161,
                57369,
                57577,
                57785,
                57993,
                58201,
                58409,
                58617,
                58825,
                59033,
                59241,
                59449,
                59657,
                59865,
                60073,
                60281,
                60489,
                60697,
                60905,
                61113,
                61321,
                61529,
                61737,
                61945,
                62153,
                62361,
                62569,
                62777,
                62985,
                63193,
                63401,
                63609,
                63817,
                64025,
                64233,
                64441,
        };
        c.DefineDerivedCounter("RayBoxTests",
                               "RayTracing",
                               "The number of ray box intersection tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,sum2",
                               "7769ceee-824d-b84a-8779-bb3f8e449582");
    }
    { // Index:116
        static constexpr std::array<GpaUInt32, 288> kHardwareCounters = {
                44682,
                44890,
                45098,
                45306,
                45514,
                45722,
                45930,
                46138,
                46346,
                46554,
                46762,
                46970,
                47178,
                47386,
                47594,
                47802,
                48010,
                48218,
                48426,
                48634,
                48842,
                49050,
                49258,
                49466,
                49674,
                49882,
                50090,
                50298,
                50506,
                50714,
                50922,
                51130,
                51338,
                51546,
                51754,
                51962,
                52170,
                52378,
                52586,
                52794,
                53002,
                53210,
                53418,
                53626,
                53834,
                54042,
                54250,
                54458,
                54666,
                54874,
                55082,
                55290,
                55498,
                55706,
                55914,
                56122,
                56330,
                56538,
                56746,
                56954,
                57162,
                57370,
                57578,
                57786,
                57994,
                58202,
                58410,
                58618,
                58826,
                59034,
                59242,
                59450,
                59658,
                59866,
                60074,
                60282,
                60490,
                60698,
                60906,
                61114,
                61322,
                61530,
                61738,
                61946,
                62154,
                62362,
                62570,
                62778,
                62986,
                63194,
                63402,
                63610,
                63818,
                64026,
                64234,
                64442,
                44680,
                44888,
                45096,
                45304,
                45512,
                45720,
                45928,
                46136,
                46344,
                46552,
                46760,
                46968,
                47176,
                47384,
                47592,
                47800,
                48008,
                48216,
                48424,
                48632,
                48840,
                49048,
                49256,
                49464,
                49672,
                49880,
                50088,
                50296,
                50504,
                50712,
                50920,
                51128,
                51336,
                51544,
                51752,
                51960,
                52168,
                52376,
                52584,
                52792,
                53000,
                53208,
                53416,
                53624,
                53832,
                54040,
                54248,
                54456,
                54664,
                54872,
                55080,
                55288,
                55496,
                55704,
                55912,
                56120,
                56328,
                56536,
                56744,
                56952,
                57160,
                57368,
                57576,
                57784,
                57992,
                58200,
                58408,
                58616,
                58824,
                59032,
                59240,
                59448,
                59656,
                59864,
                60072,
                60280,
                60488,
                60696,
                60904,
                61112,
                61320,
                61528,
                61736,
                61944,
                62152,
                62360,
                62568,
                62776,
                62984,
                63192,
                63400,
                63608,
                63816,
                64024,
                64232,
                64440,
                44681,
                44889,
                45097,
                45305,
                45513,
                45721,
                45929,
                46137,
                46345,
                46553,
                46761,
                46969,
                47177,
                47385,
                47593,
                47801,
                48009,
                48217,
                48425,
                48633,
                48841,
                49049,
                49257,
                49465,
                49673,
                49881,
                50089,
                50297,
                50505,
                50713,
                50921,
                51129,
                51337,
                51545,
                51753,
                51961,
                52169,
                52377,
                52585,
                52793,
                53001,
                53209,
                53417,
                53625,
                53833,
                54041,
                54249,
                54457,
                54665,
                54873,
                55081,
                55289,
                55497,
                55705,
                55913,
                56121,
                56329,
                56537,
                56745,
                56953,
                57161,
                57369,
                57577,
                57785,
                57993,
                58201,
                58409,
                58617,
                58825,
                59033,
                59241,
                59449,
                59657,
                59865,
                60073,
                60281,
                60489,
                60697,
                60905,
                61113,
                61321,
                61529,
                61737,
                61945,
                62153,
                62361,
                62569,
                62777,
                62985,
                63193,
                63401,
                63609,
                63817,
                64025,
                64233,
                64441,
        };
        c.DefineDerivedCounter("TotalRayTests",
                               "RayTracing",
                               "Total number of ray intersection tests, includes both box and triangle intersections.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,sum96,sum2,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,sum96,sum2",
                               "ce6e4c7f-cf9d-6f8f-4456-70f670354bbe");
    }
    { // Index:117
        static constexpr std::array<GpaUInt32, 96> kHardwareCounters = {
                44646,
                44854,
                45062,
                45270,
                45478,
                45686,
                45894,
                46102,
                46310,
                46518,
                46726,
                46934,
                47142,
                47350,
                47558,
                47766,
                47974,
                48182,
                48390,
                48598,
                48806,
                49014,
                49222,
                49430,
                49638,
                49846,
                50054,
                50262,
                50470,
                50678,
                50886,
                51094,
                51302,
                51510,
                51718,
                51926,
                52134,
                52342,
                52550,
                52758,
                52966,
                53174,
                53382,
                53590,
                53798,
                54006,
                54214,
                54422,
                54630,
                54838,
                55046,
                55254,
                55462,
                55670,
                55878,
                56086,
                56294,
                56502,
                56710,
                56918,
                57126,
                57334,
                57542,
                57750,
                57958,
                58166,
                58374,
                58582,
                58790,
                58998,
                59206,
                59414,
                59622,
                59830,
                60038,
                60246,
                60454,
                60662,
                60870,
                61078,
                61286,
                61494,
                61702,
                61910,
                62118,
                62326,
                62534,
                62742,
                62950,
                63158,
                63366,
                63574,
                63782,
                63990,
                64198,
                64406,
        };
        c.DefineDerivedCounter("RayTestsPerWave",
                               "RayTracing",
                               "The number of ray intersection tests per wave.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,sum96",
                               "45b0cd7f-3b43-6344-37d7-054062e50f60");
    }
}

// clang-format on

