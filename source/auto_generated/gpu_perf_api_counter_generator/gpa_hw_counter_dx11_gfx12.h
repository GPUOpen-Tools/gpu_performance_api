//==============================================================================
// Copyright (c) 2010-2025 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief DX11 counter definitions for GFX12.
//==============================================================================

// This file is autogenerated by the ConvertHWEnums project.

#ifndef GPA_AUTO_GENERATED_GPU_PERF_API_COUNTER_GENERATOR_GPA_HW_COUNTER_DX11_GFX12_H_
#define GPA_AUTO_GENERATED_GPU_PERF_API_COUNTER_GENERATOR_GPA_HW_COUNTER_DX11_GFX12_H_

// clang-format off

#include <windows.h>
#include <AmdDxExtPerfProfile.h>

#include <set>

struct GpaHardwareCounterDesc;
struct GpaCounterGroupDesc;
struct GpaSqCounterGroupDesc;

namespace counter_dx11_gfx12
{
    extern std::vector<std::vector<GpaHardwareCounterDesc>*>          kDx11CounterGroupArrayGfx12; ///< Array of hardware counter groups for Dx11 for Gfx12 family
    extern std::vector<GpaCounterGroupDesc>                           kHwDx11GroupsGfx12; ///< Array of counter groups for Dx11 for Gfx12 family
    extern GpaCounterGroupExposedCounterDesc                          kHwDx11ExposedCountersByGroupGfx12[]; ///< Array of exposed counter groups for Dx11 for Gfx12 family
    extern GpaPaddedCounterDesc                                       kDx11PaddedCounterByGroupGfx12[]; ///< Array of reserved counter for Dx11 for Gfx12 family
    extern GpaSqCounterGroupDesc                                      kHwDx11SqGroupsGfx12[]; ///< Array of SQ groups for Dx11 for Gfx12 family
    extern unsigned int                                               kHwDx11SqIsolatedGroupsGfx12[]; ///< Array of counter groups isolated from SQ counter groups for Dx11 for Gfx12 family
    extern PE_BLOCK_ID                                                kHwDx11DriverEnumGfx12[]; ///< Array of driver enum values per group for Dx11 for Gfx12 family
    extern const unsigned int                                         kHwDx11GpuTimeBottomToBottomDurationIndexGfx12; ///< Index of delta between the previous command reaching bottom of pipe and the current command reaching bottom of pipe, will not include latency of first data to travel through pipeline, best for large data sets. for Dx11 for Gfx12 family
    extern const unsigned int                                         kHwDx11GpuTimeBottomToBottomStartIndexGfx12; ///< Index of time of the previous command reaching bottom of pipe for Dx11 for Gfx12 family
    extern const unsigned int                                         kHwDx11GpuTimeBottomToBottomEndIndexGfx12; ///< Index of time of the current command reaching bottom of pipe for Dx11 for Gfx12 family
    extern const unsigned int                                         kHwDx11GpuTimeTopToBottomDurationIndexGfx12; ///< Index of execution duration of the current command from top of pipe to bottom of pipe, may include overhead of time in queue for Dx11 for Gfx12 family
    extern const unsigned int                                         kHwDx11GpuTimeTopToBottomStartIndexGfx12; ///< Index of time that the current command reaches the top of pipe for Dx11 for Gfx12 family
    extern const unsigned int                                         kHwDx11GpuTimeTopToBottomEndIndexGfx12; ///< Index of time that the current command reaches the bottom of pipe for Dx11 for Gfx12 family
    extern const std::set<unsigned int>                               kHwDx11TimestampBlockIdsGfx12; ///< Timestamp block id's for Dx11 for Gfx12 family
    extern const std::set<unsigned int>                               kHwDx11TimeCounterIndicesGfx12; ///< Timestamp counter indices for Dx11 for Gfx12 family
    extern const unsigned int                                         kHwDx11GroupCountGfx12; ///< Hardware Group Count for Dx11 for Gfx12 family
    extern const unsigned int                                         kDx11PaddedCounterGroupCountGfx12; ///< reserved counter group count for Dx11 for Gfx12 family
    extern const unsigned int                                         kHwDx11SqGroupCountGfx12; ///< Hardware SQ Group Count for Dx11 for Gfx12 family
    extern const unsigned int                                         kHwDx11SqIsolatedGroupCountGfx12; ///< Hardware Isolated Group Count for Dx11 for Gfx12 family

/// @brief If the requested ASIC type is supported, then the global GPU generation block instance counters are updated.
///
/// @param [in] asic_type The ASIC type that is currently in use.
///
/// @return True if the ASIC is matched by this file and block instances are updated, otherwise false.
inline bool OverrideMaxBlockEvents(GDT_HW_ASIC_TYPE asic_type)
{
    UNREFERENCED_PARAMETER(asic_type);


    return true;
}
} //  namespace counter_dx11_gfx12

// clang-format on

#endif  // GPA_AUTO_GENERATED_GPU_PERF_API_COUNTER_GENERATOR_GPA_HW_COUNTER_DX11_GFX12_H_
