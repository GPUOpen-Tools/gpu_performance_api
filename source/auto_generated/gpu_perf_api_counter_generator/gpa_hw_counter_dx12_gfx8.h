//==============================================================================
// Copyright (c) 2010-2021 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief DX12 counter definitions for GFX8.
//==============================================================================

// This file is autogenerated by the ConvertHWEnums project.

#ifndef GPA_AUTO_GENERATED_GPU_PERF_API_COUNTER_GENERATOR_GPA_HW_COUNTER_DX12_GFX8_H_
#define GPA_AUTO_GENERATED_GPU_PERF_API_COUNTER_GENERATOR_GPA_HW_COUNTER_DX12_GFX8_H_

// clang-format off

#include <windows.h>
#pragma warning (push)
#pragma warning (disable: 4201)
#include <AmdExtGpaInterface.h>
#pragma warning (pop)

#include <set>

struct GpaHardwareCounterDesc;
struct GpaCounterGroupDesc;
struct GpaSqCounterGroupDesc;

namespace counter_dx12_gfx8
{
    extern GpaHardwareCounterDesc*           kDx12CounterGroupArrayGfx8[]; ///< Array of hardware counter groups for Dx12 for Gfx8 family
    extern GpaHardwareCounterDesc*           kDx12ExposedCountersGroupArrayGfx8[]; ///< Array of hardware exposed counter groups for Dx12 for Gfx8 family
    extern GpaCounterGroupDesc               kHwDx12GroupsGfx8[]; ///< Array of counter groups for Dx12 for Gfx8 family
    extern GpaCounterGroupExposedCounterDesc kHwDx12ExposedCountersByGroupGfx8[]; ///< Array of exposed counter groups for Dx12 for Gfx8 family
    extern GpaPaddedCounterDesc              kDx12PaddedCounterByGroupGfx8[]; ///< Array of reserved counter for Dx12 for Gfx8 family
    extern GpaSqCounterGroupDesc             kHwDx12SqGroupsGfx8[]; ///< Array of SQ groups for Dx12 for Gfx8 family
    extern unsigned int                       kHwDx12SqIsolatedGroupsGfx8[]; ///< Array of counter groups isolated from SQ counter groups for Dx12 for Gfx8 family
    extern AmdExtGpuBlock                     kHwDx12DriverEnumGfx8[]; ///< Array of driver enum values per group for Dx12 for Gfx8 family
    extern const unsigned int                 kHwDx12GpuTimeBottomToBottomDurationIndexGfx8; ///< Index of delta between the previous command reaching bottom of pipe and the current command reaching bottom of pipe, will not include latency of first data to travel through pipeline, best for large data sets. for Dx12 for Gfx8 family
    extern const unsigned int                 kHwDx12GpuTimeBottomToBottomStartIndexGfx8; ///< Index of time of the previous command reaching bottom of pipe for Dx12 for Gfx8 family
    extern const unsigned int                 kHwDx12GpuTimeBottomToBottomEndIndexGfx8; ///< Index of time of the current command reaching bottom of pipe for Dx12 for Gfx8 family
    extern const unsigned int                 kHwDx12GpuTimeTopToBottomDurationIndexGfx8; ///< Index of execution duration of the current command from top of pipe to bottom of pipe, may include overhead of time in queue for Dx12 for Gfx8 family
    extern const unsigned int                 kHwDx12GpuTimeTopToBottomStartIndexGfx8; ///< Index of time that the current command reaches the top of pipe for Dx12 for Gfx8 family
    extern const unsigned int                 kHwDx12GpuTimeTopToBottomEndIndexGfx8; ///< Index of time that the current command reaches the bottom of pipe for Dx12 for Gfx8 family
    extern const std::set<unsigned int>       kHwDx12TimestampBlockIdsGfx8; ///< Timestamp block id's for Dx12 for Gfx8 family
    extern const std::set<unsigned int>       kHwDx12TimeCounterIndicesGfx8; ///< Timestamp counter indices for Dx12 for Gfx8 family
    extern const unsigned int                 kHwDx12GroupCountGfx8; ///< Hardware Group Count for Dx12 for Gfx8 family
    extern const unsigned int                 kHwDx12ExposedCountersGroupCountGfx8; ///< Whitelist hardware counter Group Count for Dx12 for Gfx8 family
    extern const unsigned int                 kDx12PaddedCounterGroupCountGfx8; ///< reserved counter group count for Dx12 for Gfx8 family
    extern const unsigned int                 kHwDx12SqGroupCountGfx8; ///< Hardware SQ Group Count for Dx12 for Gfx8 family
    extern const unsigned int                 kHwDx12SqIsolatedGroupCountGfx8; ///< Hardware Isolated Group Count for Dx12 for Gfx8 family

/// @brief If the requested ASIC type is supported, then the global GPU generation block instance counters are updated.
///
/// @param [in] asic_type The ASIC type that is currently in use.
///
/// @return True if the ASIC is matched by this file and block instances are updated, otherwise false.
inline bool OverrideMaxBlockEvents(GDT_HW_ASIC_TYPE asic_type)
{
    UNREFERENCED_PARAMETER(asic_type);

    // dx12 specific max event overrides
    auto block_map = BuildBlockMap(kHwDx12GroupsGfx8, kHwDx12GroupCountGfx8);

    UpdateMaxSpmBlockEvents(block_map.get(), "CPF", 4);
    UpdateMaxSpmBlockEvents(block_map.get(), "IA", 4);
    UpdateMaxSpmBlockEvents(block_map.get(), "VGT", 6);
    UpdateMaxSpmBlockEvents(block_map.get(), "PA_SU", 6);
    UpdateMaxSpmBlockEvents(block_map.get(), "PA_SC", 4);
    UpdateMaxSpmBlockEvents(block_map.get(), "SPI", 16);
    UpdateMaxSpmBlockEvents(block_map.get(), "SQ", 16);
    UpdateMaxSpmBlockEvents(block_map.get(), "SX", 8);
    UpdateMaxSpmBlockEvents(block_map.get(), "TA", 4);
    UpdateMaxSpmBlockEvents(block_map.get(), "TD", 4);
    UpdateMaxSpmBlockEvents(block_map.get(), "TCP", 6);
    UpdateMaxSpmBlockEvents(block_map.get(), "TCC", 8);
    UpdateMaxSpmBlockEvents(block_map.get(), "TCA", 8);
    UpdateMaxSpmBlockEvents(block_map.get(), "DB", 6);
    UpdateMaxSpmBlockEvents(block_map.get(), "CB", 4);
    UpdateMaxSpmBlockEvents(block_map.get(), "GDS", 4);
    UpdateMaxSpmBlockEvents(block_map.get(), "SRBM", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "GRBM", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "GRBMSE", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "RLC", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "SDMA", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "MC", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "CPG", 4);
    UpdateMaxSpmBlockEvents(block_map.get(), "CPC", 4);
    UpdateMaxSpmBlockEvents(block_map.get(), "WD", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "TCS", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "ATC", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "ATCL2", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "MCVML2", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "GCEA", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "RPB", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "RMI", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "IH", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "GPIN", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "GPUTimeStamp", 0);
    UpdateMaxSpmBlockEvents(block_map.get(), "GPUTime", 0);


    return true;
}
} //  namespace counter_dx12_gfx8

// clang-format on

#endif  // GPA_AUTO_GENERATED_GPU_PERF_API_COUNTER_GENERATOR_GPA_HW_COUNTER_DX12_GFX8_H_
