//==============================================================================
// Copyright (c) 2010-2025 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief Public Counter Definitions for VK GFX103.
//==============================================================================

#include <array>
#include "gpu_perf_api_common/gpa_array_view.hpp"
// clang-format off
#include "gpu_perf_api_counter_generator/gpa_counter.h"
#include "auto_generated/gpu_perf_api_counter_generator/public_counter_definitions_vk_gfx103.h"

// *** Note, this is an auto-generated file. Do not edit. Execute PublicCounterCompiler to rebuild.

void AutoDefinePublicDerivedCountersVkGfx103(GpaDerivedCounters& c)
{
    { // Index:0
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                104720,
        };
        c.DefineDerivedCounter("GPUTime",
                               "Timing",
                               "Time this API command took to execute on the GPU in nanoseconds from the time the previous command reached the bottom of the pipeline (BOP) to the time this command reaches the bottom of the pipeline (BOP). Does not include time that draw calls are processed in parallel.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "0,TS_FREQ,/,(1000000000),*",
                               "cbd338f2-de6c-7b14-92ad-ba724ca2e501");
    }
    { // Index:1
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                104723,
        };
        c.DefineDerivedCounter("ExecutionDuration",
                               "Timing",
                               "GPU command execution duration in nanoseconds, from the time the command enters the top of the pipeline (TOP) to the time the command reaches the bottom of the pipeline (BOP). Does not include time that draw calls are processed in parallel.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "0,TS_FREQ,/,(1000000000),*",
                               "b2f08d0d-af13-cd66-d3b4-b290ad448e69");
    }
    { // Index:2
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                104724,
        };
        c.DefineDerivedCounter("ExecutionStart",
                               "Timing",
                               "GPU command execution start time in nanoseconds. This is the time the command enters the top of the pipeline (TOP).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "0,TS_FREQ,/,(1000000000),*",
                               "a368f79d-fcfe-2158-71c4-2f0c4eef5aa4");
    }
    { // Index:3
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                104725,
        };
        c.DefineDerivedCounter("ExecutionEnd",
                               "Timing",
                               "GPU command execution end time in nanoseconds. This is the time the command reaches the bottom of the pipeline (BOP).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "0,TS_FREQ,/,(1000000000),*",
                               "0bce206a-0976-06a2-bf20-03fb351035a8");
    }
    { // Index:4
        static constexpr std::array<GpaUInt32, 2> kHardwareCounters = {
                24,
                0,
        };
        c.DefineDerivedCounter("GPUBusy",
                               "Timing",
                               "The percentage of time the GPU command processor was busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,/,(100),*,(100),min",
                               "b1ba5363-1abc-fe66-2fdd-1fe6ee8989a0");
    }
    { // Index:5
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                24,
        };
        c.DefineDerivedCounter("GPUBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the GPU command processor was busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0",
                               "451cb045-23af-ac44-4603-d5832fa041d9");
    }
    { // Index:6
        static constexpr std::array<GpaUInt32, 2> kHardwareCounters = {
                104143,
                24,
        };
        c.DefineDerivedCounter("TessellatorBusy",
                               "Timing",
                               "The percentage of time the tessellation engine is busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,/,(100),*",
                               "36af6c72-dcfb-8102-4fd4-ce8ddc573365");
    }
    { // Index:7
        static constexpr std::array<GpaUInt32, 1> kHardwareCounters = {
                104143,
        };
        c.DefineDerivedCounter("TessellatorBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the tessellation engine is busy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0",
                               "60289dcb-7b33-46e7-26d1-8a2121605543");
    }
    { // Index:8
        static constexpr std::array<GpaUInt32, 13> kHardwareCounters = {
                10393,
                10725,
                11057,
                11389,
                10410,
                10742,
                11074,
                11406,
                10433,
                10765,
                11097,
                11429,
                24,
        };
        c.DefineDerivedCounter("VsGsBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has VS or GS work to do in a VS-[GS-]PS pipeline.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,max8,(0),8,9,10,11,sum4,ifnotzero,12,/,(100),*,(100),min",
                               "969c41c7-eb0b-9706-a7a1-98f27c3af56b");
    }
    { // Index:9
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                10393,
                10725,
                11057,
                11389,
                10410,
                10742,
                11074,
                11406,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("VsGsBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has VS or GS work to do in a VS-[GS-]PS pipeline.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,max8,(0),8,9,10,11,sum4,ifnotzero",
                               "a8420bb7-6bd8-930a-9088-d73b9c039851");
    }
    { // Index:10
        static constexpr std::array<GpaUInt32, 14> kHardwareCounters = {
                104720,
                10393,
                10725,
                11057,
                11389,
                10410,
                10742,
                11074,
                11406,
                10433,
                10765,
                11097,
                11429,
                24,
        };
        c.DefineDerivedCounter("VsGsTime",
                               "Timing",
                               "Time VS or GS are busy in nanoseconds in a VS-[GS-]PS pipeline.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "1,2,3,4,5,6,7,8,max8,(0),9,10,11,12,sum4,ifnotzero,13,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "3ce33b11-210d-b3de-9b6c-b9f3cd04beff");
    }
    { // Index:11
        static constexpr std::array<GpaUInt32, 9> kHardwareCounters = {
                10426,
                10758,
                11090,
                11422,
                10433,
                10765,
                11097,
                11429,
                24,
        };
        c.DefineDerivedCounter("PreTessellationBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has VS and HS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,max4,4,5,6,7,sum4,ifnotzero,8,/,(100),*,(100),min",
                               "346c7430-4666-7065-b5b7-1cb8cbb1c01c");
    }
    { // Index:12
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                10426,
                10758,
                11090,
                11422,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("PreTessellationBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has VS and HS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,max4,4,5,6,7,sum4,ifnotzero",
                               "dac68e38-0e3a-9364-2674-308e63bee2d2");
    }
    { // Index:13
        static constexpr std::array<GpaUInt32, 10> kHardwareCounters = {
                104720,
                10426,
                10758,
                11090,
                11422,
                10433,
                10765,
                11097,
                11429,
                24,
        };
        c.DefineDerivedCounter("PreTessellationTime",
                               "Timing",
                               "Time VS and HS are busy in nanoseconds in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),1,2,3,4,max4,5,6,7,8,sum4,ifnotzero,9,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "d5e6c54c-5ffb-b173-6118-bece61f0281c");
    }
    { // Index:14
        static constexpr std::array<GpaUInt32, 13> kHardwareCounters = {
                10393,
                10725,
                11057,
                11389,
                10410,
                10742,
                11074,
                11406,
                10433,
                10765,
                11097,
                11429,
                24,
        };
        c.DefineDerivedCounter("PostTessellationBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has DS or GS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,6,7,max8,8,9,10,11,sum4,ifnotzero,12,/,(100),*,(100),min",
                               "1a275c68-9340-f358-71c6-a2648390381d");
    }
    { // Index:15
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                10393,
                10725,
                11057,
                11389,
                10410,
                10742,
                11074,
                11406,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("PostTessellationBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has DS or GS work to do in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,4,5,6,7,max8,8,9,10,11,sum4,ifnotzero",
                               "a5ed943b-13ef-942b-56fb-6d519eeb7337");
    }
    { // Index:16
        static constexpr std::array<GpaUInt32, 14> kHardwareCounters = {
                104720,
                10393,
                10725,
                11057,
                11389,
                10410,
                10742,
                11074,
                11406,
                10433,
                10765,
                11097,
                11429,
                24,
        };
        c.DefineDerivedCounter("PostTessellationTime",
                               "Timing",
                               "Time DS or GS are busy in nanoseconds in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),1,2,3,4,5,6,7,8,max8,9,10,11,12,sum4,ifnotzero,13,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "9f8dfa40-faee-2014-3467-2630a7d95c1e");
    }
    { // Index:17
        static constexpr std::array<GpaUInt32, 33> kHardwareCounters = {
                10452,
                10784,
                11116,
                11448,
                10472,
                10804,
                11136,
                11468,
                10453,
                10785,
                11117,
                11449,
                10473,
                10805,
                11137,
                11469,
                10454,
                10786,
                11118,
                11450,
                10474,
                10806,
                11138,
                11470,
                10455,
                10787,
                11119,
                11451,
                10475,
                10807,
                11139,
                11471,
                24,
        };
        c.DefineDerivedCounter("PSBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has pixel shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,4,ifnotzero,(0),1,5,ifnotzero,(0),2,6,ifnotzero,(0),3,7,ifnotzero,max4,(0),8,12,ifnotzero,(0),9,13,ifnotzero,(0),10,14,ifnotzero,(0),11,15,ifnotzero,max4,(0),16,20,ifnotzero,(0),17,21,ifnotzero,(0),18,22,ifnotzero,(0),19,23,ifnotzero,max4,(0),24,28,ifnotzero,(0),25,29,ifnotzero,(0),26,30,ifnotzero,(0),27,31,ifnotzero,max4,max4,32,/,(100),*,(100),min",
                               "7e772beb-d82c-bd9a-aed0-fe504d416ce5");
    }
    { // Index:18
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                10452,
                10784,
                11116,
                11448,
                10472,
                10804,
                11136,
                11468,
                10453,
                10785,
                11117,
                11449,
                10473,
                10805,
                11137,
                11469,
                10454,
                10786,
                11118,
                11450,
                10474,
                10806,
                11138,
                11470,
                10455,
                10787,
                11119,
                11451,
                10475,
                10807,
                11139,
                11471,
        };
        c.DefineDerivedCounter("PSBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has pixel shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,4,ifnotzero,(0),1,5,ifnotzero,(0),2,6,ifnotzero,(0),3,7,ifnotzero,max4,(0),8,12,ifnotzero,(0),9,13,ifnotzero,(0),10,14,ifnotzero,(0),11,15,ifnotzero,max4,(0),16,20,ifnotzero,(0),17,21,ifnotzero,(0),18,22,ifnotzero,(0),19,23,ifnotzero,max4,(0),24,28,ifnotzero,(0),25,29,ifnotzero,(0),26,30,ifnotzero,(0),27,31,ifnotzero,max4,max4",
                               "b58bea04-ce8e-2984-80f4-8aba7d4c817b");
    }
    { // Index:19
        static constexpr std::array<GpaUInt32, 34> kHardwareCounters = {
                104720,
                10452,
                10784,
                11116,
                11448,
                10472,
                10804,
                11136,
                11468,
                10453,
                10785,
                11117,
                11449,
                10473,
                10805,
                11137,
                11469,
                10454,
                10786,
                11118,
                11450,
                10474,
                10806,
                11138,
                11470,
                10455,
                10787,
                11119,
                11451,
                10475,
                10807,
                11139,
                11471,
                24,
        };
        c.DefineDerivedCounter("PSTime",
                               "Timing",
                               "Time pixel shaders are busy in nanoseconds.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),1,5,ifnotzero,(0),2,6,ifnotzero,(0),3,7,ifnotzero,(0),4,8,ifnotzero,max4,(0),9,13,ifnotzero,(0),10,14,ifnotzero,(0),11,15,ifnotzero,(0),12,16,ifnotzero,max4,(0),17,21,ifnotzero,(0),18,22,ifnotzero,(0),19,23,ifnotzero,(0),20,24,ifnotzero,max4,(0),25,29,ifnotzero,(0),26,30,ifnotzero,(0),27,31,ifnotzero,(0),28,32,ifnotzero,max4,max4,33,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "edca7694-7416-e8a6-0c5a-63a5ad5f3d74");
    }
    { // Index:20
        static constexpr std::array<GpaUInt32, 17> kHardwareCounters = {
                10437,
                10769,
                11101,
                11433,
                10441,
                10773,
                11105,
                11437,
                10443,
                10775,
                11107,
                11439,
                10447,
                10779,
                11111,
                11443,
                24,
        };
        c.DefineDerivedCounter("CSBusy",
                               "Timing",
                               "The percentage of time the ShaderUnit has compute shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,comparemax4,8,9,10,11,12,13,14,15,comparemax4,max,16,/,(100),*,(100),min",
                               "493fdd90-8d2b-a055-5e4e-2d29c3396b8c");
    }
    { // Index:21
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                10437,
                10769,
                11101,
                11433,
                10441,
                10773,
                11105,
                11437,
                10443,
                10775,
                11107,
                11439,
                10447,
                10779,
                11111,
                11443,
        };
        c.DefineDerivedCounter("CSBusyCycles",
                               "Timing",
                               "Number of GPU cycles that the ShaderUnit has compute shader work to do.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,comparemax4,8,9,10,11,12,13,14,15,comparemax4,max",
                               "39bcf1b8-f6b2-4c37-f9af-0a2bb59512f9");
    }
    { // Index:22
        static constexpr std::array<GpaUInt32, 18> kHardwareCounters = {
                104720,
                10437,
                10769,
                11101,
                11433,
                10441,
                10773,
                11105,
                11437,
                10443,
                10775,
                11107,
                11439,
                10447,
                10779,
                11111,
                11443,
                24,
        };
        c.DefineDerivedCounter("CSTime",
                               "Timing",
                               "Time compute shaders are busy in nanoseconds.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeNanoseconds,
                               true,
                               false,
                               kHardwareCounters,
                               "1,2,3,4,5,6,7,8,comparemax4,9,10,11,12,13,14,15,16,comparemax4,max,17,/,(1),min,0,TS_FREQ,/,(1000000000),*,*",
                               "dbc24916-ecb2-7eef-8d63-7afadaaab6bc");
    }
    { // Index:23
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                104275,
                104414,
                104553,
                104692,
                104237,
                104376,
                104515,
                104654,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("GSVerticesOut",
                               "VertexGeometry",
                               "The number of vertices output by the GS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,ifnotzero,(0),8,9,10,11,sum4,ifnotzero",
                               "775b9736-319a-bd8a-48c9-68db9c91d978");
    }
    { // Index:24
        static constexpr std::array<GpaUInt32, 20> kHardwareCounters = {
                17928,
                18440,
                18952,
                19464,
                17868,
                18380,
                18892,
                19404,
                15880,
                16392,
                16904,
                17416,
                15820,
                16332,
                16844,
                17356,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("VsGsVALUInstCount",
                               "VertexGeometry",
                               "Average number of vector ALU instructions executed for the VS and GS in a VS-[GS-]PS pipeline. Affected by flow control.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,4,5,6,7,sum4,ifnotzero,8,9,10,11,sum4,12,13,14,15,sum4,/,12,13,14,15,sum4,ifnotzero,(0),16,17,18,19,sum4,ifnotzero",
                               "9f5e6407-3b8c-e0a8-9987-a59586b45ea8");
    }
    { // Index:25
        static constexpr std::array<GpaUInt32, 20> kHardwareCounters = {
                17924,
                18436,
                18948,
                19460,
                17868,
                18380,
                18892,
                19404,
                15876,
                16388,
                16900,
                17412,
                15820,
                16332,
                16844,
                17356,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("VsGsSALUInstCount",
                               "VertexGeometry",
                               "Average number of scalar ALU instructions executed for the VS and GS. Affected by flow control.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,4,5,6,7,sum4,ifnotzero,8,9,10,11,sum4,12,13,14,15,sum4,/,12,13,14,15,sum4,ifnotzero,(0),16,17,18,19,sum4,ifnotzero",
                               "67fe9696-8428-cf74-09d9-9133ea0f148c");
    }
    { // Index:26
        static constexpr std::array<GpaUInt32, 13> kHardwareCounters = {
                17981,
                18493,
                19005,
                19517,
                15933,
                16445,
                16957,
                17469,
                24,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("VsGsVALUBusy",
                               "VertexGeometry",
                               "The percentage of GPUTime vector ALU instructions are being processed for the VS and GS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,sum4,+,NUM_SIMDS,/,8,/,(100),*,(0),9,10,11,12,sum4,ifnotzero",
                               "0e98794e-d570-20a5-671c-b65c3991d358");
    }
    { // Index:27
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                17981,
                18493,
                19005,
                19517,
                15933,
                16445,
                16957,
                17469,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("VsGsVALUBusyCycles",
                               "VertexGeometry",
                               "Number of GPU cycles where vector ALU instructions are being processed for the VS and GS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,sum4,+,NUM_SIMDS,/,(0),8,9,10,11,sum4,ifnotzero",
                               "3558535c-e727-e459-4484-bcb683fcac2f");
    }
    { // Index:28
        static constexpr std::array<GpaUInt32, 13> kHardwareCounters = {
                17924,
                18436,
                18948,
                19460,
                15876,
                16388,
                16900,
                17412,
                24,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("VsGsSALUBusy",
                               "VertexGeometry",
                               "The percentage of GPUTime scalar ALU instructions are being processed for the VS and GS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,sum4,+,NUM_CUS,/,8,/,(100),*,(0),9,10,11,12,sum4,ifnotzero",
                               "49521e07-5a41-0c17-38d9-450718dcb5ab");
    }
    { // Index:29
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                17924,
                18436,
                18948,
                19460,
                15876,
                16388,
                16900,
                17412,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("VsGsSALUBusyCycles",
                               "VertexGeometry",
                               "Number of GPU cycles where scalar ALU instructions are being processed for the VS and GS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,sum4,+,NUM_CUS,/,(0),8,9,10,11,sum4,ifnotzero",
                               "c4f78496-7f24-cb3d-3108-e9e8c761cf07");
    }
    { // Index:30
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                24072,
                24584,
                25096,
                25608,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("PreTessVALUInstCount",
                               "PreTessellation",
                               "Average number of vector ALU instructions executed for the VS and HS in a pipeline that uses tessellation. Affected by flow control.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,4,5,6,7,sum4,ifnotzero",
                               "a6894a29-4213-27d4-e186-b9ca6112e3f3");
    }
    { // Index:31
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                24068,
                24580,
                25092,
                25604,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("PreTessSALUInstCount",
                               "PreTessellation",
                               "Average number of scalar ALU instructions executed for the VS and HS in a pipeline that uses tessellation. Affected by flow control.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,4,5,6,7,sum4,ifnotzero",
                               "c6d06968-3557-fb5d-7a28-5eda098190db");
    }
    { // Index:32
        static constexpr std::array<GpaUInt32, 9> kHardwareCounters = {
                24125,
                24637,
                25149,
                25661,
                10433,
                10765,
                11097,
                11429,
                24,
        };
        c.DefineDerivedCounter("PreTessVALUBusy",
                               "PreTessellation",
                               "The percentage of GPUTime vector ALU instructions are being processed for the VS and HS in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,NUM_SIMDS,/,8,/,(100),*,4,5,6,7,sum4,ifnotzero",
                               "72627e0a-da7e-899a-738c-69e8ba96bf42");
    }
    { // Index:33
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                24125,
                24637,
                25149,
                25661,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("PreTessVALUBusyCycles",
                               "PreTessellation",
                               "Number of GPU cycles vector where ALU instructions are being processed for the VS and HS in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,NUM_SIMDS,/,4,5,6,7,sum4,ifnotzero",
                               "2d750b51-a75e-380b-1b42-40d59f4fbdb6");
    }
    { // Index:34
        static constexpr std::array<GpaUInt32, 9> kHardwareCounters = {
                24068,
                24580,
                25092,
                25604,
                10433,
                10765,
                11097,
                11429,
                24,
        };
        c.DefineDerivedCounter("PreTessSALUBusy",
                               "PreTessellation",
                               "The percentage of GPUTime scalar ALU instructions are being processed for the VS and HS in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,NUM_CUS,/,8,/,(100),*,4,5,6,7,sum4,ifnotzero",
                               "74e778bb-ce25-32cd-caa6-810eb44c95fa");
    }
    { // Index:35
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                24068,
                24580,
                25092,
                25604,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("PreTessSALUBusyCycles",
                               "PreTessellation",
                               "Number of GPU cycles where scalar ALU instructions are being processed for the VS and HS in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,NUM_CUS,/,4,5,6,7,sum4,ifnotzero",
                               "8aa4a036-313f-f4b0-a820-ff0a6e71b1a2");
    }
    { // Index:36
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                104250,
                104389,
                104528,
                104667,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("PreTessVerticesIn",
                               "PreTessellation",
                               "The number of vertices processed by the VS and HS when using tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,ifnotzero",
                               "b0d4c894-2fd0-6f4f-0b07-d5369769ef2d");
    }
    { // Index:37
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                104168,
                104307,
                104446,
                104585,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("PostTessPrimsOut",
                               "PostTessellation",
                               "The number of primitives output by the DS and GS when using tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,ifnotzero",
                               "d38dabe8-1f13-ea34-d3c1-eb5783b737f1");
    }
    { // Index:38
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                15880,
                16392,
                16904,
                17416,
                15820,
                16332,
                16844,
                17356,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("PostTessVALUInstCount",
                               "PostTessellation",
                               "Average number of vector ALU instructions executed for the DS and GS in a pipeline that uses tessellation. Affected by flow control.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,9,10,11,sum4,ifnotzero",
                               "718b7237-1371-4c85-3ad1-f12af258ba08");
    }
    { // Index:39
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                15876,
                16388,
                16900,
                17412,
                15820,
                16332,
                16844,
                17356,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("PostTessSALUInstCount",
                               "PostTessellation",
                               "Average number of scalar ALU instructions executed for the DS and GS in a pipeline that uses tessellation. Affected by flow control.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,8,9,10,11,sum4,ifnotzero",
                               "546cecd8-53d4-c7b7-3b2e-f5b2db6c8282");
    }
    { // Index:40
        static constexpr std::array<GpaUInt32, 9> kHardwareCounters = {
                15933,
                16445,
                16957,
                17469,
                10433,
                10765,
                11097,
                11429,
                24,
        };
        c.DefineDerivedCounter("PostTessVALUBusy",
                               "PostTessellation",
                               "The percentage of GPUTime vector ALU instructions are being processed for the DS and GS in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,NUM_SIMDS,/,8,/,(100),*,4,5,6,7,sum4,ifnotzero",
                               "068d1738-da17-7b6d-9d88-4013a8b27bf8");
    }
    { // Index:41
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                15933,
                16445,
                16957,
                17469,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("PostTessVALUBusyCycles",
                               "PostTessellation",
                               "Number of GPU cycles vector where ALU instructions are being processed for the DS and GS in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,NUM_SIMDS,/,4,5,6,7,sum4,ifnotzero",
                               "29951e35-e415-22e9-ea59-03955faa8973");
    }
    { // Index:42
        static constexpr std::array<GpaUInt32, 9> kHardwareCounters = {
                15876,
                16388,
                16900,
                17412,
                10433,
                10765,
                11097,
                11429,
                24,
        };
        c.DefineDerivedCounter("PostTessSALUBusy",
                               "PostTessellation",
                               "The percentage of GPUTime scalar ALU instructions are being processed for the DS and GS in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,NUM_CUS,/,8,/,(100),*,4,5,6,7,sum4,ifnotzero",
                               "776fb8e3-1541-75e5-8a4c-28d43d39662b");
    }
    { // Index:43
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                15876,
                16388,
                16900,
                17412,
                10433,
                10765,
                11097,
                11429,
        };
        c.DefineDerivedCounter("PostTessSALUBusyCycles",
                               "PostTessellation",
                               "Number of GPU cycles where scalar ALU instructions are being processed for the DS and GS in a pipeline that uses tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,NUM_CUS,/,4,5,6,7,sum4,ifnotzero",
                               "fce0317e-c679-a310-fd96-85bbb4a8b79d");
    }
    { // Index:44
        static constexpr std::array<GpaUInt32, 25> kHardwareCounters = {
                145,
                421,
                697,
                973,
                149,
                425,
                701,
                977,
                101,
                377,
                653,
                929,
                113,
                389,
                665,
                941,
                102,
                378,
                654,
                930,
                114,
                390,
                666,
                942,
                24,
        };
        c.DefineDerivedCounter("PrimitiveAssemblyBusy",
                               "Timing",
                               "The percentage of GPUTime that primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,4,-,8,12,+,16,+,20,(2),*,+,SU_CLOCKS_PRIM,*,-,1,5,-,9,13,+,17,+,21,(2),*,+,SU_CLOCKS_PRIM,*,-,max,2,6,-,10,14,+,18,+,22,(2),*,+,SU_CLOCKS_PRIM,*,-,max,3,7,-,11,15,+,19,+,23,(2),*,+,SU_CLOCKS_PRIM,*,-,max,(0),max,24,/,(100),*,(100),min",
                               "54ac5640-c4d7-95e2-20e0-6a9fdfc07333");
    }
    { // Index:45
        static constexpr std::array<GpaUInt32, 24> kHardwareCounters = {
                145,
                421,
                697,
                973,
                149,
                425,
                701,
                977,
                101,
                377,
                653,
                929,
                113,
                389,
                665,
                941,
                102,
                378,
                654,
                930,
                114,
                390,
                666,
                942,
        };
        c.DefineDerivedCounter("PrimitiveAssemblyBusyCycles",
                               "Timing",
                               "Number of GPU cycles the primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,4,-,8,12,+,16,+,20,(2),*,+,SU_CLOCKS_PRIM,*,-,1,5,-,9,13,+,17,+,21,(2),*,+,SU_CLOCKS_PRIM,*,-,max,2,6,-,10,14,+,18,+,22,(2),*,+,SU_CLOCKS_PRIM,*,-,max,3,7,-,11,15,+,19,+,23,(2),*,+,SU_CLOCKS_PRIM,*,-,max,(0),max",
                               "99777f2d-9626-c78a-a97c-c4505eba1e5f");
    }
    { // Index:46
        static constexpr std::array<GpaUInt32, 4> kHardwareCounters = {
                48,
                324,
                600,
                876,
        };
        c.DefineDerivedCounter("PrimitivesIn",
                               "PrimitiveAssembly",
                               "The number of primitives received by the hardware. This includes primitives generated by tessellation.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4",
                               "a515b80d-75c3-c7d2-0d2f-d7766b4759a6");
    }
    { // Index:47
        static constexpr std::array<GpaUInt32, 20> kHardwareCounters = {
                54,
                330,
                606,
                882,
                94,
                370,
                646,
                922,
                95,
                371,
                647,
                923,
                96,
                372,
                648,
                924,
                97,
                373,
                649,
                925,
        };
        c.DefineDerivedCounter("CulledPrims",
                               "PrimitiveAssembly",
                               "The number of culled primitives. Typical reasons include scissor, the primitive having zero area, and back or front face culling.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,sum20",
                               "589bdf55-9192-280a-41c3-584bc94f2562");
    }
    { // Index:48
        static constexpr std::array<GpaUInt32, 4> kHardwareCounters = {
                61,
                337,
                613,
                889,
        };
        c.DefineDerivedCounter("ClippedPrims",
                               "PrimitiveAssembly",
                               "The number of primitives that required one or more clipping operations due to intersecting the view volume or user clip planes.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4",
                               "5ef6f9d5-155e-5baa-163f-8359d9ea9bbf");
    }
    { // Index:49
        static constexpr std::array<GpaUInt32, 5> kHardwareCounters = {
                149,
                425,
                701,
                977,
                24,
        };
        c.DefineDerivedCounter("PAStalledOnRasterizer",
                               "PrimitiveAssembly",
                               "Percentage of GPUTime that primitive assembly waits for rasterization to be ready to accept data. This roughly indicates for what percentage of time the pipeline is bottlenecked by pixel operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,max4,4,/,(100),*",
                               "6f9f416b-53c1-0457-f88c-7b6ba8973974");
    }
    { // Index:50
        static constexpr std::array<GpaUInt32, 4> kHardwareCounters = {
                149,
                425,
                701,
                977,
        };
        c.DefineDerivedCounter("PAStalledOnRasterizerCycles",
                               "PrimitiveAssembly",
                               "Number of GPU cycles the primitive assembly waits for rasterization to be ready to accept data. Indicates the number of GPU cycles the pipeline is bottlenecked by pixel operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,max4",
                               "7a8c492a-c566-9328-6805-760dbff5c0f2");
    }
    { // Index:51
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                28116,
                28341,
                28566,
                28791,
                29016,
                29241,
                29466,
                29691,
                28121,
                28346,
                28571,
                28796,
                29021,
                29246,
                29471,
                29696,
                28126,
                28351,
                28576,
                28801,
                29026,
                29251,
                29476,
                29701,
                28131,
                28356,
                28581,
                28806,
                29031,
                29256,
                29481,
                29706,
        };
        c.DefineDerivedCounter("PSPixelsOut",
                               "PixelShader",
                               "Pixels exported from shader to color buffers. Does not include killed or alpha tested pixels; if there are multiple render targets, each render target receives one export, so this will be 2 for 1 pixel written to two RTs.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32",
                               "24cba16c-baa6-6ecd-95ad-92ecb1338da1");
    }
    { // Index:52
        static constexpr std::array<GpaUInt32, 33> kHardwareCounters = {
                28118,
                28343,
                28568,
                28793,
                29018,
                29243,
                29468,
                29693,
                28123,
                28348,
                28573,
                28798,
                29023,
                29248,
                29473,
                29698,
                28128,
                28353,
                28578,
                28803,
                29028,
                29253,
                29478,
                29703,
                28133,
                28358,
                28583,
                28808,
                29033,
                29258,
                29483,
                29708,
                24,
        };
        c.DefineDerivedCounter("PSExportStalls",
                               "PixelShader",
                               "Pixel shader output stalls. Percentage of GPUBusy. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the color buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,max32,32,/,(100),*",
                               "9b4f466c-ff97-22bb-557d-84d3c4c51895");
    }
    { // Index:53
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                28118,
                28343,
                28568,
                28793,
                29018,
                29243,
                29468,
                29693,
                28123,
                28348,
                28573,
                28798,
                29023,
                29248,
                29473,
                29698,
                28128,
                28353,
                28578,
                28803,
                29028,
                29253,
                29478,
                29703,
                28133,
                28358,
                28583,
                28808,
                29033,
                29258,
                29483,
                29708,
        };
        c.DefineDerivedCounter("PSExportStallsCycles",
                               "PixelShader",
                               "Number of GPU cycles the pixel shader output stalls. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the color buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,max32",
                               "47c72aad-64e6-0864-d533-d8e0bc27c156");
    }
    { // Index:54
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                10438,
                10770,
                11102,
                11434,
                10444,
                10776,
                11108,
                11440,
        };
        c.DefineDerivedCounter("CSThreadGroupsLaunched",
                               "ComputeShader",
                               "Total number of thread groups launched.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,sum8",
                               "e1e2f302-868a-1d2e-ca81-9901bbc8b58f");
    }
    { // Index:55
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                10441,
                10773,
                11105,
                11437,
                10447,
                10779,
                11111,
                11443,
        };
        c.DefineDerivedCounter("CSWavefrontsLaunched",
                               "ComputeShader",
                               "The total number of wavefronts launched for the CS.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,sum8",
                               "00c49129-6ae5-f6a0-1753-4738cbe17938");
    }
    { // Index:56
        static constexpr std::array<GpaUInt32, 4> kHardwareCounters = {
                26064,
                26576,
                27088,
                27600,
        };
        c.DefineDerivedCounter("CSThreadsLaunched",
                               "ComputeShader",
                               "The number of CS threads launched and processed by the hardware.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4",
                               "cbbbf1ba-d164-1c90-9df0-6120c1660fb1");
    }
    { // Index:57
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                26064,
                26576,
                27088,
                27600,
                10438,
                10770,
                11102,
                11434,
                10444,
                10776,
                11108,
                11440,
        };
        c.DefineDerivedCounter("CSThreadGroupSize",
                               "ComputeShader",
                               "The number of CS threads within each thread group.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,8,9,10,11,sum8,/,4,5,6,7,8,9,10,11,sum8,ifnotzero",
                               "8c65008a-9957-7ca6-4199-f6fe940420f6");
    }
    { // Index:58
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                26120,
                26632,
                27144,
                27656,
                26060,
                26572,
                27084,
                27596,
        };
        c.DefineDerivedCounter("CSVALUInsts",
                               "ComputeShader",
                               "The average number of vector ALU instructions executed per work-item (affected by flow control).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,sum4,/",
                               "376cb1cc-5a40-9d1d-404c-f1736c0c5084");
    }
    { // Index:59
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                26138,
                26650,
                27162,
                27674,
                26173,
                26685,
                27197,
                27709,
                26061,
                26573,
                27085,
                27597,
        };
        c.DefineDerivedCounter("CSVALUUtilization",
                               "ComputeShader",
                               "The percentage of active vector ALU threads in a wave. A lower number can mean either more thread divergence in a wave or that the work-group size is not a multiple of the wave size. Value range: 0% (bad), 100% (ideal - no thread divergence).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,(64),(32),8,9,10,11,sum4,ifnotzero,*,/,(100),*,4,5,6,7,sum4,ifnotzero,(100),min",
                               "ae943d2a-76e1-bb68-e1e2-0e06c9031611");
    }
    { // Index:60
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                26116,
                26628,
                27140,
                27652,
                26060,
                26572,
                27084,
                27596,
        };
        c.DefineDerivedCounter("CSSALUInsts",
                               "ComputeShader",
                               "The average number of scalar ALU instructions executed per work-item (affected by flow control).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,4,5,6,7,sum4,ifnotzero",
                               "eb211144-8136-ff86-e8bf-4d0493a904cb");
    }
    { // Index:61
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                26125,
                26637,
                27149,
                27661,
                26060,
                26572,
                27084,
                27596,
        };
        c.DefineDerivedCounter("CSVFetchInsts",
                               "ComputeShader",
                               "The average number of vector fetch instructions from the video memory executed per work-item (affected by flow control).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,4,5,6,7,sum4,ifnotzero",
                               "3e2829c0-6215-783b-c271-6d57ff2c520e");
    }
    { // Index:62
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                26117,
                26629,
                27141,
                27653,
                26060,
                26572,
                27084,
                27596,
        };
        c.DefineDerivedCounter("CSSFetchInsts",
                               "ComputeShader",
                               "The average number of scalar fetch instructions from the video memory executed per work-item (affected by flow control).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,4,5,6,7,sum4,ifnotzero",
                               "da09171c-6a0a-584f-fddc-dc5062d63a3e");
    }
    { // Index:63
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                26126,
                26638,
                27150,
                27662,
                26060,
                26572,
                27084,
                27596,
        };
        c.DefineDerivedCounter("CSVWriteInsts",
                               "ComputeShader",
                               "The average number of vector write instructions to the video memory executed per work-item (affected by flow control).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,4,5,6,7,sum4,ifnotzero",
                               "43438c22-e910-b377-b767-b32902e0df0d");
    }
    { // Index:64
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                26111,
                26623,
                27135,
                27647,
                26060,
                26572,
                27084,
                27596,
        };
        c.DefineDerivedCounter("CSGDSInsts",
                               "ComputeShader",
                               "The average number of GDS read or GDS write instructions executed per work item (affected by flow control).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,4,5,6,7,sum4,ifnotzero",
                               "2a867f3e-4a37-ad16-55d1-f03d74707819");
    }
    { // Index:65
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                26115,
                26627,
                27139,
                27651,
                26060,
                26572,
                27084,
                27596,
        };
        c.DefineDerivedCounter("CSLDSInsts",
                               "ComputeShader",
                               "The average number of LDS read/write instructions executed per work-item (affected by flow control).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,4,5,6,7,sum4,/,4,5,6,7,sum4,ifnotzero",
                               "61b0b351-7e06-ef8e-a8e0-7a9e3200a836");
    }
    { // Index:66
        static constexpr std::array<GpaUInt32, 9> kHardwareCounters = {
                26087,
                26599,
                27111,
                27623,
                26060,
                26572,
                27084,
                27596,
                24,
        };
        c.DefineDerivedCounter("CSALUStalledByLDS",
                               "ComputeShader",
                               "The percentage of GPUTime ALU units are stalled by the LDS input queue being full or the output queue being not ready. If there are LDS bank conflicts, reduce them. Otherwise, try reducing the number of LDS accesses if possible. Value range: 0% (optimal) to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,sum4,/,8,/,(100),*",
                               "6dc4f1c2-bad0-c9ff-156e-883b319a752a");
    }
    { // Index:67
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                26087,
                26599,
                27111,
                27623,
                26060,
                26572,
                27084,
                27596,
        };
        c.DefineDerivedCounter("CSALUStalledByLDSCycles",
                               "ComputeShader",
                               "The average number of GPU cycles the each wavefronts' ALU units are stalled by the LDS input queue being full or the output queue being not ready. If there are LDS bank conflicts, reduce them. Otherwise, try reducing the number of LDS accesses if possible.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4,4,5,6,7,sum4,/",
                               "f970a60b-da5d-e489-6222-969ee790a811");
    }
    { // Index:68
        static constexpr std::array<GpaUInt32, 5> kHardwareCounters = {
                26341,
                26853,
                27365,
                27877,
                24,
        };
        c.DefineDerivedCounter("CSLDSBankConflict",
                               "ComputeShader",
                               "The percentage of GPUTime LDS is stalled by bank conflicts. Value range: 0% (optimal) to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4,NUM_SIMDS,/,4,/,(100),*",
                               "1065ee10-2e41-ea41-1eb3-b61b491752f4");
    }
    { // Index:69
        static constexpr std::array<GpaUInt32, 4> kHardwareCounters = {
                26341,
                26853,
                27365,
                27877,
        };
        c.DefineDerivedCounter("CSLDSBankConflictCycles",
                               "ComputeShader",
                               "Number of GPU cycles the LDS is stalled by bank conflicts. Value range: 0 (optimal) to GPUBusyCycles (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4,NUM_SIMDS,/",
                               "1fd1adf3-c51e-94fd-083e-c482a0a0809e");
    }
    { // Index:70
        static constexpr std::array<GpaUInt32, 81> kHardwareCounters = {
                29919,
                30155,
                30391,
                30627,
                30863,
                31099,
                31335,
                31571,
                31807,
                32043,
                32279,
                32515,
                32751,
                32987,
                33223,
                33459,
                33695,
                33931,
                34167,
                34403,
                34639,
                34875,
                35111,
                35347,
                35583,
                35819,
                36055,
                36291,
                36527,
                36763,
                36999,
                37235,
                37471,
                37707,
                37943,
                38179,
                38415,
                38651,
                38887,
                39123,
                39359,
                39595,
                39831,
                40067,
                40303,
                40539,
                40775,
                41011,
                41247,
                41483,
                41719,
                41955,
                42191,
                42427,
                42663,
                42899,
                43135,
                43371,
                43607,
                43843,
                44079,
                44315,
                44551,
                44787,
                45023,
                45259,
                45495,
                45731,
                45967,
                46203,
                46439,
                46675,
                46911,
                47147,
                47383,
                47619,
                47855,
                48091,
                48327,
                48563,
                24,
        };
        c.DefineDerivedCounter("TexUnitBusy",
                               "Timing",
                               "The percentage of GPUTime the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,max80,80,/,(100),*",
                               "36afb8d9-42fc-aafe-66c5-449542153b2c");
    }
    { // Index:71
        static constexpr std::array<GpaUInt32, 80> kHardwareCounters = {
                29919,
                30155,
                30391,
                30627,
                30863,
                31099,
                31335,
                31571,
                31807,
                32043,
                32279,
                32515,
                32751,
                32987,
                33223,
                33459,
                33695,
                33931,
                34167,
                34403,
                34639,
                34875,
                35111,
                35347,
                35583,
                35819,
                36055,
                36291,
                36527,
                36763,
                36999,
                37235,
                37471,
                37707,
                37943,
                38179,
                38415,
                38651,
                38887,
                39123,
                39359,
                39595,
                39831,
                40067,
                40303,
                40539,
                40775,
                41011,
                41247,
                41483,
                41719,
                41955,
                42191,
                42427,
                42663,
                42899,
                43135,
                43371,
                43607,
                43843,
                44079,
                44315,
                44551,
                44787,
                45023,
                45259,
                45495,
                45731,
                45967,
                46203,
                46439,
                46675,
                46911,
                47147,
                47383,
                47619,
                47855,
                48091,
                48327,
                48563,
        };
        c.DefineDerivedCounter("TexUnitBusyCycles",
                               "Timing",
                               "Number of GPU cycles the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,max80",
                               "c68761f2-248c-4f39-6528-c308b1c0807c");
    }
    { // Index:72
        static constexpr std::array<GpaUInt32, 128> kHardwareCounters = {
                29973,
                30209,
                30445,
                30681,
                30917,
                31153,
                31389,
                31625,
                31861,
                32097,
                32333,
                32569,
                32805,
                33041,
                33277,
                33513,
                33749,
                33985,
                34221,
                34457,
                34693,
                34929,
                35165,
                35401,
                35637,
                35873,
                36109,
                36345,
                36581,
                36817,
                37053,
                37289,
                37525,
                37761,
                37997,
                38233,
                38469,
                38705,
                38941,
                39177,
                39413,
                39649,
                39885,
                40121,
                40357,
                40593,
                40829,
                41065,
                41301,
                41537,
                41773,
                42009,
                42245,
                42481,
                42717,
                42953,
                43189,
                43425,
                43661,
                43897,
                44133,
                44369,
                44605,
                44841,
                29972,
                30208,
                30444,
                30680,
                30916,
                31152,
                31388,
                31624,
                31860,
                32096,
                32332,
                32568,
                32804,
                33040,
                33276,
                33512,
                33748,
                33984,
                34220,
                34456,
                34692,
                34928,
                35164,
                35400,
                35636,
                35872,
                36108,
                36344,
                36580,
                36816,
                37052,
                37288,
                37524,
                37760,
                37996,
                38232,
                38468,
                38704,
                38940,
                39176,
                39412,
                39648,
                39884,
                40120,
                40356,
                40592,
                40828,
                41064,
                41300,
                41536,
                41772,
                42008,
                42244,
                42480,
                42716,
                42952,
                43188,
                43424,
                43660,
                43896,
                44132,
                44368,
                44604,
                44840,
        };
        c.DefineDerivedCounter("TexTriFilteringPct",
                               "TextureUnit",
                               "Percentage of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,+,/,(100),*",
                               "1affc3c8-b917-5c81-622b-7004527208ae");
    }
    { // Index:73
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                29973,
                30209,
                30445,
                30681,
                30917,
                31153,
                31389,
                31625,
                31861,
                32097,
                32333,
                32569,
                32805,
                33041,
                33277,
                33513,
                33749,
                33985,
                34221,
                34457,
                34693,
                34929,
                35165,
                35401,
                35637,
                35873,
                36109,
                36345,
                36581,
                36817,
                37053,
                37289,
                37525,
                37761,
                37997,
                38233,
                38469,
                38705,
                38941,
                39177,
                39413,
                39649,
                39885,
                40121,
                40357,
                40593,
                40829,
                41065,
                41301,
                41537,
                41773,
                42009,
                42245,
                42481,
                42717,
                42953,
                43189,
                43425,
                43661,
                43897,
                44133,
                44369,
                44605,
                44841,
        };
        c.DefineDerivedCounter("TexTriFilteringCount",
                               "TextureUnit",
                               "Count of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(4),*",
                               "5785b3a1-a513-18db-4b1c-bdeef75bb2b6");
    }
    { // Index:74
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                29972,
                30208,
                30444,
                30680,
                30916,
                31152,
                31388,
                31624,
                31860,
                32096,
                32332,
                32568,
                32804,
                33040,
                33276,
                33512,
                33748,
                33984,
                34220,
                34456,
                34692,
                34928,
                35164,
                35400,
                35636,
                35872,
                36108,
                36344,
                36580,
                36816,
                37052,
                37288,
                37524,
                37760,
                37996,
                38232,
                38468,
                38704,
                38940,
                39176,
                39412,
                39648,
                39884,
                40120,
                40356,
                40592,
                40828,
                41064,
                41300,
                41536,
                41772,
                42008,
                42244,
                42480,
                42716,
                42952,
                43188,
                43424,
                43660,
                43896,
                44132,
                44368,
                44604,
                44840,
        };
        c.DefineDerivedCounter("NoTexTriFilteringCount",
                               "TextureUnit",
                               "Count of pixels that did not receive trilinear filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(4),*",
                               "179da29a-81af-c06e-ce8c-a0a731ea030d");
    }
    { // Index:75
        static constexpr std::array<GpaUInt32, 128> kHardwareCounters = {
                29975,
                30211,
                30447,
                30683,
                30919,
                31155,
                31391,
                31627,
                31863,
                32099,
                32335,
                32571,
                32807,
                33043,
                33279,
                33515,
                33751,
                33987,
                34223,
                34459,
                34695,
                34931,
                35167,
                35403,
                35639,
                35875,
                36111,
                36347,
                36583,
                36819,
                37055,
                37291,
                37527,
                37763,
                37999,
                38235,
                38471,
                38707,
                38943,
                39179,
                39415,
                39651,
                39887,
                40123,
                40359,
                40595,
                40831,
                41067,
                41303,
                41539,
                41775,
                42011,
                42247,
                42483,
                42719,
                42955,
                43191,
                43427,
                43663,
                43899,
                44135,
                44371,
                44607,
                44843,
                29974,
                30210,
                30446,
                30682,
                30918,
                31154,
                31390,
                31626,
                31862,
                32098,
                32334,
                32570,
                32806,
                33042,
                33278,
                33514,
                33750,
                33986,
                34222,
                34458,
                34694,
                34930,
                35166,
                35402,
                35638,
                35874,
                36110,
                36346,
                36582,
                36818,
                37054,
                37290,
                37526,
                37762,
                37998,
                38234,
                38470,
                38706,
                38942,
                39178,
                39414,
                39650,
                39886,
                40122,
                40358,
                40594,
                40830,
                41066,
                41302,
                41538,
                41774,
                42010,
                42246,
                42482,
                42718,
                42954,
                43190,
                43426,
                43662,
                43898,
                44134,
                44370,
                44606,
                44842,
        };
        c.DefineDerivedCounter("TexVolFilteringPct",
                               "TextureUnit",
                               "Percentage of pixels that received volume filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,+,/,(100),*",
                               "b5ff6bed-3178-aee4-42dd-c74391c02a2d");
    }
    { // Index:76
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                29975,
                30211,
                30447,
                30683,
                30919,
                31155,
                31391,
                31627,
                31863,
                32099,
                32335,
                32571,
                32807,
                33043,
                33279,
                33515,
                33751,
                33987,
                34223,
                34459,
                34695,
                34931,
                35167,
                35403,
                35639,
                35875,
                36111,
                36347,
                36583,
                36819,
                37055,
                37291,
                37527,
                37763,
                37999,
                38235,
                38471,
                38707,
                38943,
                39179,
                39415,
                39651,
                39887,
                40123,
                40359,
                40595,
                40831,
                41067,
                41303,
                41539,
                41775,
                42011,
                42247,
                42483,
                42719,
                42955,
                43191,
                43427,
                43663,
                43899,
                44135,
                44371,
                44607,
                44843,
        };
        c.DefineDerivedCounter("TexVolFilteringCount",
                               "TextureUnit",
                               "Count of pixels that received volume filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(4),*",
                               "4bddc587-d589-8128-e18c-762eab2c871f");
    }
    { // Index:77
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                29974,
                30210,
                30446,
                30682,
                30918,
                31154,
                31390,
                31626,
                31862,
                32098,
                32334,
                32570,
                32806,
                33042,
                33278,
                33514,
                33750,
                33986,
                34222,
                34458,
                34694,
                34930,
                35166,
                35402,
                35638,
                35874,
                36110,
                36346,
                36582,
                36818,
                37054,
                37290,
                37526,
                37762,
                37998,
                38234,
                38470,
                38706,
                38942,
                39178,
                39414,
                39650,
                39886,
                40122,
                40358,
                40594,
                40830,
                41066,
                41302,
                41538,
                41774,
                42010,
                42246,
                42482,
                42718,
                42954,
                43190,
                43426,
                43662,
                43898,
                44134,
                44370,
                44606,
                44842,
        };
        c.DefineDerivedCounter("NoTexVolFilteringCount",
                               "TextureUnit",
                               "Count of pixels that did not receive volume filtering.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(4),*",
                               "9fe1a854-17c6-9d26-b2b9-80610cd5827d");
    }
    { // Index:78
        static constexpr std::array<GpaUInt32, 720> kHardwareCounters = {
                29993,
                30229,
                30465,
                30701,
                30937,
                31173,
                31409,
                31645,
                31881,
                32117,
                32353,
                32589,
                32825,
                33061,
                33297,
                33533,
                33769,
                34005,
                34241,
                34477,
                34713,
                34949,
                35185,
                35421,
                35657,
                35893,
                36129,
                36365,
                36601,
                36837,
                37073,
                37309,
                37545,
                37781,
                38017,
                38253,
                38489,
                38725,
                38961,
                39197,
                39433,
                39669,
                39905,
                40141,
                40377,
                40613,
                40849,
                41085,
                41321,
                41557,
                41793,
                42029,
                42265,
                42501,
                42737,
                42973,
                43209,
                43445,
                43681,
                43917,
                44153,
                44389,
                44625,
                44861,
                45097,
                45333,
                45569,
                45805,
                46041,
                46277,
                46513,
                46749,
                46985,
                47221,
                47457,
                47693,
                47929,
                48165,
                48401,
                48637,
                29994,
                30230,
                30466,
                30702,
                30938,
                31174,
                31410,
                31646,
                31882,
                32118,
                32354,
                32590,
                32826,
                33062,
                33298,
                33534,
                33770,
                34006,
                34242,
                34478,
                34714,
                34950,
                35186,
                35422,
                35658,
                35894,
                36130,
                36366,
                36602,
                36838,
                37074,
                37310,
                37546,
                37782,
                38018,
                38254,
                38490,
                38726,
                38962,
                39198,
                39434,
                39670,
                39906,
                40142,
                40378,
                40614,
                40850,
                41086,
                41322,
                41558,
                41794,
                42030,
                42266,
                42502,
                42738,
                42974,
                43210,
                43446,
                43682,
                43918,
                44154,
                44390,
                44626,
                44862,
                45098,
                45334,
                45570,
                45806,
                46042,
                46278,
                46514,
                46750,
                46986,
                47222,
                47458,
                47694,
                47930,
                48166,
                48402,
                48638,
                29995,
                30231,
                30467,
                30703,
                30939,
                31175,
                31411,
                31647,
                31883,
                32119,
                32355,
                32591,
                32827,
                33063,
                33299,
                33535,
                33771,
                34007,
                34243,
                34479,
                34715,
                34951,
                35187,
                35423,
                35659,
                35895,
                36131,
                36367,
                36603,
                36839,
                37075,
                37311,
                37547,
                37783,
                38019,
                38255,
                38491,
                38727,
                38963,
                39199,
                39435,
                39671,
                39907,
                40143,
                40379,
                40615,
                40851,
                41087,
                41323,
                41559,
                41795,
                42031,
                42267,
                42503,
                42739,
                42975,
                43211,
                43447,
                43683,
                43919,
                44155,
                44391,
                44627,
                44863,
                45099,
                45335,
                45571,
                45807,
                46043,
                46279,
                46515,
                46751,
                46987,
                47223,
                47459,
                47695,
                47931,
                48167,
                48403,
                48639,
                29996,
                30232,
                30468,
                30704,
                30940,
                31176,
                31412,
                31648,
                31884,
                32120,
                32356,
                32592,
                32828,
                33064,
                33300,
                33536,
                33772,
                34008,
                34244,
                34480,
                34716,
                34952,
                35188,
                35424,
                35660,
                35896,
                36132,
                36368,
                36604,
                36840,
                37076,
                37312,
                37548,
                37784,
                38020,
                38256,
                38492,
                38728,
                38964,
                39200,
                39436,
                39672,
                39908,
                40144,
                40380,
                40616,
                40852,
                41088,
                41324,
                41560,
                41796,
                42032,
                42268,
                42504,
                42740,
                42976,
                43212,
                43448,
                43684,
                43920,
                44156,
                44392,
                44628,
                44864,
                45100,
                45336,
                45572,
                45808,
                46044,
                46280,
                46516,
                46752,
                46988,
                47224,
                47460,
                47696,
                47932,
                48168,
                48404,
                48640,
                29997,
                30233,
                30469,
                30705,
                30941,
                31177,
                31413,
                31649,
                31885,
                32121,
                32357,
                32593,
                32829,
                33065,
                33301,
                33537,
                33773,
                34009,
                34245,
                34481,
                34717,
                34953,
                35189,
                35425,
                35661,
                35897,
                36133,
                36369,
                36605,
                36841,
                37077,
                37313,
                37549,
                37785,
                38021,
                38257,
                38493,
                38729,
                38965,
                39201,
                39437,
                39673,
                39909,
                40145,
                40381,
                40617,
                40853,
                41089,
                41325,
                41561,
                41797,
                42033,
                42269,
                42505,
                42741,
                42977,
                43213,
                43449,
                43685,
                43921,
                44157,
                44393,
                44629,
                44865,
                45101,
                45337,
                45573,
                45809,
                46045,
                46281,
                46517,
                46753,
                46989,
                47225,
                47461,
                47697,
                47933,
                48169,
                48405,
                48641,
                29998,
                30234,
                30470,
                30706,
                30942,
                31178,
                31414,
                31650,
                31886,
                32122,
                32358,
                32594,
                32830,
                33066,
                33302,
                33538,
                33774,
                34010,
                34246,
                34482,
                34718,
                34954,
                35190,
                35426,
                35662,
                35898,
                36134,
                36370,
                36606,
                36842,
                37078,
                37314,
                37550,
                37786,
                38022,
                38258,
                38494,
                38730,
                38966,
                39202,
                39438,
                39674,
                39910,
                40146,
                40382,
                40618,
                40854,
                41090,
                41326,
                41562,
                41798,
                42034,
                42270,
                42506,
                42742,
                42978,
                43214,
                43450,
                43686,
                43922,
                44158,
                44394,
                44630,
                44866,
                45102,
                45338,
                45574,
                45810,
                46046,
                46282,
                46518,
                46754,
                46990,
                47226,
                47462,
                47698,
                47934,
                48170,
                48406,
                48642,
                29999,
                30235,
                30471,
                30707,
                30943,
                31179,
                31415,
                31651,
                31887,
                32123,
                32359,
                32595,
                32831,
                33067,
                33303,
                33539,
                33775,
                34011,
                34247,
                34483,
                34719,
                34955,
                35191,
                35427,
                35663,
                35899,
                36135,
                36371,
                36607,
                36843,
                37079,
                37315,
                37551,
                37787,
                38023,
                38259,
                38495,
                38731,
                38967,
                39203,
                39439,
                39675,
                39911,
                40147,
                40383,
                40619,
                40855,
                41091,
                41327,
                41563,
                41799,
                42035,
                42271,
                42507,
                42743,
                42979,
                43215,
                43451,
                43687,
                43923,
                44159,
                44395,
                44631,
                44867,
                45103,
                45339,
                45575,
                45811,
                46047,
                46283,
                46519,
                46755,
                46991,
                47227,
                47463,
                47699,
                47935,
                48171,
                48407,
                48643,
                30000,
                30236,
                30472,
                30708,
                30944,
                31180,
                31416,
                31652,
                31888,
                32124,
                32360,
                32596,
                32832,
                33068,
                33304,
                33540,
                33776,
                34012,
                34248,
                34484,
                34720,
                34956,
                35192,
                35428,
                35664,
                35900,
                36136,
                36372,
                36608,
                36844,
                37080,
                37316,
                37552,
                37788,
                38024,
                38260,
                38496,
                38732,
                38968,
                39204,
                39440,
                39676,
                39912,
                40148,
                40384,
                40620,
                40856,
                41092,
                41328,
                41564,
                41800,
                42036,
                42272,
                42508,
                42744,
                42980,
                43216,
                43452,
                43688,
                43924,
                44160,
                44396,
                44632,
                44868,
                45104,
                45340,
                45576,
                45812,
                46048,
                46284,
                46520,
                46756,
                46992,
                47228,
                47464,
                47700,
                47936,
                48172,
                48408,
                48644,
                30001,
                30237,
                30473,
                30709,
                30945,
                31181,
                31417,
                31653,
                31889,
                32125,
                32361,
                32597,
                32833,
                33069,
                33305,
                33541,
                33777,
                34013,
                34249,
                34485,
                34721,
                34957,
                35193,
                35429,
                35665,
                35901,
                36137,
                36373,
                36609,
                36845,
                37081,
                37317,
                37553,
                37789,
                38025,
                38261,
                38497,
                38733,
                38969,
                39205,
                39441,
                39677,
                39913,
                40149,
                40385,
                40621,
                40857,
                41093,
                41329,
                41565,
                41801,
                42037,
                42273,
                42509,
                42745,
                42981,
                43217,
                43453,
                43689,
                43925,
                44161,
                44397,
                44633,
                44869,
                45105,
                45341,
                45577,
                45813,
                46049,
                46285,
                46521,
                46757,
                46993,
                47229,
                47465,
                47701,
                47937,
                48173,
                48409,
                48645,
        };
        c.DefineDerivedCounter("TexAveAnisotropy",
                               "TextureUnit",
                               "The average degree of anisotropy applied. A number between 1 and 16. The anisotropic filtering algorithm only applies samples where they are required (e.g. there will be no extra anisotropic samples if the view vector is perpendicular to the surface) so this can be much lower than the requested anisotropy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum80,(2),80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,sum80,*,+,(4),160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,sum80,*,+,(6),240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,sum80,*,+,(8),320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,sum80,*,+,(10),400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,sum80,*,+,(12),480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,sum80,*,+,(14),560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,sum80,*,+,(16),640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,sum80,*,+,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum80,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,sum80,+,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,sum80,+,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,sum80,+,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,sum80,+,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,sum80,+,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,sum80,+,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,sum80,+,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,sum80,+,/",
                               "7ca2a2b9-a4eb-ce23-d163-59147e672396");
    }
    { // Index:79
        static constexpr std::array<GpaUInt32, 17> kHardwareCounters = {
                69168,
                69559,
                69950,
                70341,
                70732,
                71123,
                71514,
                71905,
                72296,
                72687,
                73078,
                73469,
                73860,
                74251,
                74642,
                75033,
                24,
        };
        c.DefineDerivedCounter("DepthStencilTestBusy",
                               "Timing",
                               "Percentage of time GPU spent performing depth and stencil tests relative to GPUBusy.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16,16,/,(100),*",
                               "6834fb52-42e8-bb50-fd48-ec2f2904e7e0");
    }
    { // Index:80
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                69168,
                69559,
                69950,
                70341,
                70732,
                71123,
                71514,
                71905,
                72296,
                72687,
                73078,
                73469,
                73860,
                74251,
                74642,
                75033,
        };
        c.DefineDerivedCounter("DepthStencilTestBusyCycles",
                               "Timing",
                               "Number of GPU cycles spent performing depth and stencil tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16",
                               "07ad48f0-49d8-87e7-1ef5-1e24ff2cef49");
    }
    { // Index:81
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                69039,
                69430,
                69821,
                70212,
                70603,
                70994,
                71385,
                71776,
                72167,
                72558,
                72949,
                73340,
                73731,
                74122,
                74513,
                74904,
                69028,
                69419,
                69810,
                70201,
                70592,
                70983,
                71374,
                71765,
                72156,
                72547,
                72938,
                73329,
                73720,
                74111,
                74502,
                74893,
        };
        c.DefineDerivedCounter("HiZTilesAccepted",
                               "DepthAndStencil",
                               "Percentage of tiles accepted by HiZ and will be rendered to the depth or color buffers.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,-,(0),max,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,/,(100),*",
                               "56176f45-d7ff-813d-4f05-3b2f046067e7");
    }
    { // Index:82
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                69028,
                69419,
                69810,
                70201,
                70592,
                70983,
                71374,
                71765,
                72156,
                72547,
                72938,
                73329,
                73720,
                74111,
                74502,
                74893,
                69039,
                69430,
                69821,
                70212,
                70603,
                70994,
                71385,
                71776,
                72167,
                72558,
                72949,
                73340,
                73731,
                74122,
                74513,
                74904,
        };
        c.DefineDerivedCounter("HiZTilesAcceptedCount",
                               "DepthAndStencil",
                               "Count of tiles accepted by HiZ and will be rendered to the depth or color buffers.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,-,(0),max",
                               "95d4e3f6-b2f0-f26e-8423-aacdfaf79ea3");
    }
    { // Index:83
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                69039,
                69430,
                69821,
                70212,
                70603,
                70994,
                71385,
                71776,
                72167,
                72558,
                72949,
                73340,
                73731,
                74122,
                74513,
                74904,
        };
        c.DefineDerivedCounter("HiZTilesRejectedCount",
                               "DepthAndStencil",
                               "Count of tiles not accepted by HiZ.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "156ba142-7eeb-aa6e-a00a-f8aea4e41e0b");
    }
    { // Index:84
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                69028,
                69419,
                69810,
                70201,
                70592,
                70983,
                71374,
                71765,
                72156,
                72547,
                72938,
                73329,
                73720,
                74111,
                74502,
                74893,
                69052,
                69443,
                69834,
                70225,
                70616,
                71007,
                71398,
                71789,
                72180,
                72571,
                72962,
                73353,
                73744,
                74135,
                74526,
                74917,
        };
        c.DefineDerivedCounter("PreZTilesDetailCulled",
                               "DepthAndStencil",
                               "Percentage of tiles rejected because the associated prim had no contributing area.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,/,(100),*",
                               "cad7f54d-a044-7574-c472-6f2065cbeeac");
    }
    { // Index:85
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                69052,
                69443,
                69834,
                70225,
                70616,
                71007,
                71398,
                71789,
                72180,
                72571,
                72962,
                73353,
                73744,
                74135,
                74526,
                74917,
        };
        c.DefineDerivedCounter("PreZTilesDetailCulledCount",
                               "DepthAndStencil",
                               "Count of tiles rejected because the associated primitive had no contributing area.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "49262c8a-b1e6-90dd-f096-0fc4921715e9");
    }
    { // Index:86
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                69028,
                69419,
                69810,
                70201,
                70592,
                70983,
                71374,
                71765,
                72156,
                72547,
                72938,
                73329,
                73720,
                74111,
                74502,
                74893,
        };
        c.DefineDerivedCounter("PreZTilesDetailSurvivingCount",
                               "DepthAndStencil",
                               "Count of tiles surviving because the associated primitive had contributing area.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "f803eaa4-bbed-bd39-775f-a64df92e2c08");
    }
    { // Index:87
        static constexpr std::array<GpaUInt32, 128> kHardwareCounters = {
                1303,
                1881,
                2459,
                3037,
                3615,
                4193,
                4771,
                5349,
                5927,
                6505,
                7083,
                7661,
                8239,
                8817,
                9395,
                9973,
                1304,
                1882,
                2460,
                3038,
                3616,
                4194,
                4772,
                5350,
                5928,
                6506,
                7084,
                7662,
                8240,
                8818,
                9396,
                9974,
                1305,
                1883,
                2461,
                3039,
                3617,
                4195,
                4773,
                5351,
                5929,
                6507,
                7085,
                7663,
                8241,
                8819,
                9397,
                9975,
                1306,
                1884,
                2462,
                3040,
                3618,
                4196,
                4774,
                5352,
                5930,
                6508,
                7086,
                7664,
                8242,
                8820,
                9398,
                9976,
                1379,
                1957,
                2535,
                3113,
                3691,
                4269,
                4847,
                5425,
                6003,
                6581,
                7159,
                7737,
                8315,
                8893,
                9471,
                10049,
                1380,
                1958,
                2536,
                3114,
                3692,
                4270,
                4848,
                5426,
                6004,
                6582,
                7160,
                7738,
                8316,
                8894,
                9472,
                10050,
                1381,
                1959,
                2537,
                3115,
                3693,
                4271,
                4849,
                5427,
                6005,
                6583,
                7161,
                7739,
                8317,
                8895,
                9473,
                10051,
                1382,
                1960,
                2538,
                3116,
                3694,
                4272,
                4850,
                5428,
                6006,
                6584,
                7162,
                7740,
                8318,
                8896,
                9474,
                10052,
        };
        c.DefineDerivedCounter("HiZQuadsCulled",
                               "DepthAndStencil",
                               "Percentage of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,-,(0),max,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,/,(100),*",
                               "fa0e319b-5573-6d34-5bab-904769925036");
    }
    { // Index:88
        static constexpr std::array<GpaUInt32, 128> kHardwareCounters = {
                1303,
                1881,
                2459,
                3037,
                3615,
                4193,
                4771,
                5349,
                5927,
                6505,
                7083,
                7661,
                8239,
                8817,
                9395,
                9973,
                1304,
                1882,
                2460,
                3038,
                3616,
                4194,
                4772,
                5350,
                5928,
                6506,
                7084,
                7662,
                8240,
                8818,
                9396,
                9974,
                1305,
                1883,
                2461,
                3039,
                3617,
                4195,
                4773,
                5351,
                5929,
                6507,
                7085,
                7663,
                8241,
                8819,
                9397,
                9975,
                1306,
                1884,
                2462,
                3040,
                3618,
                4196,
                4774,
                5352,
                5930,
                6508,
                7086,
                7664,
                8242,
                8820,
                9398,
                9976,
                1379,
                1957,
                2535,
                3113,
                3691,
                4269,
                4847,
                5425,
                6003,
                6581,
                7159,
                7737,
                8315,
                8893,
                9471,
                10049,
                1380,
                1958,
                2536,
                3114,
                3692,
                4270,
                4848,
                5426,
                6004,
                6582,
                7160,
                7738,
                8316,
                8894,
                9472,
                10050,
                1381,
                1959,
                2537,
                3115,
                3693,
                4271,
                4849,
                5427,
                6005,
                6583,
                7161,
                7739,
                8317,
                8895,
                9473,
                10051,
                1382,
                1960,
                2538,
                3116,
                3694,
                4272,
                4850,
                5428,
                6006,
                6584,
                7162,
                7740,
                8318,
                8896,
                9474,
                10052,
        };
        c.DefineDerivedCounter("HiZQuadsCulledCount",
                               "DepthAndStencil",
                               "Count of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,sum64,-,(0),max",
                               "73b0b39d-6df2-3e24-0b5c-7cb0ac8b6f39");
    }
    { // Index:89
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                1379,
                1957,
                2535,
                3113,
                3691,
                4269,
                4847,
                5425,
                6003,
                6581,
                7159,
                7737,
                8315,
                8893,
                9471,
                10049,
                1380,
                1958,
                2536,
                3114,
                3692,
                4270,
                4848,
                5426,
                6004,
                6582,
                7160,
                7738,
                8316,
                8894,
                9472,
                10050,
                1381,
                1959,
                2537,
                3115,
                3693,
                4271,
                4849,
                5427,
                6005,
                6583,
                7161,
                7739,
                8317,
                8895,
                9473,
                10051,
                1382,
                1960,
                2538,
                3116,
                3694,
                4272,
                4850,
                5428,
                6006,
                6584,
                7162,
                7740,
                8318,
                8896,
                9474,
                10052,
        };
        c.DefineDerivedCounter("HiZQuadsAcceptedCount",
                               "DepthAndStencil",
                               "Count of quads that did continue on in the pipeline after HiZ.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64",
                               "59049ad9-42b5-c7cb-3616-6a8f6a8e4894");
    }
    { // Index:90
        static constexpr std::array<GpaUInt32, 144> kHardwareCounters = {
                1379,
                1957,
                2535,
                3113,
                3691,
                4269,
                4847,
                5425,
                6003,
                6581,
                7159,
                7737,
                8315,
                8893,
                9471,
                10049,
                1380,
                1958,
                2536,
                3114,
                3692,
                4270,
                4848,
                5426,
                6004,
                6582,
                7160,
                7738,
                8316,
                8894,
                9472,
                10050,
                1381,
                1959,
                2537,
                3115,
                3693,
                4271,
                4849,
                5427,
                6005,
                6583,
                7161,
                7739,
                8317,
                8895,
                9473,
                10051,
                1382,
                1960,
                2538,
                3116,
                3694,
                4272,
                4850,
                5428,
                6006,
                6584,
                7162,
                7740,
                8318,
                8896,
                9474,
                10052,
                1403,
                1981,
                2559,
                3137,
                3715,
                4293,
                4871,
                5449,
                6027,
                6605,
                7183,
                7761,
                8339,
                8917,
                9495,
                10073,
                1303,
                1881,
                2459,
                3037,
                3615,
                4193,
                4771,
                5349,
                5927,
                6505,
                7083,
                7661,
                8239,
                8817,
                9395,
                9973,
                1304,
                1882,
                2460,
                3038,
                3616,
                4194,
                4772,
                5350,
                5928,
                6506,
                7084,
                7662,
                8240,
                8818,
                9396,
                9974,
                1305,
                1883,
                2461,
                3039,
                3617,
                4195,
                4773,
                5351,
                5929,
                6507,
                7085,
                7663,
                8241,
                8819,
                9397,
                9975,
                1306,
                1884,
                2462,
                3040,
                3618,
                4196,
                4774,
                5352,
                5930,
                6508,
                7086,
                7664,
                8242,
                8820,
                9398,
                9976,
        };
        c.DefineDerivedCounter("PreZQuadsCulled",
                               "DepthAndStencil",
                               "Percentage of quads rejected based on the detailZ and earlyZ tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum16,-,(0),max,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,sum64,/,(100),*",
                               "4e77547b-ec55-5663-f034-af59be66d77d");
    }
    { // Index:91
        static constexpr std::array<GpaUInt32, 80> kHardwareCounters = {
                1379,
                1957,
                2535,
                3113,
                3691,
                4269,
                4847,
                5425,
                6003,
                6581,
                7159,
                7737,
                8315,
                8893,
                9471,
                10049,
                1380,
                1958,
                2536,
                3114,
                3692,
                4270,
                4848,
                5426,
                6004,
                6582,
                7160,
                7738,
                8316,
                8894,
                9472,
                10050,
                1381,
                1959,
                2537,
                3115,
                3693,
                4271,
                4849,
                5427,
                6005,
                6583,
                7161,
                7739,
                8317,
                8895,
                9473,
                10051,
                1382,
                1960,
                2538,
                3116,
                3694,
                4272,
                4850,
                5428,
                6006,
                6584,
                7162,
                7740,
                8318,
                8896,
                9474,
                10052,
                1403,
                1981,
                2559,
                3137,
                3715,
                4293,
                4871,
                5449,
                6027,
                6605,
                7183,
                7761,
                8339,
                8917,
                9495,
                10073,
        };
        c.DefineDerivedCounter("PreZQuadsCulledCount",
                               "DepthAndStencil",
                               "Count of quads rejected based on the detailZ and earlyZ tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum16,-,(0),max",
                               "1bf169e6-9304-834e-df5f-0c44d7890a08");
    }
    { // Index:92
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                1403,
                1981,
                2559,
                3137,
                3715,
                4293,
                4871,
                5449,
                6027,
                6605,
                7183,
                7761,
                8339,
                8917,
                9495,
                10073,
        };
        c.DefineDerivedCounter("PreZQuadsSurvivingCount",
                               "DepthAndStencil",
                               "Count of quads surviving detailZ and earlyZ tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "50e25e51-3713-89cb-7f92-559cde5e5532");
    }
    { // Index:93
        static constexpr std::array<GpaUInt32, 80> kHardwareCounters = {
                1403,
                1981,
                2559,
                3137,
                3715,
                4293,
                4871,
                5449,
                6027,
                6605,
                7183,
                7761,
                8339,
                8917,
                9495,
                10073,
                1303,
                1881,
                2459,
                3037,
                3615,
                4193,
                4771,
                5349,
                5927,
                6505,
                7083,
                7661,
                8239,
                8817,
                9395,
                9973,
                1304,
                1882,
                2460,
                3038,
                3616,
                4194,
                4772,
                5350,
                5928,
                6506,
                7084,
                7662,
                8240,
                8818,
                9396,
                9974,
                1305,
                1883,
                2461,
                3039,
                3617,
                4195,
                4773,
                5351,
                5929,
                6507,
                7085,
                7663,
                8241,
                8819,
                9397,
                9975,
                1306,
                1884,
                2462,
                3040,
                3618,
                4196,
                4774,
                5352,
                5930,
                6508,
                7086,
                7664,
                8242,
                8820,
                9398,
                9976,
        };
        c.DefineDerivedCounter("PostZQuads",
                               "DepthAndStencil",
                               "Percentage of quads for which the pixel shader will run and may be postZ tested.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum64,/,(100),*",
                               "58f0d34b-eeb8-e8db-abce-cb72584144be");
    }
    { // Index:94
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                1403,
                1981,
                2559,
                3137,
                3715,
                4293,
                4871,
                5449,
                6027,
                6605,
                7183,
                7761,
                8339,
                8917,
                9495,
                10073,
        };
        c.DefineDerivedCounter("PostZQuadCount",
                               "DepthAndStencil",
                               "Count of quads for which the pixel shader will run and may be postZ tested.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "08404526-ce35-939b-34c8-a7a35a0ff4d6");
    }
    { // Index:95
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                69201,
                69592,
                69983,
                70374,
                70765,
                71156,
                71547,
                71938,
                72329,
                72720,
                73111,
                73502,
                73893,
                74284,
                74675,
                75066,
        };
        c.DefineDerivedCounter("PreZSamplesPassing",
                               "DepthAndStencil",
                               "Number of samples tested for Z before shading and passed.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "3bfe6c4d-7422-ca03-7ea5-e67ff1a00136");
    }
    { // Index:96
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                69203,
                69594,
                69985,
                70376,
                70767,
                71158,
                71549,
                71940,
                72331,
                72722,
                73113,
                73504,
                73895,
                74286,
                74677,
                75068,
        };
        c.DefineDerivedCounter("PreZSamplesFailingS",
                               "DepthAndStencil",
                               "Number of samples tested for Z before shading and failed stencil test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "df7f705e-5162-d3b5-da8b-63466cf9c4e5");
    }
    { // Index:97
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                69202,
                69593,
                69984,
                70375,
                70766,
                71157,
                71548,
                71939,
                72330,
                72721,
                73112,
                73503,
                73894,
                74285,
                74676,
                75067,
        };
        c.DefineDerivedCounter("PreZSamplesFailingZ",
                               "DepthAndStencil",
                               "Number of samples tested for Z before shading and failed Z test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "4484e950-f7a4-3800-bc74-78dd297f017e");
    }
    { // Index:98
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                69198,
                69589,
                69980,
                70371,
                70762,
                71153,
                71544,
                71935,
                72326,
                72717,
                73108,
                73499,
                73890,
                74281,
                74672,
                75063,
        };
        c.DefineDerivedCounter("PostZSamplesPassing",
                               "DepthAndStencil",
                               "Number of samples tested for Z after shading and passed.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "4995d5d6-2330-b986-508b-fae24856f44c");
    }
    { // Index:99
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                69200,
                69591,
                69982,
                70373,
                70764,
                71155,
                71546,
                71937,
                72328,
                72719,
                73110,
                73501,
                73892,
                74283,
                74674,
                75065,
        };
        c.DefineDerivedCounter("PostZSamplesFailingS",
                               "DepthAndStencil",
                               "Number of samples tested for Z after shading and failed stencil test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "ae558af4-f4be-3dd4-7316-b2c4dcf0def8");
    }
    { // Index:100
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                69199,
                69590,
                69981,
                70372,
                70763,
                71154,
                71545,
                71936,
                72327,
                72718,
                73109,
                73500,
                73891,
                74282,
                74673,
                75064,
        };
        c.DefineDerivedCounter("PostZSamplesFailingZ",
                               "DepthAndStencil",
                               "Number of samples tested for Z after shading and failed Z test.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "b3684c94-814a-c695-c85d-a5b6ab798b35");
    }
    { // Index:101
        static constexpr std::array<GpaUInt32, 17> kHardwareCounters = {
                69070,
                69461,
                69852,
                70243,
                70634,
                71025,
                71416,
                71807,
                72198,
                72589,
                72980,
                73371,
                73762,
                74153,
                74544,
                74935,
                24,
        };
        c.DefineDerivedCounter("ZUnitStalled",
                               "DepthAndStencil",
                               "The percentage of GPUTime the depth buffer spends waiting for the color buffer to be ready to accept data. High figures here indicate a bottleneck in color buffer operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16,16,/,(100),*",
                               "5e86c3ad-1726-3157-1d01-7ed188bf854d");
    }
    { // Index:102
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                69070,
                69461,
                69852,
                70243,
                70634,
                71025,
                71416,
                71807,
                72198,
                72589,
                72980,
                73371,
                73762,
                74153,
                74544,
                74935,
        };
        c.DefineDerivedCounter("ZUnitStalledCycles",
                               "DepthAndStencil",
                               "Number of GPU cycles the depth buffer spends waiting for the color buffer to be ready to accept data. Larger numbers indicate a bottleneck in color buffer operations.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16",
                               "4351fa7f-6737-2c3e-3ffb-b3addbdceedd");
    }
    { // Index:103
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                69072,
                69463,
                69854,
                70245,
                70636,
                71027,
                71418,
                71809,
                72200,
                72591,
                72982,
                73373,
                73764,
                74155,
                74546,
                74937,
                69079,
                69470,
                69861,
                70252,
                70643,
                71034,
                71425,
                71816,
                72207,
                72598,
                72989,
                73380,
                73771,
                74162,
                74553,
                74944,
        };
        c.DefineDerivedCounter("DBMemRead",
                               "DepthAndStencil",
                               "Number of bytes read from the depth buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(256),*,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,(32),*,+",
                               "dcdb4ee7-bd50-00f7-c028-9e5f4ce888c0");
    }
    { // Index:104
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                69084,
                69475,
                69866,
                70257,
                70648,
                71039,
                71430,
                71821,
                72212,
                72603,
                72994,
                73385,
                73776,
                74167,
                74558,
                74949,
                69087,
                69478,
                69869,
                70260,
                70651,
                71042,
                71433,
                71824,
                72215,
                72606,
                72997,
                73388,
                73779,
                74170,
                74561,
                74952,
        };
        c.DefineDerivedCounter("DBMemWritten",
                               "DepthAndStencil",
                               "Number of bytes written to the depth buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(32),*,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,(32),*,+",
                               "de5717f8-8a49-ee44-4645-10de51b37dcf");
    }
    { // Index:105
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                75408,
                75861,
                76314,
                76767,
                77220,
                77673,
                78126,
                78579,
                79032,
                79485,
                79938,
                80391,
                80844,
                81297,
                81750,
                82203,
        };
        c.DefineDerivedCounter("CBMemRead",
                               "ColorBuffer",
                               "Number of bytes read from the color buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(32),*",
                               "84b531d8-a1f8-7f49-7c27-7bc97801f1e6");
    }
    { // Index:106
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                75539,
                75992,
                76445,
                76898,
                77351,
                77804,
                78257,
                78710,
                79163,
                79616,
                80069,
                80522,
                80975,
                81428,
                81881,
                82334,
                75406,
                75859,
                76312,
                76765,
                77218,
                77671,
                78124,
                78577,
                79030,
                79483,
                79936,
                80389,
                80842,
                81295,
                81748,
                82201,
                75407,
                75860,
                76313,
                76766,
                77219,
                77672,
                78125,
                78578,
                79031,
                79484,
                79937,
                80390,
                80843,
                81296,
                81749,
                82202,
                75408,
                75861,
                76314,
                76767,
                77220,
                77673,
                78126,
                78579,
                79032,
                79485,
                79938,
                80391,
                80844,
                81297,
                81750,
                82203,
        };
        c.DefineDerivedCounter("CBColorAndMaskRead",
                               "ColorBuffer",
                               "Total number of bytes read from the color and mask buffers.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(32),*",
                               "da41660e-eb6f-32ec-8a64-b32ca17bd7eb");
    }
    { // Index:107
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                75398,
                75851,
                76304,
                76757,
                77210,
                77663,
                78116,
                78569,
                79022,
                79475,
                79928,
                80381,
                80834,
                81287,
                81740,
                82193,
        };
        c.DefineDerivedCounter("CBMemWritten",
                               "ColorBuffer",
                               "Number of bytes written to the color buffer.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(32),*",
                               "550f8ff8-60b6-a6bf-87d0-25ac9e87de70");
    }
    { // Index:108
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                75537,
                75990,
                76443,
                76896,
                77349,
                77802,
                78255,
                78708,
                79161,
                79614,
                80067,
                80520,
                80973,
                81426,
                81879,
                82332,
                75396,
                75849,
                76302,
                76755,
                77208,
                77661,
                78114,
                78567,
                79020,
                79473,
                79926,
                80379,
                80832,
                81285,
                81738,
                82191,
                75397,
                75850,
                76303,
                76756,
                77209,
                77662,
                78115,
                78568,
                79021,
                79474,
                79927,
                80380,
                80833,
                81286,
                81739,
                82192,
                75398,
                75851,
                76304,
                76757,
                77210,
                77663,
                78116,
                78569,
                79022,
                79475,
                79928,
                80381,
                80834,
                81287,
                81740,
                82193,
        };
        c.DefineDerivedCounter("CBColorAndMaskWritten",
                               "ColorBuffer",
                               "Total number of bytes written to the color and mask buffers.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum64,(32),*",
                               "29a04b69-8f5f-b770-a0f2-3453e2c99e49");
    }
    { // Index:109
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                75442,
                75895,
                76348,
                76801,
                77254,
                77707,
                78160,
                78613,
                79066,
                79519,
                79972,
                80425,
                80878,
                81331,
                81784,
                82237,
                75287,
                75740,
                76193,
                76646,
                77099,
                77552,
                78005,
                78458,
                78911,
                79364,
                79817,
                80270,
                80723,
                81176,
                81629,
                82082,
        };
        c.DefineDerivedCounter("CBSlowPixelPct",
                               "ColorBuffer",
                               "Percentage of pixels written to the color buffer using a half-rate or quarter-rate format.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,/,(100),*,(100),min",
                               "5775943f-0313-7e52-9638-b24a449197bc");
    }
    { // Index:110
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                75442,
                75895,
                76348,
                76801,
                77254,
                77707,
                78160,
                78613,
                79066,
                79519,
                79972,
                80425,
                80878,
                81331,
                81784,
                82237,
        };
        c.DefineDerivedCounter("CBSlowPixelCount",
                               "ColorBuffer",
                               "Number of pixels written to the color buffer using a half-rate or quarter-rate format.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "47eacbb0-28c8-22b4-5c69-c00d5813bb1c");
    }
    { // Index:111
        static constexpr std::array<GpaUInt32, 160> kHardwareCounters = {
                64153,
                64214,
                64275,
                64336,
                64397,
                64458,
                64519,
                64580,
                64641,
                64702,
                64763,
                64824,
                64885,
                64946,
                65007,
                65068,
                65129,
                65190,
                65251,
                65312,
                65373,
                65434,
                65495,
                65556,
                65617,
                65678,
                65739,
                65800,
                65861,
                65922,
                65983,
                66044,
                66105,
                66166,
                66227,
                66288,
                66349,
                66410,
                66471,
                66532,
                66593,
                66654,
                66715,
                66776,
                66837,
                66898,
                66959,
                67020,
                67081,
                67142,
                67203,
                67264,
                67325,
                67386,
                67447,
                67508,
                67569,
                67630,
                67691,
                67752,
                67813,
                67874,
                67935,
                67996,
                68057,
                68118,
                68179,
                68240,
                68301,
                68362,
                68423,
                68484,
                68545,
                68606,
                68667,
                68728,
                68789,
                68850,
                68911,
                68972,
                64162,
                64223,
                64284,
                64345,
                64406,
                64467,
                64528,
                64589,
                64650,
                64711,
                64772,
                64833,
                64894,
                64955,
                65016,
                65077,
                65138,
                65199,
                65260,
                65321,
                65382,
                65443,
                65504,
                65565,
                65626,
                65687,
                65748,
                65809,
                65870,
                65931,
                65992,
                66053,
                66114,
                66175,
                66236,
                66297,
                66358,
                66419,
                66480,
                66541,
                66602,
                66663,
                66724,
                66785,
                66846,
                66907,
                66968,
                67029,
                67090,
                67151,
                67212,
                67273,
                67334,
                67395,
                67456,
                67517,
                67578,
                67639,
                67700,
                67761,
                67822,
                67883,
                67944,
                68005,
                68066,
                68127,
                68188,
                68249,
                68310,
                68371,
                68432,
                68493,
                68554,
                68615,
                68676,
                68737,
                68798,
                68859,
                68920,
                68981,
        };
        c.DefineDerivedCounter("L0CacheHit",
                               "MemoryCache",
                               "The percentage of read requests that hit the data in the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),(1),80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,sum80,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum80,/,-,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum80,ifnotzero",
                               "286c786e-9a42-3371-9dea-dd54e6e612e9");
    }
    { // Index:112
        static constexpr std::array<GpaUInt32, 80> kHardwareCounters = {
                64153,
                64214,
                64275,
                64336,
                64397,
                64458,
                64519,
                64580,
                64641,
                64702,
                64763,
                64824,
                64885,
                64946,
                65007,
                65068,
                65129,
                65190,
                65251,
                65312,
                65373,
                65434,
                65495,
                65556,
                65617,
                65678,
                65739,
                65800,
                65861,
                65922,
                65983,
                66044,
                66105,
                66166,
                66227,
                66288,
                66349,
                66410,
                66471,
                66532,
                66593,
                66654,
                66715,
                66776,
                66837,
                66898,
                66959,
                67020,
                67081,
                67142,
                67203,
                67264,
                67325,
                67386,
                67447,
                67508,
                67569,
                67630,
                67691,
                67752,
                67813,
                67874,
                67935,
                67996,
                68057,
                68118,
                68179,
                68240,
                68301,
                68362,
                68423,
                68484,
                68545,
                68606,
                68667,
                68728,
                68789,
                68850,
                68911,
                68972,
        };
        c.DefineDerivedCounter("L0CacheRequestCount",
                               "MemoryCache",
                               "The number of read requests made to the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum80",
                               "74983cae-ee57-2e1b-d990-5128fef84e1f");
    }
    { // Index:113
        static constexpr std::array<GpaUInt32, 160> kHardwareCounters = {
                64153,
                64214,
                64275,
                64336,
                64397,
                64458,
                64519,
                64580,
                64641,
                64702,
                64763,
                64824,
                64885,
                64946,
                65007,
                65068,
                65129,
                65190,
                65251,
                65312,
                65373,
                65434,
                65495,
                65556,
                65617,
                65678,
                65739,
                65800,
                65861,
                65922,
                65983,
                66044,
                66105,
                66166,
                66227,
                66288,
                66349,
                66410,
                66471,
                66532,
                66593,
                66654,
                66715,
                66776,
                66837,
                66898,
                66959,
                67020,
                67081,
                67142,
                67203,
                67264,
                67325,
                67386,
                67447,
                67508,
                67569,
                67630,
                67691,
                67752,
                67813,
                67874,
                67935,
                67996,
                68057,
                68118,
                68179,
                68240,
                68301,
                68362,
                68423,
                68484,
                68545,
                68606,
                68667,
                68728,
                68789,
                68850,
                68911,
                68972,
                64162,
                64223,
                64284,
                64345,
                64406,
                64467,
                64528,
                64589,
                64650,
                64711,
                64772,
                64833,
                64894,
                64955,
                65016,
                65077,
                65138,
                65199,
                65260,
                65321,
                65382,
                65443,
                65504,
                65565,
                65626,
                65687,
                65748,
                65809,
                65870,
                65931,
                65992,
                66053,
                66114,
                66175,
                66236,
                66297,
                66358,
                66419,
                66480,
                66541,
                66602,
                66663,
                66724,
                66785,
                66846,
                66907,
                66968,
                67029,
                67090,
                67151,
                67212,
                67273,
                67334,
                67395,
                67456,
                67517,
                67578,
                67639,
                67700,
                67761,
                67822,
                67883,
                67944,
                68005,
                68066,
                68127,
                68188,
                68249,
                68310,
                68371,
                68432,
                68493,
                68554,
                68615,
                68676,
                68737,
                68798,
                68859,
                68920,
                68981,
        };
        c.DefineDerivedCounter("L0CacheHitCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache hit from the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum80,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,sum80,-",
                               "c0de7338-069b-c5ba-ead3-c65e030cd2ac");
    }
    { // Index:114
        static constexpr std::array<GpaUInt32, 80> kHardwareCounters = {
                64162,
                64223,
                64284,
                64345,
                64406,
                64467,
                64528,
                64589,
                64650,
                64711,
                64772,
                64833,
                64894,
                64955,
                65016,
                65077,
                65138,
                65199,
                65260,
                65321,
                65382,
                65443,
                65504,
                65565,
                65626,
                65687,
                65748,
                65809,
                65870,
                65931,
                65992,
                66053,
                66114,
                66175,
                66236,
                66297,
                66358,
                66419,
                66480,
                66541,
                66602,
                66663,
                66724,
                66785,
                66846,
                66907,
                66968,
                67029,
                67090,
                67151,
                67212,
                67273,
                67334,
                67395,
                67456,
                67517,
                67578,
                67639,
                67700,
                67761,
                67822,
                67883,
                67944,
                68005,
                68066,
                68127,
                68188,
                68249,
                68310,
                68371,
                68432,
                68493,
                68554,
                68615,
                68676,
                68737,
                68798,
                68859,
                68920,
                68981,
        };
        c.DefineDerivedCounter("L0CacheMissCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache miss from the L0 cache. The L0 cache contains vector data, which is data that may vary in each thread across the wavefront. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum80",
                               "a2f08766-ea1b-6eae-6eaf-faa04125d3e6");
    }
    { // Index:115
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                12055,
                12567,
                13079,
                13591,
                12056,
                12568,
                13080,
                13592,
                12057,
                12569,
                13081,
                13593,
        };
        c.DefineDerivedCounter("ScalarCacheHit",
                               "MemoryCache",
                               "The percentage of read requests made from executing shader code that hit the data in the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,0,1,2,3,4,5,6,7,8,9,10,11,sum12,/,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,sum12,ifnotzero",
                               "3346d2cf-b7e4-45b6-c0a0-350ce18159c0");
    }
    { // Index:116
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                12055,
                12567,
                13079,
                13591,
                12056,
                12568,
                13080,
                13592,
                12057,
                12569,
                13081,
                13593,
        };
        c.DefineDerivedCounter("ScalarCacheRequestCount",
                               "MemoryCache",
                               "The number of read requests made from executing shader code to the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,sum12",
                               "b5ac4201-c4cd-caa5-6ca7-4bc9a3abee01");
    }
    { // Index:117
        static constexpr std::array<GpaUInt32, 4> kHardwareCounters = {
                12055,
                12567,
                13079,
                13591,
        };
        c.DefineDerivedCounter("ScalarCacheHitCount",
                               "MemoryCache",
                               "The number of read requests made from executing shader code which result in a cache hit from the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4",
                               "beebef4f-8f6c-9363-eda9-bb385ffec363");
    }
    { // Index:118
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                12056,
                12568,
                13080,
                13592,
                12057,
                12569,
                13081,
                13593,
        };
        c.DefineDerivedCounter("ScalarCacheMissCount",
                               "MemoryCache",
                               "The number of read requests made from executing shader code which result in a cache miss from the Scalar cache. The Scalar cache contains data that does not vary in each thread across the wavefront. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,sum8",
                               "07f5afb2-75b2-4fc3-1a6a-579958f77dd3");
    }
    { // Index:119
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                12020,
                12532,
                13044,
                13556,
                12021,
                12533,
                13045,
                13557,
                12022,
                12534,
                13046,
                13558,
        };
        c.DefineDerivedCounter("InstCacheHit",
                               "MemoryCache",
                               "The percentage of read requests made that hit the data in the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),0,1,2,3,sum4,0,1,2,3,4,5,6,7,8,9,10,11,sum12,/,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,sum12,ifnotzero",
                               "adf51399-597b-f017-8ec1-21817f92e91d");
    }
    { // Index:120
        static constexpr std::array<GpaUInt32, 12> kHardwareCounters = {
                12020,
                12532,
                13044,
                13556,
                12021,
                12533,
                13045,
                13557,
                12022,
                12534,
                13046,
                13558,
        };
        c.DefineDerivedCounter("InstCacheRequestCount",
                               "MemoryCache",
                               "The number of read requests made to the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,sum12",
                               "8c92ca8c-7dcc-88a0-3037-9704aa4f64ac");
    }
    { // Index:121
        static constexpr std::array<GpaUInt32, 4> kHardwareCounters = {
                12020,
                12532,
                13044,
                13556,
        };
        c.DefineDerivedCounter("InstCacheHitCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache hit from the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,sum4",
                               "778be78f-cf83-9558-e967-868e997e6743");
    }
    { // Index:122
        static constexpr std::array<GpaUInt32, 8> kHardwareCounters = {
                12021,
                12533,
                13045,
                13557,
                12022,
                12534,
                13046,
                13558,
        };
        c.DefineDerivedCounter("InstCacheMissCount",
                               "MemoryCache",
                               "The number of read requests which result in a cache miss from the Instruction cache. The Instruction cache supplies shader code to an executing shader. Each request is 64 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,sum8",
                               "351650dc-d349-dca8-2b78-b14a1479cf26");
    }
    { // Index:123
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                94097,
                94180,
                94263,
                94346,
                94429,
                94512,
                94595,
                94678,
                94761,
                94844,
                94927,
                95010,
                95093,
                95176,
                95259,
                95342,
                95425,
                95508,
                95591,
                95674,
                95757,
                95840,
                95923,
                96006,
                96089,
                96172,
                96255,
                96338,
                96421,
                96504,
                96587,
                96670,
                94101,
                94184,
                94267,
                94350,
                94433,
                94516,
                94599,
                94682,
                94765,
                94848,
                94931,
                95014,
                95097,
                95180,
                95263,
                95346,
                95429,
                95512,
                95595,
                95678,
                95761,
                95844,
                95927,
                96010,
                96093,
                96176,
                96259,
                96342,
                96425,
                96508,
                96591,
                96674,
        };
        c.DefineDerivedCounter("L1CacheHit",
                               "MemoryCache",
                               "The percentage of read or write requests that hit the data in the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),(1),32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum32,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,/,-,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,ifnotzero",
                               "5a34915a-24b8-8baf-2bf8-5878e7894ae3");
    }
    { // Index:124
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                94097,
                94180,
                94263,
                94346,
                94429,
                94512,
                94595,
                94678,
                94761,
                94844,
                94927,
                95010,
                95093,
                95176,
                95259,
                95342,
                95425,
                95508,
                95591,
                95674,
                95757,
                95840,
                95923,
                96006,
                96089,
                96172,
                96255,
                96338,
                96421,
                96504,
                96587,
                96670,
        };
        c.DefineDerivedCounter("L1CacheRequestCount",
                               "MemoryCache",
                               "The number of read or write requests made to the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32",
                               "29c76c67-4611-205d-0b88-d08668df03c5");
    }
    { // Index:125
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                94097,
                94180,
                94263,
                94346,
                94429,
                94512,
                94595,
                94678,
                94761,
                94844,
                94927,
                95010,
                95093,
                95176,
                95259,
                95342,
                95425,
                95508,
                95591,
                95674,
                95757,
                95840,
                95923,
                96006,
                96089,
                96172,
                96255,
                96338,
                96421,
                96504,
                96587,
                96670,
                94101,
                94184,
                94267,
                94350,
                94433,
                94516,
                94599,
                94682,
                94765,
                94848,
                94931,
                95014,
                95097,
                95180,
                95263,
                95346,
                95429,
                95512,
                95595,
                95678,
                95761,
                95844,
                95927,
                96010,
                96093,
                96176,
                96259,
                96342,
                96425,
                96508,
                96591,
                96674,
        };
        c.DefineDerivedCounter("L1CacheHitCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache hit from the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum32,-",
                               "1ae150c3-f2d0-82c6-a51b-a77fd8d5fc33");
    }
    { // Index:126
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                94101,
                94184,
                94267,
                94350,
                94433,
                94516,
                94599,
                94682,
                94765,
                94848,
                94931,
                95014,
                95097,
                95180,
                95263,
                95346,
                95429,
                95512,
                95595,
                95678,
                95761,
                95844,
                95927,
                96010,
                96093,
                96176,
                96259,
                96342,
                96425,
                96508,
                96591,
                96674,
        };
        c.DefineDerivedCounter("L1CacheMissCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache miss from the L1 cache. The L1 cache is shared across all WGPs in a single shader engine. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum32",
                               "71bfec6d-257b-849d-e212-cdf5c1b1de65");
    }
    { // Index:127
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                98322,
                98576,
                98830,
                99084,
                99338,
                99592,
                99846,
                100100,
                100354,
                100608,
                100862,
                101116,
                101370,
                101624,
                101878,
                102132,
                98362,
                98616,
                98870,
                99124,
                99378,
                99632,
                99886,
                100140,
                100394,
                100648,
                100902,
                101156,
                101410,
                101664,
                101918,
                102172,
        };
        c.DefineDerivedCounter("L2CacheHit",
                               "MemoryCache",
                               "The percentage of read or write requests that hit the data in the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size. Value range: 0% (no hit) to 100% (optimal).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "(0),(1),16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,/,-,(100),*,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,ifnotzero",
                               "47694e4d-6ce6-f387-080d-b1f3d00b73ac");
    }
    { // Index:128
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                98362,
                98616,
                98870,
                99124,
                99378,
                99632,
                99886,
                100140,
                100394,
                100648,
                100902,
                101156,
                101410,
                101664,
                101918,
                102172,
                98322,
                98576,
                98830,
                99084,
                99338,
                99592,
                99846,
                100100,
                100354,
                100608,
                100862,
                101116,
                101370,
                101624,
                101878,
                102132,
        };
        c.DefineDerivedCounter("L2CacheMiss",
                               "MemoryCache",
                               "The percentage of read or write requests that miss the data in the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size. Value range: 0% (optimal) to 100% (all miss).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,/,(100),*",
                               "8aee5458-a58e-11b6-5131-7f19ed070117");
    }
    { // Index:129
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                98322,
                98576,
                98830,
                99084,
                99338,
                99592,
                99846,
                100100,
                100354,
                100608,
                100862,
                101116,
                101370,
                101624,
                101878,
                102132,
        };
        c.DefineDerivedCounter("L2CacheRequestCount",
                               "MemoryCache",
                               "The number of read or write requests made to the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "21e9219c-e725-0d96-06b1-b21698b736b2");
    }
    { // Index:130
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                98322,
                98576,
                98830,
                99084,
                99338,
                99592,
                99846,
                100100,
                100354,
                100608,
                100862,
                101116,
                101370,
                101624,
                101878,
                102132,
                98362,
                98616,
                98870,
                99124,
                99378,
                99632,
                99886,
                100140,
                100394,
                100648,
                100902,
                101156,
                101410,
                101664,
                101918,
                102172,
        };
        c.DefineDerivedCounter("L2CacheHitCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache hit from the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,-",
                               "29ddcb92-d3dd-951b-1b23-efe52e4eeee4");
    }
    { // Index:131
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                98362,
                98616,
                98870,
                99124,
                99378,
                99632,
                99886,
                100140,
                100394,
                100648,
                100902,
                101156,
                101410,
                101664,
                101918,
                102172,
        };
        c.DefineDerivedCounter("L2CacheMissCount",
                               "MemoryCache",
                               "The number of read or write requests which result in a cache miss from the L2 cache. The L2 cache is shared by many blocks across the GPU, including the Command Processor, Geometry Engine, all WGPs, all Render Backends, and others. Each request is 128 bytes in size.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16",
                               "376eec7b-ab25-9012-06b5-63291a17fd47");
    }
    { // Index:132
        static constexpr std::array<GpaUInt32, 80> kHardwareCounters = {
                64187,
                64248,
                64309,
                64370,
                64431,
                64492,
                64553,
                64614,
                64675,
                64736,
                64797,
                64858,
                64919,
                64980,
                65041,
                65102,
                65163,
                65224,
                65285,
                65346,
                65407,
                65468,
                65529,
                65590,
                65651,
                65712,
                65773,
                65834,
                65895,
                65956,
                66017,
                66078,
                66139,
                66200,
                66261,
                66322,
                66383,
                66444,
                66505,
                66566,
                66627,
                66688,
                66749,
                66810,
                66871,
                66932,
                66993,
                67054,
                67115,
                67176,
                67237,
                67298,
                67359,
                67420,
                67481,
                67542,
                67603,
                67664,
                67725,
                67786,
                67847,
                67908,
                67969,
                68030,
                68091,
                68152,
                68213,
                68274,
                68335,
                68396,
                68457,
                68518,
                68579,
                68640,
                68701,
                68762,
                68823,
                68884,
                68945,
                69006,
        };
        c.DefineDerivedCounter("L0TagConflictReadStalledCycles",
                               "MemoryCache",
                               "The number of cycles read operations from the L0 cache are stalled due to tag conflicts.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,max80",
                               "e2412737-e2bf-c791-5f2f-64abd4ba47cf");
    }
    { // Index:133
        static constexpr std::array<GpaUInt32, 80> kHardwareCounters = {
                64188,
                64249,
                64310,
                64371,
                64432,
                64493,
                64554,
                64615,
                64676,
                64737,
                64798,
                64859,
                64920,
                64981,
                65042,
                65103,
                65164,
                65225,
                65286,
                65347,
                65408,
                65469,
                65530,
                65591,
                65652,
                65713,
                65774,
                65835,
                65896,
                65957,
                66018,
                66079,
                66140,
                66201,
                66262,
                66323,
                66384,
                66445,
                66506,
                66567,
                66628,
                66689,
                66750,
                66811,
                66872,
                66933,
                66994,
                67055,
                67116,
                67177,
                67238,
                67299,
                67360,
                67421,
                67482,
                67543,
                67604,
                67665,
                67726,
                67787,
                67848,
                67909,
                67970,
                68031,
                68092,
                68153,
                68214,
                68275,
                68336,
                68397,
                68458,
                68519,
                68580,
                68641,
                68702,
                68763,
                68824,
                68885,
                68946,
                69007,
        };
        c.DefineDerivedCounter("L0TagConflictWriteStalledCycles",
                               "MemoryCache",
                               "The number of cycles write operations to the L0 cache are stalled due to tag conflicts.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,max80",
                               "0c2571f3-f084-f351-99ba-0d9e23b47e8e");
    }
    { // Index:134
        static constexpr std::array<GpaUInt32, 80> kHardwareCounters = {
                64189,
                64250,
                64311,
                64372,
                64433,
                64494,
                64555,
                64616,
                64677,
                64738,
                64799,
                64860,
                64921,
                64982,
                65043,
                65104,
                65165,
                65226,
                65287,
                65348,
                65409,
                65470,
                65531,
                65592,
                65653,
                65714,
                65775,
                65836,
                65897,
                65958,
                66019,
                66080,
                66141,
                66202,
                66263,
                66324,
                66385,
                66446,
                66507,
                66568,
                66629,
                66690,
                66751,
                66812,
                66873,
                66934,
                66995,
                67056,
                67117,
                67178,
                67239,
                67300,
                67361,
                67422,
                67483,
                67544,
                67605,
                67666,
                67727,
                67788,
                67849,
                67910,
                67971,
                68032,
                68093,
                68154,
                68215,
                68276,
                68337,
                68398,
                68459,
                68520,
                68581,
                68642,
                68703,
                68764,
                68825,
                68886,
                68947,
                69008,
        };
        c.DefineDerivedCounter("L0TagConflictAtomicStalledCycles",
                               "MemoryCache",
                               "The number of cycles atomic operations on the L0 cache are stalled due to tag conflicts.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,max80",
                               "f13f8563-4151-1533-f42f-0f9c08a20210");
    }
    { // Index:135
        static constexpr std::array<GpaUInt32, 64> kHardwareCounters = {
                98418,
                98672,
                98926,
                99180,
                99434,
                99688,
                99942,
                100196,
                100450,
                100704,
                100958,
                101212,
                101466,
                101720,
                101974,
                102228,
                98419,
                98673,
                98927,
                99181,
                99435,
                99689,
                99943,
                100197,
                100451,
                100705,
                100959,
                101213,
                101467,
                101721,
                101975,
                102229,
                98420,
                98674,
                98928,
                99182,
                99436,
                99690,
                99944,
                100198,
                100452,
                100706,
                100960,
                101214,
                101468,
                101722,
                101976,
                102230,
                98421,
                98675,
                98929,
                99183,
                99437,
                99691,
                99945,
                100199,
                100453,
                100707,
                100961,
                101215,
                101469,
                101723,
                101977,
                102231,
        };
        c.DefineDerivedCounter("FetchSize",
                               "GlobalMemory",
                               "The total bytes fetched from the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(32),*,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,(64),*,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,sum16,(96),*,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,sum16,(128),*,sum4",
                               "664bb3ef-6eca-86b1-1e2d-30cb897b5fa9");
    }
    { // Index:136
        static constexpr std::array<GpaUInt32, 32> kHardwareCounters = {
                98402,
                98656,
                98910,
                99164,
                99418,
                99672,
                99926,
                100180,
                100434,
                100688,
                100942,
                101196,
                101450,
                101704,
                101958,
                102212,
                98404,
                98658,
                98912,
                99166,
                99420,
                99674,
                99928,
                100182,
                100436,
                100690,
                100944,
                101198,
                101452,
                101706,
                101960,
                102214,
        };
        c.DefineDerivedCounter("WriteSize",
                               "GlobalMemory",
                               "The total bytes written to the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,-,(32),*,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,sum16,(64),*,+",
                               "f96f2c16-b1b4-4ec4-229c-fc82e6f80a82");
    }
    { // Index:137
        static constexpr std::array<GpaUInt32, 81> kHardwareCounters = {
                29919,
                30155,
                30391,
                30627,
                30863,
                31099,
                31335,
                31571,
                31807,
                32043,
                32279,
                32515,
                32751,
                32987,
                33223,
                33459,
                33695,
                33931,
                34167,
                34403,
                34639,
                34875,
                35111,
                35347,
                35583,
                35819,
                36055,
                36291,
                36527,
                36763,
                36999,
                37235,
                37471,
                37707,
                37943,
                38179,
                38415,
                38651,
                38887,
                39123,
                39359,
                39595,
                39831,
                40067,
                40303,
                40539,
                40775,
                41011,
                41247,
                41483,
                41719,
                41955,
                42191,
                42427,
                42663,
                42899,
                43135,
                43371,
                43607,
                43843,
                44079,
                44315,
                44551,
                44787,
                45023,
                45259,
                45495,
                45731,
                45967,
                46203,
                46439,
                46675,
                46911,
                47147,
                47383,
                47619,
                47855,
                48091,
                48327,
                48563,
                24,
        };
        c.DefineDerivedCounter("MemUnitBusy",
                               "GlobalMemory",
                               "The percentage of GPUTime the memory unit is active. The result includes the stall time (MemUnitStalled). This is measured with all extra fetches and writes and any cache or memory effects taken into account. Value range: 0% to 100% (fetch-bound).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,max80,80,/,(100),*",
                               "a1efa380-4a72-e066-e06a-2ab71a488521");
    }
    { // Index:138
        static constexpr std::array<GpaUInt32, 80> kHardwareCounters = {
                29919,
                30155,
                30391,
                30627,
                30863,
                31099,
                31335,
                31571,
                31807,
                32043,
                32279,
                32515,
                32751,
                32987,
                33223,
                33459,
                33695,
                33931,
                34167,
                34403,
                34639,
                34875,
                35111,
                35347,
                35583,
                35819,
                36055,
                36291,
                36527,
                36763,
                36999,
                37235,
                37471,
                37707,
                37943,
                38179,
                38415,
                38651,
                38887,
                39123,
                39359,
                39595,
                39831,
                40067,
                40303,
                40539,
                40775,
                41011,
                41247,
                41483,
                41719,
                41955,
                42191,
                42427,
                42663,
                42899,
                43135,
                43371,
                43607,
                43843,
                44079,
                44315,
                44551,
                44787,
                45023,
                45259,
                45495,
                45731,
                45967,
                46203,
                46439,
                46675,
                46911,
                47147,
                47383,
                47619,
                47855,
                48091,
                48327,
                48563,
        };
        c.DefineDerivedCounter("MemUnitBusyCycles",
                               "GlobalMemory",
                               "Number of GPU cycles the memory unit is active. The result includes the stall time (MemUnitStalledCycles). This is measured with all extra fetches and writes and any cache or memory effects taken into account.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,max80",
                               "168f077c-4797-b2f5-717f-105c725266c8");
    }
    { // Index:139
        static constexpr std::array<GpaUInt32, 81> kHardwareCounters = {
                64180,
                64241,
                64302,
                64363,
                64424,
                64485,
                64546,
                64607,
                64668,
                64729,
                64790,
                64851,
                64912,
                64973,
                65034,
                65095,
                65156,
                65217,
                65278,
                65339,
                65400,
                65461,
                65522,
                65583,
                65644,
                65705,
                65766,
                65827,
                65888,
                65949,
                66010,
                66071,
                66132,
                66193,
                66254,
                66315,
                66376,
                66437,
                66498,
                66559,
                66620,
                66681,
                66742,
                66803,
                66864,
                66925,
                66986,
                67047,
                67108,
                67169,
                67230,
                67291,
                67352,
                67413,
                67474,
                67535,
                67596,
                67657,
                67718,
                67779,
                67840,
                67901,
                67962,
                68023,
                68084,
                68145,
                68206,
                68267,
                68328,
                68389,
                68450,
                68511,
                68572,
                68633,
                68694,
                68755,
                68816,
                68877,
                68938,
                68999,
                24,
        };
        c.DefineDerivedCounter("MemUnitStalled",
                               "GlobalMemory",
                               "The percentage of GPUTime the memory unit is stalled. Try reducing the number or size of fetches and writes if possible. Value range: 0% (optimal) to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,max80,80,/,(100),*",
                               "465ba54f-d250-1453-790a-731b10d230b1");
    }
    { // Index:140
        static constexpr std::array<GpaUInt32, 80> kHardwareCounters = {
                64180,
                64241,
                64302,
                64363,
                64424,
                64485,
                64546,
                64607,
                64668,
                64729,
                64790,
                64851,
                64912,
                64973,
                65034,
                65095,
                65156,
                65217,
                65278,
                65339,
                65400,
                65461,
                65522,
                65583,
                65644,
                65705,
                65766,
                65827,
                65888,
                65949,
                66010,
                66071,
                66132,
                66193,
                66254,
                66315,
                66376,
                66437,
                66498,
                66559,
                66620,
                66681,
                66742,
                66803,
                66864,
                66925,
                66986,
                67047,
                67108,
                67169,
                67230,
                67291,
                67352,
                67413,
                67474,
                67535,
                67596,
                67657,
                67718,
                67779,
                67840,
                67901,
                67962,
                68023,
                68084,
                68145,
                68206,
                68267,
                68328,
                68389,
                68450,
                68511,
                68572,
                68633,
                68694,
                68755,
                68816,
                68877,
                68938,
                68999,
        };
        c.DefineDerivedCounter("MemUnitStalledCycles",
                               "GlobalMemory",
                               "Number of GPU cycles the memory unit is stalled.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,max80",
                               "2745659a-0e40-bace-3b9b-86a54f8e4623");
    }
    { // Index:141
        static constexpr std::array<GpaUInt32, 17> kHardwareCounters = {
                98407,
                98661,
                98915,
                99169,
                99423,
                99677,
                99931,
                100185,
                100439,
                100693,
                100947,
                101201,
                101455,
                101709,
                101963,
                102217,
                24,
        };
        c.DefineDerivedCounter("WriteUnitStalled",
                               "GlobalMemory",
                               "The percentage of GPUTime the Write unit is stalled. Value range: 0% to 100% (bad).",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypePercentage,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16,16,/,(100),*",
                               "594ad3ce-d1ec-10fc-7d59-25738e397d72");
    }
    { // Index:142
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                98407,
                98661,
                98915,
                99169,
                99423,
                99677,
                99931,
                100185,
                100439,
                100693,
                100947,
                101201,
                101455,
                101709,
                101963,
                102217,
        };
        c.DefineDerivedCounter("WriteUnitStalledCycles",
                               "GlobalMemory",
                               "Number of GPU cycles the Write unit is stalled.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeCycles,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,max16",
                               "ede3305e-abd4-d6bf-6b00-ffc57a29fce3");
    }
    { // Index:143
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                83346,
                83436,
                83526,
                83616,
                83706,
                83796,
                83886,
                83976,
                84066,
                84156,
                84246,
                84336,
                84426,
                84516,
                84606,
                84696,
        };
        c.DefineDerivedCounter("LocalVidMemBytes",
                               "GlobalMemory",
                               "Number of bytes read from or written to the Infinity Cache (if available) or local video memory",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(32),*",
                               "48207266-a1ef-290a-3c77-effd1260fa2c");
    }
    { // Index:144
        static constexpr std::array<GpaUInt32, 16> kHardwareCounters = {
                83348,
                83438,
                83528,
                83618,
                83708,
                83798,
                83888,
                83978,
                84068,
                84158,
                84248,
                84338,
                84428,
                84518,
                84608,
                84698,
        };
        c.DefineDerivedCounter("PcieBytes",
                               "GlobalMemory",
                               "Number of bytes sent and received over the PCIe bus",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeBytes,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,sum16,(32),*",
                               "4bbe92de-f79e-ed39-bfde-9e08390cdb21");
    }
    { // Index:145
        static constexpr std::array<GpaUInt32, 80> kHardwareCounters = {
                48902,
                49094,
                49286,
                49478,
                49670,
                49862,
                50054,
                50246,
                50438,
                50630,
                50822,
                51014,
                51206,
                51398,
                51590,
                51782,
                51974,
                52166,
                52358,
                52550,
                52742,
                52934,
                53126,
                53318,
                53510,
                53702,
                53894,
                54086,
                54278,
                54470,
                54662,
                54854,
                55046,
                55238,
                55430,
                55622,
                55814,
                56006,
                56198,
                56390,
                56582,
                56774,
                56966,
                57158,
                57350,
                57542,
                57734,
                57926,
                58118,
                58310,
                58502,
                58694,
                58886,
                59078,
                59270,
                59462,
                59654,
                59846,
                60038,
                60230,
                60422,
                60614,
                60806,
                60998,
                61190,
                61382,
                61574,
                61766,
                61958,
                62150,
                62342,
                62534,
                62726,
                62918,
                63110,
                63302,
                63494,
                63686,
                63878,
                64070,
        };
        c.DefineDerivedCounter("RayTriTests",
                               "RayTracing",
                               "The number of ray triangle intersection tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum80",
                               "20c646f5-fa99-51c2-b583-0a3d77d675a8");
    }
    { // Index:146
        static constexpr std::array<GpaUInt32, 160> kHardwareCounters = {
                48900,
                49092,
                49284,
                49476,
                49668,
                49860,
                50052,
                50244,
                50436,
                50628,
                50820,
                51012,
                51204,
                51396,
                51588,
                51780,
                51972,
                52164,
                52356,
                52548,
                52740,
                52932,
                53124,
                53316,
                53508,
                53700,
                53892,
                54084,
                54276,
                54468,
                54660,
                54852,
                55044,
                55236,
                55428,
                55620,
                55812,
                56004,
                56196,
                56388,
                56580,
                56772,
                56964,
                57156,
                57348,
                57540,
                57732,
                57924,
                58116,
                58308,
                58500,
                58692,
                58884,
                59076,
                59268,
                59460,
                59652,
                59844,
                60036,
                60228,
                60420,
                60612,
                60804,
                60996,
                61188,
                61380,
                61572,
                61764,
                61956,
                62148,
                62340,
                62532,
                62724,
                62916,
                63108,
                63300,
                63492,
                63684,
                63876,
                64068,
                48901,
                49093,
                49285,
                49477,
                49669,
                49861,
                50053,
                50245,
                50437,
                50629,
                50821,
                51013,
                51205,
                51397,
                51589,
                51781,
                51973,
                52165,
                52357,
                52549,
                52741,
                52933,
                53125,
                53317,
                53509,
                53701,
                53893,
                54085,
                54277,
                54469,
                54661,
                54853,
                55045,
                55237,
                55429,
                55621,
                55813,
                56005,
                56197,
                56389,
                56581,
                56773,
                56965,
                57157,
                57349,
                57541,
                57733,
                57925,
                58117,
                58309,
                58501,
                58693,
                58885,
                59077,
                59269,
                59461,
                59653,
                59845,
                60037,
                60229,
                60421,
                60613,
                60805,
                60997,
                61189,
                61381,
                61573,
                61765,
                61957,
                62149,
                62341,
                62533,
                62725,
                62917,
                63109,
                63301,
                63493,
                63685,
                63877,
                64069,
        };
        c.DefineDerivedCounter("RayBoxTests",
                               "RayTracing",
                               "The number of ray box intersection tests.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum80,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,sum80,sum2",
                               "7769ceee-824d-b84a-8779-bb3f8e449582");
    }
    { // Index:147
        static constexpr std::array<GpaUInt32, 240> kHardwareCounters = {
                48902,
                49094,
                49286,
                49478,
                49670,
                49862,
                50054,
                50246,
                50438,
                50630,
                50822,
                51014,
                51206,
                51398,
                51590,
                51782,
                51974,
                52166,
                52358,
                52550,
                52742,
                52934,
                53126,
                53318,
                53510,
                53702,
                53894,
                54086,
                54278,
                54470,
                54662,
                54854,
                55046,
                55238,
                55430,
                55622,
                55814,
                56006,
                56198,
                56390,
                56582,
                56774,
                56966,
                57158,
                57350,
                57542,
                57734,
                57926,
                58118,
                58310,
                58502,
                58694,
                58886,
                59078,
                59270,
                59462,
                59654,
                59846,
                60038,
                60230,
                60422,
                60614,
                60806,
                60998,
                61190,
                61382,
                61574,
                61766,
                61958,
                62150,
                62342,
                62534,
                62726,
                62918,
                63110,
                63302,
                63494,
                63686,
                63878,
                64070,
                48900,
                49092,
                49284,
                49476,
                49668,
                49860,
                50052,
                50244,
                50436,
                50628,
                50820,
                51012,
                51204,
                51396,
                51588,
                51780,
                51972,
                52164,
                52356,
                52548,
                52740,
                52932,
                53124,
                53316,
                53508,
                53700,
                53892,
                54084,
                54276,
                54468,
                54660,
                54852,
                55044,
                55236,
                55428,
                55620,
                55812,
                56004,
                56196,
                56388,
                56580,
                56772,
                56964,
                57156,
                57348,
                57540,
                57732,
                57924,
                58116,
                58308,
                58500,
                58692,
                58884,
                59076,
                59268,
                59460,
                59652,
                59844,
                60036,
                60228,
                60420,
                60612,
                60804,
                60996,
                61188,
                61380,
                61572,
                61764,
                61956,
                62148,
                62340,
                62532,
                62724,
                62916,
                63108,
                63300,
                63492,
                63684,
                63876,
                64068,
                48901,
                49093,
                49285,
                49477,
                49669,
                49861,
                50053,
                50245,
                50437,
                50629,
                50821,
                51013,
                51205,
                51397,
                51589,
                51781,
                51973,
                52165,
                52357,
                52549,
                52741,
                52933,
                53125,
                53317,
                53509,
                53701,
                53893,
                54085,
                54277,
                54469,
                54661,
                54853,
                55045,
                55237,
                55429,
                55621,
                55813,
                56005,
                56197,
                56389,
                56581,
                56773,
                56965,
                57157,
                57349,
                57541,
                57733,
                57925,
                58117,
                58309,
                58501,
                58693,
                58885,
                59077,
                59269,
                59461,
                59653,
                59845,
                60037,
                60229,
                60421,
                60613,
                60805,
                60997,
                61189,
                61381,
                61573,
                61765,
                61957,
                62149,
                62341,
                62533,
                62725,
                62917,
                63109,
                63301,
                63493,
                63685,
                63877,
                64069,
        };
        c.DefineDerivedCounter("TotalRayTests",
                               "RayTracing",
                               "Total number of ray intersection tests, includes both box and triangle intersections.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum80,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,sum80,sum2,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,sum80,sum2",
                               "ce6e4c7f-cf9d-6f8f-4456-70f670354bbe");
    }
    { // Index:148
        static constexpr std::array<GpaUInt32, 80> kHardwareCounters = {
                48866,
                49058,
                49250,
                49442,
                49634,
                49826,
                50018,
                50210,
                50402,
                50594,
                50786,
                50978,
                51170,
                51362,
                51554,
                51746,
                51938,
                52130,
                52322,
                52514,
                52706,
                52898,
                53090,
                53282,
                53474,
                53666,
                53858,
                54050,
                54242,
                54434,
                54626,
                54818,
                55010,
                55202,
                55394,
                55586,
                55778,
                55970,
                56162,
                56354,
                56546,
                56738,
                56930,
                57122,
                57314,
                57506,
                57698,
                57890,
                58082,
                58274,
                58466,
                58658,
                58850,
                59042,
                59234,
                59426,
                59618,
                59810,
                60002,
                60194,
                60386,
                60578,
                60770,
                60962,
                61154,
                61346,
                61538,
                61730,
                61922,
                62114,
                62306,
                62498,
                62690,
                62882,
                63074,
                63266,
                63458,
                63650,
                63842,
                64034,
        };
        c.DefineDerivedCounter("RayTestsPerWave",
                               "RayTracing",
                               "The number of ray intersection tests per wave.",
                               kGpaDataTypeFloat64,
                               kGpaUsageTypeItems,
                               true,
                               false,
                               kHardwareCounters,
                               "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,sum80",
                               "45b0cd7f-3b43-6344-37d7-054062e50f60");
    }
}

// clang-format on

